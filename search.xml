<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWS CLI</title>
    <url>/AWS/AWS-CLI/</url>
    <content><![CDATA[<p>Explain how to use the AWS Command Line Interface (CLI) to interact with AWS services.</p>
<span id="more"></span>

<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>see <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html</a></p>
<h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><p>Depending on the file, profile section names use the following format:</p>
<p>Config file: [default] [profile user1]<br>Credentials file: [default] [user1]</p>
<p>Do not use the word profile when creating an entry in the credentials file.</p>
<p>The following examples show a credentials and config file with two profiles, region, and output specified. The first [default] is used when you run a AWS CLI command with no profile specified. The second is used when you run a AWS CLI command with the <code>--profile</code> user1 parameter.</p>
<p>~&#x2F;.aws&#x2F;credentials</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[default]</span><br><span class="line">aws_access_key_id=AKIAIOSFODNN7EXAMPLE</span><br><span class="line">aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</span><br><span class="line"></span><br><span class="line">[user1]</span><br><span class="line">aws_access_key_id=AKIAI44QH8DHBEXAMPLE</span><br><span class="line">aws_secret_access_key=je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY</span><br></pre></td></tr></table></figure>


<p>~&#x2F;.aws&#x2F;config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[default]</span><br><span class="line">region=us-west-2</span><br><span class="line">output=json</span><br><span class="line"></span><br><span class="line">[profile user1]</span><br><span class="line">region=us-east-1</span><br><span class="line">output=text</span><br></pre></td></tr></table></figure>

<h1 id="Using-the-AWS-CLI"><a href="#Using-the-AWS-CLI" class="headerlink" title="Using the AWS CLI"></a>Using the AWS CLI</h1><p>Command Structure</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws &lt;command&gt; &lt;subcommand&gt; [options and parameters]</span><br></pre></td></tr></table></figure>

<p>Basic Usage</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws s3 ls --profile dev</span><br></pre></td></tr></table></figure>

<p>Auto Prompt mode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws --cli-auto-prompt</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html">AWS CLI User Guide</a></li>
<li><a href="https://docs.aws.amazon.com/cli/latest/index.html">AWS CLI Command Reference</a></li>
<li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3/index.html">AWS CLI Command Reference - s3</a></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Policy Evaluation Logic</title>
    <url>/AWS/AWS-Policy-Evaluation-Logic/</url>
    <content><![CDATA[<p>Explain how AWS evaluates policies when a principal makes a request to access a resource.</p>
<span id="more"></span>
<h1 id="Request-Context"><a href="#Request-Context" class="headerlink" title="Request Context"></a>Request Context</h1><p>AWS processes the request to gather the following information into a <em>request context</em>:</p>
<ul>
<li><strong>Principal</strong> – The user, role, federated user, or application that sent the request. Information about the principal includes the policies that are associated with that principal.</li>
<li><strong>Resources</strong> – The AWS resource object upon which the actions or operations are performed.</li>
<li><strong>Actions</strong> (or operations) – The actions or operations that the principal wants to perform.</li>
<li><strong>Environment data</strong> – Information about the IP address, user agent, SSL enabled status, or the time of day.</li>
<li><strong>Resource data</strong> – Data related to the resource that is being requested. This can include information such as a DynamoDB table name or a tag on an Amazon EC2 instance.</li>
</ul>
<p>AWS processes the information gathered in the request to determine which policies apply to the request. Then evaluates the policies to determine whether the request is allowed or denied.</p>
<h1 id="Policy-Types"><a href="#Policy-Types" class="headerlink" title="Policy Types"></a>Policy Types</h1><p>The following policy types, listed in order of frequency, are available for use within a single AWS account.<br><strong>Identity-based policies</strong> – Identity-based policies are attached to an IAM identity (user, group of users, or role) and grant permissions to IAM entities (users and roles).<br><strong>Resource-based policies</strong> – Resource-based policies grant permissions to the principal (account, user, role, and session principals such as role sessions and IAM federated users ) specified as the principal.<br><strong>IAM permissions boundaries</strong> – Permissions boundaries are an advanced feature that sets the maximum permissions that an identity-based policy can grant to an IAM entity (user or role).<br><strong>AWS Organizations service control policies (SCPs)</strong> – Organizations SCPs specify the maximum permissions for an organization or organizational unit (OU).<br><strong>Session policies</strong> – Session policies are advanced policies that you pass as parameters when you programmatically create a temporary session for a role or federated user. </p>
<h1 id="Policy-Evaluation-Logic-Within-the-Same-Account"><a href="#Policy-Evaluation-Logic-Within-the-Same-Account" class="headerlink" title="Policy Evaluation Logic Within the Same Account"></a>Policy Evaluation Logic Within the Same Account</h1><p>When a principal sends a request to AWS to access a resource in the same account as the principal’s entity</p>
<p>A summary of the AWS evaluation logic for policies within a single account.</p>
<ul>
<li>By default, all requests are <em>implicitly denied</em> with the exception of the AWS account root user, which has full access.</li>
<li>An explicit allow in an identity-based or resource-based policy overrides this default.</li>
<li>If a permissions boundary, Organizations SCP, or session policy is present, it might override the allow with an implicit deny.</li>
<li>An explicit deny in any policy overrides any allows.</li>
</ul>
<p>flowchart that shows the detailed policy evaluation logic for requests within a single account.<br><img src="policy-evalution-flowchart.png" /></p>
<p><strong>Resource-based policies</strong> – Within the same account, resource-based policies impact policy evaluation differently depending on the type of principal accessing the resource, and the principal that is allowed in the resource-based policy. Depending on the type of principal, an Allow in a resource-based policy can result in a final decision of Allow, even if an implicit deny in an identity-based policy, permissions boundary, or session policy is present.<br>For most resources, you only need an explicit allow for the principal in either an identity-based policy or a resource-based policy to grant access. IAM role trust policies and KMS key policies are exceptions to this logic, because they must explicitly allow access for principals. </p>
<p>see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow">Policy evaluation logic</a> for more details.</p>
<h1 id="Cross-account-policy-evaluation-logic"><a href="#Cross-account-policy-evaluation-logic" class="headerlink" title="Cross-account policy evaluation logic"></a>Cross-account policy evaluation logic</h1><p>the account where the principal exists is called the <strong>trusted account</strong>. The account where the resource exists is the <strong>trusting account</strong>.</p>
<p>To allow cross-account access, you attach a resource-based policy to the resource that you want to share. You must also attach an identity-based policy to the identity that acts as the principal in the request. </p>
<img src="cross-account.png" />

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">AWS Documentation - Policy evaluation logic</a></li>
<li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic-cross-account.html">AWS Documentation - Cross-account policy evaluation logic </a></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>LocalStack</title>
    <url>/AWS/LocalStack/</url>
    <content><![CDATA[<p>LocalStack is a cloud service emulator that runs in a single container on your laptop or in your CI environment.</p>
<span id="more"></span>

<h1 id="localstack-cli-Brew-Installation"><a href="#localstack-cli-Brew-Installation" class="headerlink" title="localstack-cli Brew Installation"></a>localstack-cli Brew Installation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install localstack/tap/localstack-cli</span><br></pre></td></tr></table></figure>

<h1 id="Running-LocalStack-using-CLI"><a href="#Running-LocalStack-using-CLI" class="headerlink" title="Running LocalStack using CLI"></a>Running LocalStack using CLI</h1><p>You can run LocalStack using LocalStack CLI or Docker Compose</p>
<ul>
<li>LocalStack CLI</li>
<li>Docker Compose</li>
</ul>
<p>start LocalStack using CLI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localstack start -d</span><br></pre></td></tr></table></figure>

<p>Query the status of services.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localstack status services</span><br></pre></td></tr></table></figure>

<p>stop LocalStack</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localstack stop</span><br></pre></td></tr></table></figure>

<h1 id="Running-LocalStack-using-Docker-Compose"><a href="#Running-LocalStack-using-Docker-Compose" class="headerlink" title="Running LocalStack using Docker Compose"></a>Running LocalStack using Docker Compose</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;$&#123;LOCALSTACK_DOCKER_NAME:-localstack-main&#125;&quot;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:4566:4566&quot;</span>            <span class="comment"># LocalStack Gateway</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:4510-4559:4510-4559&quot;</span>  <span class="comment"># external services port range</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># LocalStack configuration: https://docs.localstack.cloud/references/configuration/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEBUG=$&#123;DEBUG:-0&#125;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;LOCALSTACK_VOLUME_DIR:-./volume&#125;:/var/lib/localstack&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="How-to-connect-with-AWS-CLI-and-SDKs"><a href="#How-to-connect-with-AWS-CLI-and-SDKs" class="headerlink" title="How to connect with AWS CLI and SDKs"></a>How to connect with AWS CLI and SDKs</h1><p>Manual configuration: Manually configure the SDK to connect to LocalStack services by setting the endpoint URL to <a href="http://localhost:4566/">http://localhost:4566</a> or <a href="http://localhost.localstack.cloud:4566/">http://localhost.localstack.cloud:4566</a>. This can also be specified using a profile or an environment variable.</p>
<p>Configuring a custom profile<br>~&#x2F;.aws&#x2F;config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[profile localstack]</span><br><span class="line">region=us-east-1</span><br><span class="line">output=json</span><br><span class="line">endpoint_url = http://localhost:4566</span><br></pre></td></tr></table></figure>

<p>~&#x2F;.aws&#x2F;credentials</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[localstack]</span><br><span class="line">aws_access_key_id = test</span><br><span class="line">aws_secret_access_key = test</span><br></pre></td></tr></table></figure>


<p>create a queue in LocalStack using AWS CLI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws sqs create-queue --queue-name MyQueue --profile localstack</span><br></pre></td></tr></table></figure>

<p>Get queue url</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws sqs get-queue-url --queue-name MyQueue --profile localstack</span><br></pre></td></tr></table></figure>

<p>Delete queue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws sqs delete-queue --queue-url http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/MyQueue --profile localstack</span><br></pre></td></tr></table></figure>

<p>List queues</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws sqs list-queues --profile localstack</span><br></pre></td></tr></table></figure>

<p>List S3 bucket</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws s3 ls --profile localstack</span><br></pre></td></tr></table></figure>

<h1 id="Connect-to-LocalStack-using-Java-SDK"><a href="#Connect-to-LocalStack-using-Java-SDK" class="headerlink" title="Connect to LocalStack using Java SDK"></a>Connect to LocalStack using Java SDK</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Credentials that can be replaced with real AWS values. (To be handled properly and not hardcoded.)</span></span><br><span class="line">    <span class="comment">// These can be skipped altogether for LocalStack, but we generally want to avoid discrepancies with production code.</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_KEY</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Desired region.</span></span><br><span class="line"><span class="type">Region</span> <span class="variable">region</span> <span class="operator">=</span> Region.US_EAST_1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// S3 Client with configured credentials, endpoint directing to LocalStack and desired region.</span></span><br><span class="line"><span class="type">S3Client</span> <span class="variable">s3Client</span> <span class="operator">=</span> S3Client.builder()</span><br><span class="line">    .endpointOverride(URI.create(<span class="string">&quot;http://s3.localhost.localstack.cloud:4566&quot;</span>))</span><br><span class="line">    .credentialsProvider(StaticCredentialsProvider.create(</span><br><span class="line">    AwsBasicCredentials.create(ACCESS_KEY, SECRET_KEY)))</span><br><span class="line">    .region(region)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://github.com/localstack/localstack">LocalStack Github Repository</a></li>
<li><a href="https://docs.aws.amazon.com/cli/v1/userguide/cli_sqs_code_examples.html">aws-cli SQS commands</a></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Execution Order of SQL Statement</title>
    <url>/Database/Execution-Order-SQL-Statement/</url>
    <content><![CDATA[<p>Understand SQL statements is very important for database developers. In this article, we will discuss the execution order of SQL statements.</p>
<span id="more"></span>

<h1 id="Execution-Order-of-SQL-Statement"><a href="#Execution-Order-of-SQL-Statement" class="headerlink" title="Execution Order of SQL Statement"></a>Execution Order of SQL Statement</h1><p>The execution order of an SQL statement is not the same as the order in which the clauses are written. Here’s the typical execution order:</p>
<ol>
<li>FROM clause including JOINs</li>
<li>WHERE clause</li>
<li>GROUP BY clause</li>
<li>HAVING clause</li>
<li>SELECT clause</li>
<li>DISTINCT clause</li>
<li>ORDER BY clause</li>
<li>LIMIT &#x2F; OFFSET clauses</li>
</ol>
<p>This order is important to understand because it can affect the results of your queries, especially when using aliases or when using aggregate functions. For example, you can’t use an alias defined in your SELECT clause within your WHERE clause because the WHERE clause is executed before the SELECT clause.</p>
<h1 id="FROM-clause-including-JOINs"><a href="#FROM-clause-including-JOINs" class="headerlink" title="FROM clause including JOINs"></a>FROM clause including JOINs</h1><p>The FROM clause is the first clause to be executed in an SQL statement. It specifies the tables from which the data will be retrieved. If you are using JOINs, the JOINs are also executed at this stage.</p>
<p>The execution of a JOIN statement in a database involves combining rows from two or more tables based on a related column between them. </p>
<p>Example</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Orders.OrderID, Customers.CustomerName</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">JOIN</span> Customers <span class="keyword">ON</span> Orders.CustomerID <span class="operator">=</span> Customers.CustomerID</span><br><span class="line"><span class="keyword">WHERE</span> Orders.OrderDate <span class="operator">&gt;</span> <span class="string">&#x27;2022-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>In this example, the JOIN statement cause the database to combine rows from the Orders and Customers tables based on the CustomerID column. The result is a new temporary table that contains the columns OrderID and CustomerName.</p>
<p>Database engines use different algorithms to execute JOIN statements, such as nested loops, hash joins, and merge joins. The choice of algorithm depends on the size of the tables, the indexes available, and other factors. JOINs are very common in SQL queries, database engines are optimized to execute them efficiently.</p>
<h1 id="WHERE-clause"><a href="#WHERE-clause" class="headerlink" title="WHERE clause"></a>WHERE clause</h1><p>The WHERE clause is used to filter the rows returned by the FROM clause. It is executed after the FROM clause and JOINs.</p>
<h1 id="GROUP-BY-clause"><a href="#GROUP-BY-clause" class="headerlink" title="GROUP BY clause"></a>GROUP BY clause</h1><p>The GROUP BY clause is used to group the rows returned by the FROM and WHERE clauses. It is executed after the WHERE clause.</p>
<h1 id="HAVING-clause"><a href="#HAVING-clause" class="headerlink" title="HAVING clause"></a>HAVING clause</h1><p>The HAVING clause is used to filter the groups returned by the GROUP BY clause. It is executed after the GROUP BY clause.</p>
<h1 id="SELECT-clause"><a href="#SELECT-clause" class="headerlink" title="SELECT clause"></a>SELECT clause</h1><p>The SELECT clause is used to specify the columns that will be returned by the query. It is executed after the HAVING clause.</p>
<h1 id="DISTINCT-clause"><a href="#DISTINCT-clause" class="headerlink" title="DISTINCT clause"></a>DISTINCT clause</h1><p>The DISTINCT clause is used to remove duplicate rows from the result set. It is executed after the SELECT clause.</p>
<h1 id="ORDER-BY-clause"><a href="#ORDER-BY-clause" class="headerlink" title="ORDER BY clause"></a>ORDER BY clause</h1><p>The ORDER BY clause is used to sort the rows returned by the query. It is executed after the SELECT and DISTINCT clauses.</p>
<h1 id="LIMIT-x2F-OFFSET-clauses"><a href="#LIMIT-x2F-OFFSET-clauses" class="headerlink" title="LIMIT &#x2F; OFFSET clauses"></a>LIMIT &#x2F; OFFSET clauses</h1><p>The LIMIT and OFFSET clauses are used to limit the number of rows returned by the query and to skip a certain number of rows. They are executed after the ORDER BY clause.</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Understanding the execution order of SQL statements is important for writing efficient queries and getting the results you expect. By knowing the order in which the clauses are executed, you can avoid common pitfalls and write more effective queries. </p>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS S3 with Java</title>
    <url>/AWS/AWS-S3-with-Java/</url>
    <content><![CDATA[<p>Working with S3 using AWS SDK for Java 2.x</p>
<span id="more"></span>

<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>See <a href="https://github.com/aws/aws-sdk-java-v2/#using-the-sdk">aws&#x2F;aws-sdk-java-v2</a> on how to use AWS SDK Java V2.</p>
<p>Import the BOM. </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>software.amazon.awssdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.43<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Import s3 dependency</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/software.amazon.awssdk/s3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>software.amazon.awssdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>s3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Create-Client"><a href="#Create-Client" class="headerlink" title="Create Client"></a>Create Client</h1><p>You can create <a href="https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/S3Client.html">S3Client</a> using builder() method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> S3Client <span class="title function_">s3Client</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> S3Client.builder()</span><br><span class="line">        .region( Region.US_EAST_2)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you don’t provide the credentials provider, The default provider <a href="https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/auth/credentials/DefaultCredentialsProvider.html">DefaultCredentialsProvider</a> will be used.</p>
<p>S3Client is <strong>thread-safe</strong>. see <a href="https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/S3Client.html">S3Client Interface API</a>. It has @ThreadSafe annotation.</p>
<p>To use static credentials when creating S3Client.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> S3Client <span class="title function_">s3Client</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AwsBasicCredentials</span> <span class="variable">awsCreds</span> <span class="operator">=</span> AwsBasicCredentials.create(</span><br><span class="line">        <span class="string">&quot;your_access_key_id&quot;</span>,</span><br><span class="line">        <span class="string">&quot;your_secret_access_key&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> S3Client.builder()</span><br><span class="line">            .credentialsProvider(StaticCredentialsProvider.create(awsCreds))</span><br><span class="line">            .region(Region.US_EAST_1)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="List-All-Buckets"><a href="#List-All-Buckets" class="headerlink" title="List All Buckets"></a>List All Buckets</h1><p>listBuckets method returns a list of all buckets owned by the authenticated sender of the request.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">ListBucketsResponse</span> <span class="variable">response</span> <span class="operator">=</span> s3Client.listBuckets();</span><br><span class="line">    response.buckets().forEach(System.out::println);</span><br><span class="line">&#125; <span class="keyword">catch</span> (S3Exception exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="List-Objects-in-a-Bucket"><a href="#List-Objects-in-a-Bucket" class="headerlink" title="List Objects in a Bucket"></a>List Objects in a Bucket</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">ListObjectsRequest</span> <span class="variable">request</span> <span class="operator">=</span> ListObjectsRequest</span><br><span class="line">        .builder()</span><br><span class="line">        .bucket(<span class="string">&quot;bucket-name&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="type">ListObjectsResponse</span> <span class="variable">response</span> <span class="operator">=</span> s3Client.listObjects(request);</span><br><span class="line">    List&lt;S3Object&gt; contents = response.contents();</span><br><span class="line">    contents.forEach(s3Object -&gt; &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;key: %s, size: %d \n&quot;</span>, s3Object.key(), s3Object.size());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (S3Exception exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Upload-Object"><a href="#Upload-Object" class="headerlink" title="Upload Object"></a>Upload Object</h1><p>putObject method is used to upload object to S3. it taks a <code>PutObjectRequest</code> and <code>RequestBody</code> as parameters.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">PutObjectRequest</span> <span class="variable">request</span> <span class="operator">=</span> PutObjectRequest.builder()</span><br><span class="line">            .bucket(<span class="string">&quot;bucket-name&quot;</span>)</span><br><span class="line">            .key(<span class="string">&quot;key/to/file&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="type">RequestBody</span> <span class="variable">requestBody</span> <span class="operator">=</span> RequestBody.fromString(<span class="string">&quot;&#123;\&quot;name\&quot;: \&quot;hello\&quot;&#125;&quot;</span>);</span><br><span class="line">    s3Client.putObject(request, requestBody);</span><br><span class="line">&#125; <span class="keyword">catch</span> (S3Exception exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Get-Object"><a href="#Get-Object" class="headerlink" title="Get Object"></a>Get Object</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">GetObjectRequest</span> <span class="variable">request</span> <span class="operator">=</span> GetObjectRequest.builder()</span><br><span class="line">            .bucket(<span class="string">&quot;bucket-name&quot;</span>)</span><br><span class="line">            .key(<span class="string">&quot;key/to/file&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="keyword">try</span> (ResponseInputStream&lt;GetObjectResponse&gt; objectAsBytes = s3Client.getObject(request)) &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = objectAsBytes.readAllBytes();</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (S3Exception | IOException exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Delete-Object"><a href="#Delete-Object" class="headerlink" title="Delete Object"></a>Delete Object</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">DeleteObjectRequest</span> <span class="variable">deleteObjectRequest</span> <span class="operator">=</span> DeleteObjectRequest.builder()</span><br><span class="line">            .bucket(<span class="string">&quot;bucket-name&quot;</span>)</span><br><span class="line">            .key(<span class="string">&quot;key/to/file&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    s3Client.deleteObject(deleteObjectRequest);</span><br><span class="line">&#125; <span class="keyword">catch</span> (S3Exception e) &#123;</span><br><span class="line">    System.err.println(e.awsErrorDetails().errorMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Close-S3Clinet"><a href="#Close-S3Clinet" class="headerlink" title="Close S3Clinet"></a>Close S3Clinet</h1><p>When S3Client is no longer needed, call S3Client.close() method to close S3Client.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">s3Client.close();</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/javav2/example_code/s3#readme">AWS SDK java v2 github repository S3 Example Code</a></li>
<li><a href="https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/java_s3_code_examples.html">Amazon S3 examples using SDK for Java 2.x</a></li>
<li><a href="https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/S3Client.html">S3Client Javadoc</a></li>
<li><a href="https://sdk.amazonaws.com/java/api/latest/overview-summary.html">API Docs</a></li>
<li><a href="https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html">Working with AWS Credentials</a></li>
<li><a href="https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/examples-s3-objects.html#upload-object">Working with Amazon S3 objects</a></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>MariaDB Backup</title>
    <url>/Database/Mariadb-Backup/</url>
    <content><![CDATA[<p>Backup and restore a database using mysqldump command</p>
<span id="more"></span>

<h1 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h1><p>mysqldump performs a logical backup. It is the most flexible way to perform a backup and restore, and a good choice when the data size is relatively small.</p>
<p>Backup a single database</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump db_name &gt; backup-file.sql</span><br></pre></td></tr></table></figure>

<p>Restore a database</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql db_name &lt; backup-file.sql</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://mariadb.com/kb/en/backup-and-restore-overview/">Mariadb Backup</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MariaDB Data Definition for Creating Table</title>
    <url>/Database/Mariadb-Data-Definition-Table/</url>
    <content><![CDATA[<p>MariaDB Data Definition for setting up a table’s schema.</p>
<span id="more"></span>

<h1 id="Table-Example"><a href="#Table-Example" class="headerlink" title="Table Example"></a>Table Example</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer(</span><br><span class="line">    id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    active_days <span class="type">INT</span>,</span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    verified TINYINT(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    created_at DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> post(</span><br><span class="line">  id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  content TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  author_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_post_author`</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (author_id) <span class="keyword">REFERENCES</span> customer (id)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT</span><br><span class="line">  </span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Test Data</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customer (first_name, last_name, email, active_days, city, verified, created_at) <span class="keyword">VALUES</span>(<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Ali&#x27;</span>, <span class="string">&#x27;alice@example.com&#x27;</span>, <span class="number">55</span>, <span class="string">&#x27;Boston&#x27;</span>, <span class="number">1</span>, &quot;2012-04-19 13:08:22&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customer (first_name, last_name, email, active_days, city, verified, created_at) <span class="keyword">VALUES</span>(<span class="string">&#x27;Dave&#x27;</span>, <span class="string">&#x27;Dfe&#x27;</span>, <span class="string">&#x27;dave@example.com&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;New York&#x27;</span>, <span class="number">0</span>, &quot;2019-04-19 10:30:19&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customer (first_name, last_name, email, active_days, city, verified, created_at) <span class="keyword">VALUES</span>(<span class="string">&#x27;Bop&#x27;</span>, <span class="string">&#x27;Bse&#x27;</span>, <span class="string">&#x27;bop@example.com&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;Boston&#x27;</span>, <span class="number">0</span>, now());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customer (first_name, last_name, email, active_days, city, verified, created_at) <span class="keyword">VALUES</span>(<span class="string">&#x27;Cindy&#x27;</span>, <span class="string">&#x27;Cge&#x27;</span>, <span class="string">&#x27;cindy@example.com&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;Las Vegas&#x27;</span>, <span class="number">0</span>, now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> post (content, author_id) <span class="keyword">VALUES</span>(&quot;Hello World...&quot;, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> post (content, author_id) <span class="keyword">VALUES</span>(&quot;Happy Programming...&quot;, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h1><p>MariaDB supports Numeric, String and Date Times.<br>All DataTypes can be found from this documentation <a href="https://mariadb.com/kb/en/data-types/">MariaDB Data Types</a></p>
<h1 id="Column-Definition"><a href="#Column-Definition" class="headerlink" title="Column Definition"></a>Column Definition</h1><h2 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h2><p>Use the <strong>NULL</strong> or <strong>NOT NULL</strong> options to specify that values in the column may or may not be NULL, respectively.</p>
<h2 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h2><p>Use AUTO_INCREMENT to create a column whose value can can be set automatically from a simple counter. </p>
<h2 id="UNIQUE-KEY"><a href="#UNIQUE-KEY" class="headerlink" title="UNIQUE KEY"></a>UNIQUE KEY</h2><p>Use UNIQUE KEY (or just UNIQUE) to specify that all values in the column must be distinct from each other. </p>
<h2 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h2><p>Use PRIMARY KEY (or just KEY) to make a column a primary key. </p>
<h2 id="FOREIGN-KEY"><a href="#FOREIGN-KEY" class="headerlink" title="FOREIGN KEY"></a>FOREIGN KEY</h2><p>A <a href="https://mariadb.com/kb/en/foreign-keys/">foreign key</a> is a constraint which can be used to enforce data integrity. It is composed by a column (or a set of columns) in a table called the child table, which references to a column (or a set of columns) in a table called the parent table. </p>
<p>Syntax:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">CONSTRAINT</span> [symbol]] <span class="keyword">FOREIGN</span> KEY</span><br><span class="line">    [index_name] (index_col_name, ...)</span><br><span class="line">    <span class="keyword">REFERENCES</span> tbl_name (index_col_name,...)</span><br><span class="line">    [<span class="keyword">ON</span> <span class="keyword">DELETE</span> reference_option]</span><br><span class="line">    [<span class="keyword">ON</span> <span class="keyword">UPDATE</span> reference_option]</span><br><span class="line"></span><br><span class="line">reference_option:</span><br><span class="line">    RESTRICT <span class="operator">|</span> CASCADE <span class="operator">|</span> <span class="keyword">SET</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NO</span> ACTION <span class="operator">|</span> <span class="keyword">SET</span> <span class="keyword">DEFAULT</span></span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://mariadb.com/kb/en/data-types/">MariaDB Date Types</a></li>
<li><a href="https://mariadb.com/kb/en/create-table/">MariaDB - Create Table</a></li>
<li><a href="https://mariadb.com/kb/en/foreign-keys/">MariaDB - Foreign Key</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MariaDB Index</title>
    <url>/Database/Mariadb-Index/</url>
    <content><![CDATA[<p>Indexes are used to make data retrieval faster.</p>
<span id="more"></span>
<h1 id="What-is-Index"><a href="#What-is-Index" class="headerlink" title="What is Index"></a>What is Index</h1><p>From Wikipedia: A database <strong>index</strong> is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index data structure. Indexes are used to quickly locate data without having to search every row in a database table every time a database table is accessed. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access of ordered records.</p>
<p>The structure of an index is usually a b-tree or a hash table. Creating an index requires additional disk space. Two many indexes could exceed file system size limit. So be careful when creating indexes.</p>
<h1 id="Creating-Index"><a href="#Creating-Index" class="headerlink" title="Creating Index"></a>Creating Index</h1><p>A <strong>Unique Index</strong> must be unique, but it can be null. Duplicate values are not allowed</p>
<p>creates an index using customer’s home_phone field. The field should already be UNIQUE before creating unique index</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX idx_email <span class="keyword">ON</span> customer(email);</span><br></pre></td></tr></table></figure>

<p>Create an index using customer’s first name and last name field. It is not a unique index so duplicate values are allowed here.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> customer(first_name, last_name);</span><br></pre></td></tr></table></figure>


<h2 id="Fulltext-index"><a href="#Fulltext-index" class="headerlink" title="Fulltext index"></a>Fulltext index</h2><p>A full-text index in MariaDB is an index of type FULLTEXT, and it allows more options when searching for portions of text from a field.<br>Full-text searching is performed using <code>MATCH() ... AGAINST</code> syntax.</p>
<p>Example to create a fulltext index.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> fulltext index idx_description <span class="keyword">on</span> product(description);</span><br></pre></td></tr></table></figure>

<p>To use <code>MATCH() ... AGAINST</code> syntax syntax</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(description) AGAINST(<span class="string">&#x27;phone&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Drop-index"><a href="#Drop-index" class="headerlink" title="Drop index"></a>Drop index</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> customer</span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_email;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Database_index">Database Index</a></li>
<li><a href="https://mariadb.com/kb/en/the-essentials-of-an-index/">The Essentials of an Index</a></li>
<li><a href="https://mariadb.com/kb/en/getting-started-with-indexes/">Getting Started with Indexes</a></li>
<li><a href="https://www.w3schools.com/sql/sql_create_index.asp">w3schools Index Syntax</a></li>
<li><a href="https://mariadb.com/kb/en/full-text-index-overview/">Fulltext index</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MariaDB Kill Process</title>
    <url>/Database/Mariadb-Kill-Process/</url>
    <content><![CDATA[<p>If a statement is taking too long and cause the process to hang, we need to kill the process from the server.</p>
<span id="more"></span>

<h1 id="Show-Processlist"><a href="#Show-Processlist" class="headerlink" title="Show Processlist"></a>Show Processlist</h1><p>use <a href="https://mariadb.com/kb/en/show-processlist/">SHOW PROCESSLIST</a> command to list process. </p>
<p>Syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW [FULL] PROCESSLIST</span><br></pre></td></tr></table></figure>

<p>The Info colume shows the statement being executed. If you do not use the FULL keyword, only the first 100 characters of each statement are shown in the Info field.</p>
<p>The time colume shows the time the process has been in the current state. This time is in seconds. Use this colume to determine if a process is hang.</p>
<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW PROCESSLIST;</span><br><span class="line">+----+-----------------+-----------+------+---------+------+------------------------+------------------+----------+</span><br><span class="line">| Id | User            | Host      | db   | Command | Time | State                  | Info             | Progress |</span><br><span class="line">+----+-----------------+-----------+------+---------+------+------------------------+------------------+----------+</span><br><span class="line">|  2 | event_scheduler | localhost | NULL | Daemon  | 2693 | Waiting on empty queue | NULL             |    0.000 |</span><br><span class="line">|  4 | root            | localhost | NULL | Query   |    0 | Table lock             | SHOW PROCESSLIST |    0.000 |</span><br><span class="line">+----+-----------------+-----------+------+---------+------+------------------------+------------------+----------+</span><br></pre></td></tr></table></figure>

<p>Another useful command to check how many rows are locked:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show engine innodb status;</span><br></pre></td></tr></table></figure>
<p>look under TRANSACTIONS to see the transactions and if rows are locked by the transaciton</p>
<h1 id="Kill-a-Process"><a href="#Kill-a-Process" class="headerlink" title="Kill a Process"></a>Kill a Process</h1><p>after you get the processlist_id, you can use KILL command to kill a process.</p>
<p>Kill syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KILL [CONNECTION | QUERY] processlist_id</span><br></pre></td></tr></table></figure>

<p>KILL CONNECTION is the same as KILL with no modifier: It terminates the connection associated with the given thread or query id.</p>
<p>KILL QUERY terminates the statement that the connection thread_id is currently executing, but leaves the connection itself intact.</p>
<p>Sample use</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KILL 14;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://mariadb.com/kb/en/show-processlist/">show processlist command</a></li>
<li><a href="https://mariadb.com/kb/en/kill/">kill command</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MariaDB Selecting Data</title>
    <url>/Database/Mariadb-Selecting-Data/</url>
    <content><![CDATA[<p>Select Statement in details</p>
<span id="more"></span>

<h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h1><p>Set up the table and data first before running the following query.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer(</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    activeDays <span class="type">INT</span>,</span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    verified TINYINT(<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customer (name, email, activeDays, city, verified) <span class="keyword">VALUES</span>(<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;alice@example.com&#x27;</span>, <span class="number">55</span>, <span class="string">&#x27;Boston&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customer (name, email, activeDays, city, verified) <span class="keyword">VALUES</span>(<span class="string">&#x27;dave&#x27;</span>, <span class="string">&#x27;dave@example.com&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;New York&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customer (name, email, activeDays, city, verified) <span class="keyword">VALUES</span>(<span class="string">&#x27;bop&#x27;</span>, <span class="string">&#x27;bop@example.com&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;Boston&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customer (name, email, activeDays, city, verified) <span class="keyword">VALUES</span>(<span class="string">&#x27;cindy&#x27;</span>, <span class="string">&#x27;cindy@example.com&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;Las Vegas&#x27;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>


<h1 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h1><p>Use the LIMIT clause to restrict the number of returned rows. </p>
<p>When you provide an offset m with a limit n, the first m rows will be ignored, and the following n rows will be returned.</p>
<p>syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIMIT offset, row_count</span><br></pre></td></tr></table></figure>

<p>example</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customer LIMIT <span class="number">2</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customer LIMIT <span class="number">2</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>


<h1 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h1><p>Use the ORDER BY clause to order a resultset, such as that are returned from a SELECT statement. </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customer <span class="keyword">ORDER</span> <span class="keyword">BY</span> email;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customer <span class="keyword">ORDER</span> <span class="keyword">BY</span> city <span class="keyword">DESC</span>, name;</span><br></pre></td></tr></table></figure>



<h1 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h1><p>use <code>GROUP BY</code> clause in a SELECT statement to group rows together that have the same value in one or more column.</p>
<p>Example:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> city, <span class="built_in">count</span>(<span class="operator">*</span>), <span class="built_in">avg</span>(activeDays) <span class="keyword">from</span> customer <span class="keyword">GROUP</span> <span class="keyword">BY</span> city;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://mariadb.com/kb/en/select/">select statement</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MariaDB Introduction</title>
    <url>/Database/Mariadb-Intro/</url>
    <content><![CDATA[<p>MariaDB is a community-developed, commercially supported fork of the MySQL relational database management system (RDBMS), intended to remain free and open-source software under the GNU General Public License. </p>
<span id="more"></span>

<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>Install mariadb using apt for ubuntu see <a href="https://computingforgeeks.com/how-to-install-mariadb-on-ubuntu-lts-linux/">https://computingforgeeks.com/how-to-install-mariadb-on-ubuntu-lts-linux/</a></p>
<p>Command to check mariadb service status</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl status mariadb</span><br></pre></td></tr></table></figure>

<p>Commands to Start&#x2F;Stop&#x2F;Restart mariadb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mariadb</span><br><span class="line">sudo systemctl stop mariadb</span><br><span class="line">sudo systemctl restart mariadb</span><br><span class="line">sudo systemctl enable mariadb</span><br></pre></td></tr></table></figure>

<p>You can now use <code>mysql</code> command to connect to mariadb from localhost. When you install mariadb, you should have mysql client installed already. To login as root:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>Like MySQL, MariaDB by default creates a user root with no password. Here root has nothing to do with operating system’s root user. It is only meaningful to MariaDB.</p>
<p>To check database version:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure>

<h1 id="Create-Admin-User"><a href="#Create-Admin-User" class="headerlink" title="Create Admin User"></a>Create Admin User</h1><p>User root can do anything from the localhost but not from remote. You often need to create a user to access database from remote.</p>
<p>Create a new user ‘newuser’ with password ‘newpass’</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;newpass&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>Here % means any host. You can use ‘localhost’ if you only want to user to access from localhost.</p>
<p>Grant all permission to user ‘newuser’</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Now you can login to MariaDB as ‘newuser’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u newuser -p</span><br></pre></td></tr></table></figure>

<h1 id="Setup-Remote-access"><a href="#Setup-Remote-access" class="headerlink" title="Setup Remote access"></a>Setup Remote access</h1><p>Edit MariaDB config file. It can be in &#x2F;etc&#x2F;my.conf or &#x2F;etc&#x2F;mysql&#x2F;my.conf</p>
<p>set up remote access and bind to 0.0.0.0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-networking=0</span><br><span class="line">bind-address=0.0.0.0</span><br></pre></td></tr></table></figure>

<h1 id="Docker-setup"><a href="#Docker-setup" class="headerlink" title="Docker setup"></a>Docker setup</h1><p>Start a mariadb server instance</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create some-network </span><br><span class="line">docker run --detach \</span><br><span class="line">  --network some-network \</span><br><span class="line">  --name some-mariadb \</span><br><span class="line">  --env MARIADB_USER=example-user \</span><br><span class="line">  --env MARIADB_PASSWORD=my_cool_secret \</span><br><span class="line">  --env MARIADB_ROOT_PASSWORD=my-secret-pw  \</span><br><span class="line">  mariadb:latest</span><br></pre></td></tr></table></figure>

<p>Connect to MariaDB from the MySQL&#x2F;MariaDB command line client</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --network some-network --rm mariadb mysql -hsome-mariadb -uexample-user -p</span><br></pre></td></tr></table></figure>

<h1 id="Database-Commands"><a href="#Database-Commands" class="headerlink" title="Database Commands"></a>Database Commands</h1><p>Show list of databases</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure>

<p>Create Database</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE post;</span><br></pre></td></tr></table></figure>

<p>Delete database</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> DATABASE post;</span><br></pre></td></tr></table></figure>

<p>Select database</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE post;</span><br></pre></td></tr></table></figure>

<h1 id="Table-Commands"><a href="#Table-Commands" class="headerlink" title="Table Commands"></a>Table Commands</h1><p>Show tables</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure>

<p>Create table</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer(</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    verified TINYINT(<span class="number">1</span>),</span><br><span class="line">    regdate DATETIME,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Describe table structure</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> customer;</span><br></pre></td></tr></table></figure>


<h1 id="Basic-Operations"><a href="#Basic-Operations" class="headerlink" title="Basic Operations"></a>Basic Operations</h1><p>Insert</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customer (name, email, password, verified, regdate) <span class="keyword">VALUES</span>(<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;alice@example.com&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="number">1</span>, now());</span><br></pre></td></tr></table></figure>

<p>Select</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customer;</span><br><span class="line"><span class="keyword">SELECT</span> id, name, email <span class="keyword">FROM</span> customer;</span><br></pre></td></tr></table></figure>

<p>Update</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> customer <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>Delete</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> customer <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>


<p>Drop Table</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> customer;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://hub.docker.com/_/mariadb">Dockerhub mariadb</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MariaDB Transactions</title>
    <url>/Database/Mariadb-Transaction/</url>
    <content><![CDATA[<p>MariaDB Transaction and Isolation Level explained.</p>
<span id="more"></span>

<h1 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h1><p>“An SQL-transaction (transaction) is a sequence of executions of SQL-statements that is atomic with respect to recovery. That is to say: either the execution result is completely successful, or it has no effect on any SQL-schemas or SQL-data.”</p>
<p>— The SQL Standard</p>
<h1 id="Autocommit"><a href="#Autocommit" class="headerlink" title="Autocommit"></a>Autocommit</h1><p>By default, MariaDB runs with autocommit mode enabled. This means that as soon as you execute a statement that updates (modifies) a table, MariaDB stores the update on disk to make it permanent. To disable autocommit mode, use the following statement:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h1 id="Start-Transaction"><a href="#Start-Transaction" class="headerlink" title="Start Transaction"></a>Start Transaction</h1><p>The <em>START TRANSACTION</em> or <em>BEGIN</em> statement begins a new transaction. <em>COMMIT</em> commits the current transaction, making its changes permanent. <em>ROLLBACK</em> rolls back the current transaction, canceling its changes. </p>
<p>see example from <a href="https://mariadb.com/kb/en/start-transaction/">START TRANSACTION</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@A</span>:<span class="operator">=</span><span class="built_in">SUM</span>(salary) <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> type<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> table2 <span class="keyword">SET</span> summary<span class="operator">=</span><span class="variable">@A</span> <span class="keyword">WHERE</span> type<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<h1 id="Isolation-Level"><a href="#Isolation-Level" class="headerlink" title="Isolation Level"></a>Isolation Level</h1><p>MasriaDB supports the 4 different transaction isolation levels.</p>
<h2 id="READ-UNCOMMITTED"><a href="#READ-UNCOMMITTED" class="headerlink" title="READ UNCOMMITTED"></a>READ UNCOMMITTED</h2><p><a href="https://mariadb.com/kb/en/set-transaction/#read-uncommitted">READ UNCOMMITTED</a> isolation level allows <strong>dirty reads</strong>. One transaction may see <em>not-yet-committed</em> changes made by some other transaction. </p>
<p>You may use this isolation level when making rough estimates(like <code>COUNT(*)</code> or <code>SUM(*)</code>) etc.</p>
<h2 id="READ-COMMITTED"><a href="#READ-COMMITTED" class="headerlink" title="READ COMMITTED"></a>READ COMMITTED</h2><p><a href="https://mariadb.com/kb/en/set-transaction/#read-committed">READ COMMITTED</a> isolation level guarantees that any data read was <em>committed</em>. READ COMMITTED prevents dirty reads. </p>
<p>Under READ COMMITTED, a second SELECT in a transaction may return different data because a concurrent transaction may update, delete or insert new record.</p>
<h2 id="REPEATABLE-READ"><a href="#REPEATABLE-READ" class="headerlink" title="REPEATABLE READ"></a>REPEATABLE READ</h2><p><a href="https://mariadb.com/kb/en/set-transaction/#repeatable-read">REPEATABLE READ</a> is a higher isolation level. It guarantees to read committed data and guarantees any dataread <em>cannot change</em>. So if you read the data again, the data is unchanged.</p>
<p>Under REPEATABLE READ,a second SELECT is guaranteed to display at least the rows that were returned from the first SELECT unchanged. New rows may be added by a concurrent transaction, but the existing rows cannot be deleted nor changed.</p>
<blockquote>
<p><strong>REPEATABLE READ</strong> is the default isolation level for MySQL and MariaDB.</p>
</blockquote>
<h2 id="SERIALIZABLE"><a href="#SERIALIZABLE" class="headerlink" title="SERIALIZABLE"></a>SERIALIZABLE</h2><p><a href="https://mariadb.com/kb/en/set-transaction/#serializable">SERIALIZABLE</a> is higher isolation level than REPEATABLE READ.</p>
<p>under SERIALIZABLE reads, the second select is guaranteed to see exactly the same rows as the first.</p>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>Check Global Isolation Level</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">SELECT</span> @<span class="variable">@global</span>.tx_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@global</span>.tx_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>Check session level isolation level</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">SELECT</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@tx</span>_isolation  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>Set global isolation level</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br></pre></td></tr></table></figure>

<p>Set session isolation level within an existing transaction</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@tx</span>_isolation;;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://mariadb.com/kb/en/transactions/">MariaDB Transactions</a></li>
<li><a href="https://stackoverflow.com/questions/4034976/difference-between-read-commited-and-repeatable-read">Difference between “read commited” and “repeatable read”</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Run MySQL using Docker Compose</title>
    <url>/Database/Run-MySQL-using-Docker-Compose/</url>
    <content><![CDATA[<p>To run MySQL using Docker Compose</p>
<span id="more"></span>

<h1 id="Run-MySQL-using-Docker-Compose"><a href="#Run-MySQL-using-Docker-Compose" class="headerlink" title="Run MySQL using Docker Compose"></a>Run MySQL using Docker Compose</h1><p>To run MySQL using Docker Compose, you need to create a <code>docker-compose.yml</code> file with the following content:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--lower_case_table_names=1</span> </span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:3306:3306&quot;</span></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8000</span><span class="string">:8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Then run the following command in the same directory as the <code>docker-compose.yml</code> file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>You can now use adminer to connect to the MySQL server by visiting <a href="http://localhost:8000/">http://localhost:8000</a>.</p>
<p><code>lower-case-table-names=1</code> is used to make table names case-insensitive. This is useful when you are running MySQL on a case-insensitive file system, such as Windows or macOS. see <a href="https://dev.mysql.com/doc/refman/8.3/en/identifier-case-sensitivity.html">https://dev.mysql.com/doc/refman/8.3/en/identifier-case-sensitivity.html</a> for more information.</p>
<p>You can use a sample table to test the MySQL server. Here is an example of a <code>user</code> table:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span>,</span><br><span class="line">`created` <span class="type">date</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h1 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h1><p>To add a volume to the MySQL container, you can add the following lines to the <code>docker-compose.yml</code> file:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./data:/var/lib/mysql</span></span><br></pre></td></tr></table></figure>

<p>volume <code>./data</code> will be mounted to <code>/var/lib/mysql</code> in the container. This is useful when you want to persist the data even after the container is removed.</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Common Commands</title>
    <url>/Docker/Docker-Common-Commands/</url>
    <content><![CDATA[<p>Most common Docker commands.</p>
<span id="more"></span>

<h2 id="Docker-Commands"><a href="#Docker-Commands" class="headerlink" title="Docker Commands"></a>Docker Commands</h2><table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>docker build -t <em>image_name</em> <em>directory_path</em></td>
<td>build a Docker image from Dockerfile</td>
</tr>
<tr>
<td>docker run <em>image_name</em></td>
<td>run a container from image</td>
</tr>
<tr>
<td>docker ps</td>
<td>list running containers</td>
</tr>
<tr>
<td>docker ps -a</td>
<td>list all containers</td>
</tr>
<tr>
<td>docker stop <em>container_name&#x2F;container_id</em></td>
<td>stop a container</td>
</tr>
<tr>
<td>docker kill <em>container_name&#x2F;container_id</em></td>
<td>kill a container</td>
</tr>
<tr>
<td>docker restart <em>container_name&#x2F;container_id</em></td>
<td>restart a container</td>
</tr>
<tr>
<td>docker rm <em>container_name&#x2F;container_id</em></td>
<td>remove a container</td>
</tr>
<tr>
<td>docker container prune</td>
<td>remove all stopped container</td>
</tr>
<tr>
<td>docker exec -it <em>container_name&#x2F;container_id</em> &#x2F;bin&#x2F;bash</td>
<td>create bash session for a running container</td>
</tr>
<tr>
<td>docker images</td>
<td>list images</td>
</tr>
<tr>
<td>docker pull <em>name_name</em></td>
<td>Pull an image or a repository from a registry</td>
</tr>
<tr>
<td>docker rmi <em>image_name&#x2F;image_id</em></td>
<td>remove image by name or id</td>
</tr>
</tbody></table>
<p>use <code>--help</code> option to search for help. If you need to find the usage for <code>docker run</code>. execute <code>docker run --help</code>.</p>
<h2 id="Docker-run-options"><a href="#Docker-run-options" class="headerlink" title="Docker run options"></a>Docker run options</h2><p><code>docker run</code> is the most used command. Here are the common options for <code>docker run</code>.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>--rm</td>
<td>Automatically remove the container when it exits</td>
</tr>
<tr>
<td>-d</td>
<td>Run container in background</td>
</tr>
<tr>
<td>-it</td>
<td>interactive mode</td>
</tr>
<tr>
<td>-p <em>host_port</em>:<em>container_port</em></td>
<td>bind container port to host port</td>
</tr>
</tbody></table>
<p>Example to run nginx container with name ‘nginx-test’ on host’s port 8080</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -d -p 8080:80 --name nginx-test  nginx:alpine</span><br></pre></td></tr></table></figure>

<p>Example to start an alpine container in interactive mode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name alpine-test --rm -it alpine /bin/sh</span><br></pre></td></tr></table></figure>

<p>It is also very common to use <code>docker exec</code> to connect to a running container.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it fd8a3021e976 /bin/sh</span><br></pre></td></tr></table></figure>

<p>Reference</p>
<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/docker/">docker commands</a></li>
<li><a href="https://docs.docker.com/engine/reference/run/">docker run reference</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Compose</title>
    <url>/Docker/Docker-Compose/</url>
    <content><![CDATA[<p>Docker Compose is a tool for defining and running multi-container Docker applications. </p>
<span id="more"></span>

<p>It uses YAML files to configure application’s services.</p>
<h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><p><code>Services</code> are really just “containers in production.”. A Service runs one image and it defines ports, volumes, resource limitation, restart policy and replicas.</p>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>Instruction to install Compose is <a href="https://docs.docker.com/compose/install/#install-compose">here</a></p>
<p>To install in Linux</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># download latest version of Docker Compose</span><br><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"># apply executable permissions to binary</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"># test installation</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<h1 id="Simple-Example"><a href="#Simple-Example" class="headerlink" title="Simple Example"></a>Simple Example</h1><p>Here is the example from <a href="https://docs.docker.com/compose/gettingstarted/">Get Started with Docker Compose</a></p>
<p>Files Structure</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composetest/</span><br><span class="line">├── app.py</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── Dockerfile</span><br><span class="line">└── requirements.txt</span><br></pre></td></tr></table></figure>

<p><strong>app.py</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">import redis</span><br><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=&#x27;redis&#x27;, port=6379)</span><br><span class="line"></span><br><span class="line">def get_hit_count():</span><br><span class="line">    retries = 5</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            return cache.incr(&#x27;hits&#x27;)</span><br><span class="line">        except redis.exceptions.ConnectionError as exc:</span><br><span class="line">            if retries == 0:</span><br><span class="line">                raise exc</span><br><span class="line">            retries -= 1</span><br><span class="line">            time.sleep(0.5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def hello():</span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    return &#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;.format(count)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;, debug=True)</span><br></pre></td></tr></table></figure>

<p><strong>requirements.txt</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure>

<p><strong>Dockerfile</strong></p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.4</span>-alpine</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> . /code</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /code</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>


<p><strong>docker-compose.yml</strong> - defines two service, web and redis.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5000:5000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - .:/code</span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:alpine&quot;</span><br></pre></td></tr></table></figure>

<p>use <code>docker-compose up -d</code> to start the services</p>
<img src="/Docker/Docker-Compose/result.png" class="" title="Result">


<h1 id="Common-docker-compose-Commands"><a href="#Common-docker-compose-Commands" class="headerlink" title="Common docker-compose  Commands"></a>Common docker-compose  Commands</h1><p><code>docker-compose up -d</code> is the most used command to start service in the background</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br><span class="line">Starting composetest_web_1   ... done</span><br><span class="line">Starting composetest_redis_1 ... done</span><br></pre></td></tr></table></figure>

<p>The default compose file to be used is docker-compose.yml, you can set alternative file using <code>-f</code> option.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose -f docker-compose.dev.yml  up -d</span><br></pre></td></tr></table></figure>


<p>use <code>docker-compose ps</code> to list containers. If a container is not <em>UP</em>, you can usually use <code>docker log</code> command to see if there is error starting the container.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose ps</span><br><span class="line">       Name                      Command               State           Ports</span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">composetest_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp</span><br><span class="line">composetest_web_1     python app.py                    Up      0.0.0.0:5000-&gt;5000/tcp</span><br></pre></td></tr></table></figure>

<p>Use <code>docker-compose build</code> command to rebuild the containers. This is useful after a change to a service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose build</span><br></pre></td></tr></table></figure>

<p>use <code>docker-compose stop</code> to stop the containers without removing them. You can use <code>docker-compose start</code> to start the services again</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose stop</span><br><span class="line">Stopping composetest_web_1   ... done</span><br><span class="line">Stopping composetest_redis_1 ... done</span><br></pre></td></tr></table></figure>

<p>use <code>docker-compose down</code> to stop containers and removes containers, networks created by up. use <code>-v</code> to remove volumes and use <code>--rmi</code> to remove image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose down -v --rmi all</span><br><span class="line">Stopping composetest_web_1   ... done</span><br><span class="line">Stopping composetest_redis_1 ... done</span><br><span class="line">Removing composetest_web_1   ... done</span><br><span class="line">Removing composetest_redis_1 ... done</span><br><span class="line">Removing network composetest_default</span><br><span class="line">Removing image composetest_web</span><br><span class="line">Removing image redis:alpine</span><br></pre></td></tr></table></figure>

<p>Print out log messages from all container.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose logs -f --tail=0</span><br></pre></td></tr></table></figure>

<p>Use <code>docker help</code> command to display the help menu.</p>
<p>For all the command reference, see <a href="https://docs.docker.com/compose/reference/">docker-compose command-line Reference</a></p>
<h1 id="docker-compose-yml-file"><a href="#docker-compose-yml-file" class="headerlink" title="docker-compose.yml file"></a>docker-compose.yml file</h1><p>Compose file has a version number. current version is version 3.</p>
<p>You can include the version number at the top of docker-compose.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="Service-Configuration"><a href="#Service-Configuration" class="headerlink" title="Service Configuration"></a>Service Configuration</h2><p>Then <code>services</code> list all the services to create.</p>
<p><a href="https://docs.docker.com/compose/compose-file/#build">build</a> - usually a path to a build context. It can also specify context and optionally Dockerfile and args.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.docker.com/compose/compose-file/#image">image</a> - Specify the image to start the container from.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.docker.com/compose/compose-file/#environment">environment</a> - sets environment variable</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SHOW=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.docker.com/compose/compose-file/#ports">ports</a> - specify ports(Host:Container)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ports:</span><br><span class="line">  - &quot;5000:5000&quot;</span><br><span class="line">  - &quot;1234:1234&quot;</span><br></pre></td></tr></table></figure>


<p><a href="https://docs.docker.com/compose/compose-file/#volumes">volumes</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  - .:/code</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.docker.com/compose/compose-file/#depends_on">depends_on</a> - sets dependency between services.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.docker.com/compose/compose-file/#restart">Restart</a> - sets restart policy. Default is “no”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">restart: &quot;no&quot;</span><br><span class="line">restart: always</span><br><span class="line">restart: on-failure</span><br><span class="line">restart: unless-stopped</span><br></pre></td></tr></table></figure>

<h2 id="Volume-Configuration"><a href="#Volume-Configuration" class="headerlink" title="Volume Configuration"></a>Volume Configuration</h2><p>you can create named volumes in compose file</p>
<p>Example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: db</span><br><span class="line">    volumes:</span><br><span class="line">      - data-volume:/var/lib/db</span><br><span class="line">  backup:</span><br><span class="line">    image: backup-service</span><br><span class="line">    volumes:</span><br><span class="line">      - data-volume:/var/lib/backup/data</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  data-volume:</span><br></pre></td></tr></table></figure>

<h2 id="Network-Configuration"><a href="#Network-Configuration" class="headerlink" title="Network Configuration"></a>Network Configuration</h2><p>by default, Compose set up a bridge network for your app. You can customize it.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">networks:</span><br><span class="line">    my_network:</span><br><span class="line">        driver: bridge</span><br></pre></td></tr></table></figure>


<h1 id="Other-Examples"><a href="#Other-Examples" class="headerlink" title="Other Examples"></a>Other Examples</h1><h2 id="Running-Postgres-and-Adminer"><a href="#Running-Postgres-and-Adminer" class="headerlink" title="Running Postgres and Adminer"></a>Running Postgres and Adminer</h2><p>Two services will be started. postgres database and adminer</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use postgres/example user/password credentials</span></span><br><span class="line">version: <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_PASSWORD: example</span><br><span class="line"></span><br><span class="line">  adminer:</span><br><span class="line">    image: adminer</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">5555</span>:<span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>example from <a href="https://hub.docker.com/_/postgres">https://hub.docker.com/_&#x2F;postgres</a></p>
<h2 id="Wordpress"><a href="#Wordpress" class="headerlink" title="Wordpress"></a>Wordpress</h2><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:<span class="number">5.7</span></span><br><span class="line">    volumes:</span><br><span class="line">      - db_data:/var/lib/mysql</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_DATABASE: exampledb</span><br><span class="line">      MYSQL_USER: exampleuser</span><br><span class="line">      MYSQL_PASSWORD: examplepass</span><br><span class="line">      MYSQL_RANDOM_ROOT_PASSWORD: <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line">  web:</span><br><span class="line">    image: wordpress</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    volumes:</span><br><span class="line">      - wordpress_files:/var/www/html</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      WORDPRESS_DB_HOST: db:<span class="number">3306</span></span><br><span class="line">      WORDPRESS_DB_USER: exampleuser</span><br><span class="line">      WORDPRESS_DB_PASSWORD: examplepass</span><br><span class="line">      WORDPRESS_DB_NAME: exampledb</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  wordpress_files:</span><br><span class="line">  db_data:</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.docker.com/compose/gettingstarted/">Get started with Docker Compose</a></li>
<li><a href="https://docs.docker.com/compose/reference/">docker-compose command-line Reference</a></li>
<li><a href="https://docs.docker.com/compose/compose-file/">docker-compose.yml file reference</a></li>
<li><a href="https://medium.freecodecamp.org/the-ups-and-downs-of-docker-compose-how-to-run-multi-container-applications-bf7a8e33017e">The ups and downs of docker-compose — how to run multi-container applications</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Container</title>
    <url>/Docker/Docker-Container/</url>
    <content><![CDATA[<p>Learn how to work with Docker Container</p>
<span id="more"></span>

<h1 id="Running-containers"><a href="#Running-containers" class="headerlink" title="Running containers"></a>Running containers</h1><p>Docker run command is used to run a container. </p>
<p>syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run [OPTION] image_name</span><br></pre></td></tr></table></figure>


<p>A docker container can be referenced by its name or id. You can provide a name as the Container name, if you don’t provide a name, Docker will generate one for you.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>--name</td>
<td>name of the container</td>
</tr>
<tr>
<td>--rm</td>
<td>Automatically remove the container when it exits</td>
</tr>
<tr>
<td>-d</td>
<td>Run container in background</td>
</tr>
<tr>
<td>-it</td>
<td>interactive mode</td>
</tr>
<tr>
<td>-p <em>host_port</em>:<em>container_port</em></td>
<td>bind container port to host port</td>
</tr>
<tr>
<td>-v</td>
<td>bind a volume</td>
</tr>
</tbody></table>
<p>For more info see <a href="https://docs.docker.com/engine/reference/run/">docker run reference</a></p>
<h2 id="Run-in-background"><a href="#Run-in-background" class="headerlink" title="Run in background"></a>Run in background</h2><p>use <code>-d</code> flag to run the container in the background. d is for detached.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --rm redis</span><br></pre></td></tr></table></figure>


<h2 id="Interactive-Mode"><a href="#Interactive-Mode" class="headerlink" title="Interactive Mode"></a>Interactive Mode</h2><p>The <code>-it</code> instructs Docker to allocate a pseudo-tty connected to the container’s stdin. Both instructions are needed to allocate a pseudo-tty. If you leave out either one, the tty you allocate will not work normally.</p>
<ul>
<li><strong>-i</strong>  : Keep STDIN open even if not attached</li>
<li><strong>-t</strong>  : Allocate a pseudo-tty</li>
</ul>
<p>creating an interactive bash shell to the container. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>


<h2 id="Container-Name"><a href="#Container-Name" class="headerlink" title="Container Name"></a>Container Name</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name my-httpd -p 8080:80 -d nginx:alpine</span><br></pre></td></tr></table></figure>

<h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><p>use –hostname option to set the hostname. If you don’t set the hostname, the default hostname wil be the container id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -it --name=ubuntu --hostname=myubuntu ubuntu:latest /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="Port-Binding"><a href="#Port-Binding" class="headerlink" title="Port Binding"></a>Port Binding</h2><p>Format</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort</span><br></pre></td></tr></table></figure>

<p>start up an httpd container in the background and bind container’s port 80 to host’s port 8080. By default, the port is bound to all interfaces(0.0.0.0)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -p 8080:80 -d nginx:alpine</span><br></pre></td></tr></table></figure>

<p>expose to local only(127.0.0.1)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -p 127.0.0.1:8080:80 -d nginx:alpine</span><br></pre></td></tr></table></figure>

<p>expose to global(0.0.0.0)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -p 0.0.0.0:8080:80 -d nginx:alpine</span><br></pre></td></tr></table></figure>


<h2 id="Mount-volumes"><a href="#Mount-volumes" class="headerlink" title="Mount volumes"></a>Mount volumes</h2><p>Volumes are used to presist data generated by and used by Docker container. Volume is managed by Docker.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -dit --rm  --name myNginx -v myvol:/usr/share/nginx/html nginx:alpine</span><br></pre></td></tr></table></figure>
<p>if myvol not exist, then Docker creates it</p>
<h2 id="Bind-Mounts"><a href="#Bind-Mounts" class="headerlink" title="Bind Mounts"></a>Bind Mounts</h2><p>see <a href="https://docs.docker.com/storage/bind-mounts/">Bind Mounts reference</a>. a file or directory on the host is mounted into a container. Bind Mounts is similar to Volumne, but it is not managed by Docker.</p>
<p>use <code>-v</code> to mount host’s ~&#x2F;nginx directory to continer’s &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html direcotry</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name myNginx -v ~/nginx:/usr/share/nginx/html -p 8000:80 -d nginx:alpine</span><br></pre></td></tr></table></figure>

<h2 id="Resource-Limit"><a href="#Resource-Limit" class="headerlink" title="Resource Limit"></a>Resource Limit</h2><p>limit the container’s memory to 900M. You can limit on memory, CPU and IO</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker container run -it  --memory 900m  alpine sh</span><br></pre></td></tr></table></figure>

<h2 id="Setting-restart-policy"><a href="#Setting-restart-policy" class="headerlink" title="Setting restart policy"></a>Setting restart policy</h2><p>use <code>--restart</code> flag to specify a restart policy</p>
<ul>
<li><strong>no</strong> - do not automatically restart the container when exit. this is the default</li>
<li><strong>on-failure[:max-retries]</strong> - restart only if the container exits with a non-zero exit status</li>
<li><strong>always</strong> - always restart the container regardless of exit status</li>
<li><strong>unless-stopped</strong> - Always restart the container regardless of the exit status, including on daemon startup, except if the container was put into a stopped state before the Docker daemon was stopped.</li>
</ul>
<p>Example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --restart=always redis</span><br></pre></td></tr></table></figure>


<h1 id="List-Containers"><a href="#List-Containers" class="headerlink" title="List Containers"></a>List Containers</h1><p>use <code>docker ps</code> command to list running containers</p>
<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">006638797f61        httpd               &quot;httpd-foreground&quot;   4 minutes ago       Up 4 minutes        0.0.0.0:8080-&gt;80/tcp   my-httpd</span><br></pre></td></tr></table></figure>

<p>use <code>docker ps -a</code> command to list all containers including the stopped ones.</p>
<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                     PORTS                  NAMES</span><br><span class="line">af18818849b4        ubuntu              &quot;/bin/bash&quot;          6 seconds ago       Exited (0) 3 seconds ago                          inspiring_curran</span><br><span class="line">006638797f61        httpd               &quot;httpd-foreground&quot;   5 minutes ago       Up 5 minutes               0.0.0.0:8080-&gt;80/tcp   my-httpd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We can add <code>-q</code> option to list only the IDs of all containers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -q -a</span><br></pre></td></tr></table></figure>

<p>It is very useful when we need to remove all containers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -a -q)</span><br></pre></td></tr></table></figure>


<h1 id="Stop-Container"><a href="#Stop-Container" class="headerlink" title="Stop Container"></a>Stop Container</h1><table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>docker stop <em>container_name&#x2F;container_id</em></td>
<td>stop a container</td>
</tr>
<tr>
<td>docker kill <em>container_name&#x2F;container_id</em></td>
<td>kill a container</td>
</tr>
<tr>
<td>docker restart <em>container_name&#x2F;container_id</em></td>
<td>restart a container</td>
</tr>
</tbody></table>
<p>For <code>docker stop</code> , The main process inside the container will receive SIGTERM, and after a grace period, SIGKILL. <code>docker stop</code> is more graceful than <code>docker kill</code>.</p>
<p>For <code>docker kill</code>, the main process receive SIGKILL signal.</p>
<p><code>docker stop</code> attempts a graceful shutdown while <code>docker kill</code> is just a<br>after a container is stop, you can use <code>docker start</code> command to start it.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start container_name/container_id</span><br></pre></td></tr></table></figure>

<h1 id="Remove-Contaienr"><a href="#Remove-Contaienr" class="headerlink" title="Remove Contaienr"></a>Remove Contaienr</h1><p>remove a stopped container using <code>docker rm</code> command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm container_name/container_id</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Options</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>–force , -f</td>
<td>Remove container regardless of container status.</td>
</tr>
<tr>
<td>–volumes , -v</td>
<td>Remove the volumes associated with the container</td>
</tr>
</tbody></table>
<p><code>docker container prune</code> - remove all stopped container</p>
<h1 id="Inspect-container"><a href="#Inspect-container" class="headerlink" title="Inspect container"></a>Inspect container</h1><p>Return low-level information on Docker objects</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect container_name/container_id</span><br></pre></td></tr></table></figure>

<p>if you only want to get specific info, use <code>--format, -f</code> option</p>
<p>To get log path</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect --format=&#x27;&#123;&#123;.LogPath&#125;&#125;&#x27;container_name/container_id</span><br></pre></td></tr></table></figure>

<p>To get IP address. You can actually interact with the container using the IP address.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; container_name/container_id</span><br></pre></td></tr></table></figure>

<h1 id="docker-exec-command"><a href="#docker-exec-command" class="headerlink" title="docker exec command"></a>docker exec command</h1><p>use <code>docker exec</code> command to execute command on a running container. Usually it is used to start sh&#x2F;bash session</p>
<p>Example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it mycontainer /bin/bash</span><br></pre></td></tr></table></figure>

<h1 id="Logs"><a href="#Logs" class="headerlink" title="Logs"></a>Logs</h1><p>Show container logs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs container_name/container_id</span><br></pre></td></tr></table></figure>
<p>Show container logs with follow</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs -f container_name/container_id</span><br></pre></td></tr></table></figure>

<p>Show only the latest log</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs --tail 5 container_name/container_id</span><br></pre></td></tr></table></figure>

<h1 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h1><p>use <code>docker stats &lt;container&gt;</code> to display a live stream of containers resource usage.</p>
<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class="line">12d75ef956ab        ubuntu              0.00%               2.484MiB / 7.694GiB   0.03%               6.36kB / 0B         0B / 0B             1</span><br></pre></td></tr></table></figure>

<h1 id="Attach"><a href="#Attach" class="headerlink" title="Attach"></a>Attach</h1><p>attach - attach local standard input, output, and error streams to a running container. </p>
<p>You can detach from a container and leave it running using the CTRL-p CTRL-q key sequence. Do not use  CTRL-c or <code>exit</code> command to detach from a container.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker attach container-name</span><br></pre></td></tr></table></figure>

<p><strong>Attach vs exec</strong><br><br>The difference between <code>docker attach</code> and <code>docker exec -it &lt;container&gt; /bin/bash</code> is docker exec creates a new process while docker attach attaches to the existing process that is running.</p>
<h1 id="Other-commands"><a href="#Other-commands" class="headerlink" title="Other commands"></a>Other commands</h1><p>Restart containe</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart container_name/container_id</span><br></pre></td></tr></table></figure>

<p>Copy files&#x2F;folders between a container and the local filesystem</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker cp ubuntu:/etc/hosts /tmp</span><br><span class="line"></span><br><span class="line">$ docker cp /tmp/sample.txt ubuntu:/home</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/docker/">Docker Commands</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Intro</title>
    <url>/Docker/Docker-Intro/</url>
    <content><![CDATA[<p><strong>Docker</strong> is a platform that manages application using containers. Docker packages application and its dependencies as a container. It also provide an intuitive interface for users to interact with Containers. Docker is widely used as a tool for application deployment.</p>
<span id="more"></span>

<img src="/Docker/Docker-Intro/VM-vs-Docker.png" class="" title="VM-vs-Docker">
<p>Compare Docker to VM </p>
<br>




<h1 id="Benefits-of-Docker"><a href="#Benefits-of-Docker" class="headerlink" title="Benefits of Docker"></a>Benefits of Docker</h1><ul>
<li>fast deployment</li>
<li>lightweight. Docker images are small</li>
<li>performant compared to VM</li>
<li>require mimimal runtime requirements</li>
<li>portable. minimize environment issue</li>
<li>ability to version control the containers</li>
</ul>
<p>Benefits to use Docker for Devops</p>
<ul>
<li>Developers don’t have to setup local environment</li>
<li>Operations team can set up environment easily</li>
<li>Works with DevOps tools such as Ansible, Puppet and Chef</li>
</ul>
<h1 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h1><img src="https://docs.docker.com/engine/images/architecture.svg" />

<p>Docker uses a client-server(CS) architecture. The <strong>Docker client</strong> talks to the <strong>Docker daemon</strong>.</p>
<p><strong>Docker Daemon</strong> listens to the Docker API and process all the requests. constantly managing containers and images.</p>
<p>The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. </p>
<p>A <strong>Docker registry</strong> stores Docker images. Docker Hub is a public registry that anyone can use, and Docker is configured to look for images on Docker Hub by default. </p>
<p><strong>Docker Machine</strong> is a tool that lets you install Docker Engine on virtual hosts, and manage the hosts with docker-machine commands.You can use Machine to create Docker hosts on your local Mac or Windows box, on your company network, in your data center, or on cloud providers like Azure, AWS, or Digital Ocean.</p>
<p><strong>Docker Swarm</strong> is native clustering for Docker. It turns a pool of Docker hosts into a single, virtual host.</p>
<p>Docker has two segments</p>
<ul>
<li>Community Edition(CE) - open source and free</li>
<li>Enterprise Edition(EE) - close source and needs to be licensed yearly. provides 24x7 support.</li>
</ul>
<h1 id="Important-Concepts"><a href="#Important-Concepts" class="headerlink" title="Important Concepts"></a>Important Concepts</h1><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>Image is a read-only template for creating Containers. The Open Containers Initiative (OCI) defines a Container Image Format Specification. This is the most commonly used image format.</p>
<h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><p>A container is a runnable instance of an image.</p>
<h2 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h2><p>Images are stored in  Registry. Docker Registry is a service. </p>
<p>Docker’s default registry is Docker Hub(docker.io). There are other public registries maintained such as quay.io. Cloud providers like Amazon, Google and Microsoft also provide registry.  You can also host private registries to better integrated with CI&#x2F;CD pipeline.</p>
<h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><p>Repository is a collection of related images. Provide versioning for images. Usually it is the image with the same name but different tags.</p>
<h2 id="Container-Runtime"><a href="#Container-Runtime" class="headerlink" title="Container Runtime"></a>Container Runtime</h2><p>Lowlevel runtime for the container. The reference implementation for Open Containers Initiative (OCI) Runtime is runc.</p>
<p>lxc, runc and rkt are the most popular runtimes. Docker Engine runs on runc container runtime.</p>
<h2 id="Container-Engine"><a href="#Container-Engine" class="headerlink" title="Container Engine"></a>Container Engine</h2><p>A Container Engine can handles user request. Allowing the user to interact with container runtime. When we refer to Docker, we often mean Docker Engine. rkt is also a container engine.</p>
<h1 id="Installation-for-Ubuntu"><a href="#Installation-for-Ubuntu" class="headerlink" title="Installation for Ubuntu"></a>Installation for Ubuntu</h1><p>see <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a> for the detail instructions.</p>
<p>Execute the following command to install docker-ce. </p>
<p>Uninstall old versions</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<p>Install Docker version 18.06.1-ce for ubuntu</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce=18.06.1~ce~3-0~ubuntu</span><br></pre></td></tr></table></figure>


<p>To Install a specific version:</p>
<ol>
<li>first list versions available in your repo<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-cache madison docker-ce</span><br></pre></td></tr></table></figure></li>
</ol>
<p>output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-ce | 18.06.1~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages</span><br><span class="line">docker-ce | 18.06.0~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>Then install a specific version using version string from the second column<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install docker-ce=18.06.0~ce~3-0~ubuntu</span><br></pre></td></tr></table></figure></li>
</ol>
<p>To see docker version after installation</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line"># or</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>


<p>add current user to the docker group. without this step, you will need to type <code>sudo</code> everytime you execute a docker command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -a -G docker $USER</span><br></pre></td></tr></table></figure>
<p>You may need to restart after adding current user to docker group.</p>
<p>To test installation, run the following command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<p>If you want more fun, run a dwhalesay container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run docker/whalesay cowsay hello docker</span><br></pre></td></tr></table></figure>

<h1 id="Start-and-Stop-Service"><a href="#Start-and-Stop-Service" class="headerlink" title="Start and Stop Service"></a>Start and Stop Service</h1><p>use init script to stop&#x2F;start  docker service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/docker stop</span><br><span class="line">sudo /etc/init.d/docker start</span><br><span class="line">sudo /etc/init.d/docker restart</span><br></pre></td></tr></table></figure>

<p>or simply</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo serice docker stop</span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>

<p>To disable docker service on rebooting of Ubuntu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl disable docker</span><br></pre></td></tr></table></figure>

<p>To enable docker service on reboot</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>

<h1 id="Useful-links"><a href="#Useful-links" class="headerlink" title="Useful links"></a>Useful links</h1><ul>
<li><a href="https://www.aquasec.com/wiki">Container Technology Wiki(contains Docker 101 and K8s 101</a></li>
<li><a href="https://towardsdatascience.com/learn-enough-docker-to-be-useful-b7ba70caeb4b">Learn Enough Docker to be Useful part1 by Jeff Hale</a></li>
<li><a href="https://towardsdatascience.com/learn-enough-docker-to-be-useful-1c40ea269fa8">Learn Enough Docker to be Useful part2 by Jeff Hale</a></li>
<li><a href="https://towardsdatascience.com/learn-enough-docker-to-be-useful-b0b44222eef5">Learn Enough Docker to be Useful part3 by Jeff Hale</a></li>
<li><a href="https://towardsdatascience.com/slimming-down-your-docker-images-275f0ca9337e">Learn Enough Docker to be Useful part4 by Jeff Hale</a></li>
<li><a href="https://towardsdatascience.com/15-docker-commands-you-should-know-970ea5203421">15 Docker Commands You Should Know by Jeff Hale</a></li>
<li><a href="https://towardsdatascience.com/pump-up-the-volumes-data-in-docker-a21950a8cd8">Pump up the Volumes: Data in Docker by Jeff Hale</a></li>
<li><a href="https://towardsdatascience.com/key-kubernetes-concepts-62939f4bc08e">Key Kubernetes Concepts by Jeff Hale</a></li>
<li><a href="https://towardsdatascience.com/key-kubernetes-commands-741fe61fde8">Key Kubernetes Commands by Jeff Hale</a></li>
<li><a href="https://github.com/wsargent/docker-cheat-sheet">Docker Cheat Sheet</a></li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.docker.com/engine/docker-overview/">Docker Overview</a></li>
<li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Get Docker CE for ubuntu</a></li>
<li><a href="https://unix.stackexchange.com/questions/363048/unable-to-locate-package-docker-ce-on-a-64bit-ubuntu">install docker-ce on a 64bit ubuntu</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Machine</title>
    <url>/Docker/Docker-Machine/</url>
    <content><![CDATA[<p>Docker Machine is a tool for provisioning and managing your Dockerized hosts (hosts with Docker Engine on them). </p>
<span id="more"></span>

<p>Docker Machine is used to create Docker hosts on your local Mac or Windows box, on your company network, in your data center, or on cloud providers like AWS</p>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>Install in Linux</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ base=https://github.com/docker/machine/releases/download/v0.16.0 &amp;&amp;</span><br><span class="line">  curl -L $base/docker-machine-$(uname -s)-$(uname -m) &gt;/tmp/docker-machine &amp;&amp;</span><br><span class="line">  sudo install /tmp/docker-machine /usr/local/bin/docker-machine</span><br></pre></td></tr></table></figure>


<p>To check installation</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-machine version</span><br></pre></td></tr></table></figure>

<h1 id="Create-a-machine"><a href="#Create-a-machine" class="headerlink" title="Create a machine"></a>Create a machine</h1><p>Create a machine. <code>-d/--driver</code> flag is required to indicate the provider(VirtualBox, DigitalOcean, AWS, etc.)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-machine create --driver virtualbox mydockervm</span><br></pre></td></tr></table></figure>
<p>Note: the hostname is ‘mydockervm’.</p>
<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">Creating machine...</span><br><span class="line">(mydockervm) Copying /home/xing/.docker/machine/cache/boot2docker.iso to /home/xing/.docker/machine/machines/mydockervm/boot2docker.iso...</span><br><span class="line">(mydockervm) Creating VirtualBox VM...</span><br><span class="line">(mydockervm) Creating SSH key...</span><br><span class="line">(mydockervm) Starting the VM...</span><br><span class="line">(mydockervm) Check network to re-create if needed...</span><br><span class="line">(mydockervm) Waiting for an IP...</span><br><span class="line">Waiting for machine to be running, this may take a few minutes...</span><br><span class="line">Detecting operating system of created instance...</span><br><span class="line">Waiting for SSH to be available...</span><br><span class="line">Detecting the provisioner...</span><br><span class="line">Provisioning with boot2docker...</span><br><span class="line">Copying certs to the local machine directory...</span><br><span class="line">Copying certs to the remote machine...</span><br><span class="line">Setting Docker configuration on the remote daemon...</span><br><span class="line">Checking connection to Docker...</span><br><span class="line">Docker is up and running!</span><br><span class="line">To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env mydockervm</span><br></pre></td></tr></table></figure>

<h1 id="Inspect-Machine"><a href="#Inspect-Machine" class="headerlink" title="Inspect Machine"></a>Inspect Machine</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-machine inspect mydockervm</span><br></pre></td></tr></table></figure>

<h1 id="List-Machines"><a href="#List-Machines" class="headerlink" title="List Machines"></a>List Machines</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-machine ls</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME      ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER     ERRORS</span><br><span class="line">mydockervm   -        virtualbox   Running   tcp://192.168.99.100:2376           v18.09.1   </span><br></pre></td></tr></table></figure>

<h1 id="SSH-to-the-machine"><a href="#SSH-to-the-machine" class="headerlink" title="SSH to the machine"></a>SSH to the machine</h1><p>First use <code>docker-machine env</code> command to set the envir</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-machine env mydockervm</span><br></pre></td></tr></table></figure>

<p>Then ssh to the machine. use <code>exit</code> command to exit the docker-machine</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-machine ssh mydockervm</span><br></pre></td></tr></table></figure>

<h1 id="Stop-the-machine"><a href="#Stop-the-machine" class="headerlink" title="Stop the machine"></a>Stop the machine</h1><p>This will powerdown the machine</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-machine stop mydockervm</span><br></pre></td></tr></table></figure>

<h1 id="Remove-the-machine"><a href="#Remove-the-machine" class="headerlink" title="Remove the machine"></a>Remove the machine</h1><p>&#96;&#96;&#96;<br>docker-machine rm mydockervm</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.docker.com/machine/overview/">Docker machine overview</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Image</title>
    <url>/Docker/Docker-Image/</url>
    <content><![CDATA[<p>An Docker image is basically a big tarball containing a filesystem. </p>
<span id="more"></span>


<h1 id="Docker-Image-Explained"><a href="#Docker-Image-Explained" class="headerlink" title="Docker Image Explained"></a>Docker Image Explained</h1><p>Docker image is composed of many <strong>layers</strong>. Each layer contains files and folders. Docker uses a union filesystem to create a virtual filesystem out of the layers. All layers in a Docker image are immutable.</p>
<p>When the container is created from an Image. Docker adds a writable layer on top of the immutable layers.</p>
<p><strong>Tag</strong><br><br>Each image has a <strong>tag</strong>. A <strong>tag</strong> is used to version image.</p>
<h1 id="Image-Operations"><a href="#Image-Operations" class="headerlink" title="Image Operations"></a>Image Operations</h1><h2 id="Search-Image"><a href="#Search-Image" class="headerlink" title="Search Image"></a>Search Image</h2><p>Search the Docker Hub for images</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search image_name</span><br></pre></td></tr></table></figure>

<p>Example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search busybox</span><br></pre></td></tr></table></figure>

<h2 id="Pull-Image"><a href="#Pull-Image" class="headerlink" title="Pull Image"></a>Pull Image</h2><p>By default, docker pull pulls images from Docker Hub. </p>
<p>If no tag is provided, Docker Engine uses the :latest tag as a default.</p>
<p>Syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull image_name</span><br></pre></td></tr></table></figure>

<p>Example to pull the latest alpine image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull alpine</span><br></pre></td></tr></table></figure>

<p>Example to pull MySQL image version 5.7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>

<p>Example to pull from a private registry hosted at <a href="https://localhost:5000/">https://localhost:5000</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull localhost:5000/test/test-image</span><br></pre></td></tr></table></figure>

<h2 id="List-Image"><a href="#List-Image" class="headerlink" title="List Image"></a>List Image</h2><p>docker image command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>


<p><code>docker images</code> can take an optional [REPOSITORY[:TAG]] argument. You can set REPOSITORY but no TAG or REPOSITORY only</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images maven</span><br><span class="line">REPOSITORY          TAG                  IMAGE ID            CREATED             SIZE</span><br><span class="line">maven               3.6.3-jdk-11-slim    481506cc2cd1        2 weeks ago         419MB</span><br><span class="line">maven               3.5-jdk-8-alpine     fb4bb0d89941        18 months ago       119MB</span><br><span class="line">maven               3.5.3-jdk-8-alpine   562eb2188339        22 months ago       119MB</span><br></pre></td></tr></table></figure>

<p>You can use filterring flag( -f or –filter) to list with filter</p>
<p>To list dangling images</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker images --filter &quot;dangling=true&quot;</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              8abc22fbb042        4 weeks ago         0 B</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              48e5f45168b9        4 weeks ago         2.489 MB</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              bf747efa0e2f        4 weeks ago         0 B</span><br></pre></td></tr></table></figure>

<p>To list images before given image id(ab4287b7a939)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker images -f &quot;before=ab4287b7a939&quot;</span><br><span class="line">REPOSITORY          TAG                  IMAGE ID            CREATED             SIZE</span><br><span class="line">mongo               latest               f7adfc4dbcf5        8 months ago        413MB</span><br><span class="line">openjdk             8-jre-alpine         f7a292bbb70c        11 months ago       84.9MB</span><br><span class="line">hello-world         latest               fce289e99eb9        15 months ago       1.84kB</span><br></pre></td></tr></table></figure>

<p>docker images command can follow option <code>-q</code> to show only the numeric IDs. This is useful when it comes to removing image.</p>
<p>Example to use docker image in conjunction with <code>docker rmi</code> to remove images. see Example to remove dangling images:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -f &quot;dangling=true&quot; -q)</span><br></pre></td></tr></table></figure>

<p>Reference</p>
<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/images/">docker image command reference</a></li>
</ul>
<h2 id="Build-Image-from-Dockerfile"><a href="#Build-Image-from-Dockerfile" class="headerlink" title="Build Image from Dockerfile"></a>Build Image from Dockerfile</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t image_name directory_path</span><br></pre></td></tr></table></figure>


<h2 id="Remove-Image"><a href="#Remove-Image" class="headerlink" title="Remove Image"></a>Remove Image</h2><p>To remove an image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi image_name/image_id</span><br></pre></td></tr></table></figure>

<p>To remove dangling images</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -f &quot;dangling=true&quot; -q)</span><br></pre></td></tr></table></figure>

<p>This also removes all dangling images</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure>

<h2 id="Save-and-load"><a href="#Save-and-load" class="headerlink" title="Save and load"></a>Save and load</h2><p>Example to save an image to a tarball</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image save -o /tmp/testimage.tar testimage:v1</span><br></pre></td></tr></table></figure>

<p>Example to load an image from a tarball</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image load -i /tmp/testimage.tar</span><br></pre></td></tr></table></figure>


<h1 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h1><p>A <code>Docker registry</code> stores many Docker Repositories. A <code>Docker Repository</code> contains many versions of the same Docker image. </p>
<p>Docker Trusted Registry(DTR) is the enterprise-level registry from Docker.</p>
<p>When you use the <code>docker pull</code> or <code>docker run</code> commands, the required images are pulled from your configured registry. When you use the <code>docker push</code> command, your image is pushed to your configured registry.</p>
<p>Registry is also a Docker image you can run.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --name registry registry</span><br></pre></td></tr></table></figure>

<h2 id="Push-Image"><a href="#Push-Image" class="headerlink" title="Push Image"></a>Push Image</h2><p>Example to push image to docker hub</p>
<p>First tag an image. A tag is used to version images.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image tag 196d12cf6ab1 username/image:v1</span><br></pre></td></tr></table></figure>

<p>Next, Need to login to the account. Docker Hub in this case</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login -u username</span><br></pre></td></tr></table></figure>

<p>Push image to Docker Hub</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image push username/image:v1</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/docker/">Docker Commands</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Swarm</title>
    <url>/Docker/Docker-Swarm/</url>
    <content><![CDATA[<p>Docker Swarm provides clustering functionality for Docker Containers, which turns a group of Docker engines into a single virtual Docker engine.</p>
<span id="more"></span>
<p>Docker Swarm is an open-source container orchestration platform. It is the native orchestration tool by Docker. There are other orchesteration tools like Kubernetes from Google and Mesos from Apache.</p>
<p>A swarm consists of multiple Docker hosts which run in swarm mode and act as managers and workers. A given Docker host can be a manager, a worker, or perform both roles.</p>
<p>A node is an instance of the Docker engine participating in the swarm. </p>
<p>The following topics follows <a href="https://docs.docker.com/engine/swarm/swarm-tutorial/">this tutorial</a> </p>
<h1 id="Create-a-Swarm"><a href="#Create-a-Swarm" class="headerlink" title="Create a Swarm"></a>Create a Swarm</h1><p>create a swarm. Current node will become a manager</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker swarm init --advertise-addr 192.168.99.100</span><br><span class="line">Swarm initialized: current node (dxn1zf6l61qsb1josjja83ngz) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join \</span><br><span class="line">    --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \</span><br><span class="line">    192.168.99.100:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run &#x27;docker swarm join-token manager&#x27; and follow the instructions.</span><br></pre></td></tr></table></figure>

<p>use <code>docker node ls</code> to view information about the nodes</p>
<h1 id="Add-Node-to-Swarm"><a href="#Add-Node-to-Swarm" class="headerlink" title="Add Node to Swarm"></a>Add Node to Swarm</h1><p>Workers can join a swarm using <code>docker swarm join</code> command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker swarm join \</span><br><span class="line">  --token  SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \</span><br><span class="line">  192.168.99.100:2377</span><br><span class="line"></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>


<h1 id="Leave-a-Swarm"><a href="#Leave-a-Swarm" class="headerlink" title="Leave a Swarm"></a>Leave a Swarm</h1><p>Workers can leave a swarm by executing command <code>docker swarm leave</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker swarm leave </span><br></pre></td></tr></table></figure>

<h1 id="Deploy-a-Service-to-the-Swarm"><a href="#Deploy-a-Service-to-the-Swarm" class="headerlink" title="Deploy a Service to the Swarm"></a>Deploy a Service to the Swarm</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker service create --replicas 1 --name helloworld alpine ping docker.com</span><br><span class="line"></span><br><span class="line">9uk4639qpg7npwf3fn2aasksr</span><br></pre></td></tr></table></figure>

<p>use <code>docker service ls</code> to see list of running services</p>
<h1 id="Scale-the-Service"><a href="#Scale-the-Service" class="headerlink" title="Scale the Service"></a>Scale the Service</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker service scale helloworld=5</span><br><span class="line"></span><br><span class="line">helloworld scaled to 5</span><br></pre></td></tr></table></figure>

<h1 id="Remove-the-Service"><a href="#Remove-the-Service" class="headerlink" title="Remove the Service"></a>Remove the Service</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker service rm helloworld</span><br><span class="line"></span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure>




<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.docker.com/engine/swarm/key-concepts/">Swarm key concepts</a></li>
<li><a href="https://docs.docker.com/engine/swarm/swarm-tutorial/">Docker Swarm Official Tutorial</a></li>
<li><a href="https://en.wikipedia.org/wiki/Docker_(software)">Docker wiki</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Networking</title>
    <url>/Docker/Docker-Networking/</url>
    <content><![CDATA[<p>Docker Networking</p>
<span id="more"></span>

<p>Network Drivers Types</p>
<ul>
<li><strong>bridge</strong> - this is the default and most used network driver.</li>
<li><strong>host</strong> - remove network isolation between host and container, use host’s networking directly. Host mode networking can be useful to optimize performance. </li>
<li><strong>overlay</strong> - Overlay networks connect multiple Docker daemons together and enable swarm services to communicate with each other. </li>
<li><strong>none</strong> - disable all networking. Container can’t connect to network. Not used often.</li>
</ul>
<p>When a container is connected to a network, it can communicate with other containers in the same network.</p>
<h1 id="List-Networks"><a href="#List-Networks" class="headerlink" title="List Networks"></a>List Networks</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure>

<p>default output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NETWORK ID          NAME                    DRIVER              SCOPE</span><br><span class="line">cad232899398        bridge                  bridge              local</span><br><span class="line">00cc8b46ebad        host                    host                local</span><br><span class="line">ac75839ac3dd        none                    null                local</span><br></pre></td></tr></table></figure>


<h1 id="Create-a-Network"><a href="#Create-a-Network" class="headerlink" title="Create a Network"></a>Create a Network</h1><p>use <code>docker network create</code> to create network. use <code>-d</code> or <code>--driver</code> option to set the driver type</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create -d bridge my-bridge</span><br></pre></td></tr></table></figure>

<p>You can specify the network’s subnet and gateway. The prefix length is 16 by default, here we can specify a subnet with prefix length of24.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create -d bridge --subnet 172.66.66.0/24 --gateway 172.66.66.1  my-bridge</span><br></pre></td></tr></table></figure>

<p>run <code>ifconfig</code> on the host machine, you will see a new network interface added.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line">br-0a428d94b9d5: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.66.66.1  netmask 255.255.255.0  broadcast 172.66.66.255</span><br><span class="line">        ether 02:42:e6:8c:27:40  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>

<h1 id="Inspect-a-Network"><a href="#Inspect-a-Network" class="headerlink" title="Inspect a Network"></a>Inspect a Network</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network inspect my-bridge</span><br></pre></td></tr></table></figure>
<p>This will show the network information such as Subnet and Gateway information. </p>
<p>It will also contain the containers connected to the network and their IP addresses.</p>
<p>Sample output:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ docker network inspect my-bridge</span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-bridge&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0a428d94b9d528eaf3c52521158e399ec17e7651e98db1eed7570295271bf7db&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-09-14T04:13:40.981076739-04:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bridge&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;EnableIPv6&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;IPAM&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Config&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;Subnet&quot;</span><span class="punctuation">:</span> <span class="string">&quot;172.66.66.0/24&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;Gateway&quot;</span><span class="punctuation">:</span> <span class="string">&quot;172.66.66.1&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Internal&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Attachable&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Ingress&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ConfigFrom&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ConfigOnly&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Containers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ac3a42c369ee00afffb5170a1bae619cbaa3ca45b0bd630768e6199c322d123b&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-alpine&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;EndpointID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;568a17e9c97ef707eec0f37614a630465bdb0634114639ab4abfb9acd40455b8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;MacAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;02:42:ac:42:42:02&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;IPv4Address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;172.66.66.2/24&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;IPv6Address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h1 id="Remove-a-Network"><a href="#Remove-a-Network" class="headerlink" title="Remove a Network"></a>Remove a Network</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network rm my-bridge</span><br></pre></td></tr></table></figure>

<h1 id="Running-a-container-in-a-Network"><a href="#Running-a-container-in-a-Network" class="headerlink" title="Running a container in a Network"></a>Running a container in a Network</h1><p>use <code>--net=&lt;network&gt;</code> or <code>--network=&lt;network&gt;</code> option to specify the network. <code>&lt;network&gt;</code> is the name of the network to be used</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --rm --network bridge --name my-alpine alpine</span><br></pre></td></tr></table></figure>

<p>Disconnect from a network</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network disconnect bridget my-alpine</span><br></pre></td></tr></table></figure>

<p>Connect to my-bridge network </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network connect my-bridge my-alpine</span><br></pre></td></tr></table></figure>

<p>The above command will automatically assign an IP address to the container. You can connect to a network with a specified IP address.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network connect --ip 172.66.66.33 my-bridge  my-alpine</span><br></pre></td></tr></table></figure>

<p>Inspect the container’s network configuration.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec my-alpine ifconfig</span><br></pre></td></tr></table></figure>

<h1 id="Example-Run-Containers-on-the-Same-Network"><a href="#Example-Run-Containers-on-the-Same-Network" class="headerlink" title="Example: Run Containers on the Same Network"></a>Example: Run Containers on the Same Network</h1><p>Here is an example bash script to run both mysql and phpmyadmin container on the same network</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Create network</span></span><br><span class="line">docker network create sample-network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create mysql container</span></span><br><span class="line">docker run  -d --name=mysql \</span><br><span class="line">--network=sample-network \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=password \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">mysql:8</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create phpmyadmin container</span></span><br><span class="line">docker run -d --name phpmyadmin  \</span><br><span class="line">--network=sample-network \</span><br><span class="line">-e PMA_HOSTS=mysql-dev \</span><br><span class="line">-e PMA_PORT=3306 \</span><br><span class="line">-e PMA_USER=root \</span><br><span class="line">-e PMA_PASSWORD=password \</span><br><span class="line">-p 7000:80 \</span><br><span class="line">phpmyadmin/phpmyadmin</span><br></pre></td></tr></table></figure>
<p>We first create a bridge network called sample-network. Then create mysql and phpmyadmin container that both connect to sample-network.<br>You can now open phpmyadmin at <a href="http://localhost:7000/">http://localhost:7000/</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.docker.com/network/">Networking overview</a></li>
<li><a href="https://docs.docker.com/engine/reference/commandline/network/">docker network commands</a></li>
<li><a href="https://docs.docker.com/network/bridge/">bridge network</a></li>
<li><a href="https://docs.docker.com/network/host/">host network</a></li>
<li><a href="https://docs.docker.com/network/none/">none network</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Volume</title>
    <url>/Docker/Docker-Volume/</url>
    <content><![CDATA[<p>Docker Volume is the perfered way to persist data.</p>
<span id="more"></span>
<p>There are three types of mount</p>
<ul>
<li><strong>volume</strong> - volume created and managed by Docker</li>
<li><strong>bind mount</strong> - share file or directory with host</li>
<li><strong>tmpfs mount</strong> - only for Docker on Linux</li>
</ul>
<h1 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h1><p>When a container is stopped, the data in the container layer is lost forever. Docker uses Volume to persist data so that applications like database, nosql database can keep their data.</p>
<p>All Docker volumes are stored in &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F; in the host filesystem. Docker Volume is stored as normal directories and files on the host system.</p>
<p>You can share volume between containers, just mount the volume to different container.</p>
<h2 id="Create-Volume"><a href="#Create-Volume" class="headerlink" title="Create Volume"></a>Create Volume</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create a  volume, new directory is created in /var/lib/docker/volumes/</span></span><br><span class="line">docker volume create myVol</span><br></pre></td></tr></table></figure>

<p>To inspect the volume</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume inspect myVol</span><br></pre></td></tr></table></figure>

<h2 id="List-Volumes"><a href="#List-Volumes" class="headerlink" title="List Volumes"></a>List Volumes</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<h2 id="Mount-a-volume"><a href="#Mount-a-volume" class="headerlink" title="Mount a volume"></a>Mount a volume</h2><p>We can mount a volume to a container using <code>-v</code> option of <code>docker run</code> command.</p>
<p>Format is <code>-v volume-name:container-path</code></p>
<p>Example to mount a volume</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm --name volumetest -it -v myVol:/data alpine /bin/sh</span><br></pre></td></tr></table></figure>

<p>Changes made to the volume in the running container are persisted</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /data</span><br><span class="line">echo &quot;foo&quot; &gt; file1</span><br></pre></td></tr></table></figure>

<p>You can verify the changes are made by printing the file in the myVol volume</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/lib/docker/volumes/myVol/_data/file1</span><br></pre></td></tr></table></figure>

<h2 id="Remove-Volumes"><a href="#Remove-Volumes" class="headerlink" title="Remove Volumes"></a>Remove Volumes</h2><p>remvoe a volume</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume rm myVol</span><br></pre></td></tr></table></figure>

<p>remove volumes not being used</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure>


<h1 id="Bind-Mount"><a href="#Bind-Mount" class="headerlink" title="Bind Mount"></a>Bind Mount</h1><p><strong>bind mount</strong> allows you to mount a host file or directory to a running container.</p>
<p>Format is <code>-v host-path:container-path</code></p>
<p>Example to bind myData directory to a running container’s &#x2F;data directory</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm --name mounttest -it -v $(pwd)/myData:/data alpine /bin/sh</span><br></pre></td></tr></table></figure>

<p>Example. mount a site directory to a running nginx container. Nginx container will serve the site at host port 8000</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name myNginx -v $(pwd)/site:/usr/share/nginx/html -p 8000:80 -d nginx:alpine</span><br></pre></td></tr></table></figure>


<h1 id="Define-volume-in-Dockerfile"><a href="#Define-volume-in-Dockerfile" class="headerlink" title="Define volume in Dockerfile"></a>Define volume in Dockerfile</h1><p>If an application wants to persist data, the application must define the absolute path(s) in the container to be used as volume. This allows the container and host to share volumes. </p>
<p>Example to use <code>VOLUME</code> instruction to define a mount point &#x2F;data&#x2F;db in the container’s filesystem.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VOLUME [&quot;/data/db&quot;]</span><br></pre></td></tr></table></figure>

<p>Note that if you don’t use <code>-v</code> option to provide a volume or bind mount, Docker automatically create a volume.</p>
<p>You can check the mount point of the container using <code>docker image inspect</code> command.</p>
<p>example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image inspect  --format=&#x27;&#123;&#123;json .ContainerConfig.Volumes&#125;&#125;&#x27; couchdb:latest | jq</span><br></pre></td></tr></table></figure>

<p>result</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;/opt/couchdb/data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.docker.com/storage/volumes/">Volume Reference</a></li>
<li><a href="https://docs.docker.com/storage/bind-mounts/">Bind mounts Reference</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile</title>
    <url>/Docker/Dockerfile/</url>
    <content><![CDATA[<p>Dockerfile is a text file that contains instructions on how to build a custom image.</p>
<span id="more"></span>

<p>A very simple Dockerfile for Springboot app</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre-alpine</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> /target/myApp.jar myApp.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;myApp.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>A Dockerfile for Python app. see <a href="https://docs.docker.com/get-started/part2/">Get Started, Part 2: Containers</a></p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use an official Python runtime as a parent image</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">2.7</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the working directory to /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy the current directory contents into the container at /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install any needed packages specified in requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --trusted-host pypi.python.org -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make port 80 available to the world outside this container</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define environment variable</span></span><br><span class="line"><span class="keyword">ENV</span> NAME World</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run app.py when the container launches</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h1 id="Building-Image-using-Dockerfile"><a href="#Building-Image-using-Dockerfile" class="headerlink" title="Building Image using Dockerfile"></a>Building Image using Dockerfile</h1><p><code>docker build</code> command builds an image from a Dockerfile and context. Docker Image is consist of read-only layers. Each instruction in a Dockerfile creates one layer on top of the previous layer.</p>
<p>Syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t image_name directory_path</span><br></pre></td></tr></table></figure>

<p>The build’s <strong>context</strong> is the set of files at a specified location PATH or URL. The PATH is a directory on your local filesystem. The URL is a Git repository location.</p>
<p>The build is run by the <strong>Docker daemon</strong>, not by CLI. the <strong>context</strong>(except for the files and directory exclude by .dockerignore file) is send to the daemon.</p>
<p>Example to build testimage:v1 using .&#x2F;testapp as the context</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t testimage:v1 ./testapp</span><br></pre></td></tr></table></figure>

<p>Use <code>-f</code> option to specify Dockerfile location if Dockerfile is not at the top of the context</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -f testapp/dockerfiles/Dockerfile.debug -t testimage:v1 ./testapp</span><br></pre></td></tr></table></figure>




<h1 id="Dockerfile-Format"><a href="#Dockerfile-Format" class="headerlink" title="Dockerfile Format"></a>Dockerfile Format</h1><p>Comments starts with ‘#’</p>
<p>use backslash() as the escape character.</p>
<p>A Dockerfile usually start with a <code>form</code> instruction.</p>
<h1 id="Environment-Variable"><a href="#Environment-Variable" class="headerlink" title="Environment Variable"></a>Environment Variable</h1><p>You can get the value of an Environment variable with <code>$variable_name</code> or <code>$&#123;variable_name&#125;</code></p>
<p>You can escape string starts with <code>$</code> by adding a <code>\</code> before the <code>$</code>.</p>
<p>Environment variables are supported by the following list of instructions:</p>
<ul>
<li>ADD</li>
<li>COPY</li>
<li>ENV</li>
<li>EXPOSE</li>
<li>FROM</li>
<li>LABEL</li>
<li>STOPSIGNAL</li>
<li>USER</li>
<li>VOLUME</li>
<li>WORKDIR</li>
</ul>
<h1 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h1><p>Syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM &lt;image&gt;[:&lt;tag&gt;]</span><br></pre></td></tr></table></figure>
<p>The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions. </p>
<p>example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM httpd:2.4</span><br><span class="line">FROM centos:latest</span><br><span class="line">FROM openjdk:8-jre-alpine</span><br></pre></td></tr></table></figure>


<h1 id="COPY-amp-ADD"><a href="#COPY-amp-ADD" class="headerlink" title="COPY &amp; ADD"></a>COPY &amp; ADD</h1><p>The <code>COPY</code> and <code>ADD</code> instruction copies files and folders from host to the image we’re building. <code>ADD</code> is more powerful, it can unpack tar archive and download from URL and copy to the building image.</p>
<p>example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPY index.html /var/www/html/</span><br><span class="line">COPY *.html /var/www/html/</span><br></pre></td></tr></table></figure>

<p>Best practice is to use <code>COPY</code> when copying local files to Docker image because it is more explicit. Use <code>ADD</code> only for tar files and download from URLs.</p>
<h1 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h1><p>sets the working directory for any <code>RUN</code>, <code>CMD</code>, <code>ENTRYPOINT</code>, <code>COPY</code> and <code>ADD</code> instructions that follow it in the Dockerfile.<br>The <code>WORKDIR</code> instruction can be used multiple times in a Dockerfile.</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /path/to/workdir</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /path/to/workdir</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">pwd</span>  <span class="comment"># will print /path/to/workdir</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Do not use <code>RUN cd /path/to/workdir</code>. It has no effect on the image filesystem</p>
<h1 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h1><p>Commonly used instruction. The <code>RUN</code> instruction will execute any commands in a new layer on top of the current image and commit the results. <code>RUN</code> instruction is often used to install software packages.</p>
<p>You can have many <code>RUN</code> instructions in a Dockerfile.</p>
<p>Syntax</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &lt;<span class="built_in">command</span>&gt;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RUN apt-get update \ </span><br><span class="line"> &amp;&amp; apt-get install -y wget</span><br></pre></td></tr></table></figure>

<h1 id="CMD-amp-ENTRYPOINT"><a href="#CMD-amp-ENTRYPOINT" class="headerlink" title="CMD &amp; ENTRYPOINT"></a>CMD &amp; ENTRYPOINT</h1><p>Both <code>CMD</code> and <code>ENTRYPOINT</code> can be used to start a process. They are very similar. Both <code>CMD</code> and <code>ENTRYPOINT</code> has two forms, shell form and exec form.</p>
<p>Two forms of ENTRYPOINT</p>
<ul>
<li>ENTRYPOINT command param1 param2 (shell form) </li>
<li>ENTRYPOINT [“executable”, “param1”, “param2”] (exec form, preferred)</li>
</ul>
<p>Shell format example</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello Docker&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>exec form example</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/bin/echo&quot;</span>, <span class="string">&quot;Hello Docker&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p><code>CMD</code> provide defaults for an executing container. command line arguments will override <code>CMD</code> instruction.</p>
<p>Three forms of CMD</p>
<ul>
<li>CMD command param1 param2 (shell form)</li>
<li>CMD [“executable”,”param1”,”param2”] (exec form, this is the preferred form)</li>
<li>CMD [“param1”,”param2”] (as default parameters to ENTRYPOINT, ENTRYPOINT must use exec form in this case)</li>
</ul>
<p>Shell form example</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello Docker&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>exec form example</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/echo&quot;</span>, <span class="string">&quot;Hello Docker&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>CMD and ENTRYPOINT can interact. When both instruction are presented,<br>CMD defines default arguments for an ENTRYPOINT instruction.</p>
<p>Example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;ls&quot; ]</span><br><span class="line">CMD [ &quot;-l&quot;, &quot;/usr&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>CMD vs ENTRYPOINT</strong></p>
<ul>
<li>CMD sets <strong>default</strong> command. This command can be <strong>easily overriden</strong> from commandline</li>
<li>ENTRYPOINT is often used for a long running process. parameters passed to <code>docker run</code> will not override ENTRYPOINT instruction parameters</li>
<li>CMD is used to define a default command to execute. parameters passed to <code>docker run</code> will override CMD.</li>
</ul>
<h1 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h1><p><code>VOLUME</code> defines a path in the container to the host. Host path can map to the container path using <code>-v</code> argument when runnning a cotnainer.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VOLUME [&quot;/data/db&quot;]</span><br></pre></td></tr></table></figure>

<p>Volume allows us to add source and data to the image without commiting them to the image.</p>
<h1 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h1><p>The <code>EXPOSE</code> instruction informs Docker that the container listens on the specified network ports at runtime. You can have multiple <code>EXPOSE</code> instruction in a Dockerfile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXPOSE 80</span><br><span class="line">EXPOSE 8080</span><br></pre></td></tr></table></figure>

<p>By default, EXPOSE assumes TCP. You can also specify UDP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXPOSE 80/udp</span><br></pre></td></tr></table></figure>


<h1 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h1><p>The <code>ARG</code> instruction defines a variable that users can pass at build-time to the builder with the <code>docker build</code> command. use <code>--build-arg var=val</code> option to pass these variables.</p>
<p>ARG instruction can have a default value.</p>
<p>An ARG instruction goes out of scope at the end of the build stage where it was defined. </p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"><span class="keyword">ARG</span> buildno=<span class="number">0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> buildno is <span class="variable">$buildno</span></span></span><br></pre></td></tr></table></figure>

<p>to pass 123456 as argument </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build --build-arg buildno=123456 .</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/3 : FROM busybox</span><br><span class="line"> ---&gt; 3a093384ac30</span><br><span class="line">Step 2/3 : ARG buildno=0</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 92ad6cab8c44</span><br><span class="line">Step 3/3 : RUN echo buildno is $buildno</span><br><span class="line"> ---&gt; Running in b290e1c97eec</span><br><span class="line">buildno is 123456</span><br><span class="line">Removing intermediate container b290e1c97eec</span><br><span class="line"> ---&gt; 815f540e2db8</span><br><span class="line">Successfully built 815f540e2db8</span><br></pre></td></tr></table></figure>


<h1 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h1><p>The ENV instruction sets the environment variable. see <a href="https://docs.docker.com/engine/reference/builder/#env">Reference</a></p>
<p>syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure>

<p>example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENV foo /bar/baz</span><br><span class="line">ENV foo=/bar/baz</span><br></pre></td></tr></table></figure>

<p>You can also pass environment variable to container using -e flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -dit -e ENV_VAR_1=&#x27;foo&#x27; -e ENV_VAR_2=&#x27;bar&#x27; -p 80:80 --name test nginx:alpine</span><br></pre></td></tr></table></figure>

<p><strong>ENV vs ARG</strong><br><br>Environment variable are available during the image build stage and when a container is launched from the image. ARG variables is ONLY available during the image build stage.</p>
<h1 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h1><p>label is a key-value pair.<br>syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure>

<p>example</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> description=<span class="string">&quot;Some app description...&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;alicebob@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>When you use <code>docker inspect</code> command to get the low level info for a container, you will get the labels for the containers</p>
<h1 id="STOPSIGNAL"><a href="#STOPSIGNAL" class="headerlink" title="STOPSIGNAL"></a>STOPSIGNAL</h1><p>sets the signal to send to stop the container using <code>docker stop</code> command. The default signal is <code>SIGTERM</code>. If the main process doesn’t exit after a period of time, <code>SIGKILL</code> will be sent.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STOPSIGNAL SIGKILL</span><br></pre></td></tr></table></figure>

<h1 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h1><p>syntax</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> [INSTRUCTION]</span><br></pre></td></tr></table></figure>

<p>ONBUILD adds a <em>trigger</em> instruction to be executed when the image is used as the base for another build.</p>
<p>This is useful if you are building an image which will be used as a base to build other images</p>
<h1 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a>HEALTHCHECK</h1><p>Tells Docker how to test a container to see if it is working.</p>
<p>syntax</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> [OPTIONS] CMD <span class="built_in">command</span></span></span><br></pre></td></tr></table></figure>

<p>example</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=5m --<span class="built_in">timeout</span>=3s \</span></span><br><span class="line"><span class="language-bash">  CMD curl -f http://localhost/ || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure>

<h1 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL"></a>SHELL</h1><p>the SHELL instruction overrides the default shell. The default shell on Linux is <code>[&quot;/bin/sh&quot;, &quot;-c&quot;]</code>. For windows, it is <code>[&quot;cmd&quot;, &quot;/S&quot;, &quot;/C&quot;]</code></p>
<p>Example</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Executed as powershell -command Write-Host hello</span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> [<span class="string">&quot;powershell&quot;</span>, <span class="string">&quot;-command&quot;</span>]</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> Write-Host hello</span></span><br></pre></td></tr></table></figure>

<h1 id="Best-practices"><a href="#Best-practices" class="headerlink" title="Best practices"></a>Best practices</h1><p>use <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">this document</a> for Dockerfile best practice</p>
<ul>
<li>use .dockerignore file to filter out the files and directories not being used</li>
<li>Don’t install unnecessary package</li>
<li>Minimize layers used. Multi-stage build can be used to achieve that.</li>
<li>Leverage build cache. Cache can significantly reduce build time. If you don’t want to use cache, set parameter <code>--no-cache-true</code></li>
</ul>
<p>see <a href="https://blog.docker.com/2019/07/intro-guide-to-dockerfile-best-practices/">this blog post</a> for some useful Best practices </p>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker&ssr=false">Docker Extension</a> for VS Code provides syntax highlighting, commands, and linting for Dockerfile.</p>
<p>To Install, just search for <em>Docker</em> in VS Code extension tab. Then install the Docker extension from Microsoft.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Display Property</title>
    <url>/Frontend/CSS-Display-Property/</url>
    <content><![CDATA[<p>The CSS <code>display</code> property.</p>
<span id="more"></span>

<h1 id="CSS-display"><a href="#CSS-display" class="headerlink" title="CSS display"></a>CSS display</h1><p>The CSS <code>display</code> property is an important tool for controlling the layout behavior of an element. It offers several common values that can greatly impact the visual presentation of a webpage. </p>
<p>Let’s take a closer look at some of the common values:</p>
<h1 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h1><p>The <code>display: inline;</code> property value makes the element behave like an inline element. It allows other elements to be displayed on the same line. This is especially useful for creating text-like elements such as links or spans.</p>
<p>For example, consider the following HTML code:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: lightblue;&quot;</span>&gt;</span>inline element<span class="tag">&lt;/<span class="name">span</span>&gt;</span> of a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>In this example, the <code>&lt;span&gt;</code> element will be displayed inline with other elements, such as text or other inline elements.</p>
<p>Any height and width CSS properties will have no effect on inline element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">&quot;color: lightblue; width: 20px; height: 30px;&quot;</span>&gt;</span>inline element<span class="tag">&lt;/<span class="name">i</span>&gt;</span> of a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>In this example, the width and height css property doesn’t change anything.</p>
<p>Some of the HTML elements with default <code>inline</code> display property are <code>span</code>, <code>a</code>, <code>i</code>, <code>bold</code>, <code>img</code>.</p>
<p>for <code>img</code>, you use attribute to set its width and height, not CSS property.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h1><p>The <code>display: block;</code> property value makes the element behave like a block-level element. It takes up the entire width of its container and starts on a new line. This can be handy for creating large sections or containers within a webpage.</p>
<p>For example, consider the following HTML code:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightgray; padding: 10px; width: 300px; height: 200px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a block-level element<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This element will take up the entire width of its container and start on a new line.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>In this example, the <code>&lt;div&gt;</code> element will be displayed as a block-level element, with its own separate line and full width within the container.</p>
<p>You can change a block element’s width and height using CSS properties</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightgray; padding: 10px; width: 300px; height: 200px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a block-level element<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This element will take up the entire width of its container and start on a new line.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Some of the HTML elements with default <code>block</code> display property are <code>div</code>, <code>p</code>, <code>h1</code>, <code>ul</code>, <code>header</code>, <code>nav</code>, <code>main</code> , <code>section</code>,  <code>aside</code>, <code>footer</code>. </p>
<h1 id="Inline-Block"><a href="#Inline-Block" class="headerlink" title="Inline-Block"></a>Inline-Block</h1><p>The <code>display: inline-block;</code> property value combines the characteristics of both <code>inline</code> and <code>block</code>. The element is displayed as an inline element, allowing other elements to be displayed on the same line. At the same time, it can have a width and height set, unlike traditional inline elements. This is useful for creating elements that need to flow with other elements on the same line but still have specific dimensions.</p>
<p>For example, consider the following HTML code:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightblue; width: 100px; height: 50px; display: inline-block;&quot;</span>&gt;</span></span><br><span class="line">  This is an inline-block element.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightgreen; width: 100px; height: 50px; display: inline-block;&quot;</span>&gt;</span></span><br><span class="line">  This is another inline-block element.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>In this example, the two <code>&lt;div&gt;</code> elements will be displayed in the same line, thanks to the <code>inline-block</code> display property. They can also have specific width and height values, allowing for more control over their dimensions.</p>
<p>Some HTML elements with default <code>inline-block</code> display property are <code>input</code> and <code>button</code>.</p>
<p>For instance, you can use the following code to create an input field and a button next to each other:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block; width: 200px; height: 30px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block; width: 100px; height: 30px;&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="none"><a href="#none" class="headerlink" title="none"></a>none</h1><p>The <code>display: none;</code> property value allows you to hide an element and remove it from the document flow. It is useful for conditionally showing or hiding elements based on events or user interactions. When an element is set to <code>display: none;</code>, it is not rendered on the page and does not take up space. It can be toggled using JavaScript or CSS.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line">  This is an example of the <span class="tag">&lt;<span class="name">code</span>&gt;</span>display: none;<span class="tag">&lt;/<span class="name">code</span>&gt;</span> property value.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h1><p>The <code>flex</code> value of the <code>display</code> property is a powerful tool for creating flexible layouts in CSS. It enables a flexible box layout for the element and its children, allowing for easy manipulation of the layout in one dimension, either horizontally or vertically.</p>
<p>With the <code>flex</code> value, you can create responsive designs and align elements within a container. It provides a flexible and dynamic way to distribute available space among child elements, making it easier to achieve desired layout behaviors.</p>
<p>To use the <code>flex</code> value, you need to apply it to a container element by setting its <code>display</code> property to <code>flex</code>. Once the container becomes a flex container, its child elements become flex items, and you can control their layout and positioning using additional flex-related properties.</p>
<p>Some of the commonly used flex-related properties include:</p>
<ul>
<li><code>flex-direction</code>: Specifies the direction of the flex container’s main axis.</li>
<li><code>justify-content</code>: Aligns flex items along the main axis.</li>
<li><code>align-items</code>: Aligns flex items along the cross axis.</li>
<li><code>flex-wrap</code>: Specifies whether flex items should wrap to multiple lines if there is not enough space.</li>
</ul>
<p>Here is an example of using the <code>flex</code> value to create a simple flex container:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: flex; background-color: #eee; justify-content: center; align-items: center; height: 200px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightblue; width: 100px; height: 100px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightgreen; width: 100px; height: 100px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightpink; width: 100px; height: 100px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>In this example, the outer <code>&lt;div&gt;</code> is set as a flex container using <code>display: flex;</code>. The <code>justify-content</code> property centers the flex items along the main axis (horizontally), and the <code>align-items</code> property centers them along the cross axis (vertically). The child <code>&lt;div&gt;</code> elements become flex items, and their dimensions can be controlled using CSS properties.</p>
<p>By using the <code>flex</code> value and the accompanying flex-related properties, you can create flexible and responsive layouts that adapt to different screen sizes and devices.</p>
<h1 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h1><p>The <code>grid</code> value of the <code>display</code> property is an incredibly powerful tool for creating grid layouts in CSS. It allows you to define a two-dimensional grid of columns and rows, and easily position and align elements within this grid.</p>
<p>With the <code>grid</code> value, you can create complex and flexible layouts, with precise control over the placement and sizing of elements. It is particularly useful for creating responsive designs, where elements can automatically rearrange themselves based on the available space.</p>
<p>To use the <code>grid</code> value, you need to apply it to a container element by setting its <code>display</code> property to <code>grid</code>. Once the container becomes a grid container, its child elements become grid items, and you can control their position and alignment using additional grid-related properties.</p>
<p>Some of the commonly used grid-related properties include:</p>
<ul>
<li><code>grid-template-columns</code>: Specifies the size and number of columns in the grid.</li>
<li><code>grid-template-rows</code>: Specifies the size and number of rows in the grid.</li>
<li><code>grid-gap</code>: Specifies the size of the gap between grid items.</li>
<li><code>grid-column</code>: Specifies the start and end positions of a grid item along the horizontal axis.</li>
<li><code>grid-row</code>: Specifies the start and end positions of a grid item along the vertical axis.</li>
<li><code>justify-items</code>: Aligns grid items along the horizontal axis.</li>
<li><code>align-items</code>: Aligns grid items along the vertical axis.</li>
</ul>
<p>Here is an example of using the <code>grid</code> value to create a simple grid layout:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: grid; grid-template-columns: 1fr 1fr 1fr; grid-gap: 10px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightblue;&quot;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightgreen;&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightpink;&quot;</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightgray;&quot;</span>&gt;</span>Item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: yellow;&quot;</span>&gt;</span>Item 6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>In this example, the outer <code>&lt;div&gt;</code> is set as a grid container using <code>display: grid;</code>. The <code>grid-template-columns</code> property specifies that the grid should have three columns of equal width (<code>1fr</code>), and the <code>grid-gap</code> property sets a gap of 10 pixels between grid items. The child <code>&lt;div&gt;</code> elements become grid items, and their position within the grid is determined by the order in which they appear in the HTML markup.</p>
<p>By using the <code>grid</code> value and the accompanying grid-related properties, you can create versatile and dynamic grid layouts that adapt to different content and screen sizes.</p>
<p>The <code>grid</code> value of the <code>display</code> property is widely supported in modern browsers, making it a powerful and reliable tool for creating complex layouts in CSS.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.w3schools.com/cssref/pr_class_display.php">CSS display Property</a></li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Centering Div using Flexbox</title>
    <url>/Frontend/Centering-Div-using-Flexbox/</url>
    <content><![CDATA[<p>There are generally two ways to center a div, margin and flexbox. Centering Content using flexbox is much more easier to implement. </p>
<span id="more"></span>

<h1 id="Center-a-div-Horizontally"><a href="#Center-a-div-Horizontally" class="headerlink" title="Center a div Horizontally"></a>Center a div Horizontally</h1><p>Suppose there are two divs: <code>container</code> and <code>child</code>. </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Traditionally, you can center a child div horizontally using <code>margin</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You will offen see it used in the wrapper div that contains all the rest of the HTML document.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1440px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To center a child div horizontally using Flexbox, you need to apply <code>display: flex </code> and  <code>justify-content:center</code> to the container div</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe src="https://codesandbox.io/embed/center-div-horizontally-ss8y3?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Center Div Horizontally"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
   
<h1 id="Center-a-Div-Vertically"><a href="#Center-a-Div-Vertically" class="headerlink" title="Center a Div Vertically"></a>Center a Div Vertically</h1><p>To center a div vertically, you only need to apply <code>align-items: center</code> the container div</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe src="https://codesandbox.io/embed/center-div-vertically-7vcmp?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Center Div Vertically"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
   
<h1 id="Center-a-div-Vertically-and-Horizontally"><a href="#Center-a-div-Vertically-and-Horizontally" class="headerlink" title="Center a div Vertically and Horizontally"></a>Center a div Vertically and Horizontally</h1><p>To center a div both vertically and horizontally, apply both <code>justify-content:center</code> and <code>align-items: center</code> the container div</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">justify-content</span>: center;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe src="https://codesandbox.io/embed/center-div-5ibb8?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Center Div"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<p>Reference</p>
<ul>
<li><a href="https://www.freecodecamp.org/news/how-to-center-anything-with-css-align-a-div-text-and-more/">How to Center Anything with CSS - Align a Div, Text, and More</a></li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Flexbox</title>
    <url>/Frontend/Flexbox/</url>
    <content><![CDATA[<p>Flexbox is a one-dimensional layout method for arranging items in rows or columns. Items flex (expand) to fill additional space or shrink to fit into smaller spaces. </p>
<span id="more"></span>


<h1 id="flex-model"><a href="#flex-model" class="headerlink" title="flex model"></a>flex model</h1><p><img src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flex_terms.png" alt="flex model"></p>
<p>The <strong>main axis</strong> is the axis running in the direction the flex items are laid out in </p>
<p>The <strong>cross axis</strong> is the axis running perpendicular to the direction the flex items are laid out in. </p>
<p>The parent element that has <code>display: flex</code> set is called the <strong>flex container</strong>.</p>
<p>The items inside the flex container is called the <strong>flex items</strong>.</p>
<p>The width or height of a flex container or flex item, whichever is in the main dimension, is that box’s <strong>main size</strong>.</p>
<p>The width or height of a flex container or flex item, whichever is in the cross dimension, is that box’s <strong>cross size</strong>. </p>
<h1 id="Use-flexbox-display"><a href="#Use-flexbox-display" class="headerlink" title="Use flexbox display"></a>Use flexbox display</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This cause box class element to be used as a <strong>flex container</strong>. Its child elements become <strong>flex items</strong>.</p>
<p>Flex container properties</p>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-content</li>
<li>align-items</li>
</ul>
<p>Flex item properties</p>
<ul>
<li>order</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>flex</li>
<li>align-self</li>
</ul>
<h1 id="Flex-container-properties"><a href="#Flex-container-properties" class="headerlink" title="Flex container properties"></a>Flex container properties</h1><h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction">flex-direction</a> specifies which direction the main axis runs. row is the default direction</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-direction-qs4500?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox direction"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>


<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap">flex-wrap</a> CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines.</p>
<ul>
<li>nowrap(default)</li>
<li>wrap</li>
<li>wrap-reverse</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-wrap-np68zb?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox wrap"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>



<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow">flex-flow</a> property is a shorthand for the following CSS properties:</p>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-flex-flow-z5jpsy?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox flex-flow"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>


<h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><p>The CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content">justify-content</a> property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.</p>
<p>Default value is <code>normal</code>. It behaves as <code>start</code> when applied to a flexbox.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-justify-content-fdtbys?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox justify-content"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><p>The CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items">align-items</a> property sets the align-self value on all direct children as a group.  In Flexbox, it controls the alignment of items on the Cross Axis. </p>
<p><code>align-items</code> is similar to <code>justify-content</code> but along cross-axis.</p>
<p>values are</p>
<ul>
<li>normal(default)</li>
<li>stretch</li>
<li>start</li>
<li>end</li>
<li>flex-start</li>
<li>flex-end</li>
<li>self-start</li>
<li>self-end</li>
<li>baseline</li>
<li>first baseline</li>
<li>last baseline</li>
<li>safe center</li>
<li>unsafe center</li>
</ul>
<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-align-items-mhqrvf?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox align-items"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>


<h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><p>This property only takes effect on <strong>multi-line flexible containers</strong>. It has no effect on items in a single line.</p>
<p>The CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-content">align-content</a> property sets the distribution of space between and around content items along a flexbox’s cross-axis or a grid’s block axis.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-align-content-mni945?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox align-content"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>



<h1 id="Flex-items-properties"><a href="#Flex-items-properties" class="headerlink" title="Flex items properties"></a>Flex items properties</h1><h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/order">order</a> CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending order value and then by their source code order.</p>
<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-order-4jhtgt?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox order"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow">flex-grow</a> CSS property sets the flex grow factor, which specifies how much of the flex container’s remaining space should be assigned to the flex item’s main size. Default is 0.</p>
<p>flex-grow is used alongside the other flex properties flex-shrink and flex-basis, and normally defined using the flex shorthand to ensure all values are set.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-flex-grow-mh22c1?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox flex-grow"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink">flex-shrink</a> CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to flex-shrink.</p>
<p>In use, flex-shrink is used alongside the other flex properties flex-grow and flex-basis, and normally defined using the flex shorthand.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-flex-shrink-d9nkki?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox flex-shrink"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis">flex-basis</a> CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with box-sizing.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-flex-basics-l6yblq?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox flex-basis"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex">flex</a> CSS shorthand property sets how a flex item will grow or shrink to fit the space available in its flex container. It is shorthand for <code>flex-grow</code>, <code>flex-shrink</code> 和 flex-basis.</p>
<p>default is <code>0 1 auto</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-flex-hdjh1u?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox flex"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<br>

<p>flex is very useful when you want an element to take the remaining of the space</p>
<iframe src="https://codesandbox.io/embed/flexbox-flex-1-3m688c?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox flex 1"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-self">align-self</a> CSS property overrides a grid or flex item’s align-items value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Demo</p>
<iframe src="https://codesandbox.io/embed/flexbox-align-self-hu39r2?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Flexbox align-self"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>


<p>It is useful when you don’t have control over the parent container’s align-items property. For example, to stretch the element to take all the length along the cross-axis, use <code>align-self:: &#39;stretch&#39;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">align-self: &#x27;stretch&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Centering-content-using-css-box"><a href="#Centering-content-using-css-box" class="headerlink" title="Centering content using css box"></a>Centering content using css box</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blueviolet;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<iframe src="https://codesandbox.io/embed/interesting-northcutt-lrmirq?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="interesting-northcutt-lrmirq"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul>
<li><a href="https://www.w3.org/TR/css-flexbox/#box-model">Flex Layout Box Model and Terminology</a></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Git</title>
    <url>/Git/Git/</url>
    <content><![CDATA[<p>Git Introduction</p>
<span id="more"></span>

<h1 id="Core-Concept"><a href="#Core-Concept" class="headerlink" title="Core Concept"></a>Core Concept</h1><p>The Three areas</p>
<ul>
<li><strong>Working Tree</strong> - files you are currently working on. It is a tree because it implies the entire directory structure. It is used to be called ‘working directory’ until git v2.9.</li>
<li><strong>Index</strong> - contains changes about what will go into the next commit. Technical name in Git is “index”. It is called “Staging Area” sometimes.</li>
<li><strong>Repository</strong>(.git folder) - where git stores the metadata and object database for the project.</li>
</ul>
<img src="local_operations.png" />
<small>Working directory, staging area, and Git directory. Image from [https://git-scm.com/book/en/v1/Getting-Started-Git-Basics](https://git-scm.com/book/en/v1/Getting-Started-Git-Basics)</small>


<p><strong>HEAD</strong> - This is a pointer normally points to a named branch(e.g. master). When we use a checkout command to checkout<br>a specific commit, HEAD is in Detached state.</p>
<p><strong>Tilde vs caret</strong><br></p>
<ul>
<li>HEAD^ - first parent of HEAD. same as HEAD^1.</li>
<li>HEAD^2 - second parent of HEAD.</li>
<li>HEAD^^ - first parent of the first parent of HEAD. Not the same as HEAD^2. Equivalent of HEAD~2.</li>
<li>HEAD~ - parent of HEAD</li>
<li>HEAD~2 - 2 levels up the hierarchy.</li>
<li>see <a href="https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git">Tilde vs caret</a></li>
</ul>
<br>

<h1 id="Basic-Commands"><a href="#Basic-Commands" class="headerlink" title="Basic Commands"></a>Basic Commands</h1><p>These are the most commonly used commands.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create a git repo</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clone existing repository into a new directory</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;repository_url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># check status</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># check short status</span></span><br><span class="line">git status -s</span><br><span class="line">git status --short</span><br><span class="line"></span><br><span class="line"><span class="comment"># stage file(s). changes in working tree are moved to the index for the next commit</span></span><br><span class="line">git add &lt;file&gt;</span><br><span class="line">git add *.java</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit changes in the index</span></span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># push current branch to remote</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># push current branch to remote and keeps track of the change from the remote branch. Note: You usually use this command in a new local branch.</span></span><br><span class="line">git push -u &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update the remote-tracking branches for the repository you cloned from, </span></span><br><span class="line"><span class="comment"># then merge one of them into your current branch</span></span><br><span class="line"><span class="comment"># If conflict exist, it will abort</span></span><br><span class="line"><span class="comment"># use `git stash` to save changes, or use `git reset --hard origin/master` to abort changes</span></span><br><span class="line"><span class="comment"># then continue with `git pull`</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<br>

<h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><p>The global configuration can be manually modified in ~&#x2F;.gitconfig</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&#x27;First Last&#x27;</span></span><br><span class="line">git config --global user.email <span class="string">&#x27;me@company.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># configure &#x27;push.default&#x27; to push only current branch to remote branch. This is prefered</span></span><br><span class="line">git config --global push.default simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure &#x27;push.default&#x27; to push all local branches to remote branches. Do not use!</span></span><br><span class="line"><span class="comment"># git config --global push.default matching</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set core editor</span></span><br><span class="line"><span class="comment"># For vim - git config --global core.editor &quot;vim&quot;</span></span><br><span class="line">git config --global core.editor <span class="string">&quot;code --wait&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set a diff tool</span></span><br><span class="line">git config --global diff.tool gvimdiff</span><br><span class="line"></span><br><span class="line"><span class="comment"># git push config</span></span><br><span class="line">git config --global --add push.autoSetupRemote <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>To view configuration</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># view settings</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># view settings and where they are coming from</span></span><br><span class="line">git config --list --show-origin</span><br></pre></td></tr></table></figure>

<h2 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h2><p>config alias s for status </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global alias.s status</span><br></pre></td></tr></table></figure>
<p>Now you can use <strong>git s</strong> to show status.</p>
<p>You can also add alias in ~&#x2F;.gitconfig file directly. Here an example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">    <span class="comment"># one-line log</span></span><br><span class="line">    l = <span class="built_in">log</span> --pretty=format:<span class="string">&quot;%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]&quot;</span> --decorate --<span class="built_in">date</span>=short</span><br><span class="line">    a = add</span><br><span class="line">    cm = commit -m</span><br><span class="line">    cam = commit -a -m</span><br><span class="line">    s = status</span><br><span class="line">    co = checkout</span><br><span class="line">    cob = checkout -b</span><br><span class="line">    p = push</span><br><span class="line">    pl = pull</span><br><span class="line">    <span class="built_in">pr</span> = pull --rebase</span><br></pre></td></tr></table></figure>

<p>You can also add alias to <code>~/.bashrc</code> or <code>~/.zshrc</code> to cut down keystrokes.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># one-line log</span></span><br><span class="line"><span class="built_in">alias</span> glo=<span class="string">&#x27;git log --pretty=format:&quot;%C(yellow)%h %ad%Cred%d %Creset%s%Cblue [%cn]&quot; --decorate --date=short&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Line-Ending-Conversions"><a href="#Line-Ending-Conversions" class="headerlink" title="Line Ending Conversions"></a>Line Ending Conversions</h2><p>There are 3 config options regarding how git handles line ending conversions. </p>
<ul>
<li>Checkout Windows-style, commit Unix-style line endings. Git converts LF to CRLF when checking out text files. Recommended for windows. (“core.autocrlf” is set to “true”)</li>
<li>Checkout as-is, commit Unix-style line endings. Recommended for Unix. (“core.autocrlf” is set to “input”)</li>
<li>Checkout as-is, commit as-is. Not recommended for cross-platform projects. (“core.autocrlf” is set to “false”)</li>
</ul>
<p>if “core.autocrlf” is set to “input”, a warning will be displayed when adding text files to index in Windows. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">warning: CRLF will be replaced by LF in foo.txt.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br></pre></td></tr></table></figure>

<p>Set “safecrlf” to be “false” to hide the warning message. So these two commands can go together.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf input</span><br><span class="line">git config --global core.safecrlf false</span><br></pre></td></tr></table></figure>

<br>

<h1 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h1><p><a href="https://git-scm.com/docs/git-add">git add</a> updates the index using the current content found in the working tree, to prepare the content staged for the next commit.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Stage all files (that are not listed in the .gitignore) in the entire repository</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># add a file to index</span></span><br><span class="line">git add file2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Interactively stage hunks of changes</span></span><br><span class="line">git add -p .</span><br><span class="line"></span><br><span class="line"><span class="comment"># Interactively stage hunks of changes for a file </span></span><br><span class="line">git add -p file2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>use <code>--patch</code> or <code>-p</code> option if you want to stage part of a file for commit. Git will ask you what you want to do with each hunk;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stage this hunk [y,n,q,a,d,e,?]? </span><br></pre></td></tr></table></figure>

<p>here are the options you can select<br>y - stage this hunk<br>n - do not stage this hunk<br>q - quit; do not stage this hunk or any of the remaining ones<br>a - stage this hunk and all later hunks in the file<br>d - do not stage this hunk or any of the later hunks in the file<br>g - select a hunk to go to<br>e - manually edit the current hunk<br>? - print help</p>
<h1 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h1><p>This command can be used to switch branch. Can also be used to revert file to a commit or to restore file.</p>
<p>Git 2.23 separates <code>git checkout</code> into two commands:</p>
<ul>
<li><code>git switch</code> to switch branches</li>
<li><code>git restore</code> to restore working tree files</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># switch branch</span></span><br><span class="line">git checkout &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch to local master branch</span></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a new branch and switch to it</span></span><br><span class="line">git checkout -b &lt;newbranch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># checkout a remote branch</span></span><br><span class="line">git checkout feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># if you have multiple remote, then</span></span><br><span class="line">git checkout -b feature origin/feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example to revert Makefile to two revisions back, </span></span><br><span class="line">git checkout master~2 Makefile   <span class="comment"># checkout a file out of a commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete hello.c by mistake, and then restore it back from index</span></span><br><span class="line"><span class="built_in">rm</span> -f hello.c</span><br><span class="line">git checkout hello.c  <span class="comment"># undo the delete by restoring hello.c</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;detached HEAD&#x27; state</span></span><br><span class="line"><span class="comment"># you enter detached head state by checking out a specific commit</span></span><br><span class="line"><span class="comment"># git checkout &lt;commit&gt;</span></span><br><span class="line"><span class="comment"># see git checkout --help for more info about detached HEAD</span></span><br><span class="line"><span class="comment"># see https://git-scm.com/docs/git-checkout#_detached_head for the visual</span></span><br><span class="line">git checkout c6c8007 <span class="comment"># or</span></span><br><span class="line">git checkout master^^</span><br></pre></td></tr></table></figure>

<br>

<h1 id="git-switch"><a href="#git-switch" class="headerlink" title="git switch"></a>git switch</h1><p><a href="https://git-scm.com/docs/git-switch">git switch</a> - Switch branches</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># switch to main branch</span></span><br><span class="line">git switch main</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch to a new branch &#x27;newfeature&#x27;</span></span><br><span class="line">git switch -c newfeature</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch to previous branch</span></span><br><span class="line">git switch -</span><br></pre></td></tr></table></figure>

<h1 id="git-restore"><a href="#git-restore" class="headerlink" title="git restore"></a>git restore</h1><p><a href="https://git-scm.com/docs/git-restore">git restore</a> - Restore working tree files or files in the index.</p>
<p>Restore location - by default, the restore location is the working tree. <code>--staged</code> will restore the index only. To restore both working tree and index, use <code>--staged --worktree</code>.</p>
<p>Source - if <code>--staged</code> is given, the contents are restored from HEAD, otherwise from the index. Use <code>--source</code> to restore from a different commit.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># restore all files in the current directory to match the version in the index.</span></span><br><span class="line">git restore .</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore a file to match the version in the index.</span></span><br><span class="line">git restore &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># To restore files in the index to match the version in HEAD</span></span><br><span class="line">git restore --staged &lt;file1&gt; &lt;file2&gt; ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># To restore all files in the index to match the version in HEAD</span></span><br><span class="line">git restore --staged .</span><br><span class="line"></span><br><span class="line"><span class="comment"># To restore both staged and workingtree.</span></span><br><span class="line">git restore --staged --worktree .</span><br><span class="line"></span><br><span class="line"><span class="comment"># to restore a file from master branch</span></span><br><span class="line">git restore --<span class="built_in">source</span> master &lt;file1&gt;  </span><br></pre></td></tr></table></figure>

<br>

<h1 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h1><p><a href="https://git-scm.com/docs/git-reset">git-reset</a> - Reset current HEAD to the specified state. The <code>git reset</code> command is a complex and versatile tool for undoing changes.</p>
<p>git reset is similar in behavior to git checkout. Where git checkout solely operates on the HEAD ref pointer, git reset will move the HEAD ref pointer and the current branch ref pointer.</p>
<p>Options:</p>
<ul>
<li><code>--hard</code> - resets the index and working tree. </li>
<li><code>--mixed</code> - resets the index. This is the default.</li>
<li><code>--soft</code> - doesn’t touch the idnex file or the working tree at all.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># back out all the changes since last commit, both working tree and the index.</span></span><br><span class="line"><span class="comment"># this command is DANGEROUS because changes in working tree and the index are lost.</span></span><br><span class="line">git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># same as `git reset --mixed`</span></span><br><span class="line"><span class="comment"># resets the index but not the working tree. changes are preserved but not in the index anymore</span></span><br><span class="line">git reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># Unstage files in Index.</span></span><br><span class="line"><span class="comment"># same as `git restore --staged &lt;file1&gt; &lt;file2&gt; ...`</span></span><br><span class="line">git reset HEAD &lt;file1&gt; &lt;file2&gt; ...</span><br></pre></td></tr></table></figure>

<br>

<p><strong>Reset to a Commit</strong><br>If you haven’t push the commit, you can fix the commit locally. DO NOT use these command if you have already pushed the changes.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reset to the target commit. Both change in the working tree and the index will be kept</span></span><br><span class="line">git reset --soft commitID</span><br><span class="line"></span><br><span class="line"><span class="comment"># reset to the target commit. Throw away change in working tree and index. </span></span><br><span class="line"><span class="comment"># be careful with this command</span></span><br><span class="line">git reset --hard commitID</span><br><span class="line"></span><br><span class="line"><span class="comment"># hard reset to origin/master. </span></span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<p>For more information on <code>git reset</code>, see <a href="https://www.atlassian.com/git/tutorials/undoing-changes/git-reset">https://www.atlassian.com/git/tutorials/undoing-changes/git-reset</a></p>
<br>

<h1 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h1><p><a href="https://git-scm.com/docs/git-branch">git branch</a> command - List, create or delete branch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># List branches</span></span><br><span class="line">git branch -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># List remote branches</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a branch</span></span><br><span class="line"><span class="comment"># this command do not automatically switch to the new branch</span></span><br><span class="line">git branch new-branch-name</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a branch from a tag</span></span><br><span class="line">git branch my-new-branch v1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a branch from a commit</span></span><br><span class="line">git branch my-new-branch c0a9b60</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete a branch</span></span><br><span class="line">git branch -d branch-name</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete a remote branch</span></span><br><span class="line">git branch -d -r origin/branch-name</span><br></pre></td></tr></table></figure>

<br>

<h1 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h1><p><a href="https://git-scm.com/docs/git-revert">git revert</a> will create new commits to undo the previous commit. <code>git revert</code> require your working tree to be clean. use using <code>git reset --hard</code> to throw away all uncommitted changes if needed. </p>
<p>To revert a pushed commit, first get the commit ID</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></table></figure>

<p>Then execute <code>git revert &lt;commit-id&gt;</code> to revert the commit. This will create a commit that undos the commit to be revert. You can also use this command to undo a range of commits</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Revert a commit</span></span><br><span class="line">git revert 901300d</span><br><span class="line"></span><br><span class="line"><span class="comment"># Revert multiple commits, start with 901300d, then 7806790 and 01926a4</span></span><br><span class="line">git revert 901300d 7806790 01926a4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Revert the last two commits</span></span><br><span class="line">git revert HEAD~2..HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># Revert a range of commits. The first hash is exclusive. The last hash is inclusive</span></span><br><span class="line">git revert 874845a..4dd4b4e</span><br></pre></td></tr></table></figure>

<p>If you don’t want to create a commit, add <code>-n</code> or <code>--no-commit</code> option. Changes to revert the commit will be in stage area. No commit is created.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert -n 874845a..4dd4b4e</span><br></pre></td></tr></table></figure>

<p>Revert a merge commit</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># To revert a merge commit. Merge commit has two parents. You must use -m flag to specify the mainline. </span></span><br><span class="line"><span class="comment"># Parent number starts with 1. The other commit that is not consider mainline will be un-merge.</span></span><br><span class="line">git revert -m 1 8f937c6</span><br><span class="line"></span><br><span class="line"><span class="comment"># To revert a merge commit without commit use -n or --no-commit flag </span></span><br><span class="line">git revert -m 1 -n 8f937c6</span><br></pre></td></tr></table></figure>

<p>If there is conflict, you can choose to resolve the conflict or use <code>git revert --abort</code> to abort the operation.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># abort the revert operation</span></span><br><span class="line">git revert --abort</span><br></pre></td></tr></table></figure>

<p>see <a href="http://schacon.github.io/git/git-revert.html">git revert man page</a> for more information</p>
<h1 id="Upstream"><a href="#Upstream" class="headerlink" title="Upstream"></a>Upstream</h1><p>The term upstream and downstream refers to the repository. Generally, upstream is from where you clone the repository, and downstream is any project that integrates your work with other works. </p>
<p>set the upstream when pushing a new local branch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin new-branch</span><br></pre></td></tr></table></figure>


<p>You can set the upstream for an existing branch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/some-branch some-branch</span><br></pre></td></tr></table></figure>

<p>You can also unset a upstream</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --unset-upstream</span><br></pre></td></tr></table></figure>

<p>find out which remote branch a local branch is tracking</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>

<p>Reference: </p>
<ul>
<li><a href="https://www.javatpoint.com/git-upstream-and-downstream">Upstream and Downstream by Javatpoint</a></li>
</ul>
<h1 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h1><p><a href="https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes">Pro Git working with Remote</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show remote URLs</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># add a remote</span></span><br><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># favor SSH protocol to HTTPS</span></span><br><span class="line"><span class="comment"># HTTPS requires you to enter user name and password</span></span><br><span class="line"><span class="comment"># setting remote url to use SSH protocol</span></span><br><span class="line">git remote set-url &lt;name&gt; &lt;newUrl&gt;</span><br><span class="line">git remote set-url origin git@gitlab.com:xinghua24/GitCommands.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove and add origin</span></span><br><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line">git remote add origin git@gitlab.com:xinghua24/GitCommands.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># show remote branches</span></span><br><span class="line">git remote show &lt;remote&gt;</span><br><span class="line">git remote show origin</span><br></pre></td></tr></table></figure>

<br>


<h1 id="Branching-amp-Merge"><a href="#Branching-amp-Merge" class="headerlink" title="Branching &amp; Merge"></a>Branching &amp; Merge</h1><ul>
<li><a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">Pro Git Branch</a></li>
<li><a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">Basic Merging</a></li>
<li><a href="https://git-scm.com/docs/git-merge">Git merge command</a></li>
</ul>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show local branches. * points to the branch that is checked out</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># show local and remote branch</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># rename a branch</span></span><br><span class="line">git branch -m &lt;oldname&gt; &lt;newname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># rename current branch</span></span><br><span class="line">git branch -m &lt;new-branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># new branch. new branch name can be feature/xfeature</span></span><br><span class="line">git checkout -b &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch branch</span></span><br><span class="line">git checkout &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge a branch. first checkout the branch you wish to merge into and then git merge &lt;branch&gt;</span></span><br><span class="line"><span class="comment"># merge change is made to the current branch(branch to merge into). The branch from parameter is not changed.</span></span><br><span class="line">git merge &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># no parameter git merge</span></span><br><span class="line"><span class="comment"># if no commit is given, then merge the remote-tracking branch</span></span><br><span class="line">git merge</span><br><span class="line"></span><br><span class="line"><span class="comment"># After seeing a conflict, you can abort the merge or resolve the conflicts.</span></span><br><span class="line"><span class="comment"># The easiest way to resolve merge conflict is edit conflict file in VSCode.</span></span><br><span class="line"><span class="comment"># Then add edited files to index, and then run git commit.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># merge origin/develop to current branch</span></span><br><span class="line">git merge origin/develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># fast-forward only</span></span><br><span class="line">git merge newbranch --ff-only</span><br><span class="line"></span><br><span class="line"><span class="comment"># no fast-forward merge</span></span><br><span class="line">git merge newbranch --no-ff</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge but do not create a commit</span></span><br><span class="line">git merge --no-commit --no-ff origin/develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># abort the merge due to conflict</span></span><br><span class="line">git merge --abort</span><br><span class="line"></span><br><span class="line"><span class="comment"># show branches merged into master</span></span><br><span class="line">git branch --merged master</span><br><span class="line"></span><br><span class="line"><span class="comment"># show branches merged into HEAD</span></span><br><span class="line">git branch --merged</span><br><span class="line"></span><br><span class="line"><span class="comment"># show branches not merged into HEAD</span></span><br><span class="line">git branch --no-merged</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete a local branch. use -D to force an unmerged delete</span></span><br><span class="line"><span class="comment"># can&#x27;t use this command delete the current branch</span></span><br><span class="line">git branch -d &lt;branch&gt;</span><br><span class="line">git branch -D &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="Fetch-and-Pull"><a href="#Fetch-and-Pull" class="headerlink" title="Fetch and Pull"></a>Fetch and Pull</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fetch - only download all branches from remote, do not merge</span></span><br><span class="line">git fetch &lt;remote&gt;</span><br><span class="line">git fetch</span><br><span class="line"></span><br><span class="line"><span class="comment"># git pull = git fetch + git merge.</span></span><br><span class="line"><span class="comment"># Better to simply use git fetch and merge explicitly</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># git pull --rebase = git fetch + git rebase</span></span><br><span class="line">git pull --rebase</span><br><span class="line"></span><br><span class="line"><span class="comment"># fetch all remotes</span></span><br><span class="line">git pull --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete a remote branch</span></span><br><span class="line">git push &lt;remote&gt; --delete &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># push a new branch to remote. -u is short for --set-upstream</span></span><br><span class="line">git push -u origin &lt;branch&gt;</span><br><span class="line">git push --set-upstream origin &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># if remote branch is named differently</span></span><br><span class="line">git push &lt;remote&gt; &lt;local_branch_name&gt;:&lt;remote_branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># push changes in local branch to remote branch</span></span><br><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br><span class="line">git push origin &lt;branch&gt;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>If the current branch only exist in local and not in remote, then the following error will occur. In this case,<br>Use <code>-u</code> or <code>--set-upstream</code> flag to set the up stream.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: The current branch master has no upstream branch.</span><br><span class="line">To push the current branch and set the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h1><ul>
<li><a href="https://git-scm.com/book/en/v2/Git-Branching-Rebasing">Pro Git Rebase</a></li>
<li><a href="https://git-scm.com/docs/git-rebase">Git rebase command</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase">Git rebase tutorial</a><br></li>
</ul>
<p>git rebase - Reapply commits on top of another base tip. Unlike <code>git merge</code>, Rebase makes history clean. </p>
<p>If rebase is done after the branch is pushed to remote repository, then the next push will be rejected. You have to use force push to push change. command is <code>git push --force</code> or <code>git push -f</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># this command only make change in the current branch. The branch from parameter is not changed</span></span><br><span class="line">git rebase &lt;branch&gt;</span><br><span class="line">git rebase main</span><br><span class="line">git rebase origin/main</span><br><span class="line"></span><br><span class="line"><span class="comment"># Interactive mode. Make a list of the commits which are about to be rebased.</span></span><br><span class="line">git rebase -i</span><br><span class="line">git rebase --interactive</span><br></pre></td></tr></table></figure>

<p>To learn more about interactive rebase, see <a href="https://about.gitlab.com/blog/2020/11/23/keep-git-history-clean-with-interactive-rebase/">How to keep your Git history clean with interactive rebase</a></p>
<h2 id="Rebase-Conflict"><a href="#Rebase-Conflict" class="headerlink" title="Rebase Conflict"></a>Rebase Conflict</h2><p>Git rebase will stop at the first problematic commit and leave conflict makers in the tree. You need to resolve conflict first, then add files to the index.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>after resolving the conflict, continue the rebase process</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure>

<p>You can abort the rebase if you don’t want to continue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure>



<br>

<h1 id="Diff"><a href="#Diff" class="headerlink" title="Diff"></a>Diff</h1><p>most common commands are <strong>git diff</strong> and <strong>git diff –cached</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  you can use &#x27;difftool&#x27; instead of &#x27;diff&#x27; if &#x27;tool.diff&#x27; is setup</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># diff takes two references. it can be hash, pointer(HEAD) or branch name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Changes in the working tree not yet staged for the next commit.</span></span><br><span class="line">git diff</span><br><span class="line">git diff -- &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Changes between the index and last commit;</span></span><br><span class="line"><span class="comment"># what you would be committing if you run &quot;git commit&quot; without &quot;-a&quot; option</span></span><br><span class="line">git diff --cached</span><br><span class="line">git diff --staged HEAD</span><br><span class="line">git diff --cached -- &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Changes in the working tree since last commit;</span></span><br><span class="line"><span class="comment"># what you would be committing if you run &quot;git commit -a&quot;</span></span><br><span class="line">git diff HEAD</span><br><span class="line">git diff HEAD -- &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># comparing with arbitrary commits</span></span><br><span class="line">git diff HEAD^ HEAD <span class="comment"># between before the last commit and the last commit</span></span><br><span class="line">git diff HEAD HEAD^ <span class="comment"># between the last commit and before the last commit</span></span><br><span class="line">git diff 3c797b7 HEAD <span class="comment"># compare using commit hash</span></span><br><span class="line">git diff 3c797b7 07568da</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compare two branch</span></span><br><span class="line">git diff master origin/master</span><br></pre></td></tr></table></figure>

<br>

<h1 id="Tagging"><a href="#Tagging" class="headerlink" title="Tagging"></a>Tagging</h1><p>Tagging allows you to tag specific points in a repository’s history as being important.</p>
<p>There are two types of tags</p>
<ul>
<li><strong>Lightweight</strong> tag - just a pointer to a specific commit</li>
<li><strong>Annotated</strong> tag - stores as full object in the Git database. They’re checksummed; contain the tagger name, email, and data; have a tagging message.</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># List tags with optional -l or --list</span></span><br><span class="line">git tag </span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a tag</span></span><br><span class="line">git tag v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a Annotated Tag. -m specifies a tagging message</span></span><br><span class="line">git tag -a v1.2 -m <span class="string">&quot;my version v1.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show git data</span></span><br><span class="line">git show v1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tag a specific commit</span></span><br><span class="line">git tag -a v1.3 89414fb</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deleting a tag</span></span><br><span class="line">git tag -d v1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sharing Tags</span></span><br><span class="line">git push origin v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Checking out Tags</span></span><br><span class="line">git checkout v1.0</span><br></pre></td></tr></table></figure>

<p>For more information on tagging see</p>
<ul>
<li><a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">Git Basics Tagging</a></li>
</ul>
<br>

<h1 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h1><p>Stash - Use git stash when you want to record the current state of the <strong>working tree</strong> and the <strong>index</strong>, but want to go back to a clean working tree.<br>Ref Doc: <a href="https://git-scm.com/docs/git-stash">https://git-scm.com/docs/git-stash</a>. Stashing is handy if you need to quickly switch context and work on something else. </p>
<p>One way to use Stash is to stash before running <em>git pull</em> command. after pull is completed,<br>run <em>git stash apply</em>. this way no merge conflict will occur when pulling files from remote.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># save a stash</span></span><br><span class="line"><span class="comment"># uncommited work in Working directory and Staging Area are saved to stash</span></span><br><span class="line">git stash</span><br><span class="line">git stash save &lt;descriptive_message&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># git stash a single file</span></span><br><span class="line">git stash push -m <span class="string">&quot;message&quot;</span> &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show stashes</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># show stash change files</span></span><br><span class="line">git stash show &lt;stash&gt;</span><br><span class="line">git stash show stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show stash in patch form using -p option</span></span><br><span class="line">git stash show -p stash@&#123;0&#125;</span><br><span class="line">git stash show -p stash@&#123;1&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># apply stash stash@&#123;0&#125;. If there is conflict, edit the conflict</span></span><br><span class="line">git stash apply stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># also applies stash</span></span><br><span class="line"><span class="comment"># apply doesn&#x27;t remove the stash from queue. but pop does.</span></span><br><span class="line">git stash pop</span><br><span class="line">git stash pop stage@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove a single stash from list of stash entries</span></span><br><span class="line">git stash drop stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove all stash entries</span></span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure>


<p>In Powershell, curly braces have special meaning. You need to surround the stash name with single quote or escape with backtick. Otherwise you will get error message <code>error: unknown switch &#39;e&#39;</code>.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash apply <span class="string">&#x27;stash@&#123;0&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>More stash tutorial: <a href="https://www.atlassian.com/git/tutorials/saving-changes/git-stash">Atlassian Git Stash Tutorial</a><br><br></p>
<h1 id="Subtree"><a href="#Subtree" class="headerlink" title="Subtree"></a>Subtree</h1><p>Git subtree allows one repository to exist inside the parent repository as a sub-directory. Useful for maintaining sub-project.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add subtree</span></span><br><span class="line">git subtree add --prefix=path/to-repo repo-name branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push to subtree&#x27;s repo</span></span><br><span class="line">git subtree push --prefix=path/to-repo repo-name branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pull changes from subtree&#x27;s repo back to parent repo</span></span><br><span class="line">git subtree pull --prefix=path/to-repo repo-name branch</span><br></pre></td></tr></table></figure>

<p>The main drawback for subtree is you have to specify the directory path for every push&#x2F;pull.</p>
<p>Reference</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=E7YWeRFHpXg">A Git Subtrees Primer</a></li>
<li><a href="https://www.atlassian.com/blog/git/alternatives-to-git-submodule-git-subtree">Git subtree: the alternative to Git submodule</a></li>
</ul>
<h1 id="git-worktree"><a href="#git-worktree" class="headerlink" title="git worktree"></a>git worktree</h1><p>A git repository can support multiple working trees, allowing you to check out more than one branch at a time. </p>
<p>In its simplest form, <code>git worktree add &lt;path&gt;</code> automatically creates a new branch whose name is the final component of <path>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `git worktree add &lt;path&gt;`simplest form. create a new branch named hotfix-jira-1234 at path ../hotfix-jira-1234</span></span><br><span class="line">git worktree add ../hotfix-jira-1234</span><br><span class="line"></span><br><span class="line"><span class="comment"># work on an existing develop branch in a new worktree</span></span><br><span class="line">git worktree add ../temp-develop develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a new branch named emergency-fix on path ../temp path based off develop branch.</span></span><br><span class="line"><span class="comment"># -b specifies the new branch name</span></span><br><span class="line">git worktree add -b emergency-fix ../temp develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># list worktree</span></span><br><span class="line">git worktree list</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove worktree which path is ../temp</span></span><br><span class="line">git worktree remove ../temp</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>more on git worktree</p>
<ul>
<li><a href="https://git-scm.com/docs/git-worktree">git worktree</a></li>
</ul>
<h1 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h1><p>The rules for the patterns you can put in the .gitignore file are as follows:</p>
<ul>
<li>Blank lines or lines starting with # are ignored.</li>
<li>Standard glob patterns work, and will be applied recursively throughout the entire working tree.</li>
<li>You can start patterns with a forward slash (&#x2F;) to avoid recursivity.</li>
<li>You can end patterns with a forward slash (&#x2F;) to specify a directory.</li>
<li>You can negate a pattern by starting it with an exclamation point (!).</li>
</ul>
<p>Example .gitignore file:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ignore all .DS_Store file or directory</span></span><br><span class="line">.DS_Store</span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore all .log files. An asterisk is a wildcard that matches zero or more characters.</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore /dist direcotry in the repository root. Prepending a slash matches files only in the repository root.</span></span><br><span class="line">/dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore node_modules directory and bin directory at any level</span></span><br><span class="line">node_modules/</span><br><span class="line">bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore doc/notes.txt, but not doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore all .pdf files in the doc/ directory and any of its subdirectories</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure>

<p>To ignore all .DS_Store file in MacOS:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> .DS_Store &gt;&gt; ~/.gitignore_global</span><br><span class="line">git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure>


<p>More on .gitignore</p>
<ul>
<li><a href="https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository">Pro Git</a></li>
<li><a href="https://github.com/github/gitignore">Sample .gitignore</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/saving-changes/gitignore">Atlassian .gitignore file explain</a></li>
</ul>
<br>



<h1 id="Gitflow"><a href="#Gitflow" class="headerlink" title="Gitflow"></a>Gitflow</h1><p><a href="https://nvie.com/posts/a-successful-git-branching-model/">Gitflow</a> is a popular branching model for Git. it was introduced by Vincent Driessen.</p>
<p>There are two main branches</p>
<ul>
<li><strong>master</strong> - branch that is always production-ready and contains the last release version fo source code in production</li>
<li><strong>develop</strong> - reflects the development changes. This is where feature branches merges to.</li>
</ul>
<p>Other branches</p>
<ul>
<li><strong>feature</strong> - derive from develop branch. used to develop features. Merged to develop branch.</li>
<li><strong>release</strong> - derived from develop branch that is used for release. merged to master and develop. release is merged to develop branch so that important updates is not lost. After the merge, release branch can be deleted.</li>
<li><strong>hotfix</strong> - derived from master branch. It is used to fix a bug in production. It is merged to master and develop branch like the release branch.</li>
</ul>
<img src="gitflow.png" />
Author: Vincent Driessen

<p>For more details on Gitflow, see <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow">Gitflow workflow by Atlassian</a></p>
<p>For a practical example of Gitflow workflow, see <a href="https://leanpub.com/git-flow/read">Git Flow Workflow
</a></p>
<h1 id="Other-Stuffs"><a href="#Other-Stuffs" class="headerlink" title="Other Stuffs"></a>Other Stuffs</h1><h2 id="Other-Commands"><a href="#Other-Commands" class="headerlink" title="Other Commands"></a>Other Commands</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show files being tracked</span></span><br><span class="line">git ls-files</span><br><span class="line"></span><br><span class="line"><span class="comment"># rename or move</span></span><br><span class="line">git <span class="built_in">mv</span> &lt;old_file_path&gt; &lt;new_file_path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># if rename or move using bash command mv, use git add -A to indicate a rename</span></span><br><span class="line"><span class="comment"># git add -A adds all changes in the working tree including rename and delete</span></span><br><span class="line">git add -A</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove a file</span></span><br><span class="line">git <span class="built_in">rm</span> &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># replace commit with a new commit message OR make forgotten changes, stage them and commit again</span></span><br><span class="line">git commit --amend</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log</span></span><br><span class="line"><span class="comment"># show logs. top logs are more recent</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line">git <span class="built_in">log</span> --all --decorate --oneline --graph</span><br><span class="line">git <span class="built_in">log</span> -n 20 --decorate --oneline --graph</span><br><span class="line"></span><br><span class="line"><span class="comment"># show log of one file</span></span><br><span class="line">git <span class="built_in">log</span> --oneline -- &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># create Alias &quot;graph&quot; to show graph</span></span><br><span class="line">git config --global alias.graph <span class="string">&quot;log --all --decorate --oneline --graph&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># getting help</span></span><br><span class="line">git <span class="built_in">help</span> &lt;verb&gt;</span><br><span class="line">man git-&lt;verb&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fix &#x27;detached HEAD&#x27; state</span></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment"># Better checkout only a file, this way you will not go to &#x27;detached HEAD&#x27; state</span></span><br><span class="line">git checkout c6c8007 -- &lt;file&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># quick lookup a Git command</span></span><br><span class="line">git &lt;verb&gt; -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># full help document </span></span><br><span class="line">git &lt;verb&gt; --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># open gui</span></span><br><span class="line">git gui</span><br></pre></td></tr></table></figure>

<h2 id="git-push-u-flag"><a href="#git-push-u-flag" class="headerlink" title="git push -u flag"></a>git push -u flag</h2><p>When you create a local branch and then push it to the remote repository. You can add a -u flag when doing a git push.  It adds a tracking reference to the upstream you are pushing to. There is a ‘link’ between local and remote branch. So when you do a <code>git pull</code> without any argument, git will fetch and update local branch. If you do it without -u flag, local branch will not keep track of the change in the remote repository.</p>
<p>-u flag is the same as –set-upstream.</p>
<p>Example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin new-branch</span><br></pre></td></tr></table></figure>

<p>From <a href="https://git-scm.com/docs/git-push">git-push documentation</a></p>
<blockquote>
<p>For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less git-pull and other commands. </p>
</blockquote>
<h2 id="Cherry-Pick"><a href="#Cherry-Pick" class="headerlink" title="Cherry-Pick"></a>Cherry-Pick</h2><p>Apply the commit from other branch to the current branch. see <a href="https://git-scm.com/docs/git-cherry-pick">Documentation</a>.<br>If there are multiple commits to cherry-pick, apply the older ones first.<br>git config –global core.editor “</p>
<p>usage:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick &lt;commit sha1&gt;...</span><br></pre></td></tr></table></figure>

<h2 id="Resolving-the-conflict-between-Git-branches"><a href="#Resolving-the-conflict-between-Git-branches" class="headerlink" title="Resolving the conflict between Git branches"></a>Resolving the conflict between Git branches</h2><p>Pull Request with conflict:<br><br><img src="conflict.png"></p>
<p>The following steps will resolve conflict regardless if Pull Request is created or not.</p>
<p>Assuming</p>
<ul>
<li>Destination branch is <em>master</em></li>
<li>Source branch is <em>feature</em></li>
</ul>
<ol>
<li><p>pull the latest changes from destination branch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
</li>
<li><p>make sure you are on the source branch(<em>feature</em> in this case). pull if necessary</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
</li>
<li><p>merge branch master into feature</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge master</span><br></pre></td></tr></table></figure>
</li>
<li><p>resolve the conflicts</p>
</li>
<li><p>add and commit the change, then push</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>Reference</strong>:</p>
<ul>
<li><a href="https://git-scm.com/book/en/v2">Pro Git Book</a></li>
<li><a href="https://git-scm.com/docs">Git Reference</a></li>
<li><a href="https://www.youtube.com/watch?v=FyAAIHHClqI">Youtube Git Branching and Merging</a></li>
<li><a href="https://stackoverflow.com/questions/39128500/working-tree-vs-working-directory">Working tree vs Working directory</a></li>
<li><a href="https://bitsofco.de/git-aliases-for-lazy-developers/">Git aliases for lazy developers</a> by Ire Aderinokun</li>
<li><a href="https://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model by Vincent Driessen</a></li>
<li><a href="https://blog.axosoft.com/gitflow/">gitflow</a></li>
<li><a href="https://stackoverflow.com/questions/4114095/how-do-i-revert-a-git-repository-to-a-previous-commit">Stackoverflow - How do I revert a Git repository to a previous commit?</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/undoing-changes/git-reset">atlassian git reset documentation</a></li>
<li><a href="https://stackoverflow.com/questions/18393498/gitignore-all-the-ds-store-files-in-every-folder-and-subfolder">.gitignore all the .DS_Store files in every folder and subfolder</a></li>
</ul>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Git rename a branch(locally and remotely)</title>
    <url>/Git/Git-Rename-Branch/</url>
    <content><![CDATA[<p>Rename a branch in Git locally and remotely.</p>
<span id="more"></span>

<h1 id="Rename-a-branch-locally-and-remotely"><a href="#Rename-a-branch-locally-and-remotely" class="headerlink" title="Rename a branch(locally and remotely)"></a>Rename a branch(locally and remotely)</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Rename a branch locally</span></span><br><span class="line">git branch -m old-branch new-branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete the remote branch</span></span><br><span class="line">git push origin --delete old-branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Unset the upstream branch</span></span><br><span class="line">git branch --unset-upstream</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push the new branch to remote</span></span><br><span class="line">git push origin new-branch</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Java Sort Using Comparators</title>
    <url>/Java/Comparators/</url>
    <content><![CDATA[<p>Java sort using Comparators.</p>
<span id="more"></span>

<h1 id="Comparator-Interface"><a href="#Comparator-Interface" class="headerlink" title="Comparator Interface"></a>Comparator Interface</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">compare</span><span class="params">(T o1, T o2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html">java.util.Comparator</a> is a <strong>functional interface</strong>. Functional interface is an interface that has exactly one abstract method. A functional interface can have any number of default methods, static methods, and abstract methods from the Object class. </p>
<p>The Comparator interface has only one abstract method, <em>compare</em>. The <em>compare</em> method compares its two arguments for order. It returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.</p>
<p>Comparator interface has multiple default and static methods to help us create comparators easily.</p>
<h1 id="Sorting-Using-Lambda-Expressions"><a href="#Sorting-Using-Lambda-Expressions" class="headerlink" title="Sorting Using Lambda Expressions"></a>Sorting Using Lambda Expressions</h1><p>sort method takes a comparator as an argument. We can use lambda expressions to create comparators.</p>
<p>Sorting integers in ascending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">list.sort((i1, i2) -&gt; i1.compareTo(i2));</span><br><span class="line">System.out.println(list); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>Sorting Strings in descending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.sort( (s1,s2) -&gt; s2.compareTo(s1));</span><br><span class="line">System.out.println(list); <span class="comment">// [c, b, a]</span></span><br></pre></td></tr></table></figure>

<h1 id="Sorting-Integers"><a href="#Sorting-Integers" class="headerlink" title="Sorting Integers"></a>Sorting Integers</h1><p>Sorting integers in ascending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">list.sort(Comparator.naturalOrder());</span><br><span class="line">System.out.println(list); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>Sorting integers in descending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">list.sort(Comparator.reverseOrder());</span><br><span class="line">System.out.println(list); <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<h1 id="Sorting-Strings"><a href="#Sorting-Strings" class="headerlink" title="Sorting Strings"></a>Sorting Strings</h1><p>Sorting strings in ascending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.sort(Comparator.naturalOrder());</span><br><span class="line">System.out.println(list); <span class="comment">// [a, b, c]</span></span><br></pre></td></tr></table></figure>

<p>Sorting strings in descending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.sort(Comparator.reverseOrder());</span><br><span class="line">System.out.println(list); <span class="comment">// [c, b, a]</span></span><br></pre></td></tr></table></figure>

<p>Sort strings by length in ascending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;aa&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.sort(Comparator.comparing(String::length));</span><br><span class="line">System.out.println(list); <span class="comment">// [b, aa, ccc]</span></span><br></pre></td></tr></table></figure>


<h1 id="Sorting-Objects"><a href="#Sorting-Objects" class="headerlink" title="Sorting Objects"></a>Sorting Objects</h1><p>Sort persons by age(Int) in ascending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Person&gt; list = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Charlie&quot;</span>, <span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line">list.sort(Comparator.comparingInt(Person::getAge));</span><br><span class="line">System.out.println(list); <span class="comment">// [Charlie, Alice, Bob]</span></span><br></pre></td></tr></table></figure>

<p>sort persons by name(String) in descending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; list = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Charlie&quot;</span>, <span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line">list.sort(Comparator.comparing(Person::getName).reversed());</span><br><span class="line">System.out.println(list); <span class="comment">// [Charlie, Bob, Alice]</span></span><br></pre></td></tr></table></figure>

<h1 id="Sorting-with-Multiple-Fields"><a href="#Sorting-with-Multiple-Fields" class="headerlink" title="Sorting with Multiple Fields"></a>Sorting with Multiple Fields</h1><p>sort persons by age in ascending order, then by name in descending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; list = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Charlie&quot;</span>, <span class="number">10</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line">list.sort(Comparator.comparingInt(Person::getAge).thenComparing(Person::getName).reversed());</span><br><span class="line">System.out.println(list);   <span class="comment">// [Charlie, Alice, Bob, Alice]</span></span><br></pre></td></tr></table></figure>


<h1 id="Null-Handling"><a href="#Null-Handling" class="headerlink" title="Null Handling"></a>Null Handling</h1><p>sort persons by name in ascending order, nulls last:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; list = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Charlie&quot;</span>, <span class="number">10</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="literal">null</span>, <span class="number">40</span>)</span><br><span class="line">);</span><br><span class="line">list.sort(Comparator.comparing(Person::getName, Comparator.nullsLast(Comparator.naturalOrder())));</span><br><span class="line">System.out.println(list); <span class="comment">// [Alice, Bob, Charlie, null]</span></span><br></pre></td></tr></table></figure>


<h1 id="Map-Sorting-by-Key"><a href="#Map-Sorting-by-Key" class="headerlink" title="Map Sorting by Key"></a>Map Sorting by Key</h1><p>sort a map by key in ascending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br><span class="line">map.put(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>);</span><br><span class="line">map.put(<span class="string">&quot;David&quot;</span>, <span class="number">40</span>);</span><br><span class="line">map.put(<span class="string">&quot;Charlie&quot;</span>, <span class="number">35</span>);</span><br><span class="line"> </span><br><span class="line">LinkedHashMap&lt;String, Integer&gt; sortedMap = map.entrySet()</span><br><span class="line">    .stream()</span><br><span class="line">    .sorted(Map.Entry.&lt;String, Integer&gt;comparingByKey())</span><br><span class="line">    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e2, LinkedHashMap::<span class="keyword">new</span>));</span><br><span class="line"> </span><br><span class="line">sortedMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">    System.out.println(k + <span class="string">&quot; &quot;</span> + v);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Sort a map by key using string length in descending order:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br><span class="line">map.put(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>);</span><br><span class="line">map.put(<span class="string">&quot;David&quot;</span>, <span class="number">40</span>);</span><br><span class="line">map.put(<span class="string">&quot;Charlie&quot;</span>, <span class="number">35</span>);</span><br><span class="line"> </span><br><span class="line">LinkedHashMap&lt;String, Integer&gt; sortedMap = map.entrySet()</span><br><span class="line">    .stream()</span><br><span class="line">    .sorted(Map.Entry.&lt;String, Integer&gt;comparingByKey(Comparator.comparing(String::length)).reversed())</span><br><span class="line">    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e2, LinkedHashMap::<span class="keyword">new</span>));</span><br><span class="line"> </span><br><span class="line">sortedMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">    System.out.println(k + <span class="string">&quot; &quot;</span> + v);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Map-Sorting-by-Value"><a href="#Map-Sorting-by-Value" class="headerlink" title="Map Sorting by Value"></a>Map Sorting by Value</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br><span class="line">map.put(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>);</span><br><span class="line">map.put(<span class="string">&quot;David&quot;</span>, <span class="number">40</span>);</span><br><span class="line">map.put(<span class="string">&quot;Charlie&quot;</span>, <span class="number">35</span>);</span><br><span class="line"> </span><br><span class="line">LinkedHashMap&lt;String, Integer&gt; sortedMap = map.entrySet()</span><br><span class="line">    .stream()</span><br><span class="line">    .sorted(Map.Entry.&lt;String, Integer&gt;comparingByValue().reversed())</span><br><span class="line">    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e2, LinkedHashMap::<span class="keyword">new</span>));</span><br><span class="line"> </span><br><span class="line">sortedMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">    System.out.println(k + <span class="string">&quot; &quot;</span> + v);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Exception Hanlding in Java</title>
    <url>/Java/Exception/</url>
    <content><![CDATA[<p>Checked and Unchecked Exception and how to handle exceptions in Java.</p>
<span id="more"></span>

<h1 id="Checked-Exception"><a href="#Checked-Exception" class="headerlink" title="Checked Exception"></a>Checked Exception</h1><p>Checked exceptions are subclasses of Exception.</p>
<p>Checked Exception are the exceptions that are checked at <strong>compile time</strong>. If a method throws a checked exception, the caller must handle the exception or declare the exception in the method signature. For example, IOException, SQLException are checked exceptions.</p>
<p>Use checked exceptions when the caller can recover from the exception. For example, if a file is not found, the caller can handle the exception by creating a new file.</p>
<p>Some programming languages like C# and Python do not have checked exceptions. They use unchecked exceptions for all exceptions.</p>
<p>Checked Exception example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewCheckedException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NewCheckedException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// throw and declare the checked exception</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">throwCheckedException</span><span class="params">()</span> <span class="keyword">throws</span> NewCheckedException &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NewCheckedException</span>(<span class="string">&quot;This is a checked exception&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handle the checked exception</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NewCheckedException</span>(<span class="string">&quot;This is a checked exception&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NewCheckedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Unchecked-Exception-Runtime-Exception"><a href="#Unchecked-Exception-Runtime-Exception" class="headerlink" title="Unchecked Exception(Runtime Exception)"></a>Unchecked Exception(Runtime Exception)</h1><p>Unchecked exceptions are subclasses of RuntimeException.</p>
<p>Unchecked Exception are the exceptions that are not checked at compile time. If a method throws an unchecked exception, the caller is not required to handle the exception. For example, NullPointerException, ArrayIndexOutOfBoundsException are unchecked exceptions. Unchecked exceptions are usually bubbled up to the top of the call stack.</p>
<p>Use unchecked exceptions when the caller cannot recover from the exception. For example, if a user is not found, the caller cannot recover from the exception.</p>
<p>Unchecked Exception example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// throw the unchecked exception</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">throwUncheckedException</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;User not found&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle the unchecked exception(not required)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;User not found&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Handle-Exception"><a href="#Handle-Exception" class="headerlink" title="Handle Exception"></a>Handle Exception</h1><p>There are a couple of ways to handle exceptions in Java.</p>
<ul>
<li>log the exception and continue if the exception is not critical</li>
<li>log and rethrow the exception</li>
<li>wrap the exception and rethrow the exception</li>
</ul>
<p>Remeber not to ignore&#x2F;swallow the exception.</p>
<p>Checked exception produces a lot of boilerplate code. It is common to wrap the checked exception in an unchecked exception and rethrow the exception.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap</title>
    <url>/Java/HashMap/</url>
    <content><![CDATA[<p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/HashMap.html">HashMap</a> class is a very common class in Java. It is used to store name-value pairs.</p>
<span id="more"></span>


<h1 id="HashMap-Sample-Usage"><a href="#HashMap-Sample-Usage" class="headerlink" title="HashMap Sample Usage"></a>HashMap Sample Usage</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;apple&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;banana&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;cherry&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&quot;apple&quot;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;apple quantity: &quot;</span> + map.get(<span class="string">&quot;apple&quot;</span>));</span><br><span class="line"></span><br><span class="line">        map.forEach((key, value) -&gt; &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;: &quot;</span> + value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apple quantity: 100</span><br><span class="line">banana: 2</span><br><span class="line">apple: 100</span><br><span class="line">cherry: 3</span><br></pre></td></tr></table></figure>
<p>note that the iteration order is not guaranteed</p>
<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><ul>
<li>stores key-value pairs</li>
<li>implements Map interface</li>
<li>allows null key and null value</li>
<li>is not thread-safe</li>
<li>constant time complexity O(1) for get() and put() methods</li>
<li>iteration order is not guaranteed</li>
<li>initial capacity is 16 and load factor is 0.75.</li>
</ul>
<p>class definition:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;</span><br></pre></td></tr></table></figure>

<h1 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h1><p>We can look at <a href="https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/util/HashMap.java">jdk7 HashMap source code</a> to understand how HashMap is constructed. Jdk7 HashMap implementation is simplier to understand than the newer versions.</p>
<p>Empty parameter constructor creates a HashMap with default initial capacity 16 and default load factor 0.75.</p>
<p>Default Constructor:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment"> * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    threshold = (<span class="type">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">Entry</span>[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>note that <code>init()</code> is an Initialization hook for subclasses.</p>
<p>Other constructors:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new HashMap with the same mappings as the specified Map.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span></span><br></pre></td></tr></table></figure>

<h1 id="Entry-Inner-class"><a href="#Entry-Inner-class" class="headerlink" title="Entry Inner class"></a>Entry Inner class</h1><p>Entry is a static inner class of HashMap. </p>
<p>In a HashMap, key-value pairs are stored in an array of Entry objects.</p>
<p>Entry has key, value, and hash fields. It contains a next reference that points to the next Entry in the same bucket.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates new entry.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Entry(<span class="type">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        next = n;</span><br><span class="line">        key = k;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// other methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="put-method"><a href="#put-method" class="headerlink" title="put() method"></a>put() method</h1><p><code>put()</code> method is used to add a key-value pair to the HashMap. If the key already exists in the HashMap, the value will be replaced.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key.hashCode());</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>put()</code> method calls <code>addEntry()</code> if the key is not found in the table.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a new entry with the specified key, value and hash code to</span></span><br><span class="line"><span class="comment"> * the specified bucket.  It is the responsibility of this</span></span><br><span class="line"><span class="comment"> * method to resize the table if appropriate.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Subclass overrides this to alter the behavior of put method.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>indexFor() method is used to calculate the index in the table for the hash code.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns index for hash code h.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexFor</span><span class="params">(<span class="type">int</span> h, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>putForNullKey is a special method to handle null key. It is trying to insert the value to the first entry in the table.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Offloaded version of put for null keys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> V <span class="title function_">putForNullKey</span><span class="params">(V value)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(<span class="number">0</span>, <span class="literal">null</span>, value, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="get-method"><a href="#get-method" class="headerlink" title="get() method"></a>get() method</h1><p><code>get</code> method is used to get the value of a key.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Returns the value to which the specified key is mapped,</span></span><br><span class="line"><span class="comment">  * or &#123;<span class="doctag">@code</span> null&#125; if this map contains no mapping for the key.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">         <span class="keyword">return</span> getForNullKey();</span><br><span class="line">     <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key.hashCode());</span><br><span class="line">     <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">          e != <span class="literal">null</span>;</span><br><span class="line">          e = e.next) &#123;</span><br><span class="line">         Object k;</span><br><span class="line">         <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</span><br><span class="line">             <span class="keyword">return</span> e.value;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>getForNullKey</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Offloaded version of get() to look up null keys.  Null keys map</span></span><br><span class="line"><span class="comment"> * to index 0.  This null case is split out into separate methods</span></span><br><span class="line"><span class="comment"> * for the sake of performance in the two most commonly used</span></span><br><span class="line"><span class="comment"> * operations (get and put), but incorporated with conditionals in</span></span><br><span class="line"><span class="comment"> * others.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> V <span class="title function_">getForNullKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> e.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="resize"><a href="#resize" class="headerlink" title="resize()"></a>resize()</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Rehashes the contents of this map into a new array with a</span></span><br><span class="line"><span class="comment"> * larger capacity.  This method is called automatically when the</span></span><br><span class="line"><span class="comment"> * number of keys in this map reaches its threshold.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If current capacity is MAXIMUM_CAPACITY, this method does not</span></span><br><span class="line"><span class="comment"> * resize the map, but sets threshold to Integer.MAX_VALUE.</span></span><br><span class="line"><span class="comment"> * This has the effect of preventing future calls.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newCapacity the new capacity, MUST be a power of two;</span></span><br><span class="line"><span class="comment"> *        must be greater than current capacity unless current</span></span><br><span class="line"><span class="comment"> *        capacity is MAXIMUM_CAPACITY (in which case value</span></span><br><span class="line"><span class="comment"> *        is irrelevant).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(<span class="type">int</span> newCapacity)</span> &#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> oldTable.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> <span class="title class_">Entry</span>[newCapacity];</span><br><span class="line">    transfer(newTable);</span><br><span class="line">    table = newTable;</span><br><span class="line">    threshold = (<span class="type">int</span>)(newCapacity * loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transfers all entries from current table to newTable.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Entry[] newTable)</span> &#123;</span><br><span class="line">    Entry[] src = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; src.length; j++) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            src[j] = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(e.hash, newCapacity);</span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                e = next;</span><br><span class="line">            &#125; <span class="keyword">while</span> (e != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="clear-method"><a href="#clear-method" class="headerlink" title="clear() method"></a>clear() method</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes all of the mappings from this map.</span></span><br><span class="line"><span class="comment"> * The map will be empty after this call returns.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tab.length; ++i)</span><br><span class="line">            tab[i] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="containsKey-method"><a href="#containsKey-method" class="headerlink" title="containsKey() method"></a>containsKey() method</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns &#123;<span class="doctag">@code</span> true&#125; if this map contains a mapping for the</span></span><br><span class="line"><span class="comment"> * specified key.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   key   The key whose presence in this map is to be tested</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this map contains a mapping for the specified</span></span><br><span class="line"><span class="comment"> * key.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getNode(key) != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.get and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n, hash; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; (hash = hash(key))]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="containsValue-method"><a href="#containsValue-method" class="headerlink" title="containsValue() method"></a>containsValue() method</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns &#123;<span class="doctag">@code</span> true&#125; if this map maps one or more keys to the</span></span><br><span class="line"><span class="comment"> * specified value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value whose presence in this map is to be tested</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this map maps one or more keys to the</span></span><br><span class="line"><span class="comment"> *         specified value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; V v;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt; e : tab) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((v = e.value) == value ||</span><br><span class="line">                    (value != <span class="literal">null</span> &amp;&amp; value.equals(v)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/HashMap.html">HashMap Javadoc</a></li>
<li><a href="https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/util/HashMap.java">Jdk7 HashMap source code</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Jdk on Ubuntu</title>
    <url>/Java/Install-Jdk-on-Ubuntu/</url>
    <content><![CDATA[<p>Learn about how to install Jdk on Ubuntu</p>
<span id="more"></span>

<p>To Check Java version being used</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>Install OpenJDK 8. The typical installation path is &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64&#x2F;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure>

<p>Optional: install OpenJDK 8 source code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-8-source</span><br></pre></td></tr></table></figure>

<p>Install OpenJDK 11. The typical installation path is  &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk-amd64&#x2F;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-11-jdk</span><br></pre></td></tr></table></figure>

<p>Optional: install OpenJDK 11 source code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-11-source</span><br></pre></td></tr></table></figure>

<p>To get OpenJDK 17</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-17-jdk</span><br></pre></td></tr></table></figure>

<p>To check the Java Home environment variable</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure>

<p>Setup environment variable, edit ~&#x2F;.bashrc file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Java</span><br><span class="line">JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>

<p>To set default JDK</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>



<p>Reference</p>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-on-ubuntu-18-04">How To Install Java with <code>apt</code> on Ubuntu 18.04 by Koen Vlaswinkel</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Gradle Introduction</title>
    <url>/Java/Gradle/</url>
    <content><![CDATA[<p>Gradle is an open-source build automation tool focused on flexibility and performance.</p>
<span id="more"></span>

<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>see <a href="https://docs.gradle.org/current/userguide/installation.html">Installing Gradle</a> for detailed instruction</p>
<p>If you are using <a href="http://sdkman.io/">sdkman</a>, just run</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdk install gradle</span><br></pre></td></tr></table></figure>
<p>It will ask you to set the default gradle, you can just set the latest version.</p>
<p>To get a list of gradle candidate versions</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdd list gradle</span><br></pre></td></tr></table></figure>

<p>For Linux user, Just download gradle binary from <a href="https://gradle.org/install/">https://gradle.org/install/</a> and add its bin folder to System path.</p>
<p>To test if Gradle is installed, get its version:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gradle -v</span><br></pre></td></tr></table></figure>

<p><code>gradle -v</code> command will show the JVM version. JVM version is set from JAVA_HOME Environment Variable.</p>
<p>Eclipse Integration -  Gradle has an official Eclipse plugin called BuildShip.</p>
<p>You can learn Gradle from the official document - <a href="%5Bhttps://docs.gradle.org/current/userguide/tutorial_using_tasks.html%5D(https://docs.gradle.org/current/userguide/tutorial_using_tasks.html)">Learning the Basics</a> section.</p>
<h1 id="Projects-plugins-and-tasks"><a href="#Projects-plugins-and-tasks" class="headerlink" title="Projects, plugins and tasks"></a>Projects, plugins and tasks</h1><p>Gradle build is made up of one or more <strong>projects</strong>. Gradle projects are made up of one or more tasks that perform build steps. Most of the time, a project has a <strong>build.gradle</strong> file.</p>
<p>A <strong>task</strong> represents some atomic piece of work which a build performs. This might be compiling some classes, creating a JAR, generating Javadoc, or publishing some archives to a repository.</p>
<p>Typically, tasks are provided by applying a <strong>plugin</strong> so that you do not have to define them yourself.</p>
<h1 id="First-Build-Script"><a href="#First-Build-Script" class="headerlink" title="First Build Script"></a>First Build Script</h1><p><strong>build.gradle</strong> file contains the build script. It defines how the project is build. build.gradle file can have tasks, dependencies and plugins. Here we define a task called <code>hello</code>. </p>
<p>build.gradle</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        println <span class="string">&quot;Hello, Gradle&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can use Groovy or Kotlin to write Gradle build script. Here we use Groovy.</p>
<p>To run a build, run <code>gradle &lt;task&gt;</code>. Here we pass the name of the task ‘hello’ as argument.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gradle hello</span><br><span class="line"></span><br><span class="line">&gt; Task :hello</span><br><span class="line">Hello Gradle</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 499ms</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure>

<p>You can add <code>-q</code> option to hide the extra information.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gradle -q hello</span><br><span class="line">Hello Gradle</span><br></pre></td></tr></table></figure>

<p>use <code>gradle tasks --all</code>  command to display all tasks</p>
<h1 id="Extra-Property"><a href="#Extra-Property" class="headerlink" title="Extra Property"></a>Extra Property</h1><p>Additional, ad-hoc, properties for Gradle domain objects.</p>
<p>To define a foo property with value “bar”. You can use dollar sign to get the value of a variable. So to access property value foo, use <code>$foo</code> or <code>$&#123;foo&#125;</code>. </p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">  ext.foo = <span class="string">&quot;bar&quot;</span></span><br><span class="line">    </span><br><span class="line">	doLast &#123;</span><br><span class="line">		println <span class="string">&quot;Hello $&#123;foo&#125;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can also define property like this</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    foo = <span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Example - Use of property when defining spring dependencies</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">  set(<span class="string">&#x27;springCloudVersion&#x27;</span>, <span class="string">&quot;2020.0.2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">  imports &#123;</span><br><span class="line">    mavenBom <span class="string">&quot;org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>REMEMBER: To refer to a property in a string. The String MUST be enclosed with double quotes. Not single quotes!</p>
<p>see <a href="%5Bhttps://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:extra_properties%5D(https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:extra_properties)">Extra Properties</a> for more information</p>
<h1 id="Default-Task"><a href="#Default-Task" class="headerlink" title="Default Task"></a>Default Task</h1><p>Gradle allows you to define one or more default tasks that are executed if no other tasks are specified.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">defaultTasks <span class="string">&#x27;clean&#x27;</span>, <span class="string">&#x27;run&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1><p>Each build script you have is associated with an object of type <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html">Project</a> and as the build script executes, it configures this Project</p>
<p>Project has many standard properties. You can find all properties from <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#N15101">https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#N15101</a></p>
<p>Example to set group, version and sourceCompatibility property of Project.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;projectname&#x27;</span></span><br><span class="line">group = <span class="string">&#x27;com.example&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;0.0.1-SNAPSHOT&#x27;</span></span><br><span class="line">sourceCompatibility = <span class="string">&#x27;11&#x27;</span></span><br></pre></td></tr></table></figure>

<p>You can reference the project property using $, just like extra property. Example to print project name and version:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">task projectinfo &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;name: <span class="variable">$&#123;project.name&#125;</span> version: <span class="variable">$&#123;project.version&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can define extra properties for the project through <code>ext</code> namespace.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">project.ext.prop1 = <span class="string">&quot;foo&quot;</span></span><br><span class="line">task doStuff &#123;</span><br><span class="line">    ext.prop2 = <span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">subprojects &#123; ext.<span class="variable">$&#123;prop3&#125;</span> = <span class="literal">false</span> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h1><p>Gradle provides very little features for real world automation. All of the useful features like compile java code are added by <strong>plugins</strong>. </p>
<p>syntax</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id «plugin id»                                            </span><br><span class="line">    id «plugin id» version «plugin version» [apply «<span class="literal">false</span>»]   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Applying plugins to a project.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;2.4.4&#x27;</span></span><br><span class="line">  id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To learn more about plugins see - <a href="%5Bhttps://docs.gradle.org/current/userguide/plugins.html#sec:finding_community_plugins%5D(https://docs.gradle.org/current/userguide/plugins.html#sec:finding_community_plugins)">Using Gradle Plugins</a>. </p>
<p><a href="https://docs.gradle.org/current/userguide/plugin_reference.html#header">Core plugins</a> are provided by Gradle.</p>
<h2 id="Base-Plugin"><a href="#Base-Plugin" class="headerlink" title="Base Plugin"></a>Base Plugin</h2><p><a href="https://docs.gradle.org/current/userguide/base_plugin.html">Base Plugin</a> defines serveral standard lifecycle tasks. All the core language plugins, like the Java plugin, apply the Base Plugin and inherit these lifecycle tasks.</p>
<p>Tasks</p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p>Deletes the build directory and everything in it</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gradle clean</span><br></pre></td></tr></table></figure>

<h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><p>verification tasks should be attached to check lifecycle task</p>
<h3 id="assemble"><a href="#assemble" class="headerlink" title="assemble"></a>assemble</h3><p>Artifact related tasks such as <code>jar</code> should be attached to this lifecycle task</p>
<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>Intended to build everything, including running all tests, producing the production artifacts and generating documentation. You will use <code>gradle build</code> command a lot to build project.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gradle build</span><br></pre></td></tr></table></figure>

<h2 id="Java-Plugin"><a href="#Java-Plugin" class="headerlink" title="Java Plugin"></a>Java Plugin</h2><p>Java Plugin is the most used core plugin. The <a href="https://docs.gradle.org/current/userguide/java_plugin.html">Java plugin</a> adds Java compilation along with testing and bundling capabilities to a project. It serves as the basis for many of the other JVM language Gradle plugins.</p>
<p>some useful tasks Java Plugin uses are compileJava, compileTestJava, jar, javadoc, test, clean…</p>
<p>The Java plugin attaches some of its tasks to the lifecycle tasks defined by the <a href="https://docs.gradle.org/current/userguide/base_plugin.html">Base Plugin</a> and adds a few other lifecycle task</p>
<p>add java plugin</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To build java project, just need to run <code>gradle build</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gradle build</span><br></pre></td></tr></table></figure>

<h1 id="Repositories"><a href="#Repositories" class="headerlink" title="Repositories"></a>Repositories</h1><p>Maven Central is a popular repository hosting open source libraries for consumption by Java projects.</p>
<p>To declare the Maven Central repository for your build</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To declare JCenter Maven Repository</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For more on Repositories see <a href="%5Bhttps://docs.gradle.org/current/userguide/declaring_repositories.html%5D(https://docs.gradle.org/current/userguide/declaring_repositories.html)">Declaring Repositories</a></p>
<h1 id="Adding-Dependencies"><a href="#Adding-Dependencies" class="headerlink" title="Adding Dependencies"></a>Adding Dependencies</h1><p>Example to add dependencies </p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span></span><br><span class="line">  runtimeOnly <span class="string">&#x27;com.h2database:h2&#x27;</span></span><br><span class="line">  testImplementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The default dependency configurations are</p>
<ul>
<li>Compile</li>
<li>Runtime</li>
<li>Test Compile</li>
<li>Test Runtime</li>
</ul>
<h1 id="Bootstrapping-new-Project"><a href="#Bootstrapping-new-Project" class="headerlink" title="Bootstrapping new Project"></a>Bootstrapping new Project</h1><p>Use built-in  <code>gradle init</code> task to create a new Gradle build</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gradle init</span><br></pre></td></tr></table></figure>

<p>You can also specify a project type</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gradle init --<span class="built_in">type</span> basic</span><br></pre></td></tr></table></figure>


<h1 id="Clear-Cache"><a href="#Clear-Cache" class="headerlink" title="Clear Cache"></a>Clear Cache</h1><p>Gradle stores all dependencies in caches folder. This folder can get very big after a while. To remove cache, run the following command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -r $HOME/.gradle/caches/</span><br></pre></td></tr></table></figure>

<h1 id="Update-Gradle-Wrapper"><a href="#Update-Gradle-Wrapper" class="headerlink" title="Update Gradle Wrapper"></a>Update Gradle Wrapper</h1><p>To update the Gradle wrapper, run the following command. It will update the gradle wrapper to the latest version.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gradle wrapper --gradle-version 8.6</span><br></pre></td></tr></table></figure>

<h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><ul>
<li>User Manual: <a href="https://docs.gradle.org/current/userguide/getting_started.html">https://docs.gradle.org/current/userguide/userguide.html DSL</a></li>
<li>DSL Reference: <a href="https://docs.gradle.org/current/dsl/">https://docs.gradle.org/current/dsl/</a></li>
<li><a href="https://www.tutorialspoint.com/gradle/index.htm">Gradle Tutorial by Tutorialspoint</a></li>
<li><a href="https://www.baeldung.com/gradle">Introduction to Gradle by baeldung</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Intellij IDEA Shortcuts and Tips</title>
    <url>/Java/Intellij-IDEA-Shortcuts-and-Tips/</url>
    <content><![CDATA[<p>Intellij IDEA Shortcuts and Tips</p>
<span id="more"></span>

<h1 id="Common-Shortcuts"><a href="#Common-Shortcuts" class="headerlink" title="Common Shortcuts"></a>Common Shortcuts</h1><table>
<thead>
<tr>
<th>Operation</th>
<th>Shortcut</th>
</tr>
</thead>
<tbody><tr>
<td>Show intention actions(like quick fix)</td>
<td>Alt + Enter</td>
</tr>
<tr>
<td>Code Completion</td>
<td>Ctrl + Space</td>
</tr>
<tr>
<td>comment&#x2F;uncomment a line</td>
<td>Ctrl + &#x2F;</td>
</tr>
<tr>
<td>To comment&#x2F;uncomment block of code.</td>
<td>Ctrl + Shift + &#x2F;</td>
</tr>
<tr>
<td>Search Everywhere</td>
<td>Double Shift</td>
</tr>
<tr>
<td>Go to class by name</td>
<td>Ctrl + N</td>
</tr>
<tr>
<td>navigate to file</td>
<td>Ctrl + Shift + N</td>
</tr>
<tr>
<td>delete current line</td>
<td>Ctrl + Y</td>
</tr>
<tr>
<td>Debug</td>
<td>Shift + F9</td>
</tr>
<tr>
<td>Run</td>
<td>Shift + F10</td>
</tr>
<tr>
<td>Rename a variable</td>
<td>Shift + F6</td>
</tr>
</tbody></table>
<p>You can view or edit shortcuts in Settings -&gt; Keymap</p>
<h1 id="Source-Code-Hierarchy"><a href="#Source-Code-Hierarchy" class="headerlink" title="Source Code Hierarchy"></a>Source Code Hierarchy</h1><ul>
<li>Type hierarchies show parent and child classes of a class. </li>
<li>Method hierarchies show subclasses where the method overrides the selected one as well as superclasses or interfaces where the selected method gets overridden.</li>
<li>Call hierarchies show callers (supertypes) or callees (subtypes) of a method.</li>
</ul>
<p>To show type hierarchy: select <strong>Navigate | Type Hierarchy</strong> or press <strong>Ctrl+H</strong></p>
<p>To show method hierarchy: select <strong>Navigate | Method Hierarchy</strong> or press <strong>Ctrl+Shift+H</strong></p>
<p>To show call hierarchy: select <strong>Navigate | Call Hierarchy</strong> or press <strong>Ctrl+Alt+H</strong>.</p>
<h1 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h1><p>To optimize Import, select <strong>Code | Optimize Imports</strong>.</p>
<p>To Enable Auto import</p>
<ol>
<li>Go to Settings</li>
<li>Select Editor -&gt; General -&gt; Auto Import </li>
<li>Check Add unambiguous imports on the fly and Optimize imports on the fly</li>
</ol>
<h1 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h1><p>To Change Java Code Style, Open Preferences | Editor | Code Style | Java. Then import Intellij Code Style XML Schema.</p>
<p>You can import <a href="https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml">Google’s Intellij code style</a></p>
<p>In the menu select <em>Code</em> -&gt; <em>Reformat Code</em> to format code.</p>
<h1 id="Create-vertical-text-block-selection"><a href="#Create-vertical-text-block-selection" class="headerlink" title="Create vertical text block selection"></a>Create vertical text block selection</h1><ul>
<li>Click Mouse wheel and drag down&#x2F;up</li>
</ul>
<h1 id="Build-Project-automatically"><a href="#Build-Project-automatically" class="headerlink" title="Build Project automatically"></a>Build Project automatically</h1><ol>
<li>Go to Settings</li>
<li>Select Build, Execution, Deployment -&gt; Compiler</li>
<li>Check Build project automatically</li>
</ol>
<img src="/Java/Intellij-IDEA-Shortcuts-and-Tips/Intellij-Auto-Build.png"  />



<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>By default Intellij use changelist to group changes not yet committed to VCS. You can switch to use Git Staging Area.</p>
<p>select the <strong>Enable staging area</strong> option on the <strong>Version Control | Git</strong> page of the IDE settings </p>
<p>Here is the commit tool window after the change<br><img src="/Java/Intellij-IDEA-Shortcuts-and-Tips/GitStagingArea.png" /></p>
<h1 id="Change-Error-Highlight-style"><a href="#Change-Error-Highlight-style" class="headerlink" title="Change Error Highlight style"></a>Change Error Highlight style</h1><p>To chnage the highligh style for errors, go to Settings &gt; Editor &gt; Color Scheme &gt; General</p>
<img src="/Java/Intellij-IDEA-Shortcuts-and-Tips/Error-Highlight.png"  />


<h1 id="Live-Template"><a href="#Live-Template" class="headerlink" title="Live Template"></a>Live Template</h1><p>Use live templates to insert common constructs into your code, such as loops, conditions, various declarations, or print statements.</p>
<p>To open Live Template, select <strong>Settings&#x2F;Preferences | Editor | Live Templates</strong></p>
<p>Useful Live Templates</p>
<ul>
<li>sout - print a String to System.out</li>
<li>soutv - print a value to System.out</li>
<li>soutm - print the current class and method name to System.out</li>
<li>soutp - print parameter name and value</li>
<li>main - insert a main method, same as psvm</li>
<li>itar - iterate an array</li>
<li>iter - iterate iterable or array</li>
<li>itit - iterate java.util.iterator</li>
<li>fori - create a for loop</li>
<li>null - check if variable is null. <code>if(expr == null) &#123;&#125;</code></li>
<li>nn - check if variable is not null. <code>if(expr != null) &#123;&#125;</code></li>
</ul>
<p>You can create your own template in Live Template tab. Example Template</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> $METHOD_NAME$($ARGS$) &#123;</span><br><span class="line">  $END$</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Example</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CommandLineRunner <span class="title function_">applicationRunner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">        $END$</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You need to set its context before you can use it. The above template’s context is “declaration”.</p>
<h1 id="Run-Anything"><a href="#Run-Anything" class="headerlink" title="Run Anything"></a>Run Anything</h1><p>double-press Ctrl to bring up <strong>Run Anything</strong> window. You can use Run Anything for multiple actions:</p>
<ul>
<li>Open recent projects</li>
<li>Launch run&#x2F;debug configurations</li>
<li>Run build tool commands</li>
<li>Run CLI commands or scripts “in context”</li>
</ul>
<img src="Run-Anything.png" />

<p>see <a href="https://blog.jetbrains.com/idea/2021/12/one-shortcut-to-run-them-all">One Shortcut to Run Them All</a> for more details</p>
<p>Reference</p>
<ul>
<li><a href="https://www.shortcutfoo.com/app/dojos/intellij-idea-win/cheatsheet">IntelliJ IDEA Cheat Sheet</a></li>
<li><a href="https://medium.com/swlh/configuring-google-style-guide-for-java-for-intellij-c727af4ef248">Configuring Google Style Guide for Java for Intellij</a></li>
<li><a href="https://www.jetbrains.com/help/idea/using-live-templates.html">Live Template</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Concurrency - ExecutorService</title>
    <url>/Java/Java-Concurrency-ExecutorService/</url>
    <content><![CDATA[<p><a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/util/concurrent/ExecutorService.html">ExecutorService</a> allows users to run asynchronous tasks.</p>
<span id="more"></span>

<h1 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h1><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html">ExecutorService</a> is an Interface in java.util.concurrent package. It extends <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html">Executor</a> interface. </p>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html">Executor</a> defines a single method <em>execute(Runnable command)</em>. It is used to execute the submitted Runnable task.</p>
<h1 id="Creating-ExecutorService"><a href="#Creating-ExecutorService" class="headerlink" title="Creating ExecutorService"></a>Creating ExecutorService</h1><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html">Executors</a> class provides factory methods to create ExecutorService. You can have a ExectorService with a single thread or a thread pool. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Running-Tasks"><a href="#Running-Tasks" class="headerlink" title="Running Tasks"></a>Running Tasks</h1><h2 id="execute-Runnable"><a href="#execute-Runnable" class="headerlink" title="execute(Runnable)"></a>execute(Runnable)</h2><p><strong>execute(Runnable)</strong> method is inherited from <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html">Executor</a> interface. It is used to execute a runnable task at some time in the future. The return type is void.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">myRunnable</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Running task %d using thread %s\n&quot;</span>, finalI, Thread.currentThread().getName());</span><br><span class="line">    &#125;;</span><br><span class="line">    executor.execute(myRunnable);</span><br><span class="line">&#125;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">executor.shutdown();</span><br></pre></td></tr></table></figure>

<p>Sample output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Running task 0 using thread pool-1-thread-1</span><br><span class="line">Running task 1 using thread pool-1-thread-2</span><br><span class="line">Running task 3 using thread pool-1-thread-2</span><br><span class="line">Running task 4 using thread pool-1-thread-2</span><br><span class="line">Running task 2 using thread pool-1-thread-1</span><br></pre></td></tr></table></figure>

<h2 id="submit-Callable"><a href="#submit-Callable" class="headerlink" title="submit(Callable)"></a>submit(Callable)</h2><p>submit method can take a Runnable or Callable as argument. submit() method executes the Runnable or Callable and returns a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html">Future</a>. If you pass a Runnable to submit method, <em>Future.get()</em> will return null. If you pass a Callable to submit method, <em>Future.get()</em> will return the actual result of the execution.</p>
<p>submit(Callable) example usage</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">List&lt;Future&lt;String&gt;&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">    Callable&lt;String&gt; myCallable = () -&gt; &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Running task %d using thread %s\n&quot;</span>, finalI, Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Task &quot;</span> + Integer.toString(finalI);</span><br><span class="line">    &#125;;</span><br><span class="line">    Future&lt;String&gt; result = executor.submit(myCallable);</span><br><span class="line">    results.add(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Future&lt;String&gt; result : results) &#123;</span><br><span class="line">    System.out.println(result.get(<span class="number">1000</span>, TimeUnit.MILLISECONDS));</span><br><span class="line">&#125;</span><br><span class="line">executor.shutdown();</span><br></pre></td></tr></table></figure>

<p>Sample output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Running task 1 using thread pool-1-thread-2</span><br><span class="line">Running task 0 using thread pool-1-thread-1</span><br><span class="line">Running task 2 using thread pool-1-thread-1</span><br><span class="line">Running task 3 using thread pool-1-thread-2</span><br><span class="line">Task 0</span><br><span class="line">Task 1</span><br><span class="line">Task 2</span><br><span class="line">Task 3</span><br><span class="line">Running task 4 using thread pool-1-thread-1</span><br><span class="line">Task 4</span><br></pre></td></tr></table></figure>


<h2 id="Run-All-tasks-with-invokeAll-Collection"><a href="#Run-All-tasks-with-invokeAll-Collection" class="headerlink" title="Run All tasks with invokeAll(Collection)"></a>Run All tasks with invokeAll(Collection)</h2><p>invoke all tasks will execute a collection of Callable tasks and return a list of Futures.</p>
<p>Example to run a task 100 times using 20 threads.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">List&lt;Callable&lt;String&gt;&gt; myCallables = Collections.nCopies(<span class="number">1000</span>, () -&gt; &#123;</span><br><span class="line">    <span class="comment">// run task...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Task 1&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">List&lt;Future&lt;String&gt;&gt; futures = executor.invokeAll(myCallables);</span><br><span class="line">futures.forEach(f -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> f.get();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">executor.shutdown();</span><br></pre></td></tr></table></figure>

<h1 id="Shutdown"><a href="#Shutdown" class="headerlink" title="Shutdown"></a>Shutdown</h1><p>ExecutorService will keep the JVM running if you don’t shut it down.</p>
<p><strong>shutdown()</strong> method will initiate an orderly shutdown. Once <em>Shutdown()</em> is called, no new tasks will be accepted. Tasks submitted before <em>shutdown()</em> call will not be cancelled. Once all threads are finished, ExecutorService will shutdown.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">executorService.shutdown();</span><br></pre></td></tr></table></figure>

<p><strong>shutdownNow()</strong> attemps to shutdown ExecutorService immediately and return a list of tasks that were awaiting execution. There is no guarantees all executing tasks wll be stopped.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">executorService.shutdownNow();</span><br></pre></td></tr></table></figure>

<p><strong>awaitTermination(long timeout, TimeUnit unit)</strong> will block until all tasks have completed execution after a shutdown request. Usually called after <em>shutdown()</em> or <em>shutdownNow()</em>.</p>
<p>Example code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">executorService.shutdown();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!executorService.awaitTermination(<span class="number">800</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        executorService.shutdownNow();</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    executorService.shutdownNow();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h1><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html">ScheduledExecutorService</a> is an Interface that extends <a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/util/concurrent/ExecutorService.html">ExecutorService</a>. It can schedule tasks to run after a given delay, or execute periodically.</p>
<p>use <code>schedule()</code> method to schedule a task to run after 3 seconds</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">myRunnable</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - Hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">executor.schedule(myRunnable, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">executor.shutdown();</span><br></pre></td></tr></table></figure>

<p>use <code>scheduleAtFixedRate()</code> method to schedule at a fixed rate of 2 seconds.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">myRunnable</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - Hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">executor.scheduleAtFixedRate(myRunnable, <span class="number">0</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">executor.shutdown();</span><br></pre></td></tr></table></figure>

<h1 id="Callable-Interface"><a href="#Callable-Interface" class="headerlink" title="Callable Interface"></a>Callable Interface</h1><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Callable.html">Callable</a> is very similar to Runnable. It is a task that returns a result while <code>Runnable</code>‘s run() method returns void.</p>
<p>Callable Interface Definition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Callable</span>&lt;V&gt; &#123;</span><br><span class="line">    V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Create a Callable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Callable&lt;String&gt; myCallable = () -&gt; &#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Task1&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Future-Interface"><a href="#Future-Interface" class="headerlink" title="Future Interface"></a>Future Interface</h1><p>A Future represents the result of an asynchronous computation. </p>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html">Future&lt;V&gt;</a> Interface is in java.util.concurrent package.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Future</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(<span class="type">boolean</span> mayInterruptIfRunning)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isCancelled</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isDone</span><span class="params">()</span>;</span><br><span class="line">    V <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException;</span><br><span class="line">    V <span class="title function_">get</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="get-method"><a href="#get-method" class="headerlink" title="get() method"></a>get() method</h2><p>get() method will block the current thread and waits for the execution to be finished. You can also add timeout to prevent long running threads. e.g. <em>future.get(100, TimeUnit.SECONDS)</em>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> mycallableFuture.get();</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure>

<p>get() throws InterruptedException and ExecutionException. They are both checked exceptions.</p>
<h2 id="cancel-method"><a href="#cancel-method" class="headerlink" title="cancel() method"></a>cancel() method</h2><p>attempts to cancel execution of this task. You can set mayInterruptIfRunning parameter to be true so that an InterruptedException is throwed for the executing task.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">Callable&lt;String&gt; myCallable = () -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;task started&quot;</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;task finished&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>( InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Task1&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Future&lt;String&gt; future = executor.submit(myCallable);</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">cancelled</span> <span class="operator">=</span> future.cancel(<span class="literal">true</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;cancelled: &quot;</span> + cancelled);</span><br><span class="line">executor.shutdown();</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task started</span><br><span class="line">cancelled: true</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at java.lang.Thread.sleep(Thread.java:340)</span><br><span class="line">	at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:386)</span><br><span class="line">	at com.example.App.lambda$main$0(App.java:15)</span><br><span class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.baeldung.com/java-executor-service-tutorial">Java Executor Service Tutorial by Baeldung</a></li>
<li><a href="http://tutorials.jenkov.com/java-util-concurrent/executorservice.html">ExecutorService by Jenkov</a></li>
<li><a href="http://tutorials.jenkov.com/java-util-concurrent/java-callable.html">Callable by Jenkov</a></li>
<li><a href="http://tutorials.jenkov.com/java-util-concurrent/java-future.html">Future by Jenkov</a></li>
<li><a href="http://tutorials.jenkov.com/java-util-concurrent/scheduledexecutorservice.html">ScheduledExecutorService by Jenkov</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Concurrency - Synchronnized</title>
    <url>/Java/Java-Concurrency-Synchronized/</url>
    <content><![CDATA[<p>Multithread applications are more efficient but if shared resources are not protected, race condition may occur and cause unexpected behavior. We need to properly synchronize </p>
<span id="more"></span>
<h1 id="Race-Condition"><a href="#Race-Condition" class="headerlink" title="Race Condition"></a>Race Condition</h1><p>A <strong>race condition</strong> is the condition of an electronics, software, or other system where the system’s substantive behavior is dependent on the sequence or timing of other uncontrollable events. It becomes a bug when one or more of the possible behaviors is undesirable.</p>
<p>A  simple Counter demo class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">long</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">long</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If more than one thread calls setCount or increment method, we will have a race condition.</p>
<p>Note that <code>increment()</code> method has only one statement <code>count++</code>. <code>count++</code> is not atomic. When compiled to bytecode, it becomes multiple operations. First it reads count variable, then add 1. Finally set the result to the original variable.</p>
<p>Sequence of events that cause race condition</p>
<table>
<thead>
<tr>
<th>count in memory</th>
<th>thread1</th>
<th>thread2</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>read count(0) into register</td>
<td></td>
</tr>
<tr>
<td>0</td>
<td></td>
<td>read count(0) into register</td>
</tr>
<tr>
<td>0</td>
<td>count incremnt by 1</td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>write count to memory. count is now 1</td>
<td></td>
</tr>
<tr>
<td>1</td>
<td></td>
<td>count increment by 1</td>
</tr>
<tr>
<td>1</td>
<td></td>
<td>write cocunt to memory. count is now 1</td>
</tr>
</tbody></table>
<p>Here the increment method is called by both threads and the result should be 2. However, the result is 1 because of the race condition.</p>
<p>We can use Junit test that demonstrate the effects of race condition. The test below uses a thread pool to run <code>increment()</code> method 1000 times. The count doesn’t add up to 1000 because of race condition.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">raceConditionDemo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Counter</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">    List&lt;Callable&lt;String&gt;&gt; myCallables = Collections.nCopies(<span class="number">1000</span>, () -&gt; &#123;</span><br><span class="line">        counter.increment();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    executor.invokeAll(myCallables);</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    executor.shutdown();</span><br><span class="line">    assertEquals(<span class="number">1000</span>, counter.getCount()); <span class="comment">// count should be 1000 because we call increment() 1000 times.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The actual count varies for each invocation:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.opentest4j.AssertionFailedError: </span><br><span class="line">Expected :1000</span><br><span class="line">Actual   :989</span><br></pre></td></tr></table></figure>

<p><strong>How to solve Race Condition</strong></p>
<p>To solve race condition issue, we often need to make sure critical section is executed by one thread only at any time. In Java, we can use <code>synchronized</code> keyword on a method or code block to synchronize resource access. When one thread is execute the code block with <code>synchronized</code> keyword, other threads need to wait until the thread finish the code block and release the lock.</p>
<h1 id="Synchronized-method"><a href="#Synchronized-method" class="headerlink" title="Synchronized method"></a>Synchronized method</h1><p>Add <em>synchronized</em> keyword to make a method synchronized.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">long</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To make a method synchronized has two effects:</p>
<p>First, it is not possible for two invocations of synchronized methods on the same object to interleave. When one thread is executing a synchronized method for an object, all other threads that invoke synchronized methods for the same object block (suspend execution) until the first thread is done with the object.<br>Second, when a synchronized method exits, it automatically establishes a happens-before relationship with any subsequent invocation of a synchronized method for the same object. This guarantees that changes to the state of the object are visible to all threads.</p>
<h1 id="Intrinsic-Locks"><a href="#Intrinsic-Locks" class="headerlink" title="Intrinsic Locks"></a>Intrinsic Locks</h1><p>Every object has a lock associated with it. That is the <strong>Intrinsic Lock</strong> of the object. </p>
<p>If a thread needs to access an object’s fields, it first needs to own the intrinsic lock of the object. Other threads that do own an object’s intrinsic lock can’t access the object’s fields until the owning thread release the intrinsic lock. </p>
<p>When a thread invokes a <em>synchronized method</em>, it automatically acquires the intrinsic lock for that method’s object and releases it when the method returns.</p>
<h1 id="Synchronized-statement"><a href="#Synchronized-statement" class="headerlink" title="Synchronized statement"></a>Synchronized statement</h1><p>You can use <strong>synchronized statement</strong> instead of synchronized method to coordinate resource access.</p>
<p>To use synchronized statement, you need to specify the object that provides the intrinsic lock.</p>
<p>use of synchronized statement</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">long</span> count)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>synchronized statement provides greater flexibility than synchronized method. You use it when you need fine-grain synchronization.</p>
<p>Here is a more practical use of synchronized statement:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComputerCount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> pcCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> macCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">pcCountLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">macCountLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getPcCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (pcCountLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> pcCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getMacCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (macCountLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> macCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pcIncr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (pcCountLock) &#123;</span><br><span class="line">            pcCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">macIncr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (macCountLock) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> ( macCountLock ) &#123;</span><br><span class="line">                macCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Race_condition">Race Condition</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html">Oracle java tutorial - synchronized method </a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html">Oracle java tutorial - Intrinsic Locks and Synchronization</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Concurrency - Thread.join()</title>
    <url>/Java/Java-Concurrency-Thread-join/</url>
    <content><![CDATA[<p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#join--">Thread.join()</a> is the most basic mechanism of inter-thread synchronization in Java.</p>
<span id="more"></span>


<h1 id="Thread-join-Method"><a href="#Thread-join-Method" class="headerlink" title="Thread.join() Method"></a>Thread.join() Method</h1><p>The calling thread goes into wating state. It waits for the referenced thread to terminate.</p>
<p>Thread.join() throws InterruptedException - if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown.</p>
<p>Example</p>
<p>CountDownRunnable Class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - start execution&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - &quot;</span> + i);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// when interrupted, stop execution and return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - finish execution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - start execution&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">countdownThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">CountDownRunnable</span>(), <span class="string">&quot;countdown&quot;</span>);</span><br><span class="line"></span><br><span class="line">    countdownThread.start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        countdownThread.join();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - finish execution&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">main - start execution</span><br><span class="line">countdown - start execution</span><br><span class="line">countdown - <span class="number">3</span></span><br><span class="line">countdown - <span class="number">2</span></span><br><span class="line">countdown - <span class="number">1</span></span><br><span class="line">countdown - <span class="number">0</span></span><br><span class="line">countdown - finish execution</span><br><span class="line">main - finish execution</span><br></pre></td></tr></table></figure>

<p>if there is no thread join, main thread will finish before countdown thread. see output</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">main - start execution</span><br><span class="line">main - finish execution</span><br><span class="line">countdown - start execution</span><br><span class="line">countdown - <span class="number">3</span></span><br><span class="line">countdown - <span class="number">2</span></span><br><span class="line">countdown - <span class="number">1</span></span><br><span class="line">countdown - <span class="number">0</span></span><br><span class="line">countdown - finish execution</span><br></pre></td></tr></table></figure>

<h1 id="Thread-join-long-millis"><a href="#Thread-join-long-millis" class="headerlink" title="Thread.join(long millis)"></a>Thread.join(long millis)</h1><p>The calling thread goes into wating state.  It Waits at most millis milliseconds for the referenced thread to die. A timeout of 0 means to wait forever.</p>
<p>This method is very useful to prevent the calling thread from waiting too long.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">countdownThread.start();</span><br><span class="line">countdownThread.join(<span class="number">1500</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#join--">Thread Class</a></li>
<li><a href="https://www.baeldung.com/java-thread-join">The Thread.join() Method in Java by Baeldung</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Concurrency - Thread</title>
    <url>/Java/Java-Concurrency-Thread/</url>
    <content><![CDATA[<p>With Java Concurrency, applications can achieve higher performance and better code design.</p>
<span id="more"></span>

<h1 id="Concurrency-vs-Parallelism"><a href="#Concurrency-vs-Parallelism" class="headerlink" title="Concurrency vs. Parallelism"></a>Concurrency vs. Parallelism</h1><p><strong>concurrent computing</strong> - tasks are executed in overlapping time period.</p>
<p>concurrent programming is different from parallel computing. parallel computing means multiple calculations are carried out simultaneously. Parallel computing is impossible in a single core processor because only one calculation can occur at any time.</p>
<p>An application can be concurrent but not parallel - application is running two tasks in overlapping time periods but not at the same time.</p>
<h1 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h1><p>In an Operating system, a process can hold one or more <strong>threads</strong>. Threads exists within a process. Threads belonging to a process share memory and resources within the process. Threads are sometimes called <strong>light weight process</strong>. </p>
<p>For more information on Threads, see <a href="https://www.internalpointers.com/post/gentle-introduction-multithreading">A gentle introduction to multithreading</a></p>
<h1 id="MultiThreading-Benefits"><a href="#MultiThreading-Benefits" class="headerlink" title="MultiThreading Benefits"></a>MultiThreading Benefits</h1><p><strong>Increase Responsiveness</strong> - When one thread is blocked or stucked in a slow operation, Operating system can switch to execute another thread. For example, UI thread can continue execution while IO thread is working on the background to save documents.</p>
<p><strong>Economy</strong> - Threads are much cheaper to create than process.</p>
<p><strong>Scalability</strong> - Some tasks can be divided into subtasks and be executed by threads. This increase the efficiency of the application.</p>
<h1 id="Creating-a-Thread"><a href="#Creating-a-Thread" class="headerlink" title="Creating a Thread"></a>Creating a Thread</h1><p>You can create a thread by creating <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html">Runnable</a>  Interface or extending <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html">Thread</a> class. It is perferred to create a <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html">Thread</a> from a <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html">Runnable</a> Interface.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - Hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyRunnable</span> <span class="variable">myRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable).start();</span><br></pre></td></tr></table></figure>

<p>You can also specify thread name in the constructor.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyRunnable</span> <span class="variable">myRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable, <span class="string">&quot;MyRunnable-0&quot;</span>).start();</span><br></pre></td></tr></table></figure>

<p>In Java 8, you can pass Lambda to create the thread</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - Hello!&quot;</span>);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<h1 id="Thread-methods"><a href="#Thread-methods" class="headerlink" title="Thread methods"></a>Thread methods</h1><p><strong>start()</strong><br>cause a thread to start execution. The most important method of Thread. This method is different from <em>run()</em> method. <em>run()</em> does not start a new thread. It just executes Runnable’s <em>run()</em> method.</p>
<p><strong>getId()</strong><br>returns the id of this thread</p>
<p><strong>getName()</strong><br>return the thread’s name</p>
<p><strong>Thread.currentThread()</strong><br>static method to get the currently executing thread object.</p>
<p>example to print current thread’s name</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Thread.currentThread().getName());</span><br></pre></td></tr></table></figure>

<p><strong>Thread.sleep(long)</strong><br>static method to cause the current thread to sleep for specified number of milliseconds.</p>
<p><strong>getPriority()</strong><br>return the thread’s priority</p>
<p><strong>setpriority(int)</strong><br>sets the priority of the thread. priority is an integer between constant Thread.MIN_PRIORITY(1) and Thread.MAX_PRIORITY(10). The default priority is 5.</p>
<p><strong>getState()</strong><br>Returns the thread’s state. see Enum <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.State.html">Thread.State</a></p>
<p><strong>dumpStack()</strong><br>Prints a stack trace of the current thread to the standard error stream. Use this method for debugging purpose.</p>
<p><strong>getStackTrace()</strong><br>Returns an array of stack trace elements. Use this method for debugging purpose.</p>
<p><strong>yield()</strong><br>Hint to cause the current thread to yield its use of processor. The scheduler is free to ignore this hint. Use it to reproduce bugs due to race conditions.</p>
<p><strong>join()</strong><br>Waits for this thread to die. The calling thread goes into wating state. It waits for the referenced thread to terminate. join() method is useful for inter-thread synchronization.</p>
<p><strong>join(long millis)</strong><br>Waits at most millis milliseconds for this thread to die.</p>
<h1 id="Thread-States"><a href="#Thread-States" class="headerlink" title="Thread States"></a>Thread States</h1><p>Thread state is defined in <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.State.html">Thread.State</a>. A thread can be in one of the following states:</p>
<ul>
<li><strong>NEW</strong> - A thread that has not yet started is in this state.</li>
<li><strong>RUNNABLE</strong> - A thread executing in the Java virtual machine is in this state.</li>
<li><strong>BLOCKED</strong> - A thread that is blocked waiting for a monitor lock is in this state.</li>
<li><strong>WAITING</strong> - A thread that is waiting indefinitely for another thread to perform a particular action is in this state.</li>
<li><strong>TIMED_WAITING</strong> - A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.</li>
<li><strong>TERMINATED</strong> - A thread that has exited is in this state.</li>
</ul>
<p>For more info, see <a href="https://www.baeldung.com/java-thread-lifecycle">Life Cycle of a Thread in Java
</a></p>
<h1 id="Sleep"><a href="#Sleep" class="headerlink" title="Sleep"></a>Sleep</h1><p>Thread.sleep static method cause the current thread to sleep. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;cout down starts!&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a>Interrupt</h1><p>An interrupt is an indication to a thread that it should stop what it is doing and do something else. It’s up to the programmer to decide exactly how a thread responds to an interrupt.</p>
<p>MyCountDownRunnable.java - when interrupted, stop execution</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCountDownRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - cout down starts!&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// when interrupted, stop execution and return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Interrupte a thread by calling <code>interrupt</code> method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyCountDownRunnable</span>(), <span class="string">&quot;myRunnable-0&quot;</span>);</span><br><span class="line">    myThread.start();</span><br><span class="line">    myThread.join(<span class="number">2500</span>);</span><br><span class="line">    <span class="keyword">if</span>(myThread.isAlive()) &#123;</span><br><span class="line">        myThread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Daemon-Thread"><a href="#Daemon-Thread" class="headerlink" title="Daemon Thread"></a>Daemon Thread</h1><p>A daemon thread does not prevent the JVM from exiting when the program finishes. You don’t need daemon thread most of the time.</p>
<ul>
<li>When a new thread is created it inherits the daemon status of its parent.</li>
<li>When all user threads finish, the JVM halts, and any remaining daemon threads are abandoned.</li>
</ul>
<p><strong>isDaemon()</strong><br>Tests if this thread is a daemon thread.</p>
<p><strong>setDaemon(boolean)</strong><br>sets the thread to be a daemon thread or a user thread.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/index.html">Oracle Java Tutorial</a></li>
<li><a href="https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/">Concurrency vs. Parallelism By Lokesh Gupta</a></li>
<li><a href="https://www.baeldung.com/java-thread-join">Java Thread Join by Baelding</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>Create Directory using Java</title>
    <url>/Java/Java-Create-Directory/</url>
    <content><![CDATA[<p>Different ways to create directory in Java.</p>
<span id="more"></span>



<h1 id="Using-Files-Class"><a href="#Using-Files-Class" class="headerlink" title="Using Files Class"></a>Using Files Class</h1><p>You can use Files.createDirectories to create a directory and parent directories that do not exist.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;output/newpath/&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Files.createDirectories(path);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Using-File-Class"><a href="#Using-File-Class" class="headerlink" title="Using File Class"></a>Using File Class</h1><p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/File.html">java.io.File</a> class provides <code>mkdir()</code> and <code>mkdirs()</code> method to create directory. <code>mkdir()</code> only create a directory. <code>mkdirs()</code> creates directory and all necessary but nonexistent parent directories. Both return true if directory is created.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;output/newpath/&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(file.mkdirs()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Directory is created.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Fail to create directory.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Iterate over a HashMap</title>
    <url>/Java/Iterate-HashMap/</url>
    <content><![CDATA[<p>Iterate elements in a <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/HashMap.html">HashMap</a> using different methods in Java.</p>
<span id="more"></span>

<h1 id="Iterate-using-entrySet"><a href="#Iterate-using-entrySet" class="headerlink" title="Iterate using entrySet()"></a>Iterate using entrySet()</h1><p><code>entrySet()</code> returns a set of key-value pairs() contained in the map. It is the most efficient way to iterate over a HashMap. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;Key1&quot;</span>, <span class="string">&quot;Value1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;Key2&quot;</span>, <span class="string">&quot;Value2&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;Key3&quot;</span>, <span class="string">&quot;Value3&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;Key4&quot;</span>, <span class="string">&quot;Value4&quot;</span>);</span><br><span class="line"> </span><br><span class="line">map.entrySet().forEach(entry -&gt; &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot; &quot;</span> + entry.getValue());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h1 id="Iterate-using-forEach"><a href="#Iterate-using-forEach" class="headerlink" title="Iterate using forEach()"></a>Iterate using forEach()</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;Key1&quot;</span>, <span class="string">&quot;Value1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;Key2&quot;</span>, <span class="string">&quot;Value2&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;Key3&quot;</span>, <span class="string">&quot;Value3&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;Key4&quot;</span>, <span class="string">&quot;Value4&quot;</span>);</span><br><span class="line"></span><br><span class="line">map.forEach((key, value) -&gt; &#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot; &quot;</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Install Maven on Ubuntu</title>
    <url>/Java/Install-Maven-on-Ubuntu/</url>
    <content><![CDATA[<p>Download and Install Maven on Ubuntu</p>
<span id="more"></span>
<p>First need to make sure java is install already</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>Download maven binary using wget</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget http://mirror.reverse.net/pub/apache/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz -P /tmp</span><br></pre></td></tr></table></figure>

<p>extract to &#x2F;opt folder</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tar xf /tmp/apache-maven-*.tar.gz -C /opt</span><br></pre></td></tr></table></figure>

<p>rename the folder</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">mv apache-maven-* apache-maven</span><br></pre></td></tr></table></figure>

<p>set environment variable(can be in ~&#x2F;.bashrc file). Maven Home directory is &#x2F;opt&#x2F;apache-maven. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export M3_HOME=/opt/apache-maven</span><br><span class="line">export MAVEN_HOME=/opt/apache-maven</span><br><span class="line">export PATH=$&#123;MAVEN_HOME&#125;/bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure>

<p>Check maven version</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mvn -version</span><br><span class="line">Apache Maven 3.6.1 (d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555; 2019-04-04T15:00:29-04:00)</span><br><span class="line">Maven home: /opt/apache-maven</span><br><span class="line">Java version: 11.0.3, vendor: Ubuntu, runtime: /usr/lib/jvm/java-11-openjdk-amd64</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;5.0.0-20-generic&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure>

<p>The global level configuration file is located at </p>
<ul>
<li>&#x2F;opt&#x2F;apache-maven&#x2F;conf&#x2F;settings.xml</li>
</ul>
<p>The user level configuration file is located at</p>
<ul>
<li>~&#x2F;.m2&#x2F;settings.xml</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java Date Time API</title>
    <url>/Java/Java-Date-Time/</url>
    <content><![CDATA[<p>Java 8 introduces new Date Time API that is easier to used than the traditional java.util.Date class.</p>
<span id="more"></span>
<h1 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html">java.time.format.DateTimeFormatter</a> is the formatter for printing and parsing date-time objects.</p>
<h2 id="Predefined-DateTimeFormatter"><a href="#Predefined-DateTimeFormatter" class="headerlink" title="Predefined DateTimeFormatter"></a>Predefined DateTimeFormatter</h2><p>DateTimeFormatter has many predefined constants that can be used to format date-time objects.</p>
<ul>
<li>DateTimeFormatter.ISO_DATE - <code>yyyy-MM-dd</code></li>
<li>DateTimeFormatter.BASIC_ISO_DATE - <code>yyyyMMdd</code></li>
<li>DateTimeFormatter.ISO_DATE_TIME - <code>yyyy-MM-dd&#39;T&#39;HH:mm:ss</code></li>
<li>DateTimeFormatter.ISO_INSTANT - <code>yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;</code></li>
</ul>
<h2 id="Create-DateTimeFormatter"><a href="#Create-DateTimeFormatter" class="headerlink" title="Create DateTimeFormatter"></a>Create DateTimeFormatter</h2><p>If the predefined constants do not meet your need, you can create a <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html">DateTimeFormatter</a> using the ofPattern method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="Formatting-Date-Time"><a href="#Formatting-Date-Time" class="headerlink" title="Formatting Date Time"></a>Formatting Date Time</h2><p>You can use the format method to format a date-time object.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">formattedDate</span> <span class="operator">=</span> DateTimeFormatter.ISO_DATE.format(LocalDate.now()); <span class="comment">// e.g. 2021-07-01</span></span><br></pre></td></tr></table></figure>

<p>Alternatively, use the Date&#x2F;Time’s .format method to format a date-time object.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">formattedDate</span> <span class="operator">=</span> LocalDate.now().format(DateTimeFormatter.ISO_DATE); <span class="comment">// e.g. 2021-07-01</span></span><br></pre></td></tr></table></figure>

<h2 id="Parsing-Date-Time"><a href="#Parsing-Date-Time" class="headerlink" title="Parsing Date Time"></a>Parsing Date Time</h2><p>Use the Date&#x2F;Time’s parse method to parse a date-time string.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.parse(<span class="string">&quot;2021-07-01&quot;</span>, DateTimeFormatter.ISO_DATE);</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zonedDateTime</span> <span class="operator">=</span> ZonedDateTime.parse(<span class="string">&quot;2021-07-01T00:00:00Z&quot;</span>, DateTimeFormatter.ISO_DATE_TIME);</span><br></pre></td></tr></table></figure>


<h1 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/LocalDate.html">java.time.LocalDate</a> stores a date only such as 2022-01-01. No time info is stored.</p>
<h2 id="Create-LocalDate"><a href="#Create-LocalDate" class="headerlink" title="Create LocalDate"></a>Create LocalDate</h2><p>Use static method now(), of() and parse() to create a date.</p>
<p>static method now() - Obtains the current date from the system clock in the default time-zone. Internally calls <code>LocalDate.now(Clock.systemDefaultZone())</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate.now();</span><br></pre></td></tr></table></figure>

<p>You can provide a ZoneId to get current date from a specific time-zone.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>Obtains an instance of LocalDate from a year, month and day.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate.of(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">LocalDate.of(<span class="number">2022</span>, Month.JANUARY, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>Obtain a LocalDate by parsing. You can specify a DateTimeFormatter if input is in in <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE">DateTimeFormatter.ISO_LOCAL_DATE</a> format.<br>parse method throws DateTimeParseException if the text cannot be parsed</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate.parse(<span class="string">&quot;2022-01-01&quot;</span>);</span><br><span class="line">LocalDate.parse(<span class="string">&quot;2022/01/01&quot;</span>, DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd&quot;</span>));</span><br></pre></td></tr></table></figure>


<h2 id="Accessing-fields"><a href="#Accessing-fields" class="headerlink" title="Accessing fields"></a>Accessing fields</h2><p>There are many getter methods to get individual fields</p>
<ul>
<li>getYear()</li>
<li>getMonth()</li>
<li>getDayOfYear()</li>
<li>getDayOfMonth()</li>
<li>getDayOfWeek()</li>
<li>getLong(TemporalField field)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> LocalDate.now().getYear();</span><br><span class="line"><span class="type">Month</span> <span class="variable">month</span> <span class="operator">=</span> LocalDate.now().getMonth();</span><br><span class="line"><span class="type">int</span> <span class="variable">dayOfYear</span> <span class="operator">=</span> LocalDate.now().getDayOfYear();</span><br><span class="line"><span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> LocalDate.now().getDayOfMonth(); </span><br><span class="line"><span class="type">DayOfWeek</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> LocalDate.now().getDayOfWeek();</span><br></pre></td></tr></table></figure>

<h2 id="Calculation-methods"><a href="#Calculation-methods" class="headerlink" title="Calculation methods"></a>Calculation methods</h2><p>Use the following methods to calculate dates. All of these return a copy of LocalDate.</p>
<ul>
<li>plus(long amountToAdd, TemporalUnit unit)</li>
<li>plus(TemporalAmount amountToAdd)</li>
<li>plusDays(long)</li>
<li>plusWeeks(long)</li>
<li>plusMonths(long)</li>
<li>plusYears(long)</li>
<li>minus(long amountToSubtract, TemporalUnit unit)</li>
<li>minus(TemporalAmount amountToSubtract)</li>
<li>minusDays(long)</li>
<li>minusWeeks(long)</li>
<li>minusMonths(long)</li>
<li>minusYears(long)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate.of(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>).plus(<span class="number">3</span>, ChronoUnit.DAYS)</span><br><span class="line">LocalDate.of(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>).plus(Period.ofDays(<span class="number">3</span>))</span><br><span class="line">LocalDate.now().plusDays(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h2><p>LocalDate.toString method outputs the date in ISO-8601 format uuuu-MM-dd. If you need a specific format, use format method and pass a <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html">java.time.format.DateTimeFormatter</a> instance.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// formatting example</span></span><br><span class="line">LocalDate.now().format(DateTimeFormatter.ISO_DATE); <span class="comment">// e.g. 2022-01-01</span></span><br><span class="line">LocalDate.now().format(DateTimeFormatter.BASIC_ISO_DATE); <span class="comment">// e.g. 20220101</span></span><br><span class="line">LocalDate.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd&quot;</span>)); <span class="comment">// e.g. 2022/01/01</span></span><br></pre></td></tr></table></figure>

<h2 id="Other-methods"><a href="#Other-methods" class="headerlink" title="Other methods"></a>Other methods</h2><p>Methods to compare other date</p>
<ul>
<li>int compareTo(ChronoLocalDate other)</li>
<li>boolean isAfter(ChronoLocalDate other)</li>
<li>boolean isBefore(ChronoLocalDate other)</li>
<li>boolean isEqual(ChronoLocalDate other)</li>
</ul>
<p>Convert to LocalDate</p>
<ul>
<li>atStartOfDay() - Combines this date with the time of midnight to create a LocalDateTime at the start of this date.</li>
<li>atTime(int hour, int minute) - Combines this date with a time to create a LocalDateTime.</li>
<li>atTime(int hour, int minute, int second) - Combines this date with a time to create a LocalDateTime.</li>
<li>atTime(int hour, int minute, int second, int nanoOfSecond) - Combines this date with a time to create a LocalDateTime.</li>
<li>atTime(LocalTime time) - Combines this date with a time to create a LocalDateTime.</li>
</ul>
<p>Convert to ZonedDateTime</p>
<ul>
<li>ZonedDateTime atStartOfDay(ZoneId zone) - Returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone.</li>
</ul>
<h2 id="convert-to-java-util-Date"><a href="#convert-to-java-util-Date" class="headerlink" title="convert to java.util.Date"></a>convert to java.util.Date</h2><p>convert to java.util.Date. First to Instant first, then use Date.from method to create a Date.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date.from(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant());</span><br></pre></td></tr></table></figure>


<h1 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/LocalTime.html">java.time.LocalTime</a> stores a time only. No date is stored in LocalTime.</p>
<p>LocalTime is an immutable date-time object that represents a time, often viewed as hour-minute-second. Time is represented to nanosecond precision. For example, the value “13:45.30.123456789” can be stored in a LocalTime.</p>
<h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalTime.MIN <span class="comment">// 00:00</span></span><br><span class="line">LocalTime.MAX <span class="comment">// 23:59:59.999999999</span></span><br><span class="line">LocalTime.MIDNIGHT <span class="comment">// 00:00</span></span><br><span class="line">LocalTime.NOON <span class="comment">// 12:00</span></span><br></pre></td></tr></table></figure>

<h2 id="Create-LocalTime"><a href="#Create-LocalTime" class="headerlink" title="Create LocalTime"></a>Create LocalTime</h2><p>use static method now() to osbtains the current time from the system clock in the default time-zone.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalTime.now();</span><br></pre></td></tr></table></figure>

<p>You can provide a ZoneId to get current time for a time zone.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalTime.now(ZoneId.systemDefault());</span><br></pre></td></tr></table></figure>

<p>Use of method to create LocalTime</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalTime.of(<span class="number">8</span>, <span class="number">0</span>); <span class="comment">// 8:00</span></span><br><span class="line">LocalTime.of(<span class="number">14</span>, <span class="number">30</span>, <span class="number">0</span>); <span class="comment">// 14:30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pass 1000 nano seconds as the fourth argument</span></span><br><span class="line">LocalTime.of(<span class="number">14</span>, <span class="number">30</span>, <span class="number">10</span>, <span class="number">1000</span>); <span class="comment">// 14:30:10.000001</span></span><br></pre></td></tr></table></figure>

<p>Parse from a String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalTime.parse(<span class="string">&quot;14:30&quot;</span>);</span><br><span class="line">LocalTime.parse(<span class="string">&quot;14:30:00&quot;</span>);</span><br><span class="line">LocalTime.parse(<span class="string">&quot;00:00:00&quot;</span>, DateTimeFormatter.ISO_LOCAL_TIME);</span><br></pre></td></tr></table></figure>

<h2 id="Accessing-fields-1"><a href="#Accessing-fields-1" class="headerlink" title="Accessing fields"></a>Accessing fields</h2><ul>
<li>getHour()     </li>
<li>getMinute()</li>
<li>getSecond()</li>
<li>getNano()</li>
<li>getLong(TemporalField field)</li>
</ul>
<h2 id="Calculation-methods-1"><a href="#Calculation-methods-1" class="headerlink" title="Calculation methods"></a>Calculation methods</h2><ul>
<li>plus(long amountToAdd, TemporalUnit unit)</li>
<li>plus(TemporalAmount amountToAdd)</li>
<li>plusHours()</li>
<li>plusMinutes()</li>
<li>plusNanos()</li>
<li>plusSeconds()</li>
<li>minus(long amountToAdd, TemporalUnit unit)</li>
<li>minus(TemporalAmount amountToAdd)</li>
<li>minusHours()</li>
<li>minusMinutes()</li>
<li>minusNanos()</li>
<li>minusSeconds()</li>
</ul>
<h2 id="Formatting-1"><a href="#Formatting-1" class="headerlink" title="Formatting"></a>Formatting</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalTime.now().format(DateTimeFormatter.ISO_TIME); <span class="comment">// 20:54:24.015</span></span><br><span class="line">LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME); <span class="comment">// 20:54:24.015</span></span><br><span class="line">LocalTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm:ss&quot;</span>)); <span class="comment">// 08:54:24</span></span><br></pre></td></tr></table></figure>

<h2 id="Other-methods-1"><a href="#Other-methods-1" class="headerlink" title="Other methods"></a>Other methods</h2><p><code>truncatedTo(TemporalUnit unit)</code> - Returns a copy of this LocalTime with the time truncated.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalTime.now().truncatedTo(ChronoUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<p>LocalDateTime atDate(LocalDate date) - Combines this time with a date to create a LocalDateTime.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">tomorrowDateTime</span> <span class="operator">=</span> LocalTime.now().atDate(LocalDate.now().plusDays(<span class="number">1</span>)); <span class="comment">// 2022-06-18T23:32:00.615737</span></span><br></pre></td></tr></table></figure>

<h1 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/LocalDateTime.html">java.time.LocalDateTime</a> - A date-time without a time-zone in the ISO-8601 calendar system, such as 2007-12-03T10:15:30.</p>
<h2 id="Create-LocalDateTime"><a href="#Create-LocalDateTime" class="headerlink" title="Create LocalDateTime"></a>Create LocalDateTime</h2><p>use now() to get the current local date time. Provide a ZoneId to get the local time of a specific timezone.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">LocalDateTime.now(ZoneOffset.UTC); <span class="comment">// get UTC LocalDateTime 2022-06-19T18:19:32.505436</span></span><br></pre></td></tr></table></figure>

<p>Use of() method to construct a local date time</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime.of(<span class="number">2022</span>, Month.JANUARY, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 2022-01-01T00:00</span></span><br></pre></td></tr></table></figure>

<p>parse from a String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime.parse(<span class="string">&quot;2022-01-01T00:00&quot;</span>);</span><br><span class="line">LocalDateTime.parse(<span class="string">&quot;2022-06-19T13:53:59&quot;</span>, DateTimeFormatter.ISO_DATE_TIME)</span><br><span class="line">LocalDateTime.parse(<span class="string">&quot;2022-06-19T13:53:59Z&quot;</span>, DateTimeFormatter.ISO_DATE_TIME)</span><br><span class="line">LocalDateTime.parse(<span class="string">&quot;2022-06-19T13:53:59.478775&quot;</span>, DateTimeFormatter.ISO_DATE_TIME);</span><br><span class="line">LocalDateTime.parse(<span class="string">&quot;2022/08/17 21:19:55&quot;</span>, DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>Convert an Instant to LocalDateTime</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// instant converted to LocalDateTime in US East timezone</span></span><br><span class="line"><span class="comment">// 2022-06-01T00:00:00.00Z ==&gt; 2022-05-31T20:00</span></span><br><span class="line">LocalDateTime.ofInstant(Instant.parse(<span class="string">&quot;2022-06-01T00:00:00.00Z&quot;</span>), ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="Accessing-Fields"><a href="#Accessing-Fields" class="headerlink" title="Accessing Fields"></a>Accessing Fields</h2><ul>
<li>getYear()</li>
<li>getMonth()</li>
<li>getDayOfYear()</li>
<li>getDayOfMonth()</li>
<li>getDayOfWeek()</li>
<li>getHour()</li>
<li>getMinute()</li>
<li>getSecond()</li>
<li>getNano()</li>
<li>getLong(TemporalField field)</li>
</ul>
<h2 id="Calculation"><a href="#Calculation" class="headerlink" title="Calculation"></a>Calculation</h2><ul>
<li>plus(long amountToAdd, TemporalUnit unit)</li>
<li>plus(TemporalAmount amountToAdd)</li>
<li>plusDays(long)</li>
<li>plusWeeks(long)</li>
<li>plusMonths(long)</li>
<li>plusYears(long)</li>
<li>plusHours()</li>
<li>plusMinutes()</li>
<li>plusNanos()</li>
<li>plusSeconds()</li>
<li>minus(long amountToAdd, TemporalUnit unit)</li>
<li>minus(TemporalAmount amountToAdd)</li>
<li>minusDays(long)</li>
<li>minusWeeks(long)</li>
<li>minusMonths(long)</li>
<li>minusYears(long)</li>
<li>minusHours()</li>
<li>minusMinutes()</li>
<li>minusNanos()</li>
<li>minusSeconds()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime.now().plus(<span class="number">1</span>, ChronoUnit.HOURS);</span><br></pre></td></tr></table></figure>

<h2 id="Formatting-2"><a href="#Formatting-2" class="headerlink" title="Formatting"></a>Formatting</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME); <span class="comment">// 2022-06-19T13:53:59.478775</span></span><br><span class="line">LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME); <span class="comment">// 2022-06-19T13:54:39.712041</span></span><br><span class="line">LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>)); <span class="comment">// 2022/08/17 21:19:55</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h2 id="Other-methods-2"><a href="#Other-methods-2" class="headerlink" title="Other methods"></a>Other methods</h2><p>toLocalDate() - gets the local date part</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDateTime.now().toLocalDate(); <span class="comment">// 2022-06-19</span></span><br></pre></td></tr></table></figure>

<p>toLocalTime() - gets the local time part</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime.now().toLocalTime(); <span class="comment">//14:32:29.085858</span></span><br></pre></td></tr></table></figure>

<p>atZone(ZoneId zone) - Combines this date-time with a time-zone to create a ZonedDateTime.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime.now().atZone(ZoneOffset.UTC);</span><br></pre></td></tr></table></figure>

<h1 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/ZonedDateTime.html">java.time.ZonedDateTime</a> - datetime with ZoneId. represent an instant in a Timezone. </p>
<h2 id="Create-a-ZonedDateTime"><a href="#Create-a-ZonedDateTime" class="headerlink" title="Create a ZonedDateTime"></a>Create a ZonedDateTime</h2><p>create a ZonedDateTime using now() method. Returns the current date-time using the system clock in the default time-zone.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zonedDateTimeNow</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line"><span class="comment">// 2023-02-17T23:25:40.460698-05:00[America/New_York]</span></span><br></pre></td></tr></table></figure>

<p>create a ZonedDateTime using <code>now(ZoneId zone)</code> method. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">utcNow</span> <span class="operator">=</span> ZonedDateTime.now(ZoneOffset.UTC); </span><br><span class="line"><span class="comment">// 2022-06-23T03:39:49.946535Z</span></span><br><span class="line"></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">usEastNow</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)); </span><br><span class="line"><span class="comment">// 2022-06-22T23:40:02.226819-04:00[America/New_York]</span></span><br></pre></td></tr></table></figure>

<p>create ZonedDateTime from a LocalDateTime and a ZoneId.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime.of(LocalDateTime.parse(<span class="string">&quot;2022-01-01T03:00&quot;</span>),</span><br><span class="line">    ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)); </span><br><span class="line"><span class="comment">// 2022-01-01T00:00-05:00[America/New_York]</span></span><br></pre></td></tr></table></figure>

<p>create ZonedDateTime from a LocalDate, LocalTime and a ZoneId</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime.of(LocalDate.parse(<span class="string">&quot;2022-01-01&quot;</span>), LocalTime.parse(<span class="string">&quot;03:00&quot;</span>),</span><br><span class="line">    ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)); </span><br><span class="line"><span class="comment">// 2022-01-01T00:00-05:00[America/New_York]</span></span><br></pre></td></tr></table></figure>

<p>create an instance of ZonedDateTime from a year, month, day, hour, minute, second, nanosecond and time-zone.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime.of(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)); <span class="comment">// 2022-01-01T03:00-05:00[America/New_York]</span></span><br></pre></td></tr></table></figure>

<p>create an instance of ZonedDateTime from an Instant.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime.ofInstant(Instant.parse(<span class="string">&quot;2023-01-01T00:00:00Z&quot;</span>), ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>))</span><br><span class="line"><span class="comment">// 2022-12-31T19:00-05:00[America/New_York]</span></span><br></pre></td></tr></table></figure>

<p>create ZonedDateTime by parsing String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime.parse(<span class="string">&quot;2023-01-01T00:00-05:00[America/New_York]&quot;</span>);</span><br><span class="line">ZonedDateTime.parse(<span class="string">&quot;2023-06-01T00:00-04:00[America/New_York]&quot;</span>)</span><br><span class="line">ZonedDateTime.parse(<span class="string">&quot;2007-12-03T10:15:30Z&quot;</span>, DateTimeFormatter.ISO_DATE_TIME);</span><br></pre></td></tr></table></figure>

<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>toString method Outputs this date-time as a String, such as <code>2007-12-03T10:15:30+01:00[Europe/Paris]</code>.<br>The format consists of the LocalDateTime followed by the ZoneOffset.</p>
<h2 id="Accessing-Fields-1"><a href="#Accessing-Fields-1" class="headerlink" title="Accessing Fields"></a>Accessing Fields</h2><ul>
<li>getYear()</li>
<li>getMonth()</li>
<li>getDayOfYear()</li>
<li>getDayOfMonth()</li>
<li>getDayOfWeek()</li>
<li>getHour()</li>
<li>getMinute()</li>
<li>getSecond()</li>
<li>getNano()</li>
<li>getLong(TemporalField field)</li>
</ul>
<h2 id="Getting-ZoneId-and-ZoneOffset"><a href="#Getting-ZoneId-and-ZoneOffset" class="headerlink" title="Getting ZoneId and ZoneOffset"></a>Getting ZoneId and ZoneOffset</h2><p>ZonedDateTime has <code>getZone()</code> method to return ZoneId value and <code>getOffset()</code> method to get ZoneOffset.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).getZone(); <span class="comment">// ZoneId: America/New_York</span></span><br><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).getOffset(); <span class="comment">// ZoneOffset -04:00 or -5:00</span></span><br></pre></td></tr></table></figure>

<h2 id="Calculation-1"><a href="#Calculation-1" class="headerlink" title="Calculation"></a>Calculation</h2><ul>
<li>plus(long amountToAdd, TemporalUnit unit)</li>
<li>plus(TemporalAmount amountToAdd)</li>
<li>plusDays(long)</li>
<li>plusWeeks(long)</li>
<li>plusMonths(long)</li>
<li>plusYears(long)</li>
<li>plusHours()</li>
<li>plusMinutes()</li>
<li>plusNanos()</li>
<li>plusSeconds()</li>
<li>minus(long amountToAdd, TemporalUnit unit)</li>
<li>minus(TemporalAmount amountToAdd)</li>
<li>minusDays(long)</li>
<li>minusWeeks(long)</li>
<li>minusMonths(long)</li>
<li>minusYears(long)</li>
<li>minusHours()</li>
<li>minusMinutes()</li>
<li>minusNanos()</li>
<li>minusSeconds()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).plusDays(<span class="number">1</span>);</span><br><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).plus(<span class="number">1</span>, ChronoUnit.HOURS);</span><br></pre></td></tr></table></figure>

<h2 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a>Formatter</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).format(DateTimeFormatter.ISO_DATE_TIME); <span class="comment">// 2022-08-17T21:00:26.343-04:00[America/New_York]</span></span><br><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME); <span class="comment">// 2022-08-17T21:00:26.343</span></span><br><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME); <span class="comment">// 2022-08-17T21:01:54.186-04:00</span></span><br><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm:ss z&quot;</span>)); <span class="comment">// 2022/08/17 21:01:13 EDT</span></span><br></pre></td></tr></table></figure>

<h2 id="Convert-to-Different-Zone"><a href="#Convert-to-Different-Zone" class="headerlink" title="Convert to Different Zone"></a>Convert to Different Zone</h2><p>withZoneSameInstant &#x3D; used to convert between differnet timezone</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// convert between different timezone</span></span><br><span class="line"><span class="comment">// find time in Singapore timezone. wow! it is 13 hours ahead....</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">singaporeTime</span> <span class="operator">=</span> estTime.withZoneSameInstant(ZoneId.of(<span class="string">&quot;Asia/Singapore&quot;</span>)); <span class="comment">// 2022-01-01T13:00+08:00[Asia/Singapore]</span></span><br><span class="line">System.out.println(<span class="string">&quot;find time in Singapore timezone: &quot;</span> + singaporeTime);</span><br></pre></td></tr></table></figure>

<h2 id="Convert-to-java-util-Date"><a href="#Convert-to-java-util-Date" class="headerlink" title="Convert to java.util.Date"></a>Convert to java.util.Date</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date.from(ZonedDateTime.now().toInstant());</span><br></pre></td></tr></table></figure>

<h2 id="Convert-from-java-util-Date"><a href="#Convert-from-java-util-Date" class="headerlink" title="Convert from java.util.Date"></a>Convert from java.util.Date</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> DateUtils.parseDate(<span class="string">&quot;2024-06-01&quot;</span>, <span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zonedDateTime</span> <span class="operator">=</span> ZonedDateTime.ofInstant(date.toInstant(), ZoneId.of(<span class="string">&quot;US/Eastern&quot;</span>));</span><br><span class="line">System.out.println(zonedDateTime); <span class="comment">// 2024-06-01T00:00-04:00[US/Eastern]</span></span><br></pre></td></tr></table></figure>



<h2 id="Other-methods-3"><a href="#Other-methods-3" class="headerlink" title="Other methods"></a>Other methods</h2><ul>
<li>toLocalDate - gets the LocalDate part of ZonedDateTime</li>
<li>toLocalTime - gets the LocalTime part of ZonedDateTime</li>
<li>toLocalDateTime  - gets the LocalDateTime part of ZonedDateTime</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.parse(<span class="string">&quot;2022-06-20T10:15:30-04:00[America/New_York]&quot;</span>);</span><br><span class="line">now.toLocalDate();</span><br><span class="line"><span class="comment">// ==&gt; 2022-07-06</span></span><br><span class="line"></span><br><span class="line">now.toLocalTime();</span><br><span class="line"><span class="comment">// ==&gt; 00:13:10.163026</span></span><br><span class="line"></span><br><span class="line">now.toLocalDateTime();</span><br><span class="line"><span class="comment">// ==&gt; 2022-07-06T00:13:10.163026</span></span><br></pre></td></tr></table></figure>

<h1 id="OffsetDateTime"><a href="#OffsetDateTime" class="headerlink" title="OffsetDateTime"></a>OffsetDateTime</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/OffsetDateTime.html">OffsetDateTime</a> - contains date-time and an offset such as  2022-01-01T03:00:00-05:00.</p>
<p>Difference bewteen OffsetDateTime, ZonedDateTime and Instant - see <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/OffsetDateTime.html">Javadoc</a></p>
<blockquote>
<p>“OffsetDateTime, ZonedDateTime and Instant all store an instant on the time-line to nanosecond precision. Instant is the simplest, simply representing the instant. OffsetDateTime adds to the instant the offset from UTC&#x2F;Greenwich, which allows the local date-time to be obtained. ZonedDateTime adds full time-zone rules.” </p>
</blockquote>
<h2 id="Create-OffsetDateTime"><a href="#Create-OffsetDateTime" class="headerlink" title="Create OffsetDateTime"></a>Create OffsetDateTime</h2><p>create an OffsetDateTime using now() method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OffsetDateTime</span> <span class="variable">utcNow</span> <span class="operator">=</span> OffsetDateTime.now(ZoneOffset.UTC); </span><br><span class="line"><span class="comment">// 2022-06-23T03:38:41.164348Z</span></span><br><span class="line"></span><br><span class="line"><span class="type">OffsetDateTime</span> <span class="variable">usEastNow</span> <span class="operator">=</span> OffsetDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)); </span><br><span class="line"><span class="comment">// 2022-06-22T23:39:07.345612-04:00</span></span><br><span class="line"></span><br><span class="line"><span class="type">OffsetDateTime</span> <span class="variable">usEastNow</span> <span class="operator">=</span> OffsetDateTime.now(ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>));</span><br><span class="line"><span class="comment">// 2022-06-22T23:39:07.345612-04:00</span></span><br></pre></td></tr></table></figure>

<p>create OffsetDateTime from a LocalDateTime and a ZoneOffset.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OffsetDateTime.of(LocalDateTime.parse(<span class="string">&quot;2022-01-01T15:00&quot;</span>),</span><br><span class="line">   ZoneOffset.of(<span class="string">&quot;-05:00&quot;</span>));</span><br><span class="line"><span class="comment">// 2022-01-01T15:00-05:00</span></span><br></pre></td></tr></table></figure>

<p>create OffsetDateTime from a LocalDate, LocalTime and a ZoneOffset</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OffsetDateTime.of(LocalDate.parse(<span class="string">&quot;2022-01-01&quot;</span>), LocalTime.parse(<span class="string">&quot;15:00&quot;</span>),</span><br><span class="line">    ZoneOffset.of(<span class="string">&quot;-05:00&quot;</span>)); </span><br><span class="line"><span class="comment">// 2022-01-01T15:00-05:00</span></span><br></pre></td></tr></table></figure>

<p>create an instance of OffsetDateTime from a year, month, day, hour, minute, second, nanosecond and ZoneOffset.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OffsetDateTime.of(<span class="number">2022</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>)); </span><br><span class="line"><span class="comment">// 2022-06-01T03:00-04:00</span></span><br></pre></td></tr></table></figure>

<p>create an instance of OffsetDateTime from an Instant.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OffsetDateTime.ofInstant(Instant.parse(<span class="string">&quot;2022-01-01T00:00:00Z&quot;</span>), ZoneId.of(<span class="string">&quot;Asia/Tokyo&quot;</span>)); </span><br><span class="line"><span class="comment">// 2022-01-01T09:00+09:00</span></span><br></pre></td></tr></table></figure>

<p>create OffsetDateTime by parsing String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OffsetDateTime.parse(<span class="string">&quot;2022-12-03T10:15:30+09:00&quot;</span>);</span><br><span class="line">OffsetDateTime.parse(<span class="string">&quot;2022-12-03T10:15:30+09:00&quot;</span>, DateTimeFormatter.ISO_OFFSET_DATE_TIME);</span><br></pre></td></tr></table></figure>

<h2 id="Accessing-Fields-2"><a href="#Accessing-Fields-2" class="headerlink" title="Accessing Fields"></a>Accessing Fields</h2><ul>
<li>getYear()</li>
<li>getMonth()</li>
<li>getDayOfYear()</li>
<li>getDayOfMonth()</li>
<li>getDayOfWeek()</li>
<li>getHour()</li>
<li>getMinute()</li>
<li>getSecond()</li>
<li>getNano()</li>
<li>getLong(TemporalField field)</li>
</ul>
<p>OffsetDateTime has <code>getOffset()</code> method to return ZoneOffset</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OffsetDateTime.now(ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>)).getOffset(); <span class="comment">// returns ZoneOffset -04:00</span></span><br></pre></td></tr></table></figure>

<p>methods to get part of an OffsetDateTime</p>
<ul>
<li>toLocalDate()</li>
<li>toLocalDateTime()</li>
<li>toLocalTime()</li>
<li>toOffsetTime()</li>
</ul>
<h2 id="Calculation-2"><a href="#Calculation-2" class="headerlink" title="Calculation"></a>Calculation</h2><ul>
<li>plus(long amountToAdd, TemporalUnit unit)</li>
<li>plus(TemporalAmount amountToAdd)</li>
<li>plusDays(long)</li>
<li>plusWeeks(long)</li>
<li>plusMonths(long)</li>
<li>plusYears(long)</li>
<li>plusHours()</li>
<li>plusMinutes()</li>
<li>plusNanos()</li>
<li>plusSeconds()</li>
<li>minus(long amountToAdd, TemporalUnit unit)</li>
<li>minus(TemporalAmount amountToAdd)</li>
<li>minusDays(long)</li>
<li>minusWeeks(long)</li>
<li>minusMonths(long)</li>
<li>minusYears(long)</li>
<li>minusHours()</li>
<li>minusMinutes()</li>
<li>minusNanos()</li>
<li>minusSeconds()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OffsetDateTime.now(ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>)).plusDays(<span class="number">1</span>);</span><br><span class="line">OffsetDateTime.now(ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>)).plus(<span class="number">1</span>, ChronoUnit.HOURS);</span><br></pre></td></tr></table></figure>

<h2 id="Formatter-1"><a href="#Formatter-1" class="headerlink" title="Formatter"></a>Formatter</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OffsetDateTime.now(ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>)).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME); <span class="comment">// 2022-06-23T00:01:19.596163-04:00</span></span><br><span class="line">OffsetDateTime.now(ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>)).format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm:ss X&quot;</span>)); <span class="comment">// 2022/06/23 00:02:48 -04</span></span><br></pre></td></tr></table></figure>
<h2 id="Other-methods-4"><a href="#Other-methods-4" class="headerlink" title="Other methods"></a>Other methods</h2><p>atZoneSameInstant(ZoneId zone) - convert to ZonedDateTime by providing a ZoneId</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OffsetDateTime.now(ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>)).atZoneSameInstant(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>toInstant() - convert to Instant</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OffsetDateTime.now(ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>)).toInstant();</span><br></pre></td></tr></table></figure>

<p>toEpochSecond() - get number of seconds since the epoch of 1970-01-01T00:00:00Z.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OffsetDateTime.now(ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>)).toEpochSecond();</span><br></pre></td></tr></table></figure>

<h2 id="Convert-to-java-util-Date-1"><a href="#Convert-to-java-util-Date-1" class="headerlink" title="Convert to java.util.Date"></a>Convert to java.util.Date</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(OffsetDateTime.now(ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>)).toInstant());</span><br></pre></td></tr></table></figure>

<h1 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/Instant.html">java.time.Instant</a> - An instantaneous point on the time-line.</p>
<p>From javadoc:</p>
<blockquote>
<p>This class models a single instantaneous point on the time-line. This might be used to record event time-stamps in the application.</p>
</blockquote>
<blockquote>
<p>The range of an instant requires the storage of a number larger than a long. To achieve this, the class stores a long representing epoch-seconds and an int representing nanosecond-of-second, which will always be between 0 and 999,999,999. The epoch-seconds are measured from the standard Java epoch of 1970-01-01T00:00:00Z where instants after the epoch have positive values, and earlier instants have negative values. For both the epoch-second and nanosecond parts, a larger value is always later on the time-line than a smaller value.</p>
</blockquote>
<h2 id="Create-an-Instant"><a href="#Create-an-Instant" class="headerlink" title="Create an Instant"></a>Create an Instant</h2><p>now() - create Instant from current epoch time.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now(); <span class="comment">// 2022-06-22T03:20:53.293075Z</span></span><br></pre></td></tr></table></figure>

<p>ofEpochMilli(long epochMilli) - create Instant using milliseconds from the epoch of 1970-01-01T00:00:00Z.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant.ofEpochMilli(<span class="number">1655869466829L</span>); <span class="comment">// 2022-06-22T03:44:26.829Z</span></span><br></pre></td></tr></table></figure>

<p>ofEpochSecond(long epochSecond) - create Instant using seconds from the epoch of 1970-01-01T00:00:00Z.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant.ofEpochSecond(<span class="number">1655869466L</span>); <span class="comment">// 2022-06-22T03:44:26Z</span></span><br></pre></td></tr></table></figure>

<p>parse() - parse an Instant from epoch time, such as “2022-06-01T00:00:00.00Z”.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant.parse(<span class="string">&quot;2022-06-01T00:00:00.00Z&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Calculation-3"><a href="#Calculation-3" class="headerlink" title="Calculation"></a>Calculation</h2><ul>
<li>plus(long amountToAdd, TemporalUnit unit)</li>
<li>plus(TemporalAmount amountToAdd)</li>
<li>plusMillis(long millisToAdd)</li>
<li>plusNanos(long nanosToAdd)</li>
<li>plusSeconds(long secondsToAdd)</li>
<li>minus(long amountToSubtract, TemporalUnit unit)</li>
<li>minus(TemporalAmount amountToSubtract)</li>
<li>minusMillis(long millisToSubtract)</li>
<li>minusNanos(long nanosToSubtract)</li>
<li>minusSeconds(long secondsToSubtract)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant.now().plus(<span class="number">10</span>, ChronoUnit.HOURS);</span><br><span class="line">Instant.now().plus(Duration.ofHours(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<h2 id="Other-methods-5"><a href="#Other-methods-5" class="headerlink" title="Other methods"></a>Other methods</h2><p>getEpochSecond() - Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant.now().getEpochSecond(); <span class="comment">// 1656043919</span></span><br></pre></td></tr></table></figure>

<p>toEpochMilli() - returns a long representing the number of milliseconds from the epoch of 1970-01-01T00:00:00Z.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant.now().toEpochMilli(); <span class="comment">// 1655869466829</span></span><br></pre></td></tr></table></figure>

<p>getLong(TemporalField field)<br>Gets the value of the specified field from this instant as a long.</p>
<p>getNano() - Gets the number of nanoseconds from the start of the second.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant.now().getNano();</span><br></pre></td></tr></table></figure>

<p>Compare with other Instant</p>
<ul>
<li>isAfter(Instant otherInstant)</li>
<li>isBefore(Instant otherInstant)</li>
</ul>
<h2 id="Convert-to-jva-util-Date"><a href="#Convert-to-jva-util-Date" class="headerlink" title="Convert to jva.util.Date"></a>Convert to jva.util.Date</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(Instant.now());</span><br></pre></td></tr></table></figure>

<h1 id="ZoneId"><a href="#ZoneId" class="headerlink" title="ZoneId"></a>ZoneId</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/ZoneId.html">java.time.ZoneId</a> - A time-zone ID, such as <code>America/New_York</code>.</p>
<p>To create a ZoneId</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>);</span><br><span class="line">ZoneId.of(<span class="string">&quot;US/Eastern&quot;</span>); <span class="comment">// It&#x27;s a link to America/New_York. US/Eastern is the old name. better to use America/New_York</span></span><br><span class="line">ZoneId.of(<span class="string">&quot;Asia/Tokyo&quot;</span>);</span><br><span class="line">ZoneId.of(<span class="string">&quot;UTC&quot;</span>); <span class="comment">// UTC TimeZone</span></span><br></pre></td></tr></table></figure>

<p>get system default timezone</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZoneId.systemDefault();</span><br></pre></td></tr></table></figure>

<p>To list all available ZoneIds</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZoneId.getAvailableZoneIds().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>The time zones are listed in this wiki: <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</a></p>
<h1 id="ZoneOffset"><a href="#ZoneOffset" class="headerlink" title="ZoneOffset"></a>ZoneOffset</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/ZoneOffset.html">java.time.ZoneOffset</a> - a subclass of ZoneId. It is a time-zone offset from UTC, such as -04:00.</p>
<p>ZoneOffset.UTC is a constatn representing the UTC.</p>
<p>create a ZoneOffset</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZoneOffset.UTC</span><br><span class="line">ZoneOffset.of(<span class="string">&quot;-04:00&quot;</span>)</span><br><span class="line">ZoneOffset.ofHours(-<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h1 id="DateTimeFormatter-1"><a href="#DateTimeFormatter-1" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html">java.time.format.DateTimeFormatter</a> is the formatter for printing and parsing date-time objects.</p>
<h2 id="DateTimeFormatter-Constants"><a href="#DateTimeFormatter-Constants" class="headerlink" title="DateTimeFormatter Constants"></a>DateTimeFormatter Constants</h2><ul>
<li>DateTimeFormatter.BASIC_ISO_DATE</li>
<li>DateTimeFormatter.ISO_DATE</li>
<li>DateTimeFormatter.ISO_DATE_TIME</li>
<li>DateTimeFormatter.ISO_INSTANT</li>
<li>DateTimeFormatter.ISO_LOCAL_DATE</li>
<li>DateTimeFormatter.ISO_LOCAL_DATE_TIME</li>
<li>DateTimeFormatter.ISO_LOCAL_TIME</li>
<li>DateTimeFormatter.ISO_OFFSET_DATE</li>
<li>DateTimeFormatter.ISO_OFFSET_DATE_TIME</li>
<li>DateTimeFormatter.ISO_OFFSET_TIME</li>
<li>DateTimeFormatter.ISO_ORDINAL_DATE</li>
<li>DateTimeFormatter.ISO_TIME</li>
<li>DateTimeFormatter.ISO_WEEK_DATE</li>
<li>DateTimeFormatter.ISO_ZONED_DATE_TIME</li>
<li>DateTimeFormatter.FC_1123_DATE_TIME</li>
</ul>
<p>Use DateTimeFormatter to parse a DateTime String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parse using DateTime</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zonedDateTime</span> <span class="operator">=</span> ZonedDateTime.parse(<span class="string">&quot;2022-06-26T17:05:41-04:00[America/New_York]&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>Use DateTimeFormatter to format datetime</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).format(DateTimeFormatter.ISO_INSTANT);</span><br><span class="line"><span class="comment">// ==&gt; &quot;2022-06-24T04:37:40.146679Z&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Create-by-ofPattern-method"><a href="#Create-by-ofPattern-method" class="headerlink" title="Create by ofPattern method"></a>Create by ofPattern method</h2><p>ofPattern(String) - Create DateTimeFormatter using pattern. For details on the Pattern symbol and their meaning, see <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html">javadoc</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy MM dd HH:mm:ss&quot;</span>));</span><br><span class="line"><span class="comment">// ==&gt; &quot;2022 06 24 00:41:10&quot;</span></span><br></pre></td></tr></table></figure>


<h2 id="Create-by-ofLocalizedDate-method"><a href="#Create-by-ofLocalizedDate-method" class="headerlink" title="Create by ofLocalizedDate method"></a>Create by ofLocalizedDate method</h2><p>create locale specific date time format using the following method</p>
<ul>
<li>ofLocalizedDate(FormatStyle)</li>
<li>ofLocalizedTime(FormatStyle)</li>
<li>ofLocalizedDateTime(FormatStyle)</li>
</ul>
<p>Usage</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate.now().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT));</span><br><span class="line"><span class="comment">// ==&gt; &quot;6/24/22&quot;</span></span><br><span class="line"></span><br><span class="line">LocalDate.now().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL));</span><br><span class="line"><span class="comment">// ==&gt; &quot;Friday, June 24, 2022&quot;</span></span><br><span class="line"></span><br><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT));</span><br><span class="line"><span class="comment">// ==&gt; &quot;6/24/22, 12:47 AM&quot;</span></span><br><span class="line"></span><br><span class="line">ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)).format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL));</span><br><span class="line"><span class="comment">// ==&gt; &quot;Friday, June 24, 2022 at 12:46:26 AM Eastern Daylight Time&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="TemporalAmount-Interface"><a href="#TemporalAmount-Interface" class="headerlink" title="TemporalAmount Interface"></a>TemporalAmount Interface</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/temporal/TemporalAmount.html">java.time.temporal.TemporalAmount</a> </p>
<p>From javadoc:</p>
<blockquote>
<p>Framework-level interface defining an amount of time, such as “6 hours”, “8 days” or “2 years and 3 months”.<br>This is the base interface type for amounts of time. An amount is distinct from a date or time-of-day in that it is not tied to any specific point on the time-line.<br>Period is a date-based implementation, storing years, months and days. Duration is a time-based implementation, storing seconds and nanoseconds, but providing some access using other duration based units such as minutes, hours and fixed 24-hour days.</p>
</blockquote>
<h2 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h2><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/Period.html">java.time.period</a></p>
<blockquote>
<p>A date-based amount of time in the ISO-8601 calendar system, such as ‘2 years, 3 months and 4 days’.</p>
</blockquote>
<p><a href="https://www.digi.com/resources/documentation/digidocs/90001437-13/reference/r_iso_8601_duration_format.htm">ISO-8601 period format</a> is used by parse() and toString() method. ISO-8601 Period has the following format:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">P(n)Y(n)M(n)DT(n)H(n)M(n)S</span><br></pre></td></tr></table></figure>

<h3 id="Create-Period"><a href="#Create-Period" class="headerlink" title="Create Period"></a>Create Period</h3><p>Create a Period using ofXXX static methods</p>
<ul>
<li>of(int years, int months, int days)</li>
<li>ofDays(int days)</li>
<li>ofMonths(int months)</li>
<li>ofWeeks(int weeks)</li>
<li>ofYears(int years)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Period.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">// ==&gt; P1Y2M</span></span><br><span class="line"></span><br><span class="line">Period.ofYears(-<span class="number">1</span>);</span><br><span class="line"><span class="comment">// ==&gt; P-1Y</span></span><br><span class="line"></span><br><span class="line">Period.ofWeeks(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// ==&gt; P700D</span></span><br></pre></td></tr></table></figure>

<p>between(LocalDate startDateInclusive, LocalDate endDateExclusive)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Period.between( LocalDate.parse(<span class="string">&quot;2022-02-01&quot;</span>), LocalDate.parse(<span class="string">&quot;2022-03-15&quot;</span>));</span><br><span class="line"><span class="comment">// ==&gt; P1M14D</span></span><br></pre></td></tr></table></figure>

<p>parse(CharSequence text) - Obtains a Period from a text string in <a href="https://www.digi.com/resources/documentation/digidocs/90001437-13/reference/r_iso_8601_duration_format.htm">ISO-8601 period format</a>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Period.parse(<span class="string">&quot;P1Y2M3W4D&quot;</span>);</span><br><span class="line"><span class="comment">// ==&gt; P1Y2M25D</span></span><br></pre></td></tr></table></figure>

<h3 id="Calculation-4"><a href="#Calculation-4" class="headerlink" title="Calculation"></a>Calculation</h3><ul>
<li>plus(TemporalAmount amountToAdd)</li>
<li>plusDays(long daysToAdd)</li>
<li>plusMonths(long monthsToAdd)</li>
<li>plusYears(long yearsToAdd)</li>
<li>minus(TemporalAmount amountToSubtract)</li>
<li>minusDays(long daysToSubtract)</li>
<li>minusMonths(long monthsToSubtract)</li>
<li>minusYears(long yearsToSubtract)</li>
<li>multipliedBy(int scalar)</li>
<li>negated()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Period.ofYears(<span class="number">1</span>).plus(Period.ofMonths(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// ==&gt; P1Y2M</span></span><br></pre></td></tr></table></figure>

<h3 id="Accessors"><a href="#Accessors" class="headerlink" title="Accessors"></a>Accessors</h3><ul>
<li>get(TemporalUnit unit)</li>
<li>getDays()</li>
<li>getMonths()</li>
<li>getYears()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Period.ofMonths(<span class="number">3</span>).get(ChronoUnit.MONTHS);</span><br><span class="line"><span class="comment">// ==&gt; 3</span></span><br></pre></td></tr></table></figure>

<h3 id="Other-methods-6"><a href="#Other-methods-6" class="headerlink" title="Other methods"></a>Other methods</h3><p>normalized() - return a copy of normalized Period.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Period.ofWeeks(<span class="number">20</span>).normalized()</span><br><span class="line"><span class="comment">// ==&gt; P140D</span></span><br><span class="line">Period.ofMonths(<span class="number">30</span>).normalized()</span><br><span class="line"><span class="comment">// ==&gt; P2Y6M</span></span><br></pre></td></tr></table></figure>

<p>isNegative() - Checks if any of the three units of this period are negative.</p>
<p>isZero() - Checks if all three units of this period are zero.</p>
<h2 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h2><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/Duration.html">java.time.Duration</a> - A time-based amount of time</p>
<h3 id="Create-Duration"><a href="#Create-Duration" class="headerlink" title="Create Duration"></a>Create Duration</h3><ul>
<li>ofDays(long days)</li>
<li>ofHours(long hours)</li>
<li>ofMillis(long millis)</li>
<li>ofMinutes(long minutes)</li>
<li>ofNanos(long nanos)</li>
<li>ofSeconds(long seconds)</li>
<li>ofSeconds(long seconds, long nanoAdjustment)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Duration.ofDays(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// ==&gt; PT24H</span></span><br><span class="line">Duration.ofSeconds(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// ==&gt; PT2S</span></span><br></pre></td></tr></table></figure>

<p>between(Temporal startInclusive, Temporal endExclusive) - calculate Duration by finding the Duration between two times.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Duration.between(LocalTime.parse(<span class="string">&quot;10:00:00&quot;</span>),LocalTime.parse(<span class="string">&quot;11:00:00&quot;</span>));</span><br><span class="line"><span class="comment">// ==&gt; PT1H</span></span><br></pre></td></tr></table></figure>

<h3 id="Calculation-5"><a href="#Calculation-5" class="headerlink" title="Calculation"></a>Calculation</h3><ul>
<li>plus (long amountToAdd, TemporalUnit unit)</li>
<li>plus (Duration duration)</li>
<li>plusDays (long daysToAdd)</li>
<li>plusHours (long hoursToAdd)</li>
<li>plusMillis(long millisToAdd)</li>
<li>plusMinutes (long minutesToAdd)</li>
<li>plusNanos (long nanosToAdd)</li>
<li>plusSeconds (long secondsToAdd)</li>
<li>minus (long amountToSubtract, TemporalUnit unit)</li>
<li>minus (Duration duration)</li>
<li>minusDays (long daysToSubtract)</li>
<li>minusHours (long hoursToSubtract)</li>
<li>minusMillis (long millisToSubtract)</li>
<li>minusMinutes (long minutesToSubtract)</li>
<li>minusNanos (long nanosToSubtract)</li>
<li>minusSeconds (long secondsToSubtract)</li>
<li>multipliedBy (long multiplicand)</li>
<li>dividedBy(long divisor)</li>
<li>dividedBy(Duration divisor)</li>
<li>negated()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> Duration.ofSeconds(<span class="number">2</span>).plus(<span class="number">2</span>, ChronoUnit.SECONDS);</span><br><span class="line"><span class="comment">// ==&gt; PT4S</span></span><br><span class="line">Duration.ofSeconds(<span class="number">60</span>).multipliedBy(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// ==&gt; PT10M</span></span><br></pre></td></tr></table></figure>

<h1 id="TemporalUnit-Interface"><a href="#TemporalUnit-Interface" class="headerlink" title="TemporalUnit Interface"></a>TemporalUnit Interface</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/temporal/TemporalUnit.html">java.time.temporal.TemporalUnit</a> Interface - A unit of date-time, such as Days or Hours.</p>
<p>Implementations are ChronoUnit and Unit. Both are enum. The most commonly used units are defined in ChronoUnit.</p>
<h2 id="ChronoUnit"><a href="#ChronoUnit" class="headerlink" title="ChronoUnit"></a>ChronoUnit</h2><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/temporal/ChronoUnit.html">java.time.temporal.ChronoUnit</a> -  an Enum that implements TemporalUnit Interface. Unites for date and time.</p>
<p><strong>ChronoUnit Enum Constants</strong></p>
<ul>
<li>CENTURIES</li>
<li>DAYS</li>
<li>DECADES</li>
<li>ERAS</li>
<li>FOREVER</li>
<li>HALF DAYS</li>
<li>HOURS</li>
<li>MICROS</li>
<li>MILLENNIA</li>
<li>MILLIS</li>
<li>MINUTES</li>
<li>MONTHS</li>
<li>NANOS</li>
<li>SECONDS</li>
<li>WEEKS</li>
<li>YEARS</li>
</ul>
<p>ChronoUnit.between() - To get the time between two temporal object</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ChronoUnit.MONTHS.between(ZonedDateTime.of(LocalDate.parse(<span class="string">&quot;2022-01-01&quot;</span>), LocalTime.parse(<span class="string">&quot;03:00&quot;</span>),</span><br><span class="line">  ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)), ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)));</span><br><span class="line"><span class="comment">// ==&gt; 5</span></span><br><span class="line"></span><br><span class="line">ChronoUnit.HOURS.between(LocalTime.parse(<span class="string">&quot;11:00&quot;</span>), LocalTime.parse(<span class="string">&quot;13:00&quot;</span>));</span><br><span class="line"><span class="comment">// ==&gt; 2</span></span><br></pre></td></tr></table></figure>

<p>ChronoUnit.getDuration() - gets estimate duraration of this ChronoUnit.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ChronoUnit.HOURS.getDuration();</span><br><span class="line"><span class="comment">// ==&gt; PT1H</span></span><br></pre></td></tr></table></figure>

<p>ChronoUnit is often used for Date-Time calculation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">threeDaysLater</span> <span class="operator">=</span> LocalDate.of(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>).plus(<span class="number">3</span>, ChronoUnit.DAYS)</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">oneHourEarlier</span> <span class="operator">=</span> LocalDateTime.now().minus(<span class="number">1</span>, ChronoUnit.HOURS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// truncatedTo</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalTime.now().truncatedTo(ChronoUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<h1 id="TemporalField-Insterface"><a href="#TemporalField-Insterface" class="headerlink" title="TemporalField Insterface"></a>TemporalField Insterface</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/temporal/TemporalField.html">java.time.temporal.TemporalField</a> Interface is used to access a field of a Temporal. ChronoField is the most used implementation.</p>
<blockquote>
<p>A field of date-time, such as month-of-year or minute-of-hour.</p>
</blockquote>
<h2 id="ChronoField"><a href="#ChronoField" class="headerlink" title="ChronoField"></a>ChronoField</h2><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/temporal/ChronoField.html">java.time.temporal.ChronoField</a> - Enum that implements TemporalField insterface.</p>
<blockquote>
<p>This set of fields provide field-based access to manipulate a date, time or date-time.</p>
</blockquote>
<p>Enum Constants:</p>
<ul>
<li>ALIGNED_DAY_OF_WEEK_IN_MONTH</li>
<li>ALIGNED_DAY_OF_WEEK_IN_YEAR</li>
<li>ALIGNED_WEEK_OF_MONTH</li>
<li>ALIGNED_WEEK_OF_YEAR</li>
<li>AMPM_OF_DAY</li>
<li>CLOCK_HOUR_OF_AMPM</li>
<li>CLOCK_HOUR_OF_DAY</li>
<li>DAY_OF_MONTH</li>
<li>DAY_OF_WEEK</li>
<li>DAY_OF_YEAR</li>
<li>EPOCH_DAY</li>
<li>ERA</li>
<li>HOUR_OF_AMPM</li>
<li>HOUR_OF_DAY</li>
<li>INSTANT_SECONDS</li>
<li>MICRO_OF_DAY</li>
<li>MICRO_OF_SECOND</li>
<li>MILLI_OF_DAY</li>
<li>MILLI_OF_SECOND</li>
<li>MINUTE_OF_DAY</li>
<li>MINUTE_OF_HOUR</li>
<li>MONTH_OF_YEAR</li>
<li>NANO_OF_DAY</li>
<li>NANO_OF_SECOND</li>
<li>OFFSET_SECONDS</li>
<li>PROLEPTIC_MONTH</li>
<li>SECOND_OF_DAY</li>
<li>SECOND_OF_MINUTE</li>
<li>YEAR</li>
<li>YEAR_OF_ERA</li>
</ul>
<p>Fields are how humans generally refer to time, which is in parts. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="keyword">if</span>(now.isSupported(ChronoField.MICRO_OF_SECOND)) &#123;</span><br><span class="line">    System.out.println(now.get(ChronoField.MICRO_OF_SECOND));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(now.get(ChronoField.MINUTE_OF_HOUR));</span><br><span class="line">System.out.println(now.get(ChronoField.DAY_OF_WEEK));</span><br><span class="line">System.out.println(now.get(ChronoField.DAY_OF_MONTH));</span><br><span class="line">System.out.println(now.get(ChronoField.MONTH_OF_YEAR));</span><br><span class="line">System.out.println(now.get(ChronoField.YEAR));</span><br><span class="line">System.out.println(now.get(ChronoField.YEAR_OF_ERA));</span><br></pre></td></tr></table></figure>

<p>getDisplayName - Gets the display name for the field in the requested locale.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ChronoField.HOUR_OF_DAY.getDisplayName(Locale.US);</span><br><span class="line"><span class="comment">// ==&gt; &quot;hour&quot;</span></span><br><span class="line"></span><br><span class="line">ChronoField.DAY_OF_WEEK.getDisplayName(Locale.US);</span><br><span class="line"><span class="comment">// ==&gt; &quot;day of the week&quot;</span></span><br><span class="line"></span><br><span class="line">ChronoField.DAY_OF_WEEK.getDisplayName(Locale.CHINA);</span><br><span class="line"><span class="comment">// ==&gt; &quot;工作日&quot;</span></span><br><span class="line"></span><br><span class="line">ChronoField.HOUR_OF_DAY.getDisplayName(Locale.KOREA);</span><br><span class="line"><span class="comment">// ==&gt; &quot;시&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="ChronoUnit-VS-ChronoField"><a href="#ChronoUnit-VS-ChronoField" class="headerlink" title="ChronoUnit VS ChronoField"></a>ChronoUnit VS ChronoField</h1><p>Units are used to measure a quantity of time</p>
<p>fields are how humans generally refer to time, which is in parts.</p>
<p>To define a complete point on the time-line you have to have a set of linked fields, eg:</p>
<ul>
<li>second-of-minute</li>
<li>minute-of-hour</li>
<li>hour-of-day</li>
<li>day-of-month</li>
<li>month-of-year</li>
<li>year (-of-forever)</li>
</ul>
<p>reference: <a href="https://stackoverflow.com/questions/41571974/java-time-temporal-chronounit-vs-java-time-temporal-chronofield">Stackoverflow - java.time.temporal.ChronoUnit VS java.time.temporal.ChronoField</a></p>
<h1 id="Temporal-Interface"><a href="#Temporal-Interface" class="headerlink" title="Temporal Interface"></a>Temporal Interface</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/temporal/Temporal.html">java.time.Temporal Interface</a> </p>
<blockquote>
<p>Framework-level interface defining read-write access to a temporal object, such as a date, time, offset or some combination of these.</p>
</blockquote>
<p>Temporal interface methods</p>
<ul>
<li>isSupported(TemporalUnit)</li>
<li>with(TemporalAdjuster)</li>
<li>with(TemporalField, long)</li>
<li>plus(TemporalAmount)</li>
<li>plus(long, TemporalUnit)</li>
<li>minus(TemporalAmount)</li>
<li>minus(long, TemporalUnit)</li>
<li>until(Temporal, TemporalUnit)</li>
</ul>
<p>Known implementation classes</p>
<ul>
<li>LocalDate</li>
<li>LocalDateTime</li>
<li>LocalTime</li>
<li>OffsetDateTime</li>
<li>OffsetTime</li>
<li>ZonedDateTime</li>
</ul>
<p>The following classes also implement Temporal interface but are less used</p>
<ul>
<li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/Year.html">java.time.Year</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/YearMonth.html">java.time.YearMonth</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/Month.html">java.time.month</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/MonthDay.html">java.time.MonthDay</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/DayOfWeek.html">java.time.DayOfWeek</a></li>
</ul>
<h1 id="TemporalAccessor-Interface"><a href="#TemporalAccessor-Interface" class="headerlink" title="TemporalAccessor Interface"></a>TemporalAccessor Interface</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/temporal/TemporalAccessor.html">java.time.temporal.TemporalAccessor</a> Interface</p>
<blockquote>
<p>Framework-level interface defining read-only access to a temporal object, such as a date, time, offset or some combination of these.</p>
</blockquote>
<p>Temporal Classes such as LocalDateTime, ZonedDateTime implements this Interface.</p>
<p>TemporalAccessor interface methods:</p>
<ul>
<li>int get(TemporalField field)</li>
<li>long getLong(TemporalField field)</li>
<li>boolean isSupported(TemporalField field)</li>
<li>default <R> R query(TemporalQuery<R> query)</li>
<li>default ValueRange range(TemporalField field)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime.now().isSupported(ChronoField.DAY_OF_YEAR);</span><br><span class="line"><span class="comment">// ==&gt; true</span></span><br><span class="line"></span><br><span class="line">LocalDate.now().get(ChronoField.DAY_OF_WEEK);</span><br><span class="line"><span class="comment">// ==&gt; 6</span></span><br><span class="line"></span><br><span class="line">LocalDateTime.now().getLong(ChronoField.NANO_OF_DAY);</span><br><span class="line"><span class="comment">// gets nano second of the day</span></span><br><span class="line"></span><br><span class="line">LocalDateTime.now().range(ChronoField.DAY_OF_YEAR);</span><br><span class="line"><span class="comment">// ==&gt; 1 - 365</span></span><br><span class="line"></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zoneId</span> <span class="operator">=</span> ZonedDateTime.now().query(TemporalQueries.zone());</span><br><span class="line"><span class="comment">// gets ZoneId such as America/New_York</span></span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/package-summary.html">java.time package</a></li>
<li><a href="http://www.baeldung.com/java-8-date-time-intro">Java 8 date time intro</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 Interface Default and Static Method</title>
    <url>/Java/Java-Interface-Default-and-Static-Method/</url>
    <content><![CDATA[<p>Before Java 8, you can only declare public abstract methods in an Interface. With Java 8, Interface can have static method and default method.</p>
<span id="more"></span>

<h1 id="Interface-with-Static-Method-and-Default-Method"><a href="#Interface-with-Static-Method-and-Default-Method" class="headerlink" title="Interface with Static Method and Default Method"></a>Interface with Static Method and Default Method</h1><p>MyInterface interface has a default method <code>foo()</code> and static method <code>bar()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;foo()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bar()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Implementation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>static method and default method demo </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// call static method</span></span><br><span class="line">    MyInterface.bar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call default method</span></span><br><span class="line">    <span class="type">MyInterface</span> <span class="variable">myInterfaceImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterfaceImpl</span>();</span><br><span class="line">    myInterfaceImpl.foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://www.baeldung.com/java-8-new-features">New Features in Java 8 by Baeldung</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Lambda</title>
    <url>/Java/Java-Lambda/</url>
    <content><![CDATA[<p>Java 8 Features - Functional Interface, Lambda and Method Reference.</p>
<span id="more"></span>


<h1 id="Functional-Interface"><a href="#Functional-Interface" class="headerlink" title="Functional Interface"></a>Functional Interface</h1><p>A <strong>functional interface</strong> is an interface that contains only one abstract method. <code>@FunctionalInterface</code> annotation is used to ensure that the functional interface can’t have more than one abstract method.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Runnable &#123;</span><br><span class="line">    public abstract void run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@FunctionalInterface</span><br><span class="line">public interface Comparator&lt;T&gt; &#123;</span><br><span class="line">    int compare(T o1, T o2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>General purpose functional interfaces are defined in <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html">java.util.function package</a>.</p>
<h1 id="Lambda-Expression"><a href="#Lambda-Expression" class="headerlink" title="Lambda Expression"></a>Lambda Expression</h1><p><strong>Lambda expression</strong> is a block of code you can pass around. It can be viewed as instance of functional interface. Lambda can be assigned to functional interface if the parameter types and return types are matched.</p>
<p>Syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parameter -&gt; expression body</span><br></pre></td></tr></table></figure>

<p>Lambda Expression Examples:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;String&gt; isLowercase = (String s) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> StringUtils.isAllUpperCase(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Type-Inference"><a href="#Type-Inference" class="headerlink" title="Type Inference"></a>Type Inference</h2><p>If the parameter types can be inferred, then you don’t need to provide the parameter types.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;String&gt; isLowercase = s -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> StringUtils.isAllUpperCase(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Function-Body"><a href="#Function-Body" class="headerlink" title="Function Body"></a>Function Body</h2><p>If the function body consiste of multiple lines, you need to enclose the function body with { }. Otherwise, you can omit the { }</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>If the function body is a return statement only, then return can be omit too.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;String&gt; isLowercase = s -&gt; StringUtils.isAllUpperCase(s);</span><br></pre></td></tr></table></figure>

<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Usage 1: lambda expression can be used to replace anonymous inner class. so</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">btn.setOnAction(<span class="keyword">new</span> <span class="title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ActionEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Can be replaced with</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">btn.setOnAction( event -&gt; System.out.println(<span class="string">&quot;Hello World!&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>Usage 2: Use together with Stream to process data.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;The&quot;</span>, <span class="string">&quot;quick&quot;</span>, <span class="string">&quot;brown&quot;</span>, <span class="string">&quot;fox&quot;</span>, <span class="string">&quot;jumps&quot;</span>, <span class="string">&quot;over&quot;</span>, <span class="string">&quot;the&quot;</span>, <span class="string">&quot;lazy&quot;</span>, <span class="string">&quot;dog&quot;</span>);</span><br><span class="line">        stringList.forEach(s -&gt; System.out.println(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Variable-Capture"><a href="#Variable-Capture" class="headerlink" title="Variable Capture"></a>Variable Capture</h2><p>Lambda can capture the value of a local variable in the enclosing scope. The captured local variables must be decalred final or effectively final.</p>
<p>However, Lambda can access and modify instance variable of the enclosing class just like anonymous class.</p>
<p>Example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.StackPane;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">myInstance</span> <span class="operator">=</span> <span class="string">&quot;Foo&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>();</span><br><span class="line">        btn.setText(<span class="string">&quot;Say &#x27;Hello World&#x27;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">myLocal</span> <span class="operator">=</span> <span class="string">&quot;Foo&quot;</span>;</span><br><span class="line">        <span class="comment">// myLocal = &quot;Baz&quot;; //Compilation Error: Local variable myLocal defined in an enclosing scope must be final or effectively final</span></span><br><span class="line">        myInstance = <span class="string">&quot;Baz&quot;</span>;</span><br><span class="line">        btn.setOnAction(event -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello &quot;</span> + myLocal);</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello &quot;</span> + myInstance);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">StackPane</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StackPane</span>();</span><br><span class="line">        root.getChildren().add(btn);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(root, <span class="number">300</span>, <span class="number">250</span>);</span><br><span class="line"></span><br><span class="line">        primaryStage.setTitle(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        primaryStage.setScene(scene);</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        launch(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here <code>myLocal</code> must be final or effectively final in order for lambda expression to access it. Instance variable <code>myInstance</code> does not have the restriction.</p>
<h1 id="Method-Reference"><a href="#Method-Reference" class="headerlink" title="Method Reference"></a>Method Reference</h1><p>Method reference is a subset of lambda expression. A <strong>method reference</strong> is the shorthand syntax for a lambda expression<br>that executes just <strong>ONE</strong> method. So It is possible to use method reference to replace a lambda expression, but not always.</p>
<p>Method Reference systax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassName::methodName</span><br></pre></td></tr></table></figure>

<p>See example</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;The&quot;</span>, <span class="string">&quot;quick&quot;</span>, <span class="string">&quot;brown&quot;</span>, <span class="string">&quot;fox&quot;</span>, <span class="string">&quot;jumps&quot;</span>);</span><br><span class="line">    List&lt;String&gt; upperCaseStringList = stringList.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">    upperCaseStringList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here <code>String::toUpperCase</code> is equivalent to lambda <code>s -&gt; s.toUpperCase()</code></p>
<p>You can use method reference on constructors</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; ids = Arrays.asList(&quot;a12&quot;, &quot;b34&quot;, &quot;c56&quot;);</span><br><span class="line">Stream&lt;Book&gt; bookStream = ids.stream().map(Book::new);</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">Lambda Expressions Java documentation</a></li>
<li><a href="https://www.tutorialspoint.com/java8/java8_lambda_expressions.htm">Tutorialspoint Java 8 - Lambda Expressions</a></li>
<li><a href="http://tutorials.jenkov.com/java/lambda-expressions.html">Java Lambda Expressions by Jenkov</a></li>
<li><a href="https://www.baeldung.com/java-8-functional-interfaces">Functional Interfaces in Java 8 - baeldung.com</a></li>
<li><a href="https://stackoverflow.com/questions/32272713/lambda-expression-and-variable-capture">Lambda Expression and Variable Capture - stackoverflow.com</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>List files in a directory in Java</title>
    <url>/Java/Java-List-Files/</url>
    <content><![CDATA[<p>List files in a directory in Java</p>
<span id="more"></span>

<h1 id="List-files-using-File-listFiles"><a href="#List-files-using-File-listFiles" class="headerlink" title="List files using File.listFiles()"></a>List files using File.listFiles()</h1><p>You can use <a href="https://docs.oracle.com/javase/8/docs/api/java/io/File.html#listFiles-java.io.FileFilter-">File.listFiles()</a> method to list files in a directory. listFiles method can take a FileFilter as an argument and returns an array of files.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/path/to/directory&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (File f : file.listFiles(File::isFile))&#123;</span><br><span class="line">	<span class="keyword">if</span>(f.isFile())&#123;</span><br><span class="line">		log.info(f.getAbsolutePath());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="List-files-using-Files-walk"><a href="#List-files-using-Files-walk" class="headerlink" title="List files using Files.walk()"></a>List files using Files.walk()</h1><p>Also, you can use <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#walk-java.nio.file.Path-java.nio.file.FileVisitOption...-">Files.walk()</a> method to list files in a directory. Files.walk() method returns a Stream<Path> which you can filter by Files.isRegularFile() method. walk() method will walk the directory tree and return all files in the directory and its subdirectories.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/path/to/directory&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; paths = Files.walk(path)) &#123;</span><br><span class="line">	List&lt;Path&gt; filePaths = paths.filter(Files::isRegularFile).toList();</span><br><span class="line">	<span class="keyword">for</span> (Path p : filePaths)&#123;</span><br><span class="line">		log.info(p.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="List-files-in-classpath"><a href="#List-files-in-classpath" class="headerlink" title="List files in classpath"></a>List files in classpath</h1><p>If you want to list files in the classpath, you can use the following code snippet:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;directory&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (url != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(url.getFile());</span><br><span class="line">  <span class="keyword">for</span> (File f : file.listFiles(File::isFile))&#123;</span><br><span class="line">    <span class="keyword">if</span>(f.isFile())&#123;</span><br><span class="line">      log.info(f.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you are using Spring, you can use ResourceUtils class to get the file from the classpath:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> ResourceUtils.getFile(<span class="string">&quot;classpath:directory&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (File f : file.listFiles(File::isFile))&#123;</span><br><span class="line">  <span class="keyword">if</span>(f.isFile())&#123;</span><br><span class="line">    log.info(f.getAbsolutePath());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Keytool</title>
    <url>/Java/Java-Keytool/</url>
    <content><![CDATA[<p>The keytool command is a key and certificate management utility. </p>
<span id="more"></span>

<h1 id="KeyStore-vs-TrustStore"><a href="#KeyStore-vs-TrustStore" class="headerlink" title="KeyStore vs TrustStore"></a>KeyStore vs TrustStore</h1><p>We use keystore and truststore when our application need to use SSL&#x2F;TLS. The default format for keystore and truststore is <strong>JKS</strong> until Java 8. Starting with Java 9, the default format is now <strong>PKCS12</strong>, which is language-neutral way to store encrypted private keys and certificates.</p>
<p>A Java <strong>Keystore</strong> stores private keys, certificates with public keys used for SSL&#x2F;TLS.</p>
<p><strong>Truststore</strong> is the opposite of keystore. It stores certificates that identifies others. </p>
<p>Java has a default truststore with path <em>$JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;security&#x2F;cacerts</em>. The initial password for cacerts is changeit. (notice it doesn’t have a .jks or .pkcs12 extension)</p>
<h1 id="Generate-KeyStore-and-Keypair"><a href="#Generate-KeyStore-and-Keypair" class="headerlink" title="Generate KeyStore and Keypair"></a>Generate KeyStore and Keypair</h1><p>To generate a keystore and keypair. You need to provide information here. the keystore and domain both require password.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -genkey -alias mydomain -keyalg RSA -keystore keystore.jks -keysize 2048</span><br></pre></td></tr></table></figure>
<p>This will generate keystore.jks file. its alias is ‘mydomain’.</p>
<p>use <code>keytool -list</code> command to view keystore entry. or use <code>keytool -list -v</code> for verbose output. You will be prompted for the keystore password.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ keytool -list -keystore keystore.jks </span><br><span class="line">Enter keystore password:  </span><br><span class="line">Keystore type: jks</span><br><span class="line">Keystore provider: SUN</span><br><span class="line"></span><br><span class="line">Your keystore contains 1 entry</span><br><span class="line"></span><br><span class="line">mydomain, May 20, 2019, PrivateKeyEntry, </span><br><span class="line">Certificate fingerprint (SHA1): 09:C2:19:B6:54:5C:A8:F2:4A:ED:24:A2:3C:04:71:32:E8:B7:94:57</span><br></pre></td></tr></table></figure>


<h1 id="Generate-CSR-from-KeyStore"><a href="#Generate-CSR-from-KeyStore" class="headerlink" title="Generate CSR from KeyStore"></a>Generate CSR from KeyStore</h1><p>To generate a Certificate Signing Request(CSR) for an existing Java keystore. You will be prompted for the keystore password.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -certreq -alias mydomain -keystore keystore.jks -file mydomain.csr</span><br></pre></td></tr></table></figure>
<p>This will generate mydomain.csr</p>
<h1 id="Create-a-self-signed-Certificate"><a href="#Create-a-self-signed-Certificate" class="headerlink" title="Create a self-signed Certificate"></a>Create a self-signed Certificate</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -genkey -keyalg RSA -alias selfsigned -keystore selfsigned.jks -validity 360 -keysize 2048</span><br></pre></td></tr></table></figure>
<p>This will generate selfsigned.jks. use <code>keytool -list</code> to view the certificate</p>
<p>Export the certificate. you will be prompted for the keystore password. This will generate the certificate in DER encoded format. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -exportcert -alias selfsigned -file selfsigned.der -keystore selfsigned.jks </span><br></pre></td></tr></table></figure>

<p>To convert DER to PEM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -inform der -in selfsigned.der -out selfsigned.crt</span><br></pre></td></tr></table></figure>


<h1 id="Import-a-Certificate-to-TrustStore"><a href="#Import-a-Certificate-to-TrustStore" class="headerlink" title="Import a Certificate to TrustStore"></a>Import a Certificate to TrustStore</h1><p>To import a CA or intermedia certificate to an existing java trusted keystore. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd $JAVA_HOME</span><br><span class="line">$ keytool -import -trustcacerts -alias somealias -file &lt;certificate file&gt;.crt -keystore  jre/lib/security/cacerts -storepass changeit</span><br></pre></td></tr></table></figure>
<p>You will be prompted for the keystore password</p>
<p>To Examine Default TrustStore at $JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;security&#x2F;cacerts.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd $JAVA_HOME/jre/lib/security</span><br><span class="line"></span><br><span class="line">$ keytool -list -keystore cacerts</span><br><span class="line">Enter keystore password:  </span><br><span class="line">Keystore type: jks</span><br><span class="line">Keystore provider: SUN</span><br><span class="line"></span><br><span class="line">Your keystore contains 134 entries</span><br><span class="line"></span><br><span class="line">debian:affirmtrust_premium_ecc.pem, Dec 15, 2018, trustedCertEntry, </span><br><span class="line">Certificate fingerprint (SHA1): B8:23:6B:00:2F:1D:16:86:53:01:55:6C:11:A4:37:CA:EB:FF:C3:BB</span><br></pre></td></tr></table></figure>
<p>You can see here there are 134 trusted certificates.</p>
<p>Reference</p>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html">Java Keytool Oracle Document</a></li>
<li><a href="https://www.sslshopper.com/article-most-common-java-keytool-keystore-commands.html">The Most Common Java Keytool Keystore Commands
</a></li>
<li><a href="https://www.baeldung.com/java-keystore-truststore-difference">Difference Between a Java Keystore and a Truststore by Denis Szczukocki</a></li>
<li><a href="https://www.rapidsslonline.com/blog/simple-guide-java-keytool-keystore-commands/">A Simple Guide on Java Keytool Keystore Commands</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/java-keytool-essentials-working-with-java-keystores#creating-and-importing-keystore-entries">Java Keytool Essentials: Working with Java Keystores by Mitchell Anicas</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Optional</title>
    <url>/Java/Java-Optional/</url>
    <content><![CDATA[<p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Optional.html">Optional</a> class was introduced in Java 8 to better handle null values.</p>
<span id="more"></span>

<p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Optional.html">Optional</a>  is a container object which may or may not contain a non-null value.</p>
<h1 id="Creation"><a href="#Creation" class="headerlink" title="Creation"></a>Creation</h1><h2 id="Optional-ofNullable-T"><a href="#Optional-ofNullable-T" class="headerlink" title="Optional.ofNullable(T)"></a>Optional.ofNullable(T)</h2><p>Here <em>Optional.ofNullable()</em> can accept null and non null value.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; testString = Optional.ofNullable(s);</span><br></pre></td></tr></table></figure>

<h2 id="Optional-empty"><a href="#Optional-empty" class="headerlink" title="Optional.empty()"></a>Optional.empty()</h2><p>No value is present in this case<br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">Optional&lt;String&gt; empty = Optional.empty();</span><br></pre></td></tr></table></figure>

<h2 id="Optional-of-T"><a href="#Optional-of-T" class="headerlink" title="Optional.of(T)"></a>Optional.of(T)</h2><p>Returns Optional with specified present non-null value. Use this method only if you are sure the parameter is NOT null.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; notEmpty = Optional.of(<span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h1><h2 id="Optional-isPresent"><a href="#Optional-isPresent" class="headerlink" title="Optional.isPresent()"></a>Optional.isPresent()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">isPresent</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
<p><em>Optional.isPresent()</em> returns true if the given Optional object is non-empty. Otherwise it returns false.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; opt = Optional.of(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(opt.isPresent())&#123;</span><br><span class="line">	System.out.println(opt.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Optional-isEmpty"><a href="#Optional-isEmpty" class="headerlink" title="Optional.isEmpty"></a>Optional.isEmpty</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
<p>Java 11 provides <em>isEmpty()</em> method which is the opposite of <em>isPresent()</em>. If a value is not present, returns true, otherwise false.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; optString = Optional.empty();</span><br><span class="line"><span class="keyword">if</span>(optString.isEmpty())&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;optString is empty!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Optional-ifPresent-Consumer"><a href="#Optional-ifPresent-Consumer" class="headerlink" title="Optional.ifPresent(Consumer)"></a>Optional.ifPresent(Consumer)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">ifPresent</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span></span><br></pre></td></tr></table></figure>
<p><em>Optional.ifPresent()</em> performs given action if the given Optional object is non-empty. Otherwise it returns false.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIfPresent</span><span class="params">()</span> &#123;</span><br><span class="line">	Optional&lt;String&gt; opt = Optional.ofNullable(<span class="string">&quot;FOO&quot;</span>);</span><br><span class="line">	opt.ifPresent(name -&gt; System.out.println(name));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Optional-orElse-T-other"><a href="#Optional-orElse-T-other" class="headerlink" title="Optional.orElse(T other)"></a>Optional.orElse(T other)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="title function_">orElse</span><span class="params">(T other)</span></span><br></pre></td></tr></table></figure>
<p>It returns the value if present in Optional Container. Otherwise returns other.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrElse</span><span class="params">()</span> &#123;</span><br><span class="line">    Optional&lt;String&gt; nullName = Optional.empty();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> nullName.orElse(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">    assertEquals(<span class="string">&quot;default&quot;</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Optional-orElseGet-Supplier"><a href="#Optional-orElseGet-Supplier" class="headerlink" title="Optional.orElseGet(Supplier)"></a>Optional.orElseGet(Supplier)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="title function_">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; supplier)</span></span><br></pre></td></tr></table></figure>
<p>Return the value if present, otherwise invoke other and return the result of that invocation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrElseGet</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">nullName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Optional.ofNullable(nullName).orElseGet(() -&gt; <span class="string">&quot;john&quot;</span>);</span><br><span class="line">	assertEquals(<span class="string">&quot;john&quot;</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Optional.orElse vs Optional.orElseGet</strong><br><br>orElse will always create the default value. orElseGet will invoke the supplier to calculate the value to return.</p>
<h2 id="Optional-or"><a href="#Optional-or" class="headerlink" title="Optional.or()"></a>Optional.or()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Optional&lt;T&gt; or(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</span><br></pre></td></tr></table></figure>
<p>If a value is present, returns an <em>Optional</em> describing the value, otherwise returns an <em>Optional</em> produced by the supplying function.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">nullName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    Optional&lt;String&gt; name = Optional.ofNullable(nullName).or(() -&gt; Optional.ofNullable(<span class="string">&quot;john&quot;</span>));</span><br><span class="line">    assertEquals(<span class="string">&quot;john&quot;</span>, name.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Optional-orElseThrow"><a href="#Optional-orElseThrow" class="headerlink" title="Optional.orElseThrow()"></a>Optional.orElseThrow()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="title function_">orElseThrow</span><span class="params">()</span></span><br><span class="line">&lt;X <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; T <span class="title function_">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span>  <span class="keyword">throws</span> X</span><br></pre></td></tr></table></figure>
<p>Return the contained value, if present, otherwise throw an exception. If no argument is provieded, <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/NoSuchElementException.html">NoSuchElementException</a> will be thrown</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test(expected=IllegalArgumentException.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrElseThrow</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">nullName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Optional.ofNullable(nullName).orElseThrow(IllegalArgumentException::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Optional-get"><a href="#Optional-get" class="headerlink" title="Optional.get()"></a>Optional.get()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="title function_">get</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
<p>This method can throw NoSuchElementException exception.</p>
<p><strong>DO NOT</strong> call <em>Optional.get</em> method unless you can prove it will never be null; instead use one of the safe methods like <em>ifPresent</em> or <em>orElse</em>.</p>
<p>You can always replace <em>get()</em> with other methods like <em>orElse()</em>, <em>orElseThrow()</em>, <em>ifPresent()</em>, <em>map()</em> or <em>flatMap()</em>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; opt = Optional.of(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(opt.isPresent())&#123;</span><br><span class="line">	System.out.println(opt.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Optional-filter-Predicate"><a href="#Optional-filter-Predicate" class="headerlink" title="Optional.filter(Predicate)"></a>Optional.filter(Predicate)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span></span><br></pre></td></tr></table></figure>
<p>If a value is present, and the value matches the given predicate, return an Optional describing the value, otherwise return an empty Optional.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; opt = Optional.ofNullable(<span class="string">&quot;&quot;</span>);</span><br><span class="line">opt.filter(s -&gt; !s.isEmpty()).ifPresent(s -&gt; System.out.println(<span class="string">&quot;Non empty String value is &quot;</span> + s));</span><br></pre></td></tr></table></figure>

<h2 id="Optional-map"><a href="#Optional-map" class="headerlink" title="Optional.map()"></a>Optional.map()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;U&gt; Optional&lt;U&gt; <span class="title function_">map</span><span class="params">(Function&lt;? <span class="built_in">super</span> T,? extends U&gt; mapper)</span></span><br></pre></td></tr></table></figure>

<p>If a value is present, apply the provided mapping function to it, and if the result is non-null, return an Optional describing the result.<br>Otherwise return an empty Optional.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMap</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	Optional&lt;String&gt; nameOptional = Optional.ofNullable(name);</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nameOptional.map(String::length).orElse(<span class="number">0</span>);</span><br><span class="line">	assertEquals(<span class="number">3</span>, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Optional-flatMap"><a href="#Optional-flatMap" class="headerlink" title="Optional.flatMap()"></a>Optional.flatMap()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;U&gt; Optional&lt;U&gt; <span class="title function_">flatMap</span><span class="params">(Function&lt;? <span class="built_in">super</span> T,? extends Optional&lt;? extends U&gt;&gt; mapper)</span></span><br></pre></td></tr></table></figure>
<p><em>flatMap</em> does the mapping, then flats the results. This avoids returning values of type <code>Optional&lt;Optional&lt;String&gt;&gt;</code>. Use <em>Optional.flatMap()</em> when the mapping function returns an Optional.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">myMapFunction</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title function_">myMapFunction2</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(s).map(String::toUpperCase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    Optional&lt;String&gt; opt = Optional.ofNullable(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map</span></span><br><span class="line">    assertEquals(Optional.of(<span class="string">&quot;FOO&quot;</span>), opt.map(s -&gt; myMapFunction(s)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map</span></span><br><span class="line">    assertEquals(Optional.of(Optional.of(<span class="string">&quot;FOO&quot;</span>)), opt.map(s -&gt; myMapFunction2(s)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use flatmap with function that returns Optional</span></span><br><span class="line">    assertEquals(Optional.of(<span class="string">&quot;FOO&quot;</span>), opt.flatMap(s -&gt; myMapFunction2(s)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Optional-stream"><a href="#Optional-stream" class="headerlink" title="Optional.stream()"></a>Optional.stream()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">stream</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
<p>This method is introduced in Java 9. </p>
<p>If a value is present, returns a sequential Stream containing only that value, otherwise returns an empty Stream.</p>
<p>Example to get all comments from an optional post that is less than 100 characters. This is very hard to code with Optional methods alone. So have to convert to stream using <strong>stream</strong> method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Post&gt; optionalPost = Optional.ofNullable(post1);</span><br><span class="line">List&lt;Comment&gt; shortComments = optionalPost.stream()</span><br><span class="line">        .flatMap(post -&gt; post.getComments().stream())</span><br><span class="line">        .filter(comment -&gt; comment.getContent().length() &lt; <span class="number">100</span>)</span><br><span class="line">        .toList();</span><br><span class="line">shortComments.forEach(System.out::println);</span><br></pre></td></tr></table></figure>



<h1 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h1><p><strong>DO NOT</strong> use Optional as a field because <strong>Optional</strong> is not Serializable.</p>
<p><strong>DO NOT</strong> use Optional as parameter for methods or constructor because this will make method call complicated.</p>
<p>You can use Optional as the getter return type, but do not over-use it. see <a href="https://stackoverflow.com/questions/26327957/should-java-8-getters-return-optional-type">Should Java 8 getters return optional type?</a></p>
<p><strong>Optional is intended to be used as a method return type.</strong> This helps create fluent readable code.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Optional.html">Optional Class</a></li>
<li><a href="https://www.baeldung.com/java-difference-map-and-flatmap">The Difference Between map() and flatMap() by Baeldung</a></li>
<li><a href="https://www.baeldung.com/java-optional">Guide To Java 8 Optional by Baeldung</a></li>
<li><a href="https://www.baeldung.com/java-9-optional">Java 9 Optional API Additions by Baeldung</a></li>
<li><a href="http://www.baeldung.com/java-optional">Optional Tutorial</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html">Oracle Optional Tutorial</a></li>
<li><a href="https://stackoverflow.com/questions/26327957/should-java-8-getters-return-optional-type/26328555#26328555">Good Practice - StackOverflow - Should Java 8 getters return optional type?</a></li>
<li><a href="https://stackify.com/optional-java/">Understanding, Accepting and Leveraging Optional in Java by EUGEN PARASCHIV</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Reading a File in Java</title>
    <url>/Java/Java-Read-Files/</url>
    <content><![CDATA[<p>Different ways to read a text file into a String in Java.</p>
<span id="more"></span>

<h1 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/FileReader.html">java.io.FileReader</a> can be used to read character files. We often see it used together with BufferedReader.<br><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/BufferedReader.html">java.io.BufferedReader</a> is the class we can use to read text from a character-input stream. It bufferes characters for efficient reading of characters, arrays and lines.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">strBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            strBuilder.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strBuilder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Alternatively, you can use <code>Files.newBufferedReader</code> method to quickly create a BufferedReader.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">strBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> Files.newBufferedReader(Path.of(path))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            strBuilder.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strBuilder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Files-readAllBytes"><a href="#Files-readAllBytes" class="headerlink" title="Files.readAllBytes"></a>Files.readAllBytes</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/nio/file/Files.html">java.nio.file.Files</a> class provide static methods to operate on files, directories, or other types of files. We can use <code>Files.readAllBytes</code> to read the file. This is simplier than BufferedReader.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Files.readAllBytes(Paths.get(path)), StandardCharsets.UTF_8);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>readAllBytes is not intended for reading in large files.</p>
<h1 id="Files-readString"><a href="#Files-readString" class="headerlink" title="Files.readString"></a>Files.readString</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/nio/file/Files.html">java.nio.file.Files</a> has <code>readString(Path)</code> method to read all content from a file into a string.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Files.readString(Paths.get(path), StandardCharsets.UTF_8);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="FIles-lines"><a href="#FIles-lines" class="headerlink" title="FIles.lines"></a>FIles.lines</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/nio/file/Files.html">java.nio.file.Files</a> has <code>lines(Path)</code> method to read all lines from a file as a Stream.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Files.lines(Paths.get(path), StandardCharsets.UTF_8)</span><br><span class="line">                .collect(Collectors.joining(System.lineSeparator()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="FileUtils"><a href="#FileUtils" class="headerlink" title="FileUtils"></a>FileUtils</h1><p>To use <a href="https://commons.apache.org/proper/commons-io/apidocs/index.html?org/apache/commons/io/FileUtils.html">FileUtils</a> or <a href="https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html">IOUtils</a> to read file, we need to add commons-io as maven dependency.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="FileUtils-readFileToString"><a href="#FileUtils-readFileToString" class="headerlink" title="FileUtils.readFileToString"></a>FileUtils.readFileToString</h2><p>We can use <code>FileUtils.readFileToString</code> method to read the contents of a file into a string using the specified charset.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FileUtils-readLines"><a href="#FileUtils-readLines" class="headerlink" title="FileUtils.readLines"></a>FileUtils.readLines</h2><p>We can also use <code>FileUtils.readLines</code> method to read lines and then concatenate all the lines together.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;String&gt; lines = FileUtils.readLines(file, StandardCharsets.UTF_8);</span><br><span class="line">        content = lines.stream().collect(Collectors.joining(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="IOUtils"><a href="#IOUtils" class="headerlink" title="IOUtils"></a>IOUtils</h1><h2 id="IOUtils-toString"><a href="#IOUtils-toString" class="headerlink" title="IOUtils.toString"></a>IOUtils.toString</h2><p>This is similar to FileUtils.readFileToString except <a href="https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html">IOUtils</a> takes an InputStream class. When we have a InputStream, It is more convenient to use IOUtils instead.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file))&#123;</span><br><span class="line">        content = IOUtils.toString(inputStream, StandardCharsets.UTF_8);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="IOUtils-readLines"><a href="#IOUtils-readLines" class="headerlink" title="IOUtils.readLines"></a>IOUtils.readLines</h2><p>This is similar to FileUtils.readLines except <a href="https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html">IOUtils</a> takes an InputStream class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file))&#123;</span><br><span class="line">        List&lt;String&gt; lines = IOUtils.readLines(inputStream, StandardCharsets.UTF_8);</span><br><span class="line">        content = lines.stream().collect(Collectors.joining(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Read-File-from-Classpath"><a href="#Read-File-from-Classpath" class="headerlink" title="Read File from Classpath"></a>Read File from Classpath</h1><p>Both <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html">Class</a> and <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html">ClassLoader</a> provides methods to get resource from classpath. </p>
<p><code>Class.getResource</code> can take a “relative” resource name, which is treated relative to the class’s package. Alternatively you can specify an “absolute” resource name by using a leading slash. <code>Classloader</code> resource paths are always deemed to be absolute.</p>
<p>We can get the classloader of a class and then use <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ClassLoader.html#getResourceAsStream(java.lang.String)">getResourceAsStream</a> method to get resource as InputStream. After we get InputStream, we can use <code>InputStream.readAllBytes</code> method to convert InputStream to bytes and create String from the bytes.</p>
<p>Example to read file in src&#x2F;main&#x2F;resources&#x2F;com&#x2F;xinghua24&#x2F;file.txt assuming the class is in com.xinghua24 package.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">readFileFromClasspath</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;com/xinghua24/file.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(inputStream.readAllBytes(), StandardCharsets.UTF_8);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Example to read file in src&#x2F;main&#x2F;resources&#x2F;com&#x2F;xinghua24&#x2F;file.txt assuming the class is in com.xinghua24 package using getClass().getResourceAsStream() mehtod.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">readFileFromClasspath</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> getClass().getResourceAsStream(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(inputStream.readAllBytes(), StandardCharsets.UTF_8);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The difference between <code>getClass().getResource()</code> and <code>getClass().getClassLoader().getResource()</code>:</p>
<ul>
<li>For ClassLoader, all paths are <strong>“absolute”</strong> already. There is no context from which they could be relative. Therefore you don’t need a leading slash.</li>
<li>For Class, all paths are <strong>“relative”</strong> by default. the path is relative to the package of the class unless you include aleading slash(&#x2F;). If path begines with a slash(&#x2F;), the path becomes absolute.</li>
</ul>
<h2 id="ClassPathResource"><a href="#ClassPathResource" class="headerlink" title="ClassPathResource"></a>ClassPathResource</h2><p>If you are using Spring Framework, you can use Spring’s <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/ClassPathResource.html">ClassPathResource</a> to get the resource from classpath. through the Resource interface you can access the resource as InputStream, URL, URI or File.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">readFileFromClasspath</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassPathResource</span> <span class="variable">fileResource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;com/xinghua24/file.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(fileResource.getInputStream().readAllBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.baeldung.com/java-buffered-reader#:~:text=BufferedReader%20is%20a%20class%20which,efficient%20reading%20of%20text%20data.">Guide to BufferedReader by baeldung</a></li>
<li><a href="https://www.techiedelight.com/read-file-contents-with-apache-commons-io-library-java/">Read file contents with Apache Commons IO library in Java</a></li>
<li><a href="https://www.baeldung.com/reading-file-in-java">How to Read a File in Java by baeldung</a></li>
<li><a href="https://stackoverflow.com/questions/1464291/how-to-really-read-text-file-from-classpath-in-java">Stackoverflow - How to really read text file from classpath in Java</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing a File in Java</title>
    <url>/Java/Java-Write-Files/</url>
    <content><![CDATA[<p>Different ways to write text files in Java.</p>
<span id="more"></span>

<h1 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h1><p>Use <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/BufferedWriter.html">java.io.BufferedWriter</a> to write text to character-output stream. This class buffers characters to provide a more efficient writing.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(String filename, String content)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span>( <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filename))) &#123;</span><br><span class="line">    writer.write(content);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>An easier way to create BufferedWriter is to use <code>Files.newBufferedWriter</code> method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>( <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> Files.newBufferedWriter(Path.of(filename), StandardCharsets.UTF_8)) &#123; ... &#125;</span><br></pre></td></tr></table></figure>


<p>If you need to write the file to a directoy that may not be exist yet, then you may need to create nonexistent directories first.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  Files.createDirectories(Path.of(<span class="string">&quot;path/newpath/&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Append-String-to-existing-File"><a href="#Append-String-to-existing-File" class="headerlink" title="Append String to existing File"></a>Append String to existing File</h1><p>You can append content at the end of the file if you set the append parameter to be <em>true</em> when creating the FileWriter.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">appendFile</span><span class="params">(String filename, String content)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span>( <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filename, <span class="literal">true</span>))) &#123;</span><br><span class="line">    writer.write(content);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Append to file using  <code>Files.newBufferedWriter</code> method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">appendFile</span><span class="params">(String filename, String content)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span>( <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> Files.newBufferedWriter(Path.of(filename), StandardCharsets.UTF_8, StandardOpenOption.APPEND)) &#123;</span><br><span class="line">        writer.write(content);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h1><p>If you need to print formatted text, then use <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html">java.io.PrintWriter</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(String filename, String content)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span>( <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filename))) &#123;</span><br><span class="line">    printWriter.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    printWriter.printf(<span class="string">&quot;There are %d apples here&quot;</span>, <span class="number">15</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Write-Uing-Files-Class"><a href="#Write-Uing-Files-Class" class="headerlink" title="Write Uing Files Class"></a>Write Uing Files Class</h1><p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html">java.nio.file.Files</a> class provides static methods to write files.</p>
<p>use <code>Files.write​(Path path, byte[] bytes, OpenOption... options)</code> method to write bytes.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(String filename, String content)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Files.write(Path.of(filename), content.getBytes());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>use <code>writeString​(Path path, CharSequence csq, Charset cs, OpenOption... options)</code> to write string to file</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(String filename, String content)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Files.writeString(Path.of(filename), content, StandardCharsets.UTF_8);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.baeldung.com/java-write-to-file">Java - Write to file by Eugen Parachiv</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Stream API</title>
    <url>/Java/Java-Stream-API/</url>
    <content><![CDATA[<p>Stream API is a major feature introduced in Java 8. It provides convenient operations on collections. </p>
<span id="more"></span>

<p>The most used class is <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/Stream.html">Stream</a> Interface. It is defined in <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/package-summary.html">java.util.stream package</a>. Stream class is used to support functional-style operations on streams of elements.</p>
<p>Stream can only store a sequence of objects. For primitives, there are separate classes for that. like Stream, They inherit from BaseStream Interface but with primitive specific methods such as avarage, range and rangeClosed.</p>
<ul>
<li>IntStream</li>
<li>LongStream</li>
<li>DeoubleStream</li>
</ul>
<p>Stream operations are divided into <strong>intermediate</strong> and <strong>terminal</strong> operations. Intermediate operations return a new stream. Terminal operation produce a result</p>
<p>Intermediate Operations</p>
<ul>
<li>filter()</li>
<li>map()</li>
<li>flatMap()</li>
<li>distinct()</li>
<li>sorted()</li>
<li>peek()</li>
<li>limit()</li>
<li>skip()</li>
</ul>
<p>Terminal Operations</p>
<ul>
<li>forEach()</li>
<li>forEachOrdered()</li>
<li>toArray()</li>
<li>toList()</li>
<li>reduce()</li>
<li>collect()</li>
<li>min()</li>
<li>max()</li>
<li>count()</li>
<li>anyMatch()</li>
<li>allMatch()</li>
<li>noneMatch()</li>
<li>findFirst()</li>
<li>findAny()</li>
</ul>
<h1 id="Stream-Creation"><a href="#Stream-Creation" class="headerlink" title="Stream Creation"></a>Stream Creation</h1><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>Collection interface provides <code>stream()</code> method to create stream. You can also use <code>parallelStream()</code> method to create a parallel stream.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;the&quot;</span>, <span class="string">&quot;quick&quot;</span>, <span class="string">&quot;brown&quot;</span>, <span class="string">&quot;fox&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br></pre></td></tr></table></figure>

<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>You can also create stream from array</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] strArray = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;the&quot;</span>, <span class="string">&quot;quick&quot;</span>, <span class="string">&quot;brown&quot;</span>, <span class="string">&quot;fox&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Arrays.stream(strArray);</span><br></pre></td></tr></table></figure>

<p><code>Stream.of()</code> can be used to create stream too</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream =  Stream.of(&quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="Empty-Stream"><a href="#Empty-Stream" class="headerlink" title="Empty Stream"></a>Empty Stream</h2><p>use <code>Stream.empty()</code> method to create empty stream</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; emptyStream = Stream.empty();</span><br></pre></td></tr></table></figure>

<h2 id="Primitive-Stream"><a href="#Primitive-Stream" class="headerlink" title="Primitive Stream"></a>Primitive Stream</h2><p><code>Stream&lt;T&gt;</code> can not be used for primitives. Java 8 provides special class for primitive streams - <strong>IntStream</strong>, <strong>LongStream</strong>, <strong>DoubleStream</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> IntStream.range(<span class="number">0</span>, <span class="number">2</span>); <span class="comment">// 0, 1</span></span><br><span class="line"><span class="type">LongStream</span> <span class="variable">longStream</span> <span class="operator">=</span> LongStream.rangeClosed(<span class="number">0</span>, <span class="number">2</span>); <span class="comment">// 0, 1, 2</span></span><br><span class="line"><span class="type">DoubleStream</span> <span class="variable">doubleStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().doubles(<span class="number">3</span>); <span class="comment">// 3 doubles</span></span><br></pre></td></tr></table></figure>

<h2 id="Stream-builder"><a href="#Stream-builder" class="headerlink" title="Stream.builder"></a>Stream.builder</h2><p>use <code>Stream.builder()</code> to build the stream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.&lt;String&gt;builder().add(<span class="string">&quot;the&quot;</span>).add(<span class="string">&quot;quick&quot;</span>).add(<span class="string">&quot;brown&quot;</span>).add(<span class="string">&quot;fox&quot;</span>).build();</span><br></pre></td></tr></table></figure>


<h2 id="Stream-iterate"><a href="#Stream-iterate" class="headerlink" title="Stream.iterate"></a>Stream.iterate</h2><p>use <code>Stream.iterate()</code> static method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.iterate(<span class="number">0</span>, i -&gt; i+<span class="number">1</span>).limit(<span class="number">5</span>).forEach(System.out::println); <span class="comment">// 0, 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure>

<h2 id="Stream-generate"><a href="#Stream-generate" class="headerlink" title="Stream.generate"></a>Stream.generate</h2><p>use <code>Stream.generate()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.generate(() -&gt; <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">5</span>)).limit(<span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="Create-Stream-from-File"><a href="#Create-Stream-from-File" class="headerlink" title="Create Stream from File"></a>Create Stream from File</h2><p><code>java.nio.file.Files</code> class provides <code>lines()</code> method to generate Stream from a text file.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/tmp/test.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> (Stream&lt;String&gt; lines = Files.lines(path)) &#123;</span><br><span class="line">    lines.forEach(System.out::println);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Merge-Streams"><a href="#Merge-Streams" class="headerlink" title="Merge Streams"></a>Merge Streams</h2><p>use <code>concat()</code> static method to merge two Streams.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;One&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Two&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; mergedStream = Stream.concat(stream1, stream2);</span><br></pre></td></tr></table></figure>

<p>If there are more than two Streams to merge, this is more complex. You can call multiple Stream.concat method or use the flatMap method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;One&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Two&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream3 = Stream.of(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Three&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; mergedStream = Stream.of(stream1, stream2, stream3).flatMap(s -&gt; s);</span><br></pre></td></tr></table></figure>
<p>Here we first combine the 3 streams to create a <code>Stream&lt;Stream&lt;String&gt;&gt;</code> variable, then use <code>flatMap</code> method to flatten the variable and return <code>Stream&lt;String&gt;</code> variable.</p>
<h2 id="Create-Parallel-Stream"><a href="#Create-Parallel-Stream" class="headerlink" title="Create Parallel Stream"></a>Create Parallel Stream</h2><p>Stream class provides a <code>parallel()</code> method to create a parallel stream. However, it doesn’t guarantee a performance increase. Be very careful when using parallel stream. for more info, see <a href="https://dzone.com/articles/think-twice-using-java-8">Think Twice Before Using Java 8 Parallel Streams by Lukas Krecan</a></p>
<h1 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h1><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter elements based on a criteria. </p>
<p>This is an intermediate operation.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list.stream().filter( s -&gt; s.startsWith(&quot;q&quot;))</span><br></pre></td></tr></table></figure>


<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;R&gt; <span class="title function_">map</span><span class="params">(Function&lt;? <span class="built_in">super</span> T,? extends R&gt; mapper)</span></span><br></pre></td></tr></table></figure>
<p>Apply function to each element in the stream.</p>
<p>map Post to its title.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Post&gt; posts = List.of(post1, post2, post3);</span><br><span class="line">Stream&lt;String&gt; titles = posts.stream()</span><br><span class="line">    .map(post -&gt; post.getTitle());</span><br></pre></td></tr></table></figure>

<p>There are variations if return type of the Function parameter is not an Object</p>
<ul>
<li>mapToDouble</li>
<li>mapToInt</li>
<li>mapToLong</li>
</ul>
<h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;R&gt; <span class="title function_">flatMap</span><span class="params">(Function&lt;? <span class="built_in">super</span> T,? extends Stream&lt;? extends R&gt;&gt; mapper)</span></span><br></pre></td></tr></table></figure>
<p>flatMap does a <strong>map</strong> operation and then follow by an <strong>flat</strong> operation. <code>flat</code> opertion avoids nested <code>Stream&lt;Stream&lt;R&gt;&gt;</code> structure. </p>
<p>This method is usually used to merge collections. We can merge multiple list of Cities into one list in a single line.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;County&gt; counties = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="type">County</span> <span class="variable">county1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">County</span>(<span class="string">&quot;County1&quot;</span>);</span><br><span class="line">county1.addCity(<span class="keyword">new</span> <span class="title class_">City</span>(<span class="string">&quot;A1 City&quot;</span>));</span><br><span class="line">county1.addCity(<span class="keyword">new</span> <span class="title class_">City</span>(<span class="string">&quot;A2 City&quot;</span>));</span><br><span class="line">counties.add(county1);</span><br><span class="line"></span><br><span class="line"><span class="type">County</span> <span class="variable">county2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">County</span>(<span class="string">&quot;County2&quot;</span>);</span><br><span class="line">county1.addCity(<span class="keyword">new</span> <span class="title class_">City</span>(<span class="string">&quot;B1 City&quot;</span>));</span><br><span class="line">county1.addCity(<span class="keyword">new</span> <span class="title class_">City</span>(<span class="string">&quot;B2 City&quot;</span>));</span><br><span class="line">counties.add(county2);</span><br><span class="line"></span><br><span class="line">List&lt;City&gt; allCities = counties.stream()</span><br><span class="line">    .flatMap(county -&gt; county.getCities().stream())</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">allCities.stream().forEach(System.out::println); <span class="comment">// prints all cities</span></span><br></pre></td></tr></table></figure>

<p>There are variations if return type of the Function parameter is not an Object</p>
<ul>
<li>flatMapToDouble</li>
<li>flatMapToInt</li>
<li>flatMapToLong</li>
</ul>
<p>Compare <code>map()</code>  and <code>flatMap()</code></p>
<ul>
<li>Both map and flatMap can be applied to a <code>Stream&lt;T&gt;</code> and they both return a <code>Stream&lt;R&gt;</code></li>
<li>map() operation takes a <code>Function</code>, which should apply to each value in the stream and produce a <strong>single value</strong> for each value.</li>
<li>flatMap() operation also takes a <code>Function</code>, which should apply to each value in the stream and produce an arbitrary number of values.</li>
</ul>
<h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h2><p>limit the number of elements</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.generate(() -&gt; <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">5</span>)).limit(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h2><p>Returns a stream consisting of the distinct elements (according to Object.equals(Object)) of this stream.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h2><p><code>sorted()</code> method sort the elements in the stream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Random</span>().ints(<span class="number">5</span>).sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>Sort String by length</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;fff&quot;</span>, <span class="string">&quot;o&quot;</span>);</span><br><span class="line">stringStream.sorted((s1, s2) -&gt; s1.length() - s2.length()).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream =  Stream.of(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;fff&quot;</span>, <span class="string">&quot;o&quot;</span>);</span><br><span class="line">stringStream.sorted(Comparator.comparing(String::length)).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>Sort String by length, reverse order.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream =  Stream.of(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;fff&quot;</span>, <span class="string">&quot;o&quot;</span>);</span><br><span class="line">stringStream.sorted(Comparator.comparing(String::length).reversed()).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h2><p><code>peek</code> performs action on each element. This is an intermediate operation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">List&lt;String&gt; upperCaseStringStream = stringStream</span><br><span class="line">        .map(String::toUpperCase)</span><br><span class="line">        .peek(System.out::println)</span><br><span class="line">        .toList();</span><br></pre></td></tr></table></figure>

<p>NOTE: This method exists mainly to support debugging, where you want to see the elements as they flow past a certain point in a pipeline</p>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>Performs an action for each element of this stream.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream =  Stream.of(<span class="string">&quot;the&quot;</span>, <span class="string">&quot;quick&quot;</span>, <span class="string">&quot;brown&quot;</span>, <span class="string">&quot;fox&quot;</span>);</span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="forEach-vs-forEachOrdered"><a href="#forEach-vs-forEachOrdered" class="headerlink" title="forEach vs forEachOrdered"></a>forEach vs forEachOrdered</h2><p>For <strong>forEach()</strong>, The behavior of this operation is explicitly nondeterministic. For parallel stream pipelines, this operation does not guarantee to respect the encounter order of the stream, as doing so would sacrifice the benefit of parallelism. </p>
<p>for <strong>forEachOrdered()</strong>, This operation processes the elements one at a time, in encounter order if one exists. So this operation sacrifice the benefit of parallelism for order.</p>
<p>forEach vs forEachOrdered</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list =  Arrays.asList(<span class="string">&quot;the&quot;</span>, <span class="string">&quot;quick&quot;</span>, <span class="string">&quot;brown&quot;</span>, <span class="string">&quot;fox&quot;</span>);</span><br><span class="line">list.parallelStream().forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">&quot;---&quot;</span>);</span><br><span class="line">list.parallelStream().forEachOrdered(System.out::println);</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brown</span><br><span class="line">the</span><br><span class="line">quick</span><br><span class="line">fox</span><br><span class="line">---</span><br><span class="line">the</span><br><span class="line">quick</span><br><span class="line">brown</span><br><span class="line">fox</span><br></pre></td></tr></table></figure>


<h2 id="anyMatch-allMatch-and-noneMatch"><a href="#anyMatch-allMatch-and-noneMatch" class="headerlink" title="anyMatch, allMatch and noneMatch"></a>anyMatch, allMatch and noneMatch</h2><p>There are three methods you can use to find match: <code>anyMatch()</code>, <code>allMatch()</code>, <code>nonMatch()</code>. These are all terminal operation.</p>
<ul>
<li><code>anyMatch()</code> - Returns whether any elements of this stream match the provided predicate. </li>
<li><code>allMatch()</code> - Returns whether all elements of this stream match the provided predicate.</li>
<li><code>noneMatch()</code> - Returns whether no elements of this stream match the provided predicate.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;ggg&quot;</span>, <span class="string">&quot;tech&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasTStart</span> <span class="operator">=</span> list.stream().anyMatch(s -&gt; s.startsWith(<span class="string">&quot;t&quot;</span>));</span><br></pre></td></tr></table></figure>


<h2 id="findFirst-and-findAny"><a href="#findFirst-and-findAny" class="headerlink" title="findFirst and findAny"></a>findFirst and findAny</h2><p>findFirst returns an <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">Optional</a> describing the first element of this stream, or an empty <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">Optional</a> if the stream is empty.</p>
<p>findAny also returns an element but its return element is nondeterministic.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.stream().findFirst().ifPresent(System.out::println);</span><br><span class="line">list.stream().findAny().ifPresent(System.out::println);</span><br></pre></td></tr></table></figure>


<h2 id="min-and-max"><a href="#min-and-max" class="headerlink" title="min and max"></a>min and max</h2><ul>
<li>min method returns the minimum value of the stream. It returns empty stream if these is no element. Similarly, max method returns the maximum value of the stream. </li>
<li>The input parameteris a Comparator.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">Optional&lt;Integer&gt; min = list.stream().min((i, j) -&gt; i.compareTo(j));</span><br><span class="line">min.ifPresent(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p>Returns the count of elements in this stream. This is a terminal operation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(list.stream().count());</span><br></pre></td></tr></table></figure>

<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><ul>
<li>reduce takes an identity(initial value) and accumulator to do the reduction. </li>
<li>If the input Stream is empty, the return value will be the idenity(inital value).</li>
</ul>
<p>Integer sum</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> IntStream.range(<span class="number">0</span>, <span class="number">9</span>).reduce(<span class="number">0</span>, (a,b) -&gt; a + b);</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> IntStream.range(<span class="number">0</span>, <span class="number">9</span>).reduce(<span class="number">0</span>, Integer::sum);</span><br></pre></td></tr></table></figure>

<p>BigDecimal sum</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;BigDecimal&gt; decimals = Arrays.asList(BigDecimal.ONE, BigDecimal.ZERO, BigDecimal.valueOf(<span class="number">2.2</span>));</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">sum</span> <span class="operator">=</span> decimals.stream().reduce(BigDecimal.ZERO, BigDecimal::add);</span><br></pre></td></tr></table></figure>

<h2 id="reduce-without-initial-value"><a href="#reduce-without-initial-value" class="headerlink" title="reduce without initial value"></a>reduce without initial value</h2><ul>
<li>If identity(inital value) is not provided, then reduce method will return an Optional. </li>
<li>When the input stream is empty, reduce method will return Optional.empty().</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OptionalInt</span> <span class="variable">optionalSum</span> <span class="operator">=</span> IntStream.range(<span class="number">0</span>, <span class="number">9</span>).reduce( Integer::sum);</span><br><span class="line">optionalSum.ifPresent(System.out::println); <span class="comment">// 36</span></span><br></pre></td></tr></table></figure>

<p>When input Stream is empty, optionalSum will be Optional.empty() too.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OptionalInt</span> <span class="variable">optionalSum</span> <span class="operator">=</span> IntStream.empty().reduce(Integer::sum);</span><br></pre></td></tr></table></figure>

<h2 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h2><p>Returns an array containing the elements of this stream. Note that the return type of toArray is <strong>Object[]</strong>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">Object[] objects = stream.toArray();</span><br><span class="line">System.out.println(Arrays.toString(objects)); <span class="comment">// output [a, c, b]</span></span><br></pre></td></tr></table></figure>

<p>If you want the return array have actual types, then provide a generator function</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">String[] strArray = stream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">System.out.println(Arrays.toString(strArray));</span><br></pre></td></tr></table></figure>

<h2 id="toList"><a href="#toList" class="headerlink" title="toList"></a>toList</h2><p>Accumulates the elements of this stream into a List. This method was introduced in <strong>Java 16</strong>. If this method is not available, use <em>.collect(Collectors.toList())</em> instead.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">List&lt;String&gt; strList = stream.toList();</span><br></pre></td></tr></table></figure>

<h2 id="Collectors-toList"><a href="#Collectors-toList" class="headerlink" title="Collectors.toList()"></a>Collectors.toList()</h2><p>.collect method performs mutable reduction operation on elements of a stream.</p>
<blockquote>
<p>A <strong>mutable reduction</strong> operation accumulates input elements into a mutable result container, such as a Collection or StringBuilder, as it processes the elements in the stream.</p>
</blockquote>
<p>The most common operation is to return a collection using a list collector.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; upperCaseStringStream = stringStream</span><br><span class="line">    .map(String::toUpperCase)</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<p>Note that javadoc shows Collectors.toList() method doesn’t guarantee the return List type of the Collector. To explicitly set the return collection type, use toCollection method. e.g. <code>collect(Collectors.toCollection(ArrayList::new))</code></p>
<h2 id="Collectors-toMap"><a href="#Collectors-toMap" class="headerlink" title="Collectors.toMap()"></a>Collectors.toMap()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">624L</span>, <span class="string">&quot;John&quot;</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">223L</span>, <span class="string">&quot;Bob&quot;</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">546L</span>, <span class="string">&quot;Adams&quot;</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">100L</span>, <span class="string">&quot;Jones&quot;</span>));</span><br><span class="line"></span><br><span class="line">Map&lt;Long, Person&gt; personMap = persons.stream().collect(</span><br><span class="line">    Collectors.toMap(Person::getId, Function.identity())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Long, Person&gt; entry : personMap.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot; &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here, we use <code>Function.identity()</code> as the value mapper. It returns the input value as the output value.</p>
<h2 id="Collectors-toSet"><a href="#Collectors-toSet" class="headerlink" title="Collectors.toSet"></a>Collectors.toSet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Person&gt; personSet = persons.stream()</span><br><span class="line">    .filter(person -&gt; person.id &gt; <span class="number">500</span>)</span><br><span class="line">    .collect(Collectors.toSet());</span><br></pre></td></tr></table></figure>

<h2 id="Collectors-groupingBy"><a href="#Collectors-groupingBy" class="headerlink" title="Collectors.groupingBy"></a>Collectors.groupingBy</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Book&gt; books = Stream.of(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Love Fiction&quot;</span>, <span class="string">&quot;teen&quot;</span>),<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Future Story&quot;</span>, <span class="string">&quot;sci-fi&quot;</span>), <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Love Fiction2&quot;</span>, <span class="string">&quot;teen&quot;</span>));</span><br><span class="line">Map&lt;String, List&lt;Book&gt;&gt; byCategory = books.collect(Collectors.groupingBy(Book::getCategory));</span><br><span class="line"></span><br><span class="line">byCategory.forEach((category, bookList) -&gt; &#123;</span><br><span class="line">    System.out.println(category+ <span class="string">&quot; Category&quot;</span>);</span><br><span class="line">    bookList.forEach(book -&gt; System.out.println(<span class="string">&quot;  &quot;</span> + book.getTitle()));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sci-fi Category</span><br><span class="line">  Future Story</span><br><span class="line">teen Category</span><br><span class="line">  Love Fiction</span><br><span class="line">  Love Fiction2</span><br></pre></td></tr></table></figure>

<h2 id="Groupby-and-count-occurences"><a href="#Groupby-and-count-occurences" class="headerlink" title="Groupby and count occurences"></a>Groupby and count occurences</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Book&gt; books = Stream.of(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Love Fiction&quot;</span>, <span class="string">&quot;teen&quot;</span>),<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Future Story&quot;</span>, <span class="string">&quot;sci-fi&quot;</span>), <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Love Fiction2&quot;</span>, <span class="string">&quot;teen&quot;</span>));</span><br><span class="line">Map&lt;String, Long&gt; categoryCount = books</span><br><span class="line">        .collect(Collectors.groupingBy(Book::getCategory, Collectors.counting()));</span><br><span class="line"></span><br><span class="line">categoryCount.forEach((category, size) -&gt; &#123;</span><br><span class="line">    System.out.println(category+ <span class="string">&quot; &quot;</span> + size);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sci-fi 1</span><br><span class="line">teen 2</span><br></pre></td></tr></table></figure>

<h2 id="Groupby-count-occurences-and-then-sort"><a href="#Groupby-count-occurences-and-then-sort" class="headerlink" title="Groupby, count occurences and then sort"></a>Groupby, count occurences and then sort</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Book&gt; books = Stream.of(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Love Fiction&quot;</span>, <span class="string">&quot;teen&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Future Story&quot;</span>, <span class="string">&quot;sci-fi&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Mysteries Fiction&quot;</span>, <span class="string">&quot;Mysteries&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Love Fiction2&quot;</span>, <span class="string">&quot;teen&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Future Story2&quot;</span>, <span class="string">&quot;sci-fi&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Love Story3&quot;</span>, <span class="string">&quot;teen&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">Map&lt;String, Long&gt; categoryCount = books</span><br><span class="line">    .collect(Collectors.groupingBy(Book::getCategory, Collectors.counting()))</span><br><span class="line">    .entrySet().stream().sorted(Map.Entry.&lt;String, Long&gt;comparingByValue().reversed())</span><br><span class="line">    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1, LinkedHashMap::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">categoryCount.forEach((category, size) -&gt; &#123;</span><br><span class="line">    System.out.println(category+ <span class="string">&quot; &quot;</span> + size);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>groupby category, count occurences, sort by count in descending order</p>
<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">teen 3</span><br><span class="line">sci-fi 2</span><br><span class="line">Mysteries 1</span><br></pre></td></tr></table></figure>


<h2 id="String-joining"><a href="#String-joining" class="headerlink" title="String joining"></a>String joining</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringStream.collect(Collectors.joining(<span class="string">&quot;,&quot;</span>)); <span class="comment">// &quot;one,two,three,four&quot;</span></span><br></pre></td></tr></table></figure>


<h1 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h1><h1 id="Map-Reduce"><a href="#Map-Reduce" class="headerlink" title="Map-Reduce"></a>Map-Reduce</h1><p>Map-Reduce is a very powerful programming technique in solving complex problems. With the introduction of Stream API, We can now perform Map Reduce to solve complex problems more elegantly.</p>
<p>Example: find average salary of full time employees</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">average</span> <span class="operator">=</span> employees.stream().filter(e -&gt; e.isFulltime()).mapToDouble(e -&gt; e.getSalary()).average().getAsDouble();</span><br></pre></td></tr></table></figure>
<p>Note: average method is a reduce operation.</p>
<p>If you want to perform Map-Reduce in large scale, use <code>parallelStream()</code> instead of <code>stream()</code> method.</p>
<h2 id="Filtering-Null-Values-from-a-Stream"><a href="#Filtering-Null-Values-from-a-Stream" class="headerlink" title="Filtering Null Values from a Stream"></a>Filtering Null Values from a Stream</h2><p>use filter method to filter out the null values in a stream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list =  Arrays.asList(<span class="string">&quot;the&quot;</span>, <span class="string">&quot;quick&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;brown&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;fox&quot;</span>);</span><br><span class="line">list.stream().filter(s -&gt; s!=<span class="literal">null</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>Alternatively, we can use <code>Objects::nonNull</code> to do the filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list =  Arrays.asList(<span class="string">&quot;the&quot;</span>, <span class="string">&quot;quick&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;brown&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;fox&quot;</span>);</span><br><span class="line">list.stream().filter(Objects::nonNull).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/Stream.html">java.util.stream package</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/package-summary.html">java.util.stream.Stream Interface</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/Collectors.html">java.util.stream.Collectors class</a></li>
<li><a href="https://www.baeldung.com/java-8-streams-introduction">Introduction to Java 8 Streams by Baeldung</a></li>
<li><a href="https://www.baeldung.com/java-8-streams">Java 8 Stream by Baeldung</a></li>
<li><a href="https://www.tutorialspoint.com/java8/java8_streams.htm">Tutorialspoint Streams</a></li>
<li><a href="https://stackoverflow.com/q/26684562">What’s the difference between map() and flatMap() methods in Java 8?</a></li>
<li><a href="https://www.mkyong.com/java8/java-8-filter-a-null-value-from-a-stream/">Java 8 – Filter a null value from a Stream by Mkyong</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Generate UUID in Java</title>
    <url>/Java/Java-generate-UUID/</url>
    <content><![CDATA[<p>Generate UUID in Java</p>
<span id="more"></span>


<h2 id="To-Generate-UUID-in-Java"><a href="#To-Generate-UUID-in-Java" class="headerlink" title="To Generate UUID in Java"></a>To Generate UUID in Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UUIDGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UUID</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID();</span><br><span class="line">        System.out.println(uuid.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a76e2a77-3d81-4bde-8116-1c4c87fe7613</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java - repeat a String n times</title>
    <url>/Java/Java-repeat-a-String-n-times/</url>
    <content><![CDATA[<p>Different ways to repeat a String n times</p>
<span id="more"></span>

<p><strong>StringUtils</strong> provide method to repeat a String n times.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.repeat(<span class="string">&quot;#&quot;</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p><strong>Java1.5+</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">4</span>]).replace(<span class="string">&quot;\0&quot;</span>, <span class="string">&quot;#&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>Java8</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String.join(&quot;&quot;, Collections.nCopies( 4, &quot;#&quot;));</span><br></pre></td></tr></table></figure>

<p><strong>Java11</strong> provide a repeat() method to repeat a String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;#&quot;</span>.repeat(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JSON Navigation with Jayway JsonPath</title>
    <url>/Java/JsonPath/</url>
    <content><![CDATA[<p>JSON Navigation with Jayway JsonPath: A Comprehensive Guide</p>
<span id="more"></span>

<p><a href="https://github.com/json-path/JsonPath">Jayway JsonPath</a> is a Java library inspired by the JSONPath syntax. It offers a concise and expressive way to traverse and manipulate JSON structures, making it a preferred choice for Java developers working with JSON data.</p>
<h1 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h1><p>To get started with Jayway JsonPath, you can include the following Maven dependency in your project:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.jayway.jsonpath/json-path --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jayway.jsonpath<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-path<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage:"></a>Basic Usage:</h1><p>Let’s explore some fundamental features of Jayway JsonPath:</p>
<ol>
<li><strong>Parsing JSON:</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123; \&quot;name\&quot;: \&quot;John Doe\&quot;, \&quot;age\&quot;: 30, \&quot;city\&quot;: \&quot;New York\&quot; &#125;&quot;</span>;</span><br><span class="line"><span class="type">DocumentContext</span> <span class="variable">jsonContext</span> <span class="operator">=</span> JsonPath.parse(jsonString);</span><br></pre></td></tr></table></figure>

<p>The <code>DocumentContext</code> provides a handle to the parsed JSON, enabling seamless navigation and manipulation.</p>
<ol start="2">
<li><strong>Simple Queries:</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jsonContext.read(<span class="string">&quot;$.name&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> jsonContext.read(<span class="string">&quot;$.age&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>With Jayway JsonPath, extracting specific data points becomes straightforward using the familiar JSON Path syntax.</p>
<ol start="3">
<li><strong>Filtering Arrays:</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; cities = jsonContext.read(<span class="string">&quot;$.cities[?(@.population &gt; 1000000)].name&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>Jayway JsonPath supports advanced filtering, allowing you to extract data from arrays based on specific criteria.</p>
<h1 id="Advanced-Features"><a href="#Advanced-Features" class="headerlink" title="Advanced Features:"></a>Advanced Features:</h1><ol>
<li><strong>Recursive Descent:</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; allAges = jsonContext.read(<span class="string">&quot;$..age&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>The library supports recursive descent, making it easy to navigate through nested structures with minimal effort.</p>
<ol start="2">
<li><strong>Using Predicates:</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">bookTitle</span> <span class="operator">=</span> jsonContext.read(<span class="string">&quot;$.books[?(@.category == &#x27;Sci-Fi&#x27; &amp;&amp; @.year &gt; 2020)].title&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>Jayway JsonPath enables the use of powerful predicates for filtering data based on multiple conditions.</p>
<h1 id="Suppressing-Exceptions"><a href="#Suppressing-Exceptions" class="headerlink" title="Suppressing Exceptions"></a>Suppressing Exceptions</h1><p>By default, Jayway JsonPath throws exception when an error occurs during parsing or evaluation. If path is not found, a <code>PathNotFoundException</code> will be thrown. However, you can suppress these exceptions by setting the <code>SUPPRESS_EXCEPTIONS</code> option:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> Configuration.defaultConfiguration()</span><br><span class="line">			.setOptions(Option.SUPPRESS_EXCEPTIONS);</span><br><span class="line"><span class="type">DocumentContext</span> <span class="variable">ctx2</span> <span class="operator">=</span> JsonPath.using(conf).parse(json);</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> ctx2.read(<span class="string">&quot;$.wrong.path&quot;</span>); <span class="comment">// &lt;-- value is null here instead of throwing an exception</span></span><br></pre></td></tr></table></figure>

<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion:"></a>Conclusion:</h1><p>In the realm of Java development, where handling JSON data is a common task, Jayway JsonPath emerges as a powerful ally. Its intuitive syntax, extensive features, and seamless integration make it a go-to library for developers dealing with complex JSON structures. By incorporating Jayway JsonPath into your projects, you empower yourself to navigate and extract data effortlessly, paving the way for more robust and efficient Java applications.</p>
<p>Reference:</p>
<ul>
<li><a href="https://github.com/json-path/JsonPath">Jayway JsonPath</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JUnit 5 Basics</title>
    <url>/Java/Junit-5/</url>
    <content><![CDATA[<p>Junit 5 Basics</p>
<span id="more"></span>

<h1 id="JUnit-5"><a href="#JUnit-5" class="headerlink" title="JUnit 5"></a>JUnit 5</h1><p>JUnit 5 is composed of several different modules from three different sub-projects</p>
<p><strong>JUnit 5 &#x3D; <em>JUnit Platform</em> + <em>JUnit Jupiter</em> + <em>JUnit Vintage</em></strong></p>
<p>The <strong>JUnit Platform</strong> serves as a foundation for <a href="https://junit.org/junit5/docs/current/user-guide/#launcher-api">launching testing frameworks</a> on the JVM.</p>
<p>JUnit Jupiter is for writing tests in JUnit 5.</p>
<p>JUnit Vintage is for writing tests in Junit 3 or Junit4.</p>
<h1 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h1><p>Junit-jupiter-engine contains all core annotations for Junit 5</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>You add junit-vintage-engine if you want to run Junit 3 or Junit4 tests. junit-vintage-engine. transitively pulls in  <code>junit:junit:4.12</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Basic-Junit-5-Test"><a href="#Basic-Junit-5-Test" class="headerlink" title="Basic Junit 5 Test"></a>Basic Junit 5 Test</h1><p>Most of the Junit 5 Annotations are similar to JUnit4 but with a new package. Commonly used annotations like @Test  is now in <a href="https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/package-summary.html">org.junit.jupiter.api</a> package.</p>
<p><code>@Test</code>is used to signal that the annotated method is a <em>test</em> method. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.fail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">successTest</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;Abc&quot;</span>, <span class="string">&quot;Abc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">failTest</span><span class="params">()</span> &#123;</span><br><span class="line">        fail(<span class="string">&quot;fail this test case&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Lifecycle-Methods"><a href="#Lifecycle-Methods" class="headerlink" title="Lifecycle Methods"></a>Lifecycle Methods</h1><p>Junit 5 provides the following lifecycle methods. <code>@BeforeAll,</code> <code>@AfterAll</code>, <code>@BeforeEach</code>, and <code>@AfterEach</code>. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BeforeAll</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initAll</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterAll</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tearDownAll</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In Junit 4, methods annotated with <code>@Before</code> is executed before each test. This is equivalent to <code>@BeforeEach</code> in Junit 5.</p>
<p>Also in Junit 4, methods annotated with <code>@BeforeClass</code> is executed once before all tests. This is equivalent to <code>@BeforeAll</code> in Junit 5.</p>
<h1 id="Display-Name"><a href="#Display-Name" class="headerlink" title="Display Name"></a>Display Name</h1><p>Display name will appear in test report or IDE test runner</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;A success test case&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">successTest</span><span class="params">()</span> &#123;</span><br><span class="line">    assertEquals(<span class="string">&quot;Abc&quot;</span>, <span class="string">&quot;Abc&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;A fail test case&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">failTest</span><span class="params">()</span> &#123;</span><br><span class="line">    fail(<span class="string">&quot;fail this test case&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Assertions"><a href="#Assertions" class="headerlink" title="Assertions"></a>Assertions</h1><p>Assertion annotations are in the <a href="https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/Assertions.html">org.junit.jupiter.api.Assertion</a> class. You can use static import all the static methods.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">    assertEquals(<span class="number">2</span>, <span class="number">1</span>+<span class="number">1</span>);</span><br><span class="line">    assertEquals(<span class="number">2</span>, <span class="number">1</span>+<span class="number">1</span>,<span class="string">&quot;Optional message here...&quot;</span>);</span><br><span class="line">    assertTrue(<span class="number">1</span> &lt; <span class="number">2</span>, () -&gt; <span class="string">&quot;Optional message here...&quot;</span>);</span><br><span class="line">    assertNotEquals(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    assertNotNull(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    assertNull(<span class="literal">null</span>);</span><br><span class="line">    fail(<span class="string">&quot;This is a failed test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Assert-Exception"><a href="#Assert-Exception" class="headerlink" title="Assert Exception"></a>Assert Exception</h1><p>Test Exception - use <code>assertThrows</code> method to test if an Exception is being thrown. assertThrows returns the exception that was thrown. You can then verify the exception message.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testException</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Exception</span> <span class="variable">exception</span> <span class="operator">=</span> assertThrows(ArrayIndexOutOfBoundsException.class, () -&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span>[] myArray = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">thirdElemenet</span> <span class="operator">=</span> myArray[<span class="number">2</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">    assertEquals(<span class="string">&quot;Index 2 out of bounds for length 2&quot;</span>, exception.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Disabled"><a href="#Disabled" class="headerlink" title="Disabled"></a>Disabled</h1><p>You can disable a test class or test case by adding @Disabled annotation. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Disabled(&quot;Disabled untile Bug-123 is fixed&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">successTest</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Repeated-Test"><a href="#Repeated-Test" class="headerlink" title="Repeated Test"></a>Repeated Test</h1><p>Use @RepeatedTest annotation to repeat a test a specified number of times</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RepeatedTest(10)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">repeatedTest</span><span class="params">()</span> &#123;</span><br><span class="line">    assertEquals(<span class="number">2</span>, <span class="number">1</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Parameterized-Test"><a href="#Parameterized-Test" class="headerlink" title="Parameterized Test"></a>Parameterized Test</h1><p>You need to add junit-jupiter-params dependency in order to run parameterized test</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-params<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>@ParameterizedTest</code> is used to signal that the annotated method is a <em>parameterized test</em><br> method. you must declare at least one <em>source</em> that will provide the arguments for each invocation. <code>@ValueSource</code> specifies a list of values as argument.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(strings = &#123;&quot;ab&quot;, &quot;bz&quot;, &quot;ts&quot;&#125;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">palindromes</span><span class="params">(String argument)</span> &#123;</span><br><span class="line">    assertTrue(StringUtils.isAllLowerCase(argument));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(ints = &#123; 1, 2, 3 &#125;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testWithValueSource</span><span class="params">(<span class="type">int</span> argument)</span> &#123;</span><br><span class="line">    assertTrue(argument &gt; <span class="number">0</span> &amp;&amp; argument &lt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The following values are supported by @ValueSource</p>
<ul>
<li><code>short</code></li>
<li><code>byte</code></li>
<li><code>int</code></li>
<li><code>long</code></li>
<li><code>float</code></li>
<li><code>double</code></li>
<li><code>char</code></li>
<li><code>boolean</code></li>
<li><code>java.lang.String</code></li>
</ul>
<p>@ValueSource only allows you to provide values for one parameter. If the method has multiple parameters, you can use @CvsSource to provide comma-separated values to the corresponding parameters. Each string represent an invocation of the parameterized test.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@CsvSource(&#123;</span></span><br><span class="line"><span class="meta">    &quot;apple,         1&quot;,</span></span><br><span class="line"><span class="meta">    &quot;banana,        2&quot;,</span></span><br><span class="line"><span class="meta">    &quot;&#x27;lemon, lime&#x27;, 0xF1&quot;,</span></span><br><span class="line"><span class="meta">    &quot;strawberry,    700_000&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testWithCsvSource</span><span class="params">(String fruit, <span class="type">int</span> rank)</span> &#123;</span><br><span class="line">    assertNotNull(fruit);</span><br><span class="line">    assertNotEquals(<span class="number">0</span>, rank);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>There are other useful sources to be used besides @ValueSource and @CvsSource. Please read the JUnit 5 Documentation to learn the others.</p>
<h1 id="Migration-to-JUnit-5"><a href="#Migration-to-JUnit-5" class="headerlink" title="Migration to JUnit 5"></a>Migration to JUnit 5</h1><p>See migration tips: <a href="https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-tips">https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-tips</a></p>
<ul>
<li>Annotations reside in the <code>org.junit.jupiter.api</code> package</li>
<li>Assertions reside in <code>org.junit.jupiter.api.Assertions</code> package</li>
<li>Assumptions reside in <code>org.junit.jupiter.api.Assumptions</code> package</li>
<li>@Before and @After no longer exist; use @BeforeEach and @AfterEach instead.</li>
<li>@BeforeClass and @AfterClass no longer exist; use @BeforeAll and @AfterAll instead.</li>
<li>@Ignore no longer exists: use @Disabled</li>
<li>@Category no longer exists; use @Tag instead.</li>
<li>@RunWith no longer exists; superseded by @ExtendWith.</li>
<li>@Rule and @ClassRule no longer exist; superseded by @ExtendWith and @RegisterExtension.</li>
<li>@Test(expected &#x3D; …​) and the ExpectedException rule no longer exist; use Assertions.assertThrows(…​) instead.</li>
<li>Assertions and assumptions in JUnit Jupiter accept the failure message as their last argument instead of the first one.</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://junit.org/junit5/docs/current/user-guide/#overview">Junit5 Documentation</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JUnit</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven - Deploy Artifacts to Nexus3</title>
    <url>/Java/Maven-Deploy-Artifacts-to-Nexus3/</url>
    <content><![CDATA[<p>We will learn how to deploy a artifact to Nexus3 server using maven.</p>
<span id="more"></span>

<h1 id="Start-nexus-Server"><a href="#Start-nexus-Server" class="headerlink" title="Start nexus Server"></a>Start nexus Server</h1><p>You can install Nexus in your machine or use docker-compose. For convenience, we will use docker-compose in this demo.</p>
<p>First create a data directory and create docker-compose.yaml file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">touch docker-compose.yaml</span><br></pre></td></tr></table></figure>

<p>docker-compose.yaml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data:/nexus-data&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8081:8081&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">nexus-data:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Then start Nexus server using command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>You can check the status of nexus server using <code>docker-compose ps</code> command. Status will be ‘up’ when the server is ready.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose ps</span><br><span class="line">    Name                   Command               State           Ports         </span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">nexus_nexus_1   sh -c $&#123;SONATYPE_DIR&#125;/star ...   Up      0.0.0.0:8081-&gt;8081/tcp</span><br></pre></td></tr></table></figure>

<p>Now broser to <a href="http://localhost:8081/">http://localhost:8081</a>, You should be able to view the Nexus page. From this page, you should be able to get the repository urls. The repository url for maven snapshots should be <a href="http://localhost:8081/repository/maven-snapshots/">http://localhost:8081/repository/maven-snapshots/</a>. The repository url for maven releases should be<br><a href="http://localhost:8081/repository/maven-releases/">http://localhost:8081/repository/maven-releases/</a>.</p>
<img src="nexus.png" />


<p>An alternative way is to run nexus3 docker image from command line. However, you need to use <code>docker exec</code> to go into the docker contains to grab the password in nexus-data&#x2F;admin.password file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8081:8081 --name nexus sonatype/nexus3</span><br></pre></td></tr></table></figure>


<h1 id="Maven-Configuration"><a href="#Maven-Configuration" class="headerlink" title="Maven Configuration"></a>Maven Configuration</h1><p>Then we need to set the maven configuration. It can be change at the global level or user level. The user level configuration file is located at ~&#x2F;.m2&#x2F;settings.xml. You will need to create the file if it doesn’t exist yet. This configuration file should contain credentials to connect to the nexus server. The default user is ‘admin’ and password is store admin.password under the data folder. </p>
<p>~&#x2F;.m2&#x2F;settings.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>4f26a39c-e723-4356-acf6-0ca9a02dced5<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>4f26a39c-e723-4356-acf6-0ca9a02dced5<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Project-Deployment"><a href="#Project-Deployment" class="headerlink" title="Project Deployment"></a>Project Deployment</h1><p>The maven projects needs to specify the repository where the artifacts will be deployed. The repository information is provided in the distributionManagement section of the pom file. If you don’t specify distributionManagement section, the deployment will fail.</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>By default, Maven handles the deployment mechanism via the <em>maven-deploy-plugin</em> – this mapped to the deployment phase of the default Maven lifecycle.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-deploy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>deploy<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>deploy<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Then you can deploy the artifact by executing command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean deploy</span><br></pre></td></tr></table></figure>

<p>If the deployment is successful, the artifact will show up in nexus’s maven repository.<br><img src="nexus-artifact.png" /></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.baeldung.com/maven-deploy-nexus">Maven Deploy to Nexus by Eugen Paraschiv</a></li>
<li><a href="https://mincong-h.github.io/2018/08/04/maven-deploy-artifacts-to-nexus/">Maven: Deploy Artifacts to Nexus by Mincong Huang</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Mockito</title>
    <url>/Java/Mockito/</url>
    <content><![CDATA[<p>Basic Mockito Usage</p>
<span id="more"></span>

<h1 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h1><p>Maven</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mockito/mockito-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Optional. Extension that initializes mocks and handles strict stubbings. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>If it is a spring project then include <code>spring-boot-starter-test</code> dependency. <code>spring-boot-starter-test</code> dependency already includes mockito-core and mockito-junit-jupiter dependency.</p>
<h1 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h1><p>Entity class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Item</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    Long id;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Repo class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ItemRepo</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Item, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">  List&lt;Item&gt; <span class="title function_">findByName</span><span class="params">(String name)</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ItemRepo itemRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ItemService</span><span class="params">(ItemRepo itemRepository)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.itemRepository= itemRepository;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Item <span class="title function_">findById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> itemRepository.findById(id).orElse(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;Item&gt; <span class="title function_">findByName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> itemRepository.findByName(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Unit test for Service class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemServiceTest</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> ItemService itemService;</span><br><span class="line">  <span class="keyword">private</span> ItemRepo itemRepo;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@BeforeEach</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//create mock</span></span><br><span class="line">    itemRepo = mock(ItemRepo.class);</span><br><span class="line"></span><br><span class="line">    itemService = <span class="keyword">new</span> <span class="title class_">ItemService</span>(itemRepo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Item</span>();</span><br><span class="line">    item.setId(<span class="number">1L</span>);</span><br><span class="line">    item.setName(<span class="string">&quot;MacBook&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stubbing</span></span><br><span class="line">    when(itemRepo.findById(<span class="number">1L</span>)).thenReturn(Optional.of(item));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// invoke method</span></span><br><span class="line">    <span class="type">Item</span> <span class="variable">itemFound</span> <span class="operator">=</span> itemService.findById(<span class="number">1L</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// assertion</span></span><br><span class="line">    Assertions.assertEquals(<span class="string">&quot;MacBook&quot;</span>, itemFound.getName() );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// verify</span></span><br><span class="line">    verify(itemRepo, times(<span class="number">1</span>)).findById(<span class="number">1L</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>use static import to import mockito methods</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</span><br></pre></td></tr></table></figure>

<p>Mock is created by <code>mock()</code> method</p>
<h1 id="Stubbing"><a href="#Stubbing" class="headerlink" title="Stubbing"></a>Stubbing</h1><p>Basic stubbing</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">when(itemRepo.findById(<span class="number">1L</span>)).thenReturn(Optional.of(item));</span><br></pre></td></tr></table></figure>

<p>Stubbing exception example test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById_error</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Item</span>();</span><br><span class="line">  item.setId(<span class="number">1L</span>);</span><br><span class="line">  item.setName(<span class="string">&quot;MacBook&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// stubbing Exception</span></span><br><span class="line">  when(itemRepo.findById(<span class="number">1L</span>)).thenThrow(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Some Exception&quot;</span>));</span><br><span class="line"></span><br><span class="line">  Assertions.assertThrows(RuntimeException.class, () -&gt; itemService.findById(<span class="number">1L</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Stubbing exception for void return type method is different. We need to use <code>doThrow()</code> method because <em>when()</em> needs a return type.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; mockList = mock(List.class);</span><br><span class="line">doThrow(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Some Exception&quot;</span>)).when(mockList).add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">mockList.add(<span class="string">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Matchers"><a href="#Matchers" class="headerlink" title="Matchers"></a>Matchers</h1><p>Mockito use <em>equals</em> method to match argument. If more flexibility is required, we can use matchers such as any(), anyInt(), anyLong(), anyString(), eq()…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">when(itemRepo.findById(any())).thenReturn(Optional.of(item));</span><br><span class="line"></span><br><span class="line"><span class="comment">//verify using matcher</span></span><br><span class="line">verify(itemRepo).findById(eq(<span class="number">1L</span>));</span><br></pre></td></tr></table></figure>

<p><b>If you are using argument matchers, all arguments have to be provided by matchers.</b></p>
<p>see <a href="https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/ArgumentMatchers.html">ArgumentMatchers class</a> for all matchers</p>
<h1 id="Verify-Number-of-invocations"><a href="#Verify-Number-of-invocations" class="headerlink" title="Verify Number of invocations"></a>Verify Number of invocations</h1><p>You can verify the number of times a method is called. times(1) is the default.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">verify(itemRepo).findByName(<span class="string">&quot;MacBook&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// verify a method is called twice</span></span><br><span class="line">verify(itemRepo, times(<span class="number">2</span>)).findByName(<span class="string">&quot;MacBook&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// verify a method is nver called</span></span><br><span class="line">verify(itemRepo, never()).findByName(<span class="string">&quot;MacBook&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// verify a method is called at least once</span></span><br><span class="line">verify(itemRepo, atLeastOnce()).findByName(<span class="string">&quot;MacBook&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Verify-Invocation-Order"><a href="#Verify-Invocation-Order" class="headerlink" title="Verify Invocation Order"></a>Verify Invocation Order</h1><p>use <a href="https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/InOrder.html">InOrder</a> to verify invocation order.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// invoke methods</span></span><br><span class="line">itemService.findById(<span class="number">1L</span>);</span><br><span class="line">itemService.findById(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// verify Order</span></span><br><span class="line"><span class="type">InOrder</span> <span class="variable">inOrder</span> <span class="operator">=</span> inOrder(itemRepo);</span><br><span class="line">inOrder.verify(itemRepo).findById(<span class="number">1L</span>);</span><br><span class="line">inOrder.verify(itemRepo).findById(<span class="number">2L</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Verify-no-more-interactions"><a href="#Verify-no-more-interactions" class="headerlink" title="Verify no more interactions"></a>Verify no more interactions</h1><p><code>verifyNoMoreInteractions()</code> - Verifies that no interactions happened on given mocks.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">verifyNoMoreInteractions(mockObject);</span><br></pre></td></tr></table></figure>

<h1 id="Argument-Captor"><a href="#Argument-Captor" class="headerlink" title="Argument Captor"></a>Argument Captor</h1><p>use <a href="https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/ArgumentCaptor.html">ArgumentCaptor</a> to capture argument values and further assertions.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCaptor</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Item</span>();</span><br><span class="line">  item.setId(<span class="number">1L</span>);</span><br><span class="line">  item.setName(<span class="string">&quot;MacBook&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// stubbing</span></span><br><span class="line">  when(itemRepo.findByName(<span class="string">&quot;MacBook&quot;</span>)).thenReturn(List.of(item));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// invoke method</span></span><br><span class="line">  itemService.findByName(<span class="string">&quot;MacBook&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// verify with argument captor</span></span><br><span class="line">  ArgumentCaptor&lt;String&gt; argument = ArgumentCaptor.forClass(String.class);</span><br><span class="line">  verify(itemRepo).findByName(argument.capture());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// assert argument value</span></span><br><span class="line">  Assertions.assertEquals(argument.getValue(), <span class="string">&quot;MacBook&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h1><h2 id="Mock"><a href="#Mock" class="headerlink" title="@Mock"></a>@Mock</h2><p>We can use @Mock annotation to create mock. This often results in more readable code. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemServiceTest</span> &#123;</span><br><span class="line">  <span class="meta">@Mock</span></span><br><span class="line">  <span class="keyword">private</span> ItemRepo itemRepo;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@BeforeEach</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">    MockitoAnnotations.openMocks(<span class="built_in">this</span>);</span><br><span class="line">    itemService = <span class="keyword">new</span> <span class="title class_">ItemService</span>(itemRepo);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MockitoAnnotations.openMocks(this)</code> initializes fields annotated with Mockito annotations.</p>
<p>If using Junit5, then don’t need to execute <code>MockitoAnnotations.openMocks(this)</code>, just annotate the test class with <code>@ExtendWith(MockitoExtension.class)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(MockitoExtension.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemServiceTest</span> &#123;</span><br><span class="line">  <span class="meta">@Mock</span></span><br><span class="line">  <span class="keyword">private</span> ItemRepo itemRepo;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@BeforeEach</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">    itemService = <span class="keyword">new</span> <span class="title class_">ItemService</span>(itemRepo);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="InjectMocks"><a href="#InjectMocks" class="headerlink" title="@InjectMocks"></a>@InjectMocks</h2><p>@InjectMocks mark a field on which injection should be performed.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(MockitoExtension.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemServiceTest</span> &#123;</span><br><span class="line">  <span class="meta">@Mock</span></span><br><span class="line">  <span class="keyword">private</span> ItemRepo itemRepo;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@InjectMocks</span></span><br><span class="line">  <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Captor"><a href="#Captor" class="headerlink" title="@Captor"></a>@Captor</h2><p>With annotation enabled, we can also use <code>@Captor</code> annotation to create ArgumentCaptor.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Captor</span></span><br><span class="line"><span class="keyword">private</span> ArgumentCaptor&lt;String&gt; argument;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#0">Mockito Documentation</a></li>
<li><a href="https://javadoc.io/doc/org.mockito/mockito-junit-jupiter/latest/org/mockito/junit/jupiter/MockitoExtension.html">mockito-junit-jupiter Documentation</a></li>
<li><a href="https://www.baeldung.com/mockito-junit-5-extension">Baeldung Mockito Junit 5 Extension</a></li>
<li><a href="https://www.baeldung.com/mockito-annotations">Baeldung Mockito annotation</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Project Lombok Intro</title>
    <url>/Java/Project-Lombok-Intro/</url>
    <content><![CDATA[<p>Project Lombok helps to reduce boilerplate code.</p>
<span id="more"></span>

<h1 id="Adding-Lombok-to-Project"><a href="#Adding-Lombok-to-Project" class="headerlink" title="Adding Lombok to Project"></a>Adding Lombok to Project</h1><p>For Maven project, add Maven Dependency. see <a href="https://projectlombok.org/setup/maven">https://projectlombok.org/setup/maven</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>For Gradle project. see <a href="https://projectlombok.org/setup/gradle">https://projectlombok.org/setup/gradle</a></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">	mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">	compileOnly <span class="string">&#x27;org.projectlombok:lombok:1.18.30&#x27;</span></span><br><span class="line">	annotationProcessor <span class="string">&#x27;org.projectlombok:lombok:1.18.30&#x27;</span></span><br><span class="line">	</span><br><span class="line">	testCompileOnly <span class="string">&#x27;org.projectlombok:lombok:1.18.30&#x27;</span></span><br><span class="line">	testAnnotationProcessor <span class="string">&#x27;org.projectlombok:lombok:1.18.30&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NOTE: the maven dependency scope is provided because lombok is not needed at runtime.</p>
<p>Lombok works as long as it is in the project classpath. However, you still need to setup lombok in the IDE if you are using an IDE. </p>
<p>For Intellij, You can install the Lombok plugin. see <a href="https://projectlombok.org/setup/intellij">https://projectlombok.org/setup/intellij</a></p>
<p>For Eclipse, you can execute the jar file in ~&#x2F;.m2&#x2F;repository&#x2F;org&#x2F;projectlombok&#x2F;lombok&#x2F;1.18.30&#x2F;lombok-*.jar</p>
<h1 id="Sample-Class-with-Lombok-Annotations"><a href="#Sample-Class-with-Lombok-Annotations" class="headerlink" title="Sample Class with Lombok Annotations"></a>Sample Class with Lombok Annotations</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true, makeFinal = true)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String subtitle;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> price;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; authors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h1><p><a href="https://projectlombok.org/features/Data">@Data</a> is shortcut for </p>
<ul>
<li>@Getter </li>
<li>@Setter </li>
<li>@RequiredArgsConstructor </li>
<li>@ToString </li>
<li>@EqualsAndHashCode.</li>
</ul>
<p><a href="https://projectlombok.org/features/Data">@Data</a> is very convenient because it generates most of the boilerplate code for you.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h1><p>use <code>@NoArgsConstructor</code>, <code>@RequiredArgsConstructor</code>, <code>@AllArgsConstructor</code> to generate constructors.</p>
<ul>
<li><code>@NoArgsConstructor</code> - Generates a no-args constructor</li>
<li><code>@RequiredArgsConstructor</code> - Generates a constructor with required arguments. Required arguments are final fields and fields with constraints such as @NonNull.</li>
<li><code>@AllArgsConstructor</code> - Generates an all-args constructor.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Generate-Getter-and-Setter"><a href="#Generate-Getter-and-Setter" class="headerlink" title="Generate Getter and Setter"></a>Generate Getter and Setter</h1><p>use <code>@Getter</code> and <code>@Setter</code> to generate default getter and setter.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Accessors"><a href="#Accessors" class="headerlink" title="Accessors"></a>Accessors</h1><p><a href="https://projectlombok.org/features/experimental/Accessors">@Accessors</a> was introduced as experimental feature in lombok v0.11.0.</p>
<p>The <code>@Accessors</code> annotation is used to configure how lombok generates and looks for getters, setters, and with-ers.</p>
<p><strong>fluent</strong> attribut - If true, accessors will be named after the field and not include a get or set prefix.</p>
<p><strong>chain</strong> attribute - If true, setters return this instead of void.</p>
<p><strong>makeFinal</strong> attribute -  will create final getters, setters, and with-ers.</p>
<p>Be VERY careful when using fluent attribute. Fluent setters changes the name of the setter methods. Setter methods that starts with <strong>set</strong> are necessary for some libraries and frameworks. Jackson won’t work with fluent setters.</p>
<p>Class with @Accessors annotation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(fluent = true, chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String subtitle;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> price;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; authors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To use the fluent setter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>().title(<span class="string">&quot;my title&quot;</span>)</span><br><span class="line">    .subtitle(<span class="string">&quot;my subtitle&quot;</span>)</span><br><span class="line">    .category(<span class="string">&quot;tech&quot;</span>)</span><br><span class="line">    .price(<span class="number">20.0f</span>)</span><br><span class="line">    .authors(Arrays.asList(<span class="string">&quot;Mike&quot;</span>));</span><br></pre></td></tr></table></figure>

<h1 id="Equals-and-hashCode"><a href="#Equals-and-hashCode" class="headerlink" title="Equals and hashCode"></a>Equals and hashCode</h1><p>use <code>@EqualsAndHashCode</code> to implement <code>equals</code> and <code>hashCode</code> method. By default, it uses non-static, non-transient fields. You can also customize the fields to be used.</p>
<p>To exclude a field, use <code>@EqualsAndHashCode.Exclude</code> annotation.</p>
<p>Alternatively, you can specify exactly which fields or methods you wish to be used by marking them with <code>@EqualsAndHashCode</code>.Include and using <code>@EqualsAndHashCode(onlyExplicitlyIncluded = true)</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; authors;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EqualsAndHashCode</span>.Exclude</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setTitle(<span class="string">&quot;Java 11 Book&quot;</span>);</span><br><span class="line">        book.setCategory(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        book.setPrice(<span class="number">49.99f</span>);</span><br><span class="line">        book.setAuthors(List.of(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Alice&quot;</span>));</span><br><span class="line">        System.out.println(book.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h1><p>generate an implementation of <code>toString()</code> method. </p>
<p>To skip a field, use <code>@ToString.Exclude</code> annotation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String subtitle;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ToString</span>.Exclude</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; authors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Sample output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Book(title=Java 11 Cookbook, subtitle=null, category=Java, price=49.99)</span><br></pre></td></tr></table></figure>

<h1 id="With"><a href="#With" class="headerlink" title="With"></a>With</h1><p>@With - to construct a clone of the object, but with a new value for this one field.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="meta">@With(AccessLevel.PROTECTED)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@With</span></span><br><span class="line">    <span class="keyword">private</span> String subtitle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Title&quot;</span>, <span class="string">&quot;Subtitle&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// construct a clone with new value for title</span></span><br><span class="line"><span class="type">Book</span> <span class="variable">cloneBook</span> <span class="operator">=</span> book.withTitle(<span class="string">&quot;New Title&quot;</span>);</span><br></pre></td></tr></table></figure>


<h1 id="Null-Check"><a href="#Null-Check" class="headerlink" title="Null Check"></a>Null Check</h1><p>You use <a href="https://projectlombok.org/features/NonNull">@NonNull</a> annotation to do null checks. If it is put on a method or constructor argument, it will throw NullPointerException when the provided value is null. If it is put on a field, then any generated method will have a null check.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(<span class="meta">@NonNull</span> String title)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If null is passed as parameter, then NullPointerException will be thrown. The message looks like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException: title is marked non-null but is null</span><br></pre></td></tr></table></figure>

<h1 id="Builder-Pattern"><a href="#Builder-Pattern" class="headerlink" title="Builder Pattern"></a>Builder Pattern</h1><p><a href="https://projectlombok.org/features/Builder">@Builder</a> annotation provides builder API for your class.</p>
<p>Java class with a Builder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String subtitle;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> price;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; authors; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To use the Builder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Book</span> <span class="variable">b1</span> <span class="operator">=</span> Book.builder()</span><br><span class="line">        .title(<span class="string">&quot;my title&quot;</span>)</span><br><span class="line">        .subtitle(<span class="string">&quot;my subtitle&quot;</span>)</span><br><span class="line">        .category(<span class="string">&quot;tech&quot;</span>)</span><br><span class="line">        .price(<span class="number">20.0f</span>)</span><br><span class="line">        .authors(Arrays.asList(<span class="string">&quot;Mike&quot;</span>))</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>


<h1 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h1><p>Lombok provides various annotations for creating <code>log</code> field. </p>
<p>For Example, if you are using Slf4j, then <code>@Slf4j</code> annotation will create a <code>log</code> field of type <code> org.slf4j.Logger</code> for you</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testing</span><span class="params">(<span class="type">int</span> param)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Entering &#123;&#125; method with param = &#123;&#125;&quot;</span>, <span class="string">&quot;testing&quot;</span>, param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h1><p><code>@Synchronized</code> is a safer variant of the synchronized method modifier. The synchronized method modifier locks on <code>this</code>, but this annotation locks on a field named <code>$lock</code>. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Synchronized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedExample</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">readLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Synchronized</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Synchronized</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">answerToLife</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Synchronized(&quot;readLock&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>is equivalent to </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedExample</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">$LOCK</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">$lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">readLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>($LOCK) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">answerToLife</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>($lock) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(readLock) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="SneakyThrows"></a>SneakyThrows</h1><blockquote>
<p>@SneakyThrows can be used to sneakily throw checked exceptions without actually declaring this in your method’s throws clause.</p>
</blockquote>
<p>Checked Exception force the caller to handle or rethrow the exception. This can bubble up and created chunky code. @SneakyThrows tricks the Compiler to </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">App</span>().printFile(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printFile</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> getClass().getClassLoader().getResourceAsStream(path);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> IOUtils.toString(inputStream, StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">        System.out.println(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Without Lombok</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">App</span>().printFile(<span class="string">&quot;test.txtt&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> getClass().getClassLoader().getResourceAsStream(path);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> IOUtils.toString(inputStream, StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">        System.out.println(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://projectlombok.org/">Project Lombok homepage</a></li>
<li><a href="https://www.baeldung.com/intro-to-project-lombok">Introduction to Project Lombok by baeldung</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Regular Expressions</title>
    <url>/Java/Regular-Expressions/</url>
    <content><![CDATA[<p>Java Regular Expressions</p>
<span id="more"></span>

<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Regular expressions (regex) are a powerful tool for pattern matching and text processing. In Java, regular expressions are supported through the <code>java.util.regex</code> package, which provides classes like <code>Pattern</code> and <code>Matcher</code> to work with regex patterns. In this blog post, we’ll explore the basics of regular expressions in Java, including syntax, common patterns, and practical examples.</p>
<h1 id="What-are-Regular-Expressions"><a href="#What-are-Regular-Expressions" class="headerlink" title="What are Regular Expressions?"></a>What are Regular Expressions?</h1><p>A regular expression is a sequence of characters that define a search pattern. It can be used to match strings based on certain patterns, such as specific characters, words, or sequences of characters. Regular expressions are widely used in text processing, data validation, and search operations to identify and extract information from text.</p>
<h1 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h1><p>In Java, regular expressions are represented as strings, where special characters and metacharacters are used to define patterns. Here are some common metacharacters and their meanings:</p>
<ul>
<li><code>.</code>: Matches any single character.</li>
<li><code>^</code>: Matches the beginning of a line.</li>
<li><code>$</code>: Matches the end of a line.</li>
<li><code>[]</code>: Matches any single character within the brackets. For example, <code>[abc]</code> matches either ‘a’, ‘b’, or ‘c’.</li>
<li><code>[^]</code>: Matches any single character not within the brackets. For example, <code>[^abc]</code> matches any character except ‘a’, ‘b’, or ‘c’.</li>
<li><code>|</code>: Matches either the pattern on the left or the pattern on the right.</li>
<li><code>\</code>: Escapes a metacharacter or introduces a special sequence.</li>
</ul>
<p>Common special sequences include:</p>
<ul>
<li><code>\d</code>: Matches any digit (equivalent to <code>[0-9]</code>).</li>
<li><code>\D</code>: Matches any non-digit character (equivalent to <code>[^0-9]</code>).</li>
<li><code>\s</code>: Matches any whitespace character.</li>
<li><code>\S</code>: Matches any non-whitespace character.</li>
<li><code>\w</code>: Matches any word character (equivalent to <code>[a-zA-Z0-9_]</code>).</li>
<li><code>\W</code>: Matches any non-word character.</li>
</ul>
<p>To specify the number of occurrences of a character or pattern, you can use quantifiers:</p>
<ul>
<li><code>*</code>: Matches zero or more occurrences of the preceding character.</li>
<li><code>+</code>: Matches one or more occurrences of the preceding character.</li>
<li><code>?</code>: Matches zero or one occurrence of the preceding character.</li>
<li>{n}: Matches exactly n occurrences of the preceding character.</li>
<li>{n,}: Matches n or more occurrences of the preceding character.</li>
<li>{n,m}: Matches between n and m occurrences of the preceding character.</li>
</ul>
<h1 id="Common-Patterns"><a href="#Common-Patterns" class="headerlink" title="Common Patterns"></a>Common Patterns</h1><p>Here are some common regex patterns that you might encounter in Java:</p>
<ul>
<li>Email addresses: <code>^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;$</code></li>
<li>URLs: <code>^(https?|ftp)://[^\s/$.?#].[^\s]*$</code></li>
<li>Dates (YYYY-MM-DD): <code>^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;$</code></li>
<li>Phone numbers (XXX) XXX-XXXX : <code>^\(\d&#123;3&#125;\) \d&#123;3&#125;-\d&#123;4&#125;$</code></li>
</ul>
<p>You can use online regex testers like <a href="https://regex101.com/">regex101</a> to test and debug your regular expressions.</p>
<h1 id="Pattern-Matching"><a href="#Pattern-Matching" class="headerlink" title="Pattern Matching"></a>Pattern Matching</h1><p>In Java, you can use the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.regex.Pattern</a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html">Matcher</a> classes to work with regular expressions. </p>
<p>Pattern methods</p>
<ul>
<li><strong>Pattern.compile(String regex)</strong> static method is used to compile the given regular expression into a pattern. The pattern is then used to create a matcher object that can match the pattern against a given text. The matches() method of the Matcher class is used to check if the text matches the pattern.</li>
<li><strong>Pattern.matches(CharSequence input)</strong> method  - Creates a matcher that will match the given input against this pattern.</li>
<li><strong>Pattern.matches(String regex, CharSequence input)</strong> method - Compiles the given regular expression and matches it against the given input. returns true if the input matches the pattern, false otherwise.</li>
</ul>
<p>Here’s an example of how to compile a regex pattern and match it against a string:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;(600) 123-4567&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;^\\(\\d&#123;3&#125;\\) \\d&#123;3&#125;-\\d&#123;4&#125;$&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(text);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matcher.matches()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Phone number is valid.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Phone number is invalid.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Grouping-and-Capturing"><a href="#Grouping-and-Capturing" class="headerlink" title="Grouping and Capturing"></a>Grouping and Capturing</h1><p>You can use parentheses <code>()</code> to group patterns together and capture parts of the matched text. Here’s an example of how to extract the area code and phone number from a phone number string:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;(600) 123-4567&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;^\\((\\d&#123;3&#125;)\\) (\\d&#123;3&#125;-\\d&#123;4&#125;)$&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(text);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matcher.matches()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">areaCode</span> <span class="operator">=</span> matcher.group(<span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> matcher.group(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Group count: &quot;</span> + matcher.groupCount()); <span class="comment">//2</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Group start index: &quot;</span> + matcher.start()); <span class="comment">// 0</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Group end index: &quot;</span> + matcher.end()); <span class="comment">// 14</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Full match: &quot;</span> + matcher.group(<span class="number">0</span>)); <span class="comment">// (600) 123-4567</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Area code: &quot;</span> + areaCode); <span class="comment">// 600</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Phone number: &quot;</span> + phoneNumber); <span class="comment">// 123-4567</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// to simply print each group</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= matcher.groupCount(); i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Group &quot;</span> + i + <span class="string">&quot;: &quot;</span> + matcher.group(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Phone number is invalid.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Group zero denotes the entire pattern, so the expression m.group(0) is equivalent to m.group(). The Matcher class also provides methods like <code>start</code>, <code>end</code>, and <code>groupCount</code> to work with groups.</p>
<p>In this example, we use parentheses to group the area code and phone number patterns and capture them using the <code>group</code> method of the <code>Matcher</code> class.</p>
<h1 id="Matcher-find-method"><a href="#Matcher-find-method" class="headerlink" title="Matcher.find() method"></a>Matcher.find() method</h1><p>The <code>find()</code> method of the Matcher class is used to find the next subsequence of the input sequence that matches the pattern. It returns true if a match is found, false otherwise. The <code>start()</code> and <code>end()</code> methods can be used to get the start and end indices of the matched subsequence.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;(600) 123-4567 (600) 000-1111&quot;</span>;</span><br><span class="line"> <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\((\\d&#123;3&#125;)\\) (\\d&#123;3&#125;-\\d&#123;4&#125;)&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"> <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(text);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">areaCode</span> <span class="operator">=</span> matcher.group(<span class="number">1</span>);</span><br><span class="line">     <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> matcher.group(<span class="number">2</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;Area code: &quot;</span> + areaCode); <span class="comment">// 600</span></span><br><span class="line">     System.out.println(<span class="string">&quot;Phone number: &quot;</span> + phoneNumber); <span class="comment">// 123-4567</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Difference between <code>matches()</code> and <code>find()</code> methods - The <code>matches()</code> method attempts to match the entire input sequence against the pattern, while the <code>find()</code> method searches for the next subsequence of the input sequence that matches the pattern.</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Regular expressions are a powerful tool for pattern matching and text processing in Java. By understanding the basic syntax, common patterns, and practical examples, you can leverage regex to perform complex text operations with ease. If you have any questions or feedback, feel free to leave a comment below. Happy coding!</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>WireMock</title>
    <url>/Java/Wiremock/</url>
    <content><![CDATA[<p>WireMock is a simulator for HTTP-based APIs.</p>
<span id="more"></span>

<h1 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tomakehurst<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wiremock-jre8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.26.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Non-Junit-Usage"><a href="#Non-Junit-Usage" class="headerlink" title="Non-Junit Usage"></a>Non-Junit Usage</h1><p>You can use WireMock without Junit.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.tomakehurst.wiremock.WireMockServer;</span><br><span class="line"><span class="keyword">import</span> com.github.tomakehurst.wiremock.core.WireMockConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.github.tomakehurst.wiremock.client.WireMock.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MockServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WireMockServer</span> <span class="variable">wireMockServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WireMockServer</span>(WireMockConfiguration.options().port(<span class="number">8090</span>).httpsPort(<span class="number">8091</span>));</span><br><span class="line">        <span class="comment">// same as WireMockServer wireMockServer = new WireMockServer(8090, 8091); //No-args constructor will start on port 8080, no HTTPS</span></span><br><span class="line"></span><br><span class="line">        wireMockServer.start();</span><br><span class="line"></span><br><span class="line">        configureFor(<span class="string">&quot;localhost&quot;</span>, <span class="number">8090</span>);</span><br><span class="line">        stubFor(get(urlEqualTo(<span class="string">&quot;/some/thing&quot;</span>))</span><br><span class="line">                .willReturn(aResponse()</span><br><span class="line">                        .withHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">                        .withBody(<span class="string">&quot;Hello world!&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This will start a mock server with two endpoints. Both endpoints return <em>Hello world!</em></p>
<ul>
<li>HTTP Endpoint: <a href="http://localhost:8090/some/thing">http://localhost:8090/some/thing</a></li>
<li>HTTPS Endpoint: <a href="https://localhost:8091/some/thing">https://localhost:8091/some/thing</a></li>
</ul>
<h1 id="Usage-With-Junit"><a href="#Usage-With-Junit" class="headerlink" title="Usage With Junit"></a>Usage With Junit</h1><p>This rule will start the server before each tyest method and stop it afterwards.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">WireMockRule</span> <span class="variable">wireMockRule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WireMockRule</span>(WireMockConfiguration.options().port(<span class="number">8090</span>));</span><br></pre></td></tr></table></figure>

<p>Example Junit Test with WireMock</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.tomakehurst.wiremock.core.WireMockConfiguration;</span><br><span class="line"><span class="keyword">import</span> com.github.tomakehurst.wiremock.junit.WireMockRule;</span><br><span class="line"><span class="keyword">import</span> com.jayway.jsonpath.JsonPath;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.github.tomakehurst.wiremock.client.WireMock.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MockServerTest</span> &#123;</span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">WireMockRule</span> <span class="variable">wireMockRule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WireMockRule</span>(WireMockConfiguration.options().port(<span class="number">8090</span>));</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testServer</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        stubFor(get(urlPathMatching(<span class="string">&quot;/blah/.*&quot;</span>))</span><br><span class="line">                .willReturn(aResponse().withStatus(<span class="number">200</span>)</span><br><span class="line">                        .withHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">                        .withBody(<span class="string">&quot;&#123;\&quot;result\&quot;: \&quot;success\&quot;&#125;&quot;</span>)));</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8090/blah/wiremock&quot;</span>);</span><br><span class="line">        <span class="type">HttpResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> httpClient.execute(request);</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringResponse</span> <span class="operator">=</span> convertResponseToString(httpResponse);</span><br><span class="line">        Assert.assertEquals( <span class="string">&quot;success&quot;</span>, JsonPath.&lt;String&gt;read(stringResponse, <span class="string">&quot;$.result&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">convertResponseToString</span><span class="params">(HttpResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">responseStream</span> <span class="operator">=</span> response.getEntity().getContent();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(responseStream, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">responseString</span> <span class="operator">=</span> scanner.useDelimiter(<span class="string">&quot;\\Z&quot;</span>).next();</span><br><span class="line">        scanner.close();</span><br><span class="line">        <span class="keyword">return</span> responseString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Reference</p>
<ul>
<li><a href="http://wiremock.org/docs/">Wiremock Documentation</a></li>
<li><a href="https://www.baeldung.com/introduction-to-wiremock">Introduction to WireMock by Baeldung</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Copy Object in Javascript</title>
    <url>/Javascript/Copy-Object-in-Javascript/</url>
    <content><![CDATA[<p>Copying Object in Javascript</p>
<span id="more"></span>

<p>There are three ways to copy object in Javascript</p>
<ul>
<li>spread (…) syntax</li>
<li>Object.assign() function</li>
<li>JSON.stringify() and JSON.parse() function</li>
</ul>
<h1 id="Spread-Syntax"><a href="#Spread-Syntax" class="headerlink" title="Spread Syntax"></a>Spread Syntax</h1><p>Spread syntax is the most simple way to shallow clone an object</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;js tutorial&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> cloneBook = &#123;...book&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h1><p>Object.assign() is also used to shallow clone an object.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;js tutorial&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> cloneBook = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, book)</span><br></pre></td></tr></table></figure>

<p>Both spread and Object.assign copy&#x2F;merge the properties from one object to another. They are shallow cloning object because when copying reference, they don’t copy the referenced data, only the reference itself.</p>
<p>So when the object to clone contains object, array or dates, shallow clone will cause both original and clone object use the same reference.</p>
<h1 id="stringify-and-parse"><a href="#stringify-and-parse" class="headerlink" title="stringify and parse"></a>stringify and parse</h1><p>JSON.stringify() and JSON.parse() methods are used to do deep clone. This works for all kind of objects containing objects, arrays and primitives.</p>
<p>Shallow clone example</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Shallow Clone</span></span><br><span class="line"><span class="keyword">let</span> book = &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;js tutorial&#x27;</span>, <span class="attr">details</span>: &#123;<span class="attr">isbn</span>: <span class="number">100000</span> &#125;&#125;</span><br><span class="line"><span class="keyword">let</span> cloneBook = &#123;...book&#125;</span><br><span class="line">cloneBook.<span class="property">details</span>.<span class="property">isbn</span>=<span class="number">22222</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book) <span class="comment">// the isbn is now 22222</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Deep Clone</span></span><br><span class="line"><span class="keyword">let</span> book = &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;js tutorial&#x27;</span>, <span class="attr">details</span>: &#123;<span class="attr">isbn</span>: <span class="number">100000</span> &#125;&#125;</span><br><span class="line"><span class="keyword">let</span> cloneBook = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(book))</span><br><span class="line">cloneBook.<span class="property">details</span>.<span class="property">isbn</span>=<span class="number">22222</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book) <span class="comment">// the isbn is still 100000</span></span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.javascripttutorial.net/object/3-ways-to-copy-objects-in-javascript/">3 Ways to Copy Objects in JavaScript</a></li>
</ul>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>Fetch API</title>
    <url>/Javascript/Fetch-API/</url>
    <content><![CDATA[<p>Fetch API is used to make server request. The return value is a Promise. This allows us to build simple and clean API calls.</p>
<span id="more"></span>

<h1 id="Basic-Fetch-Request"><a href="#Basic-Fetch-Request" class="headerlink" title="Basic Fetch Request"></a>Basic Fetch Request</h1><p>Example to use Fetch to get data from server</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span> )</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">json</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;delectus aut autem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;completed&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>fetch()</code> method takes a url as the first argument. The return value is a Promise. <code>json()</code> method converts the response to json. It is the most used method.</p>
<h1 id="POST-Request"><a href="#POST-Request" class="headerlink" title="POST Request"></a>POST Request</h1><p>The <code>fetch()</code> method call accepts a second optional parameter. You specify the request options such as method, headers and body using the second parameter.</p>
<p>Example to send a POST message with headers and body.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">      <span class="attr">body</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="attr">userId</span>: <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">json</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  id<span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line">  title<span class="punctuation">:</span> &#x27;foo&#x27;<span class="punctuation">,</span></span><br><span class="line">  body<span class="punctuation">:</span> &#x27;bar&#x27;<span class="punctuation">,</span></span><br><span class="line">  userId<span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<h1 id="Async-and-await"><a href="#Async-and-await" class="headerlink" title="Async and await"></a>Async and await</h1><p>You can rewrite the fetch request using async&#x2F;await. This sometimes makes the code easier to understand and maintain. no more <code>.then()</code> chains.</p>
<p>Async function that uses fetch() to make http request</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getTodo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!response.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Http error. status:<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> json = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createPost</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;Title&quot;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="string">&quot;Body&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Http error. status:<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> json = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>await</code> blocks execution of the code that follows until the promise fulfills. So you need to be careful when using async&#x2F;await</p>
<h1 id="Useful-Resources"><a href="#Useful-Resources" class="headerlink" title="Useful Resources"></a>Useful Resources</h1><ul>
<li><a href="https://javascript.info/network">Javascript.info Network request Section</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">MDN Using Fetch</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await">MDN Making asynchronous programming easier with async and await</a></li>
</ul>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>Introduction to Jackson ObjectMapper</title>
    <url>/Java/ObjectMapper/</url>
    <content><![CDATA[<p>Jackson ObjectMapper</p>
<span id="more"></span>

<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In this blog post, we’ll explore the fundamentals of Jackson Object Mapper and delve into its practical usage.</p>
<p>What is Jackson Object Mapper?</p>
<p>Jackson is a high-performance JSON processor for Java, providing a set of tools to work with JSON data. At its core is the Jackson Object Mapper, a module that facilitates the conversion between Java objects and JSON data, as well as other data formats like XML. It is widely used in enterprise-level applications and open-source projects due to its simplicity, versatility, and robust performance.</p>
<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p>To integrate Jackson into your project, you can include the Jackson dependencies in your build tool (e.g., Maven, Gradle). Once added, you can start using the ObjectMapper class to serialize Java objects to JSON and deserialize JSON back to Java objects.</p>
<h1 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.18.2<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Jackson Annotations (Optional, for using annotations like @JsonProperty) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Serialization"><a href="#Serialization" class="headerlink" title="Serialization"></a>Serialization</h1><p>use ObjectMapper.writeValueAsString(Object) method to convert Java object to JSON string. <a href="https://fasterxml.github.io/jackson-databind/javadoc/2.7/com/fasterxml/jackson/databind/ObjectMapper.html">com.fasterxml.jackson.databind.ObjectMapper</a> is the main class to perform serialization and deserialization in Jackson.</p>
<p>Entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Convert Java object to JSON string</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Item</span>();</span><br><span class="line">item.setName(<span class="string">&quot;book&quot;</span>);</span><br><span class="line">item.setPrice(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Convert Java object to JSON string</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> objectMapper.writeValueAsString(item);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert Java object to JSON string</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> objectMapper.writeValueAsString(item);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line">    <span class="comment">// Convert Java object to JSON string with pretty printing</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString2</span> <span class="operator">=</span> objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(item);</span><br><span class="line">    System.out.println(jsonString2);</span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonParseException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;book&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">20</span><span class="punctuation">&#125;</span></span><br><span class="line">=====================================</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;book&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Deserialization"><a href="#Deserialization" class="headerlink" title="Deserialization"></a>Deserialization</h1><p>use ObjectMapper.readValue(String, Class) method to convert JSON string to Java object.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="comment">/* JSON string from some source */</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Convert JSON string to Java object</span></span><br><span class="line">    <span class="type">Item</span> <span class="variable">deserializedItem</span> <span class="operator">=</span> objectMapper.readValue(jsonString, Item.class);</span><br><span class="line">    System.out.println(deserializedItem);</span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Annotations-for-Customization"><a href="#Annotations-for-Customization" class="headerlink" title="Annotations for Customization:"></a>Annotations for Customization:</h1><p>Jackson provides a set of annotations that allow fine-grained control over the serialization and deserialization process. For example, </p>
<ul>
<li><code>@JsonProperty</code> lets you specify the name of a property when serialized</li>
<li><code>@JsonInclude</code> allows you to exclude null or empty values from the output</li>
<li><code>@JsonPropertyOrder</code> lets you specify the order of properties in the output</li>
<li><code>@JsonIgnore</code> excludes a property from serialization and deserialization</li>
<li><code>@JsonManagedReference</code> and <code>@JsonBackReference</code> manage bidirectional relationships</li>
</ul>
<p>Example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonPropertyOrder(&#123;&quot;item_name&quot;, &quot;price&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="meta">@JsonProperty(&quot;item_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Sample output:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;item_name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;book&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>@JsonIgnoreProperties</code> - Annotation that can be used to either suppress serialization of properties (during serialization), or ignore processing of JSON properties read (during deserialization).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">```java</span><br><span class="line"> <span class="comment">// to prevent specified fields from being serialized or deserialized</span></span><br><span class="line"> <span class="comment">// (i.e. not include in JSON output; or being set even if they were included)</span></span><br><span class="line"> <span class="meta">@JsonIgnoreProperties(&#123; &quot;internalId&quot;, &quot;secretKey&quot; &#125;)</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// To ignore any unknown properties in JSON input without exception:</span></span><br><span class="line"> <span class="meta">@JsonIgnoreProperties(ignoreUnknown=true)</span></span><br></pre></td></tr></table></figure>

<h1 id="Handling-Date-Formats"><a href="#Handling-Date-Formats" class="headerlink" title="Handling Date Formats"></a>Handling Date Formats</h1><p>Date serialization and deserialization often require specific formats. Jackson allows you to configure date formats globally or on a per-field basis:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">objectMapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br></pre></td></tr></table></figure>

<h1 id="Handling-Java-8-Date-x2F-Time-Types"><a href="#Handling-Java-8-Date-x2F-Time-Types" class="headerlink" title="Handling Java 8 Date&#x2F;Time Types"></a>Handling Java 8 Date&#x2F;Time Types</h1><p>With the introduction of Java 8, new date and time types like <code>LocalDate</code>, <code>LocalDateTime</code>, and <code>ZonedDateTime</code> have become popular. Jackson provides a module called <code>jackson-datatype-jsr310</code> to handle these types:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.18.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>To use the module, you can register it with the ObjectMapper:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">objectMapper.findAndRegisterModules();</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> objectMapper.writeValueAsString(item);</span><br><span class="line">System.out.println(jsonString);</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;book&quot;,</span><br><span class="line">  &quot;price&quot; : 20,</span><br><span class="line">  &quot;createdDate&quot; : 1625119200.000000000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To serialize and deserialize Java 8 date&#x2F;time types in a readable format, you can configure the ObjectMapper as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">objectMapper.findAndRegisterModules();</span><br><span class="line">objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">objectMapper.enable(SerializationFeature.WRITE_DATES_WITH_ZONE_ID);</span><br><span class="line">objectMapper.disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);</span><br></pre></td></tr></table></figure>

<p>SerializationFeature.WRITE_DATES_WITH_ZONE_ID: When enabled, the date&#x2F;time values are serialized with the time zone ID, such as “Asia&#x2F;Shanghai”.</p>
<p>DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE: When disabled, the date&#x2F;time values are deserialized without adjusting to the context time zone. This is useful when you want to preserve the original time zone from the Json string.</p>
<h1 id="Handling-List"><a href="#Handling-List" class="headerlink" title="Handling List"></a>Handling List</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">List&lt;Item&gt; items = List.of(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Item</span>().setName(<span class="string">&quot;book&quot;</span>).setPrice(<span class="number">20</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Item</span>().setName(<span class="string">&quot;pen&quot;</span>).setPrice(<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(items);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">    List&lt;Item&gt; deserializedItems = objectMapper.readValue(jsonString, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;Item&gt;&gt;()&#123;&#125;);</span><br><span class="line">    deserializedItems.forEach(System.out::println);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this example, The <code>TypeReference&lt;List&lt;Item&gt;&gt;()&#123;&#125;</code> is used to specify the type of the list.</p>
<p>If you just juse <code>List.class</code> as the type, you will get a list of LinkedHashMap. and results in a ClassCastException when you try to cast it to <code>List&lt;Item&gt;</code>.</p>
<h1 id="Handling-Polymorphic-Types"><a href="#Handling-Polymorphic-Types" class="headerlink" title="Handling Polymorphic Types:"></a>Handling Polymorphic Types:</h1><p>When working with polymorphic types, Jackson supports annotations like <code>@JsonTypeInfo</code> and <code>@JsonSubTypes</code> to handle the serialization and deserialization of class hierarchies:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = &quot;type&quot;)</span></span><br><span class="line"><span class="meta">@JsonSubTypes(&#123;</span></span><br><span class="line"><span class="meta">    @Type(value = Dog.class, name = &quot;dog&quot;),</span></span><br><span class="line"><span class="meta">    @Type(value = Cat.class, name = &quot;cat&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// common fields and methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Jackson Object Mapper simplifies the complex task of data serialization and deserialization in Java applications. Its flexibility, performance, and extensive features make it an essential tool for developers working with JSON and other data formats. By understanding the basics and exploring advanced features, developers can harness the full potential of Jackson to streamline data processing in their projects.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://fasterxml.github.io/jackson-annotations/javadoc/2.8/index.html">Jackson Javadoc</a></li>
<li><a href="https://fasterxml.github.io/jackson-databind/javadoc/2.8/com/fasterxml/jackson/databind/ObjectMapper.html">ObjectMapper Javadoc</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Non-static vs Static Nested class</title>
    <url>/Java/Non-static-vs-Static-Nested-class/</url>
    <content><![CDATA[<p>A class can be defined within another class. These classes are known as nested classes. They allow you to logically group related classes in one place.</p>
<span id="more"></span>
<p>A <strong>non-static nested class</strong> has full access to enclosing class’s member variables.  non-static nested class is called <strong>inner class</strong>. </p>
<p>According to Effective Java</p>
<blockquote>
<p>Each instance of a non-static nested class is implicitly associated with an enclosing instance of its containing class… It is possible to invoke methods on the enclosing instance.</p>
</blockquote>
<p>A <strong>static nested class</strong> does not have access to the nested class.</p>
<h1 id="Non-static-nested-class"><a href="#Non-static-nested-class" class="headerlink" title="Non-static nested class"></a>Non-static nested class</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">NestedClass</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To instantiate an inner class, you must first instantiate the outer class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OuterClass.<span class="type">InnerClass</span> <span class="variable">innerObj</span> <span class="operator">=</span> outerObj.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br></pre></td></tr></table></figure>

<p>But inside the enclosing class, you don’t need the prefix</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">NestedClass</span> <span class="variable">nc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NestedClass</span>();</span><br></pre></td></tr></table></figure>

<p>Non-static nested class has access to the enclosing class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OuterClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">NestedClass</span> <span class="variable">nc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NestedClass</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">NestedClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">            OuterClass.<span class="built_in">this</span>.foo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Static-nested-class"><a href="#Static-nested-class" class="headerlink" title="Static nested class"></a>Static nested class</h1><p>there is no such thing as a static inner class. According to Effective Java, the correct terminology is a static nested class. </p>
<p>A static nested class interacts with the instance members of its outer class (and other classes) just like any other top-level class. In effect, a static nested class is behaviorally a top-level class that has been nested in another top-level class for packaging convenience.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">NestedClass</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You don’t need a outer class to create a static nested class. To instantiate a static nested class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OuterClass.<span class="type">NestedClass</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>.NestedClass();</span><br></pre></td></tr></table></figure>

<p>If there is no need to directly create an instance of the nested class, you can use a static nested class. For example, LinkedList class has a static nested class Entry.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; ... &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;E&gt; &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html">JavaSE doc - Nested Classes</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Javascript - Handle Mouse Event</title>
    <url>/Javascript/Javascript-Handle-Mouse-Event/</url>
    <content><![CDATA[<p>Handle mouse event using javascript only</p>
<span id="more"></span>

<p>Common mouse events are</p>
<ul>
<li>click</li>
<li>dblclick</li>
<li>mouseup</li>
<li>mousedown</li>
<li>mousemove</li>
</ul>
<h1 id="Handling-Click-Event"><a href="#Handling-Click-Event" class="headerlink" title="Handling Click Event"></a>Handling Click Event</h1><p>You can use <code>button.onclick = function(event)&#123;...&#125;</code> to handle click event.</p>
<p>Example to handle the onclick event</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;utf-8&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&#x27;X-UA-Compatible&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;IE=edge&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;viewport&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;width=device-width, initial-scale=1&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Clicked`</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);     </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Get-Event-Coordinate"><a href="#Get-Event-Coordinate" class="headerlink" title="Get Event Coordinate"></a>Get Event Coordinate</h2><p>You can also pass the event object to the hanlder. event object properties can be found in <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent">MouseEvent interface</a></p>
<p>To check the coordinate, you can use the following properties</p>
<ul>
<li>clientX, clientY</li>
<li>pageX, pageY</li>
<li>screenX, screenY<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Clicked at clientX:<span class="subst">$&#123;event.clientX&#125;</span> clientY:<span class="subst">$&#123;event.clientY&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Clicked at pageX:<span class="subst">$&#123;event.pageX&#125;</span> pageY:<span class="subst">$&#123;event.pageY&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Check-Keys"><a href="#Check-Keys" class="headerlink" title="Check Keys"></a>Check Keys</h2><p>You can use <code>altKey</code> property to check if Alt key is pressed. CtrlKey is similar.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(event.<span class="property">altKey</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Alt&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(event.<span class="property">ctrlKey</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Ctrl&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(event.<span class="property">shiftKey</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Shift&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Handle-Mousemove-Event"><a href="#Handle-Mousemove-Event" class="headerlink" title="Handle Mousemove Event"></a>Handle Mousemove Event</h1><p>Handling mousemove event is very similar to mouse click event.</p>
<p>Example to handle mousemove event using <code>onmousemove</code> function</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:500px;height:500px;background-color: aqua;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;coordinate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    mydiv.<span class="property">onmousemove</span>= <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        coordinate.<span class="property">innerHTML</span> = <span class="string">`<span class="subst">$&#123;event.clientX&#125;</span>, <span class="subst">$&#123;event.clientY&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes Concepts</title>
    <url>/Kubernetes/Kubernetes-Concepts/</url>
    <content><![CDATA[<p>Key Kubernetes concetps.</p>
<span id="more"></span>

<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><p>Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.</p>
<p>Kubernetes makes it easy to scale application, reduce downtime and increase security.</p>
<p>Key Features of Kubernetes</p>
<ul>
<li>Horizontal Scaling</li>
<li>Self Healing</li>
<li>Automated Rollouts and Rollbacks</li>
<li>Built-in Service Discovery</li>
<li>Built-in Load-Balancer</li>
</ul>
<h1 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h1><p>A Kubernetes cluster consists of at least one master and multiple workers called nodes.</p>
<h2 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h2><p>The cluster master runs the Kubernetes control plane processes, including the Kubernetes API server, scheduler, and core resource controllers.</p>
<p>Users interact with Kubernetes using Kubernetes API calls. Master runs <strong>API Server</strong> to handle the request.</p>
<p>Master also schedule workloads and manage network and storage resources for the workloads.</p>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>Node is worker machines controlled by Master. Nodes runs containerized application s and other workloads. </p>
<h2 id="Node-Pools"><a href="#Node-Pools" class="headerlink" title="Node Pools"></a>Node Pools</h2><p>A <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/node-pools">node pool</a> is a group of nodes within a cluster that all have the same configuration. </p>
<p>Custom node pools are useful when you need to schedule Pods that require more resources than others, such as more memory or more local disk space.</p>
<h1 id="Workloads"><a href="#Workloads" class="headerlink" title="Workloads"></a>Workloads</h1><h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><p><strong><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/pod">Pods</a></strong> are the smallest, most basic deployable objects in Kubernetes. A Pod represents a single instance of a running process in your cluster. </p>
<p>Pods contain one or more containers. one-container-per-Pod model is the most basic Kubernetes use case. Containers in a Pod share storage and network. A sidecar container can be added to the pod. The sidecar container can provide log forwarding and proxying to other service.</p>
<p>A Pod can specify a set of shared storage Volumes . All containers in the Pod can access the shared volumes. </p>
<p>Each Pod is assigned a unique IP address. However, these IP addresses are not stable.</p>
<h2 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h2><p>A Deployment creates ReplicaSet. <strong><a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/">ReplicaSet</a></strong> manages groups of identical, replicated pods. It creates and deletes Pods to reach a specified number.</p>
<p>It is possible to create ReplicaSet directly, but it is not recommended. Deployment will automatically create replicaset. </p>
<h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p><strong><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/deployment">Deployments</a></strong> represent a set of multiple, identical Pods with no unique identities. A Deployment runs multiple replicas of your application and automatically replaces any instances that fail or become unresponsive.</p>
<p>Deployment is used to run stateless applications. Example ofa stateless application is a frontend applications.</p>
<p>You can create Deployment using <a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#apply">kubectl apply</a> or <a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#create">kubectl create</a> command. </p>
<h2 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h2><p>A <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/statefulset">StatefulSet</a> is the workload API object used to manage stateful applications.</p>
<p>A stateful application requires its state to be persisted. examples are MySQL, MongoDB, Kafka, and Apache ZooKeeper. </p>
<p>For stateless applications, use Deployment instead.</p>
<h2 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h2><p>A <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/daemonset">DaemonSet</a> ensures exactly one instance of pod is run on a node. It is a one-Pod-per-node model.</p>
<p>Example are storage daemons like cept, log collection daemons like fluentd, and node monitoring daemons like collectd.</p>
<h2 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h2><p>A <a href="https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/">job</a> creates one or more Pods and ensures that a specified number of them successfully terminate. </p>
<h2 id="CronJob"><a href="#CronJob" class="headerlink" title="CronJob"></a>CronJob</h2><p>A <a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/">Cron Job</a> creates Jobs on a time-based schedule.</p>
<h1 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h1><p>Kubernetes Cluster allocates IP addresses and assigns IP addresses to nodes, pods and services.</p>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>a <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/service">Service</a> is an abstract way to expose an application running on a set of Pods as a network service.</p>
<p>With Kubernetes you don’t need to modify your application to use an unfamiliar service discovery mechanism. Kubernetes gives Pods their own IP addresses and a single DNS name for a set of Pods, and can load-balance across them.</p>
<h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p><a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#what-is-ingress">Ingress</a> exposes HTTP and HTTPS routes from outside the cluster to services within the cluster.</p>
<p>An Ingress can be configured to give services externally-reachable URLs, load balanc traffic, terminal SSL&#x2F;TLS, and offer name based virtual hosting. </p>
<p>An Ingress does not expose artitrary ports or protocols. Exposing services other than HTTP and HTTPS to the internet typically uses a service of type <code>Service.Type=NodePort</code> or <code>Service.Type=LoadBalancer</code>.</p>
<h1 id="ConfigMaps-and-Secrets"><a href="#ConfigMaps-and-Secrets" class="headerlink" title="ConfigMaps and Secrets"></a>ConfigMaps and Secrets</h1><p><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/configmap">ConfigMaps</a> are used to store and sharing non-sensitive unencrypted configuration environment variables that can be passed to the running workloads.</p>
<p><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/secret">Secrets</a> are similar to ConfigMaps. It stores sensitvive data such as passwords, OAuth tokens, SSH keys. </p>
<h1 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h1><ul>
<li>Each resource can only have one namespace</li>
<li>Namespace are intended for multiple teams sharing the same cluster</li>
<li>Namespaces are a way to divide cluster resources between multiple users</li>
<li>use labels to distinguish resources within the same namespace.</li>
</ul>
<p>Kubernetes starts with three initial namespaces:</p>
<ul>
<li><strong>default</strong></li>
<li><strong>kube-system</strong></li>
<li><strong>kube-public</strong></li>
</ul>
<h1 id="Label-and-Selector"><a href="#Label-and-Selector" class="headerlink" title="Label and Selector"></a>Label and Selector</h1><p><strong>Labels</strong> are key&#x2F;value pairs that are attached to objects, such as pods. Labels are intended to be used to specify identifying attributes of objects that are meaningful and relevant to users, but do not directly imply semantics to the core system. </p>
<p>Example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">      app: nginx</span><br><span class="line">      environment: production</span><br><span class="line">      version: 1.0</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>Selectors</strong> select the matched resources from query. The API currently supports two types of selectors: equality-based and set-based. </p>
<p>Equality- or inequality-based requirements allow filtering by label keys and values. Example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">environment = production</span><br><span class="line">tier != frontend</span><br></pre></td></tr></table></figure>

<p>Set-based label requirements allow filtering keys according to a set of values. Example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">environment in (production, qa)</span><br><span class="line">tier notin (frontend, backend)</span><br><span class="line">partition</span><br><span class="line">!partition</span><br></pre></td></tr></table></figure>

<p>Not all concepts are listed. For details of a concept, see <a href="https://kubernetes.io/docs/concepts/">https://kubernetes.io/docs/concepts/</a></p>
<h1 id="Annotations"><a href="#Annotations" class="headerlink" title="Annotations"></a>Annotations</h1><p>You can use Kubernetes <strong>annotations</strong> to attach arbitrary non-identifying metadata to objects. Clients such as tools and libraries can retrieve this metadata.</p>
<p>Example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">      key1: value1</span><br><span class="line">      key2&quot;: value2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>


<h1 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h1><img src="https://upload.wikimedia.org/wikipedia/commons/b/be/Kubernetes.png" />
By Khtan66 - https://commons.wikimedia.org/wiki/File:Kubernetes.png


<h2 id="Master-1"><a href="#Master-1" class="headerlink" title="Master"></a>Master</h2><p>Master is the node that manages others nodes.</p>
<p>It runs the following components</p>
<ul>
<li><strong><a href="https://kubernetes.io/docs/concepts/overview/components/#kube-apiserver">kube-apiserver</a></strong> - exposes the Kubernetes API. It is the front-end for the Kubernetes control plane. Kubernetes API is a Restful API for user to interact with its components.</li>
<li><strong><a href="https://kubernetes.io/docs/concepts/overview/components/#etcd">etcd</a></strong> - consistent and highly-available key value store used as Kubernetes’s backing store for all cluster data.</li>
<li><strong><a href="https://kubernetes.io/docs/concepts/overview/components/#kube-scheduler">kube-scheduler</a></strong> - component on the master that watches newly created pods that have no node assigned, and selects a node for them to run on</li>
<li><strong><a href="https://kubernetes.io/docs/concepts/overview/components/#kube-controller-manager">kube-controller-manager</a></strong> - component on the master that runs controllers</li>
<li><strong><a href="https://kubernetes.io/docs/concepts/overview/components/#cloud-controller-manager">cloud-controller manager</a></strong> - runs controllers that interact with the underlying cloud providers.</li>
</ul>
<h2 id="Node-1"><a href="#Node-1" class="headerlink" title="Node"></a>Node</h2><p>A Pod always runs on a <strong>Node</strong>. A node is a worker machine in Kubernetes that is managed by a Master. Master is also a node. It manages the other nodes in the cluster.</p>
<p>Node contains the following components</p>
<ul>
<li><strong><a href="https://kubernetes.io/docs/concepts/overview/components/#kubelet">kubelet</a></strong> - An agent that runs on each node in the cluster.</li>
<li><strong><a href="https://kubernetes.io/docs/concepts/overview/components/#kube-proxy">kube-proxy</a></strong> - kube-proxy is a network proxy that runs on each node in your cluster, implementing part of the Kubernetes Service concept.</li>
<li><strong><a href="https://kubernetes.io/docs/concepts/overview/components/#container-runtime">Container Runtime</a></strong> - The container runtime is the software that is responsible for running containers.</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://kubernetes.io/docs/concepts/">Kubernetes Concepts</a></li>
<li><a href="https://kubernetes.io/docs/concepts/overview/components/">Kubernetes Components</a></li>
<li><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/deployment">Kubernetes Concept - Deployment</a></li>
<li><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/pod">Kubernetes Concept - Pod</a></li>
<li><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/service">Kubernetes Concept - Service</a></li>
<li><a href="https://towardsdatascience.com/key-kubernetes-concepts-62939f4bc08e">Key Kubernetes Concepts by Jeff Hale</a></li>
<li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/">Namespaces</a></li>
<li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/">Labels</a></li>
<li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/">Kubernetes Concept - Annotations</a></li>
<li>Khtan66 [CC BY-SA 4.0 (<a href="https://creativecommons.org/licenses/by-sa/4.0)]">https://creativecommons.org/licenses/by-sa/4.0)]</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes - ConfigMap</title>
    <url>/Kubernetes/Kubernetes-ConfigMap/</url>
    <content><![CDATA[<p>Kubernetes ConfigMap</p>
<span id="more"></span>

<p>Problem with setting the configuration in the deployment file is tight coupling between application and configuration. <strong>ConfigMaps</strong> allow you to decouple configuration artifacts from image content to keep containerized applications portable. ConfigMaps can be generated from Files, Literals or Environment Files</p>
<h1 id="Create-ConfigMap-from-Literal"><a href="#Create-ConfigMap-from-Literal" class="headerlink" title="Create ConfigMap from Literal"></a>Create ConfigMap from Literal</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create configmap app-config --from-literal=FOO=bar --from-literal=BAZ=qux</span><br></pre></td></tr></table></figure>

<p>Use <code>kubectl describe cm app-config</code> to view the config map. Use <code>kubectl describe cm app-config</code> command to describe the config map.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl describe cm app-config</span><br></pre></td></tr></table></figure>

<h1 id="Create-ConfigMap-from-File"><a href="#Create-ConfigMap-from-File" class="headerlink" title="Create ConfigMap from File"></a>Create ConfigMap from File</h1><p>When you create a ConfigMap using –from-file, the filename becomes a key stored in the data section of the ConfigMap. The file contents become the key’s value.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo -n bar &gt; ./FOO</span><br><span class="line">$ echo -n qux &gt; ./BAZ</span><br><span class="line">$ kubectl create configmap app-config --from-file=./FOO --from-file=./BAZ</span><br></pre></td></tr></table></figure>


<h1 id="Create-ConfigMap-from-Env-File"><a href="#Create-ConfigMap-from-Env-File" class="headerlink" title="Create ConfigMap from Env File"></a>Create ConfigMap from Env File</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt; EOF &gt; env</span><br><span class="line">FOO=bar</span><br><span class="line">BAZ=qux</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">kubectl create configmap app-config --from-env-file=env</span><br></pre></td></tr></table></figure>

<h1 id="Create-ConfigMap-using-YAML-file"><a href="#Create-ConfigMap-using-YAML-file" class="headerlink" title="Create ConfigMap using YAML file"></a>Create ConfigMap using YAML file</h1><p>app-configmap.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">FOO:</span> <span class="string">bar</span></span><br><span class="line">  <span class="attr">BAZ:</span> <span class="string">qux</span></span><br></pre></td></tr></table></figure>

<h1 id="Using-ConfigMap-as-Environment-Variable"><a href="#Using-ConfigMap-as-Environment-Variable" class="headerlink" title="Using ConfigMap as Environment Variable"></a>Using ConfigMap as Environment Variable</h1><p>busybox-configmap.yaml - set environment variable for a pod using configmap</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;env&quot;</span> ]</span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FOO</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">app-config</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">FOO</span></span><br></pre></td></tr></table></figure>
<p>after the pod is created, use <code>kubectl logs busybox</code> to check the pod’s log. FOO environment variable is set with value “bar”.</p>
<h1 id="Add-ConfigMap-data-to-a-Volume"><a href="#Add-ConfigMap-data-to-a-Volume" class="headerlink" title="Add ConfigMap data to a Volume"></a>Add ConfigMap data to a Volume</h1><p>You can add ConfigMap to a container as a volume</p>
<p>pod-configmap-volume.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">configmap-volume-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">k8s.gcr.io/busybox</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cat /etc/config/Foo;&quot;</span> ]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="comment"># Provide the name of the ConfigMap containing the files you want</span></span><br><span class="line">        <span class="comment"># to add to the container</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">app-config</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">FOO</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">Foo</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">BAZ</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">Baz</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>

<p>When the pod runs, file &#x2F;etc&#x2F;config&#x2F;Foo is displayed. it contains the value for key FOO. Value is ‘bar’</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/configmap">Kubernetes Engine Configmap</a></li>
<li><a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/">Configure a Pod to use a Configmap</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes - Environment Variable</title>
    <url>/Kubernetes/Kubernetes-Environment-Variable/</url>
    <content><![CDATA[<p>Kubernetes Environment Variable</p>
<span id="more"></span>

<p>Configuration for an application is usually injected as Environment variable. You can set a container’s environment variable in the deployment yaml file:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FOO</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">bar</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">BAZ</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">qux</span></span><br></pre></td></tr></table></figure>

<p>You can also use <code>set env</code> command to set the container’s environment variable</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl set env deployment/deployment-name FOO=&quot;bar&quot;</span><br></pre></td></tr></table></figure>

<p>To unset an environment variable</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl set env deployment/deployment-name FOO-</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes Getting Started</title>
    <url>/Kubernetes/Kubernetes-Getting-Started/</url>
    <content><![CDATA[<p>Let’s setup Kubectl and Minikube and use Minikube to setup a one node cluster.</p>
<span id="more"></span>


<h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h1><p>Download and install VirtualBox. see Download page <a href="https://www.virtualbox.org/wiki/Linux_Downloads">https://www.virtualbox.org/wiki/Linux_Downloads</a></p>
<h1 id="Install-Kubectl"><a href="#Install-Kubectl" class="headerlink" title="Install Kubectl"></a>Install Kubectl</h1><p>The Kubernetes command-line tool, kubectl, allows you to run commands against Kubernetes clusters. Installation instruction is in <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux">https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux</a>. </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl</span><br><span class="line"><span class="built_in">chmod</span> +x ./kubectl</span><br><span class="line">sudo <span class="built_in">mv</span> ./kubectl /usr/local/bin/kubectl</span><br><span class="line">kubectl version</span><br></pre></td></tr></table></figure>

<p>To check kubectl installation</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl version</span><br></pre></td></tr></table></figure>

<p>The config file is in the $HOME&#x2F;.kube directory. This file defines clusters, context and users. You can view the file using command <code>kubectl config view</code>.</p>
<p>If the configuration file is not working as expected, use <code>rm -rf ~/.kube</code> command to remove the existing configuration and cache.</p>
<p>Useful links for kubectl:</p>
<ul>
<li><a href="https://kubernetes.io/docs/reference/kubectl/overview/">Kubectl Overview</a></li>
<li><a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/">kubectl cheatsheet</a></li>
<li><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands">kubectl command reference</a></li>
</ul>
<h1 id="Install-Minikube"><a href="#Install-Minikube" class="headerlink" title="Install Minikube"></a>Install Minikube</h1><p>minikube is a tool that runs a single-node Kubernetes cluster in a virtual machine on your personal computer. see Install Instructions <a href="https://kubernetes.io/docs/tasks/tools/install-minikube/">https://kubernetes.io/docs/tasks/tools/install-minikube/</a></p>
<p>Download and install minikube</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \</span><br><span class="line">&amp;&amp; <span class="built_in">chmod</span> +x minikube</span><br><span class="line">sudo install minikube /usr/local/bin</span><br></pre></td></tr></table></figure>

<p>You can check minikube version using <code>minikube version</code> command. </p>
<p>Note hat Minikube can only set up a one node cluster. </p>
<h1 id="Set-Up-a-Cluster-with-Minikube"><a href="#Set-Up-a-Cluster-with-Minikube" class="headerlink" title="Set Up a Cluster with Minikube"></a>Set Up a Cluster with Minikube</h1><p>A brief guide to start use, and delete Minikube locally. See <a href="https://kubernetes.io/docs/tasks/tools/install-minikube/">https://kubernetes.io/docs/tasks/tools/install-minikube/</a></p>
<p>1 - Start Minikube and create a cluster. You can optionally specify cpu and memory.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ minikube start --memory=10000 --cpus=4</span><br><span class="line">😄  minikube v1.3.1 on Ubuntu 19.04</span><br><span class="line">🔥  Creating virtualbox VM (CPUs=4, Memory=10000MB, Disk=20000MB) ...</span><br><span class="line">🐳  Preparing Kubernetes v1.15.2 on Docker 18.09.8 ...</span><br><span class="line">💾  Downloading kubeadm v1.15.2</span><br><span class="line">💾  Downloading kubelet v1.15.2</span><br><span class="line">🚜  Pulling images ...</span><br><span class="line">🚀  Launching Kubernetes ... </span><br><span class="line">⌛  Waiting <span class="keyword">for</span>: apiserver proxy etcd scheduler controller dns</span><br><span class="line">🏄  Done! kubectl is now configured to use <span class="string">&quot;minikube&quot;</span></span><br></pre></td></tr></table></figure>
<p>You can use <code>minikube status</code> to check its status. also use <code>kubectl get pods --all-namespaces</code> command to ensure all pods are running without error.</p>
<p>Now minikube will start a Virtual Machine. The cluster runs on that Virtual Machine. If you open VirtualBox Manager, you will see a virtual machine named “minikube”.</p>
<p>check cluster info using <code>kubectl cluster-info</code> command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https://192.168.99.101:8443</span><br><span class="line">KubeDNS is running at https://192.168.99.101:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.</span><br></pre></td></tr></table></figure>

<p>To view the nodes, use <code>kubectl get nodes</code> command</p>
<p>2 - create a deployment </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.10 --port=8080</span><br></pre></td></tr></table></figure>

<p>You can use <code>kubectl get deployments</code> to list deployments and <code>kubectl describe deployments/hello-minikube</code> to get details of a particular deployment.</p>
<p>3 - Expose deployment as a service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl expose deployment hello-minikube --type=NodePort</span><br></pre></td></tr></table></figure>

<p>4 - If you check the pods, it should return a pod</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-minikube-856979d68c-rndtw   1/1     Running   0          82s</span><br></pre></td></tr></table></figure>

<p>You can use <code>kubectl scale deployments/hello-minikube --replicas=3</code> to scale the deployment to 3 replicas</p>
<p>5 - Get the url of the exposed service</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ minikube service hello-minikube --url</span><br><span class="line">http://192.168.99.101:31777</span><br></pre></td></tr></table></figure>
<p>Note that the port number is randomly assigned</p>
<p>6 - View the web page using the URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl http://192.168.99.101:31777</span><br><span class="line"></span><br><span class="line">Hostname: hello-minikube-856979d68c-rndtw</span><br><span class="line"></span><br><span class="line">Pod Information:</span><br><span class="line">	-no pod information available-</span><br><span class="line"></span><br><span class="line">Server values:</span><br><span class="line">	server_version=nginx: 1.13.3 - lua: 10008</span><br><span class="line"></span><br><span class="line">Request Information:</span><br><span class="line">	client_address=172.17.0.1</span><br><span class="line">	method=GET</span><br><span class="line">	real path=/</span><br><span class="line">	query=</span><br><span class="line">	request_version=1.1</span><br><span class="line">	request_scheme=http</span><br><span class="line">	request_uri=http://192.168.99.101:8080/</span><br><span class="line"></span><br><span class="line">Request Headers:</span><br><span class="line">	accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">	accept-encoding=gzip, deflate</span><br><span class="line">	accept-language=en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,zh-TW;q=0.6</span><br><span class="line">	cache-control=max-age=0</span><br><span class="line">	connection=keep-alive</span><br><span class="line">	host=192.168.99.101:31777</span><br><span class="line">	upgrade-insecure-requests=1</span><br><span class="line">	user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36</span><br><span class="line"></span><br><span class="line">Request Body:</span><br><span class="line">	-no body in request-</span><br></pre></td></tr></table></figure>

<p>7 - Open dashboard</p>
<p>Dashboard is a web-based Kubernetes user interface. You can use Dashboard to deploy containerized applications to a Kubernetes cluster, troubleshoot your containerized application, and manage the cluster resources. </p>
<p>run this command to open dashboard in the browser</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ minikube dashboard</span><br></pre></td></tr></table></figure>

<p>Dashboard is a great tool to monitor minikube cluster.</p>
<p>8 - Delete the service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl delete services hello-minikube</span><br><span class="line">service &quot;hello-minikube&quot; deleted</span><br></pre></td></tr></table></figure>


<p>9 - Delete the deployment</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl delete deployment hello-minikube</span><br><span class="line">deployment.extensions &quot;hello-minikube&quot; deleted</span><br></pre></td></tr></table></figure>


<p>10 - Stop the local Minikube cluster</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ minikube stop</span><br><span class="line">✋  Stopping <span class="string">&quot;minikube&quot;</span> <span class="keyword">in</span> virtualbox ...</span><br><span class="line">🛑  <span class="string">&quot;minikube&quot;</span> stopped.</span><br></pre></td></tr></table></figure>

<p>10 - Delete minikube cluster<br><br>If you don’t need the cluster any more, delete the cluster.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ minikube delete</span><br><span class="line">🔥  Deleting <span class="string">&quot;minikube&quot;</span> <span class="keyword">in</span> virtualbox ...</span><br><span class="line">💔  The <span class="string">&quot;minikube&quot;</span> cluster has been deleted.</span><br></pre></td></tr></table></figure>

<h1 id="More-on-Minikube"><a href="#More-on-Minikube" class="headerlink" title="More on Minikube"></a>More on Minikube</h1><p>By Default. Minikube creates node on Virtualbox VM. the default settings is CPUs&#x3D;2, Memory&#x3D;2000MB, Disk&#x3D;20000MB. You can override the default settings: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">minikube start --memory=6000 --cpus=4 --disk-size=10000</span><br></pre></td></tr></table></figure>
<p>For more options, see <a href="https://minikube.sigs.k8s.io/docs/reference/commands/start/">start command</a></p>
<p>Other minikube commands</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check minikube status</span></span><br><span class="line">minikube states</span><br><span class="line"></span><br><span class="line"><span class="comment"># retrieves the IP address of the running cluster</span></span><br><span class="line">minikube ip</span><br><span class="line"></span><br><span class="line"><span class="comment"># get a list of service and URLs</span></span><br><span class="line">minikube service list</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log into or run a command on a machine with SSH</span></span><br><span class="line"><span class="comment"># You can then use `free -h` to check memory usage and `df -h` to check disk usage</span></span><br><span class="line">minikube ssh</span><br></pre></td></tr></table></figure>

<p>You can configure docker CLI to use minikube’s Docker Daemon.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ minikube docker-env</span><br><span class="line">export DOCKER_TLS_VERIFY=&quot;1&quot;</span><br><span class="line">export DOCKER_HOST=&quot;tcp://192.168.99.109:2376&quot;</span><br><span class="line">export DOCKER_CERT_PATH=&quot;/home/xing/.minikube/certs&quot;</span><br><span class="line"># Run this command to configure your shell:</span><br><span class="line"># eval $(minikube docker-env)</span><br><span class="line"></span><br><span class="line">$ eval $(minikube docker-env)</span><br></pre></td></tr></table></figure>


<p>For more information on Minikube, see [Minikube documentation](<a href="https://minikube.sigs.k8s.io/docs/">https://minikube.sigs.k8s.io/docs/</a></p>
<h1 id="Other-Ways-to-setup-a-Cluster"><a href="#Other-Ways-to-setup-a-Cluster" class="headerlink" title="Other Ways to setup a Cluster"></a>Other Ways to setup a Cluster</h1><p>Minikube creates a single node cluster. If you want to create a multi-node cluster, checkout<br><strong><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/">kubeadm</a></strong>.</p>
<p>A more convenient way to run a multi-node cluster is <strong><a href="https://github.com/kubernetes-sigs/kind">kind</a></strong>. With kindl you can easily setup local Kubernetes clusters using Docker container </p>
<p>There is also online option to play with Kubernetes. <strong><a href="https://www.katacoda.com/courses/kubernetes/playground">Katacoda Playground</a></strong> sets up a two node cluster cluster for you to play with. Another online kubernetes playgound is <a href="https://labs.play-with-k8s.com/">play-with-k8s</a></p>
<h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><p>These are the resources for learning Kubernetes</p>
<ul>
<li><a href="https://kubectl.docs.kubernetes.io/">Kubectl Gitbook</a></li>
</ul>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">Install and Set Up kubectl</a></li>
<li><a href="https://kubernetes.io/docs/tasks/tools/install-minikube/">Install Minikube</a></li>
<li><a href="https://kubernetes.io/docs/setup/learning-environment/minikube/">Installing Kubernetes with Minikube</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes - Helm</title>
    <url>/Kubernetes/Kubernetes-Helm/</url>
    <content><![CDATA[<p>Helm - The Kubernetes Package Manager.</p>
<span id="more"></span>

<p>Use Helm to:</p>
<ul>
<li>Find and use popular software packaged as Helm charts to run in Kubernetes</li>
<li>Share your own applications as Helm charts</li>
<li>Create reproducible builds of your Kubernetes applications</li>
<li>Intelligently manage your Kubernetes manifest files</li>
<li>Manage releases of Helm packages</li>
</ul>
<p>Helm is similar to maven, npm and apt except it manages Kubernetes resources.</p>
<h1 id="Key-Concepts"><a href="#Key-Concepts" class="headerlink" title="Key Concepts"></a>Key Concepts</h1><h2 id="Tiller-Server-and-Helm-Client"><a href="#Tiller-Server-and-Helm-Client" class="headerlink" title="Tiller Server and Helm Client"></a>Tiller Server and Helm Client</h2><p>Tiller Server: Tiller is the in-cluster component of Helm. It interacts directly with the Kubernetes API server to install, upgrade, query, and remove Kubernetes resources. It also stores the objects that represent releases.</p>
<p>Helm Client: CLI tool for users to work with Helm Charts. </p>
<h2 id="Chart"><a href="#Chart" class="headerlink" title="Chart"></a>Chart</h2><p>Charts are packages of pre-configured Kubernetes resources. </p>
<h2 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h2><p>When a chart is installed, Tiller (the Helm server) creates a release to track that installation. Release is an running instance of Chart. You can think of it as an application.</p>
<h1 id="Install-Helm"><a href="#Install-Helm" class="headerlink" title="Install Helm"></a>Install Helm</h1><p>Helm is composed of two parts: Helm (the client) and Tiller (the server)</p>
<h2 id="Install-Helm-Client"><a href="#Install-Helm-Client" class="headerlink" title="Install Helm Client"></a>Install Helm Client</h2><p>run <code>kubectl config current-context</code> or <code>kubectl cluster-info</code> to see the current cluster. Make sure it is currently running.</p>
<p>Install Helm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get &gt; get_helm.sh</span><br><span class="line">chmod 700 get_helm.sh</span><br><span class="line">./get_helm.sh</span><br></pre></td></tr></table></figure>
<p>Use <code>helm version</code> to check Helm version. Output should look like this</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ helm version</span><br><span class="line">Client: &amp;version.Version&#123;SemVer:&quot;v2.14.3&quot;, GitCommit:&quot;0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br><span class="line">Error: could not find tiller</span><br></pre></td></tr></table></figure>



<h2 id="Install-Tiller-Server"><a href="#Install-Tiller-Server" class="headerlink" title="Install Tiller Server"></a>Install Tiller Server</h2><p>Initialize the local CLI and also install Tiller into your Kubernetes cluster in one step using <code>helm init</code> command. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ helm init</span><br><span class="line">$HELM_HOME has been configured at /home/xing/.helm.</span><br><span class="line"></span><br><span class="line">Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.</span><br><span class="line"></span><br><span class="line">Please note: by default, Tiller is deployed with an insecure &#x27;allow unauthenticated users&#x27; policy.</span><br><span class="line">To prevent this, run `helm init` with the --tiller-tls-verify flag.</span><br><span class="line">For more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation</span><br></pre></td></tr></table></figure>

<p>It may take a minute for tiller to install. Use <code>helm ls</code> to verify tiller is installed. </p>
<p>If tiller is not ready, error will be return.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ helm ls</span><br><span class="line">Error: could not find a ready tiller po</span><br></pre></td></tr></table></figure>



<h1 id="Helm-Install-Default-Charts"><a href="#Helm-Install-Default-Charts" class="headerlink" title="Helm Install Default Charts"></a>Helm Install Default Charts</h1><p>get latest list of charts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm repo update</span><br></pre></td></tr></table></figure>

<p>Install a chart. Mysql in this case. The notes from the output should tell you what resources are installed and how to interact with the release. In this case MySQL.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm install stable/mysql --name my-release</span><br></pre></td></tr></table></figure>

<p>add service account if helm install fail because of permission issue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create serviceaccount --namespace kube-system tiller</span><br><span class="line">kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller</span><br><span class="line">kubectl patch deploy --namespace kube-system tiller-deploy -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;serviceAccount&quot;:&quot;tiller&quot;&#125;&#125;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>Delete Tiller and reinstall if Tiller is not working</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete deployment tiller-deploy -n kube-system</span><br><span class="line">kubectl delete service tiller-deploy -n kube-system</span><br></pre></td></tr></table></figure>


<p>To see what is release</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm ls</span><br></pre></td></tr></table></figure>

<p>To delete a release </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm delete my-release</span><br></pre></td></tr></table></figure>

<h1 id="Create-and-Install-Customized-Chart"><a href="#Create-and-Install-Customized-Chart" class="headerlink" title="Create and Install Customized Chart"></a>Create and Install Customized Chart</h1><p>Let’s learn to create a customized chart for httpd</p>
<p>To create a chart for httpd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm create httpdchart</span><br></pre></td></tr></table></figure>

<p>The default chart created use nginx. Modify values.yaml to use httpd</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">httpd</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="string">latest</span></span><br><span class="line">  <span class="attr">pullPolicy:</span> <span class="string">IfNotPresent</span></span><br></pre></td></tr></table></figure>

<p>use <code>helm lint httpchart</code> to check errors. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm lint httpchart</span><br></pre></td></tr></table></figure>

<p>Dry run to get the yaml to be generate</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm install --dry-run httpdchart --debug</span><br></pre></td></tr></table></figure>

<p>Use <code>helm install</code> to install the chart. This will create deployment, pod and service. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ helm install httpdchart --name myhttpd</span><br><span class="line">NAME:   myhttpd</span><br><span class="line">LAST DEPLOYED: Tue Oct  8 03:03:22 2019</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: DEPLOYED</span><br><span class="line"></span><br><span class="line">RESOURCES:</span><br><span class="line">==&gt; v1/Deployment</span><br><span class="line">NAME                READY  UP-TO-DATE  AVAILABLE  AGE</span><br><span class="line">myhttpd-httpdchart  0/1    1           0          0s</span><br><span class="line"></span><br><span class="line">==&gt; v1/Pod(related)</span><br><span class="line">NAME                                 READY  STATUS             RESTARTS  AGE</span><br><span class="line">myhttpd-httpdchart-6c5544955b-68slm  0/1    ContainerCreating  0         0s</span><br><span class="line"></span><br><span class="line">==&gt; v1/Service</span><br><span class="line">NAME                TYPE          CLUSTER-IP    EXTERNAL-IP  PORT(S)       AGE</span><br><span class="line">myhttpd-httpdchart  LoadBalancer  10.107.67.34  &lt;pending&gt;    80:31042/TCP  0s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Test the service just created.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl $(minikube ip):$(kubectl get service/myhttpd-httpdchart -o jsonpath=&quot;&#123;.spec.ports[*].nodePort&#125;&quot;)</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://github.com/helm/helm">Helm project in Github</a></li>
<li><a href="https://helm.sh/docs/install/">Install Helm</a></li>
<li><a href="https://www.baeldung.com/kubernetes-helm">Using Helm and Kubernetes by Kumar Chandrakant</a></li>
<li><a href="https://helm.sh/docs/glossary/">Helm glossary</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes - Ingress</title>
    <url>/Kubernetes/Kubernetes-Ingress/</url>
    <content><![CDATA[<p>Kubernetes Service can expose deployments to the external world. However it can’t route requests to services base on HTTP URI. Kubernetes Ingresss solves this problem.</p>
<span id="more"></span>

<p><strong>Ingress</strong> exposes HTTP and HTTPS routes from outside the cluster to Services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource. Ingress also provides SSL termination.</p>
<h1 id="Ingress-Demo"><a href="#Ingress-Demo" class="headerlink" title="Ingress Demo"></a>Ingress Demo</h1><p>Enable Nginx Ingress controller</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ minikube addons enable ingress</span><br></pre></td></tr></table></figure>

<p>Create deployment with name ‘web’ and expose it as a service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl run web --image=gcr.io/google-samples/hello-app:1.0 --port=8080</span><br><span class="line">$ kubectl expose deployment web --target-port=8080 --type=NodePort</span><br></pre></td></tr></table></figure>

<p>Create deployment with name ‘web2’ and expose it as a service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl run web2 --image=gcr.io/google-samples/hello-app:2.0 --port=8080</span><br><span class="line">$ kubectl expose deployment web2 --target-port=8080 --type=NodePort</span><br></pre></td></tr></table></figure>

<p>Execute <code>kubectl get services</code> to verify both services are created.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get services</span><br><span class="line">NAME                 TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">web                  NodePort       10.107.251.151   &lt;none&gt;        8080:31454/TCP   7m</span><br><span class="line">web2                 NodePort       10.101.159.81    &lt;none&gt;        8080:32296/TCP   7m</span><br></pre></td></tr></table></figure>

<p>Create Ingress.yaml that defines an Ingress. Path &#x2F;v1&#x2F;* routes to the first service. Path &#x2F;v2&#x2F;* routes to the second service.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/$1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">hello-world.info</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/v1/*</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">web</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/v2/*</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">web2</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<p>get minikube cluster ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$minikube ip</span><br><span class="line">192.168.99.112</span><br></pre></td></tr></table></figure>

<p>add the following route to &#x2F;etc&#x2F;hosts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.99.112 hello-world.info</span><br></pre></td></tr></table></figure>

<p>Create the Ingress resource</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f example-ingress.yaml</span><br></pre></td></tr></table></figure>

<p>Access services ‘web’ with url <a href="http://hello-world.info/v1">http://hello-world.info/v1</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl http://hello-world.info/v1</span><br><span class="line">Hello, world!</span><br><span class="line">Version: 1.0.0</span><br><span class="line">Hostname: web-6d4657545d-hrjtv</span><br></pre></td></tr></table></figure>

<p>Access service ‘web2’ with url <a href="http://hello-world.info/v2">http://hello-world.info/v2</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl  http://hello-world.info/v2</span><br><span class="line">Hello, world!</span><br><span class="line">Version: 2.0.0</span><br><span class="line">Hostname: web2-674dd45977-xh72p</span><br></pre></td></tr></table></figure>


<h1 id="Ingress-Controller"><a href="#Ingress-Controller" class="headerlink" title="Ingress Controller"></a>Ingress Controller</h1><p>Ingress resource relies on Ingress controller to work. You can choose ingress controller implementation that works best for you. Kubernetes support GCE, nginx. There are other Ingress Controllers available too. Istio provide its own ingress controller if you are using Istio. see <a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/">Ingress Controller</a> for more information.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://kubernetes.io/docs/concepts/services-networking/ingress/">Ingress</a></li>
<li><a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/">Ingress Controller</a></li>
<li><a href="https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/">Set up Ingress on Minikube with the NGINX Ingress Controller</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes - Jobs</title>
    <url>/Kubernetes/Kubernetes-Jobs/</url>
    <content><![CDATA[<p>Kubernetes jobs</p>
<span id="more"></span>

<p>In Kubernetes, A job is use to execute a finite task. Some examples are sending emails, transcoding files, scanning database keys, etc.</p>
<h1 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h1><p>job.yaml - a sample job</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: batch/v1</span><br><span class="line">kind: Job</span><br><span class="line">metadata:</span><br><span class="line">  name: hellojob</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: hellojob</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: hello</span><br><span class="line">        image: busybox</span><br><span class="line">        args:</span><br><span class="line">        - /bin/sh</span><br><span class="line">        - -c</span><br><span class="line">        - date; echo Hello from the Kubernetes cluster</span><br><span class="line">      restartPolicy: Never</span><br></pre></td></tr></table></figure>

<p>Jobs are executed using <code>kubectl apply</code> command </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f job.yaml</span><br></pre></td></tr></table></figure>

<p>use <code>kubectl get pod</code> command to get the pod name and then use <code>kubectl logs</code> command to see the output.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get pod</span><br><span class="line">NAME                     READY   STATUS      RESTARTS   AGE</span><br><span class="line">hellojob-hfc2h           0/1     Completed   0          10s</span><br><span class="line"></span><br><span class="line">$ kubectl logs hellojob-hfc2h</span><br><span class="line">Sat Sep 28 20:23:47 UTC 2019</span><br><span class="line">Hello from the Kubernetes cluster</span><br></pre></td></tr></table></figure>

<p>use <code>kubectl delete cron hellojob</code> to delete the job.</p>
<h2 id="Parallel-Jobs"><a href="#Parallel-Jobs" class="headerlink" title="Parallel Jobs"></a>Parallel Jobs</h2><p>The above job execute only once. You can have the job execute multiple times in parallel.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: batch/v1</span><br><span class="line">kind: Job</span><br><span class="line">metadata:</span><br><span class="line">  name: hellojob</span><br><span class="line">spec:</span><br><span class="line">  parallelism: 2</span><br><span class="line">  completions: 3</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: hellojob</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: hello</span><br><span class="line">        image: busybox</span><br><span class="line">        args:</span><br><span class="line">        - /bin/sh</span><br><span class="line">        - -c</span><br><span class="line">        - date; echo Hello from the Kubernetes cluster</span><br><span class="line">      restartPolicy: Never</span><br></pre></td></tr></table></figure>
<p>Here the job is execute 3 times with 2 pods executing in parallel.</p>
<p>We can examine the jobs that is completed.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get jobs</span><br><span class="line">NAME       COMPLETIONS   DURATION   AGE</span><br><span class="line">hellojob   3/3           4s         26s</span><br></pre></td></tr></table></figure>

<p>use <code>kubectl delete cron hellojob</code> to delete the job.</p>
<h1 id="CronJob"><a href="#CronJob" class="headerlink" title="CronJob"></a>CronJob</h1><p>CronJob runs on a schedule.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hellojob</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">metadata:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">hellojob</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">date;</span> <span class="string">echo</span> <span class="string">Hello</span> <span class="string">from</span> <span class="string">the</span> <span class="string">Kubernetes</span> <span class="string">cluster</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>
<p>A pod is spin up to run the cronjob every minute.</p>
<p>Use <code>kubectl get cronjobs</code> command to see the cronjob</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get cronjobs</span><br><span class="line">NAME       SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">hellojob   */1 * * * *   False     0        &lt;none&gt;          11s</span><br></pre></td></tr></table></figure>

<p>use <code>kubectl delete cronjob hellojob</code> to delete the cronjob.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://kubernetes.io/docs/tasks/job/">Running Automated Tasks with a CronJob</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes - Liveness and Readiness</title>
    <url>/Kubernetes/Kubernetes-Liveness-And-Readiness/</url>
    <content><![CDATA[<p>configure liveness, readiness and startup probes for Containers</p>
<span id="more"></span>

<p>Health Checks are the easiest ways to let the system know if an instance of your app is working. Defining Health check increase the system’s reliability and uptime.</p>
<p>There are two types of Health Checks</p>
<ul>
<li>Liveness</li>
<li>Readiness</li>
</ul>
<p><strong>Liveness probes</strong> let Kubernetes know if your app is alive or dead. If you app is alive, then Kubernetes leaves it alone. If your app is dead, Kubernetes removes the Pod and starts a new one to replace it.</p>
<p><strong>Readiness probes</strong> are designed to let Kubernetes know when your app is ready to serve traffic. Kubernetes makes sure the readiness probe passes before allowing a service to send traffic to the pod. If a readiness probe starts to fail, Kubernetes stops sending traffic to the pod until it passes.</p>
<p>You can have both Liveness and readiness probe for the same container.</p>
<p>There are three types of Probes</p>
<ul>
<li>HTTP</li>
<li>Command</li>
<li>TCP</li>
</ul>
<h1 id="Default-HealthCheck"><a href="#Default-HealthCheck" class="headerlink" title="Default HealthCheck"></a>Default HealthCheck</h1><p>A container starts its process usually with Dockerfile’s CMD or ENTRYPOINT. If the process returns non zero code, then Kubernetes determines the container fails. Kubernetes will decide whether to restart the Pod based on <code>restartPolicy</code> field.</p>
<h1 id="Command-Probe"><a href="#Command-Probe" class="headerlink" title="Command Probe"></a>Command Probe</h1><p>exec-liveness.yaml: </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-exec</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">liveness</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">k8s.gcr.io/busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">touch</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">30</span><span class="string">;</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/tmp/healthy;sleep</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">/tmp/healthy</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>This pod creates file &#x2F;tmp&#x2F;healthy, sleeps for 30 seconds, then remove the file. </p>
<p>The liveness probe will start after 5 second initial delay. The probe have a period of 5 second. The After 30 seconds, when the file is removed, liveness probe will fail. The pod will become unhealthy and gets restarted.</p>
<h1 id="Http-Probe"><a href="#Http-Probe" class="headerlink" title="Http Probe"></a>Http Probe</h1><p>A more common use case will be probe the http service.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">liveness</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Readiness-Probe"><a href="#Readiness-Probe" class="headerlink" title="Readiness Probe"></a>Readiness Probe</h1><p>Readiness probes are configured similarly to liveness probes. The only difference is that you use the readinessProbe field instead of the livenessProbe field.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">readiness</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">readiness</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">readiness</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">k8s.gcr.io/busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">touch</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">30</span><span class="string">;</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/tmp/healthy;sleep</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">/tmp/healthy</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>Check the pod status. Readiness probe will fail after 30 seconds. Status will become not ready.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME        READY   STATUS    RESTARTS   AGE</span><br><span class="line">readiness   0/1     Running   0          2m46s</span><br></pre></td></tr></table></figure>

<p>readinessProbe and livenessProde can be the same:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">readinessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes">Kubernetes Best Practice Health Checks</a></li>
<li><a href="https://www.youtube.com/watch?time_continue=7&v=mxEvAPQRwhw">Youtube video - Kubernetes Best Practice Health Checks</a></li>
<li><a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">Configure liveness readiness</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes - Namespaces</title>
    <url>/Kubernetes/Kubernetes-Namespaces/</url>
    <content><![CDATA[<p>Kubernetes Namespaces</p>
<span id="more"></span>

<h1 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h1><p>Namespace is used to group resources for multiple teams and projects. Kubernetes provides isolation between different namespaces.</p>
<p>Kubernetes starts with three initial namespaces:</p>
<ul>
<li><strong>default</strong> The default namespace for objects with no other namespace</li>
<li><strong>kube-system</strong> The namespace for objects created by the Kubernetes system</li>
<li><strong>kube-public</strong> This namespace is created automatically and is readable by all users (including those not authenticated). This namespace is mostly reserved for cluster usage, in case that some resources should be visible and readable publicly throughout the whole cluster. The public aspect of this namespace is only a convention, not a requirement.</li>
</ul>
<h1 id="Create-a-Namespace"><a href="#Create-a-Namespace" class="headerlink" title="Create a Namespace"></a>Create a Namespace</h1><p>namespace-dev.yaml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">labels:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p>use <code>kubectl apply</code> to create the namespace</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f namespace-dev.yaml </span><br><span class="line">namespace/dev created</span><br></pre></td></tr></table></figure>


<p>use <code>kubectl get namespaces</code> command to get all available namespace</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get namespaces</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   12d</span><br><span class="line">dev               Active   89s</span><br><span class="line">kube-node-lease   Active   12d</span><br><span class="line">kube-public       Active   12d</span><br><span class="line">kube-system       Active   12d</span><br></pre></td></tr></table></figure>

<h1 id="Create-Resource-in-a-namespace"><a href="#Create-Resource-in-a-namespace" class="headerlink" title="Create Resource in a namespace"></a>Create Resource in a namespace</h1><p>myapp.yaml: Example to create a deployment in dev namespace</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: myapp</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: myapp</span><br><span class="line">  template:</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure>

<p>To list the deployname in dev namespace</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get deployment -n dev</span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">myapp   2/2     2            2           37s</span><br></pre></td></tr></table></figure>

<p>If you don’t want to set the namespace in yaml file, you can set the namespace in the <code>kubectl apply</code> command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f myapp -n dev</span><br></pre></td></tr></table></figure>

<p>To list resources for all namespaces, use <code>--all-namespaces</code> option</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># get all deployments</span><br><span class="line">$ kubectl get deployment --all-namespaces</span><br><span class="line"></span><br><span class="line"># get all pods</span><br><span class="line">$ kubectl get pods --all-namespaces</span><br></pre></td></tr></table></figure>

<h1 id="Setting-Current-Namespace"><a href="#Setting-Current-Namespace" class="headerlink" title="Setting Current Namespace"></a>Setting Current Namespace</h1><p>permanently save the namespace for all subsequent kubectl commands in that context.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl config set-context --current --namespace=dev</span><br></pre></td></tr></table></figure>

<p>use <code>kubectl config get-contexts</code> to check the current namespace.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl config get-contexts</span><br><span class="line">CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE</span><br><span class="line">*         minikube   minikube   minikube   default</span><br></pre></td></tr></table></figure>

<h1 id="Delete-a-Namespace"><a href="#Delete-a-Namespace" class="headerlink" title="Delete a Namespace"></a>Delete a Namespace</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl delete namespace dev</span><br><span class="line">namespace &quot;dev&quot; deleted</span><br></pre></td></tr></table></figure>
<p>Resources under namespace dev will be deleted.</p>
<h1 id="kubens"><a href="#kubens" class="headerlink" title="kubens"></a>kubens</h1><p>ubens is a utility to quickly switch between Kubernetes namespaces. You can download kubens from <a href="https://github.com/ahmetb/kubectx">https://github.com/ahmetb/kubectx</a> and then add kubens to system PATH.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USAGE:</span><br><span class="line">  kubens                    : list the namespaces</span><br><span class="line">  kubens &lt;NAME&gt;             : change the active namespace</span><br></pre></td></tr></table></figure>


<p>Reference</p>
<ul>
<li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/">Namespaces</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes - Running Application Using Deployment</title>
    <url>/Kubernetes/Kubernetes-Running-Applications/</url>
    <content><![CDATA[<p>Let’s learn how to deploy, scale and roll back application in Kubernetes</p>
<span id="more"></span>

<h1 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h1><p>A <strong>Pod</strong> is the basic execution unit of a Kubernetes application. A Pod encapsulates an application’s container, storage resources, a unique network IP, and options that govern how the containwers should run.</p>
<p>You don’t usually create individual Pods directly. Instead, you use a higher level abstraction, call Controllers to create pods. </p>
<p>Common Controllers are</p>
<ul>
<li>Deployment</li>
<li>Job</li>
<li>StatefulSet</li>
<li>DaemonSet</li>
</ul>
<p>Controllers use Pod Template to create the pods.</p>
<p><strong>Pod Templates</strong> are pod specifications which are included in other objects, such as Replication Controllers, Jobs, and DaemonSets. Controllers use Pod Templates to make actual pods. </p>
<h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><p>A Deployment declares what the desired state of the application should look like. It creates ReplicaSet. Then let the ReplicaSet creates and manages the Pods. </p>
<p>Deployment is best at run stateless applications.</p>
<h1 id="Deployment-File"><a href="#Deployment-File" class="headerlink" title="Deployment File"></a>Deployment File</h1><p>Sample Yaml file myapp-deployment.yaml </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.7.9</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>All Kubernetes yaml files has four elements</p>
<ul>
<li>apiVersion - version of Kubernetes API you’re using to create this object</li>
<li>kind - the kind of object to create</li>
<li>metadata - data identify the object, such as name, UID, labels and optional namespace</li>
<li>spec - contains nested fields specific to that object.</li>
</ul>
<p>You can use the Kubernetes API to read and write Kubernetes resource objects. The definition for a deployment object is <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/#deploymentspec-v1-apps">here</a></p>
<p>The above YAML file creates a Deployment with name <em>myapp</em>. </p>
<p>A Deployment includes the numebr of replicas and the Pod Template to used to create Pods.</p>
<p>The Deployment’s selector selects Pods base on labels. Selected pods will be affected by this deployment. This field must match pod template’s labels.</p>
<p>The pods created will have label <em>app: myapp</em>. A pod’s label is very important. Deployment and Service both select the pods based on the pod’s label. A pod’s containers section defines what the container to be used.</p>
<p><a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#-strong-api-overview-strong-">Kubernetes API</a> defines the specification for all resources. Deployment’s specification is <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#deployment-v1-apps">here</a>.</p>
<h1 id="Run-a-Deployment-Using-YAML-File"><a href="#Run-a-Deployment-Using-YAML-File" class="headerlink" title="Run a Deployment Using YAML File"></a>Run a Deployment Using YAML File</h1><p>Use <code>kubectl apply -f &lt;resource-name&gt;.yaml</code> command to create the deployment. <code>kubectl apply</code> can be used to create any Kubernetes resource.  lets create myapp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f myapp-deployment.yaml</span><br><span class="line">deployment.apps/myapp created</span><br></pre></td></tr></table></figure>
<p>You can also use <code>kubectl apply</code> to update the deployment.</p>
<p>To check the deployment</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get deployments</span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">myapp   2/2     2            2           6m15s</span><br></pre></td></tr></table></figure>
<p>For more information on the deployment, use <code>kubectl describe deployment &lt;deployment-name&gt;</code> command.</p>
<p>To check the pods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">myapp-6d8996bd9f-hzd55   1/1     Running   0          5m43s</span><br><span class="line">myapp-6d8996bd9f-rm99b   1/1     Running   0          8m35s</span><br></pre></td></tr></table></figure>

<p>use <code>kubectl get pods -o wide</code> to get more details including the internal IP address of each pod, the node where the pod locates. -o option specifies output format. common formats are json, yaml, wide.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-6d8996bd9f-hzd55   1/1     Running   0          5m57s   172.17.0.4   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-6d8996bd9f-rm99b   1/1     Running   0          8m49s   172.17.0.3   minikube   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>To delete the deployment</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl delete deployment myapp</span><br><span class="line">deployment.extensions &quot;myapp-deployment&quot; deleted</span><br></pre></td></tr></table></figure>

<h1 id="Resource-Limit"><a href="#Resource-Limit" class="headerlink" title="Resource Limit"></a>Resource Limit</h1><p>When you specify a Pod, you can optionally specify how much CPU and memory (RAM) each Container needs. It is a good practice to set a resource limit for containers. This prevents container from using too much resource from the cluster.</p>
<p>Fractional CPU is allowed. 100m means “100 milicpu”. 1000m means 1 CPU.</p>
<p>Request container with initial 128MB and 0.25 CPU. And with 1G Memory and 1 CPU Limit.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx:1.7.9</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">&quot;250m&quot;</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">&quot;1024Mi&quot;</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">&quot;1000m&quot;</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h1 id="Logs"><a href="#Logs" class="headerlink" title="Logs"></a>Logs</h1><p>If the pod only has one container, then use <code>kubectl logs &lt;pod-name&gt;</code> command to get the container log.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl logs myapp-6d8996bd9f</span><br></pre></td></tr></table></figure>

<p>If there are multiple containers in the pod, then specify the container name too. Format is <code>kubectl logs &lt;pod-name&gt; &lt;container-name&gt;</code>.</p>
<p>You can see more logs command examples using <code>kubectl logs -h</code> command. <a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/#interacting-with-running-pods">kubectl cheat sheet</a> also provides some practical examples for kubectl logs command.</p>
<h1 id="Scale-Up-and-Scale-Down"><a href="#Scale-Up-and-Scale-Down" class="headerlink" title="Scale Up and Scale Down"></a>Scale Up and Scale Down</h1><p>use <code>kubectl scale</code> command to scaling a deployment. kubectl takes the name of the deployment as argument.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl scale --replicas=4 deployment.apps/myapp</span><br><span class="line">deployment.apps/myapp scaled</span><br></pre></td></tr></table></figure>

<p>Another way is to set the replicas field in yaml file and then use <code>kubectl apply</code> to update the resource.</p>
<h1 id="Kubectl-exec"><a href="#Kubectl-exec" class="headerlink" title="Kubectl exec"></a>Kubectl exec</h1><p><code>Kubectl exec</code> command works like docker exec. You use exec command to execute a command. The most common use case is to allocate a pseudo-tty. </p>
<p>Try not to use <code>kubectl exec</code> command on production environment. Commands run on pods may disrupt the service.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl exec -it myapp-6d8996bd9f-hzd55 /bin/bash</span><br></pre></td></tr></table></figure>

<p>Execute command to get memory limit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl exec -it myapp-6d8996bd9f-hzd55 cat /sys/fs/cgroup/memory/memory.limit_in_bytes</span><br></pre></td></tr></table></figure>
<h1 id="Roll-Back"><a href="#Roll-Back" class="headerlink" title="Roll Back"></a>Roll Back</h1><p>To demonstrate roll back, first update the container to use a different version of nginx image:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl set image deployment.extensions/myapp myapp=nginx:1.16 --record</span><br></pre></td></tr></table></figure>
<p>Here <code>--record</code> option records current kubectl command in the resource annotation. </p>
<p>use <code>kubectl rollout history</code> to see an overview of past activity.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout history deployment.extensions/myapp</span><br><span class="line">deployment.extensions/myapp </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         kubectl set image deployment.extensions/myapp myapp=nginx:1.16 --record=true</span><br></pre></td></tr></table></figure>
<p>We can see after updating container’s image, we have a new revision.  </p>
<p>To check a specific revision, add –revision option to the command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout history deployment/myapp --revision=1</span><br><span class="line">deployment.extensions/myapp with revision #1</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:       app=myapp</span><br><span class="line">        pod-template-hash=5dcf6cc75</span><br><span class="line">  Containers:</span><br><span class="line">   nginx-container:</span><br><span class="line">    Image:      nginx</span><br><span class="line">    Port:       &lt;none&gt;</span><br><span class="line">    Host Port:  &lt;none&gt;</span><br><span class="line">    Environment:        &lt;none&gt;</span><br><span class="line">    Mounts:     &lt;none&gt;</span><br><span class="line">  Volumes:      &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>use <code>kubectl rollout undo</code> to roll back the resource to version 1. <code>--to-revision</code> set the version to rollback to. Default to 0(last revision)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout undo deployment/myapp --to-revision=1  --record</span><br><span class="line">deployment.extensions/myapp rolled back</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview">Pod Overview</a></li>
<li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/">Deployment</a></li>
<li><a href="%5Bhere%5D(https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#deployment-v1-apps">Deployment API</a></li>
<li><a href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/">Managing Compute Resources for Containers</a></li>
<li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment">Scaling a Deployment</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes - Secret</title>
    <url>/Kubernetes/Kubernetes-Secret/</url>
    <content><![CDATA[<p>Kubernetes secret object let you store and mange sensitive information, such as passwords, OAuth tokens and SSH Keys. It is better to store this kind of secret in Kubernetes secret than in a container image.</p>
<span id="more"></span>

<p>NOTE: Creation of Secret and its usage is very similar to ConfigMap. </p>
<h1 id="create-secrets-from-Literal"><a href="#create-secrets-from-Literal" class="headerlink" title="create secrets from Literal"></a>create secrets from Literal</h1><p>Commands to create secret  <em>dev-db-secret</em> with key <em>username</em> and <em>password</em></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic dev-db-secret --from-literal=username=<span class="string">&#x27;admin&#x27;</span> --from-literal=password=<span class="string">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Use <code>kubectl get secrets</code> command to check the secret. DATA field shows the number of entries in the secret.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get secrets</span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">db-user-pass          Opaque                                2      43s</span><br></pre></td></tr></table></figure>

<p>Use <code>kubectl describe secrets</code> command to get more details on the secret. The secret is not printed to the screen. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl describe secret/dev-db-secret </span><br><span class="line">Name:         dev-db-secret</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Type:  Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">username:  5 bytes</span><br><span class="line">password:  8 bytes</span><br></pre></td></tr></table></figure>

<h1 id="Create-Secret-from-File"><a href="#Create-Secret-from-File" class="headerlink" title="Create Secret from File"></a>Create Secret from File</h1><p>First create file to store username ‘admin’ and password ‘password’ for database access</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo -n &#x27;admin&#x27; &gt; .username.txt</span><br><span class="line">$ echo -n &#x27;password&#x27; &gt; ./password.txt</span><br></pre></td></tr></table></figure>

<p>Use <code>kubectl create secret</code> command to create secret</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic dev-db-secret --from-file=./username.txt --from-file=./password.txt</span><br></pre></td></tr></table></figure>


<h1 id="Create-Secret-using-YAML-File"><a href="#Create-Secret-using-YAML-File" class="headerlink" title="Create Secret using YAML File"></a>Create Secret using YAML File</h1><p>You can create the secret from yaml file using <code>kubectl apply -f ./secret.yaml</code> command</p>
<p>secret.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: dev-db-secret</span><br><span class="line">type: Opaque</span><br><span class="line">data:</span><br><span class="line">  username: YWRtaW4=</span><br><span class="line">  password: cGFzc3dvcmQ=</span><br></pre></td></tr></table></figure>

<h1 id="Getting-the-Content-of-a-Secret"><a href="#Getting-the-Content-of-a-Secret" class="headerlink" title="Getting the Content of a Secret"></a>Getting the Content of a Secret</h1><p>To retrieve the password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get secret dev-db-secret -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  password: cGFzc3dvcmQ=</span><br><span class="line">  username: YWRtaW4=</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2019-10-06T18:30:03Z&quot;</span><br><span class="line">  name: dev-db-secret</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: &quot;28952&quot;</span><br><span class="line">  selfLink: /api/v1/namespaces/default/secrets/dev-db-secret</span><br><span class="line">  uid: afad2f47-d1d7-4477-976b-f3f05454c701</span><br><span class="line">type: Opaque</span><br></pre></td></tr></table></figure>

<p>To decode the data, use <code>base64 --decode</code> command</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;YWRtaW4=&#x27;</span> | <span class="built_in">base64</span> --decode</span><br><span class="line">admin</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;cGFzc3dvcmQ=&#x27;</span> | <span class="built_in">base64</span> --decode</span><br><span class="line">password</span><br></pre></td></tr></table></figure>

<h1 id="Using-Secret-as-Environment-Variable"><a href="#Using-Secret-as-Environment-Variable" class="headerlink" title="Using Secret as Environment Variable"></a>Using Secret as Environment Variable</h1><p>busybox-secret.yml : secrets are added to the container as environment variable</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;env&quot;</span> ]</span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DBUSERNAME</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">secretKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">dev-db-secret</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DBPASSWORD</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">secretKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">dev-db-secret</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure>

<p>use <code>kubectl logs busybox</code> command to check the pod’s logs. output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DBUSERNAME=admin</span><br><span class="line">DBPASSWORD=password</span><br><span class="line">...</span><br></pre></td></tr></table></figure>


<h1 id="Add-Secret-data-to-a-Volume"><a href="#Add-Secret-data-to-a-Volume" class="headerlink" title="Add Secret data to a Volume"></a>Add Secret data to a Volume</h1><p>busybox-secret.yaml: secret is add to volume with path db&#x2F;dbusername and db&#x2F;dbpassword. The volume is mount to path &#x2F;etc&#x2F;secret.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">secret-volume-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">k8s.gcr.io/busybox</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cat /etc/secret/db/dbusername;&quot;</span> ]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/etc/secret</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">      <span class="attr">secret:</span></span><br><span class="line">          <span class="attr">secretName:</span> <span class="string">dev-db-secret</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">db/dbusername</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">password</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">db/dbpassword</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>

<p>use <code>kubectl logs secret-volume-test</code> to get the container output. output is</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin</span><br></pre></td></tr></table></figure>


<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://kubernetes.io/docs/concepts/configuration/secret/">Kubernetes Secret</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes - Services</title>
    <url>/Kubernetes/Kubernetes-Services/</url>
    <content><![CDATA[<p>Kubernetes Service</p>
<span id="more"></span>

<p>Service is an abstract way to expose an application running on a set of Pods as a network service. </p>
<p>Every pod has an IP address. A Pod’s IP address is ephemeral because the pods can failed and replaced in a different node. Service has a stable and reliable IP address that you can use to access the pods. </p>
<h1 id="Service-Types"><a href="#Service-Types" class="headerlink" title="Service Types"></a>Service Types</h1><p>There are three Service Typs to choose from.</p>
<ul>
<li><strong>ClusterIP</strong>: Exposes the Service on a cluster-internal IP. Choosing this value makes the Service only reachable from within the clluster. This is the default ServiceType</li>
<li><strong>NodePort</strong>: Exposes the service on each Node’s IP at a static port(the NodePort). A ClusterIP Service, to which the NodePort Service routes, is automatically created. You will be able to contact the NodePort Service, from outside the cluster, by requesting &lt;NodeIP&gt;:&lt;NodePort&gt;. The drawback of NodePort is you need to know the node’s ip address to access the service.</li>
<li><strong>LoadBalancer</strong>: Exposes the service externally using a cloud provider’s load balancer. If the cluster is not run on the cloud, then LoadBalancer type is probably not supported.</li>
</ul>
<h1 id="Service-Commands"><a href="#Service-Commands" class="headerlink" title="Service Commands"></a>Service Commands</h1><p>To get a list of services exposed</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get services</span><br></pre></td></tr></table></figure>

<p>To describe a service named nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl describe service nginx</span><br></pre></td></tr></table></figure>

<p>Delete a service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete service nginx</span><br></pre></td></tr></table></figure>

<p>Expose a resource( can be pod, replicaset, service, deployment) as a new Kubernetes service.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000.</span><br><span class="line">kubectl expose deployment nginx --port=80 --target-port=8000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h1><p>You can only access this service while inside the cluster. ClusterIP is usually used by backend service and data store service. </p>
<p>Sample service with ClusterIP type</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<p>A service use selectors to select the pods with specific labels.</p>
<p>Here there are two ports defined</p>
<ul>
<li>targetPort - the port to access on the pods targeted by the service. This is the port which the application is configured to listen on.</li>
<li>port - the port that wil be exposed by this service</li>
</ul>
<p>Use <code>kubectl get services</code> to list service info</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get services</span><br><span class="line">NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1     &lt;none&gt;        443/TCP    103m</span><br><span class="line">myapp        ClusterIP   10.101.67.7   &lt;none&gt;        8080/TCP   15s</span><br></pre></td></tr></table></figure>

<p>When inside the cluster, you can access this service suing the following</p>
<ul>
<li>clusterIP:port</li>
</ul>
<p>Example to access the service inside the cluster</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl 10.101.67.7:8080</span><br></pre></td></tr></table></figure>

<p>One way to get into a cluster is to execute <code>kubectl exec -it &lt;pod-name&gt; /bin/bash</code> command to get into a pod. You may need to install curl in the pod if it is not available.  In addition, curl installation doesn’t always work.</p>
<p>Note that another way to access the application is <a href="Port-Forwarding">port forwarding</a>.</p>
<h1 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h1><p>NodePort exposes the service via the defined note port. The service can be reach on any node in the cluster via the nodePort.</p>
<p>myapp-service.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30003</span></span><br></pre></td></tr></table></figure>
<p>Here there are three ports defined</p>
<ul>
<li>targetPort - the port to access on the pods targeted by the service</li>
<li>port - the port that wil be exposed by this service</li>
<li>nodePort - The port on each node on which this service is exposed when type&#x3D;NodePort or LoadBalancer. Usually assigned by the system.</li>
</ul>
<p>Use <code>kubectl get services</code> to list service info</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get services</span><br><span class="line">NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1     &lt;none&gt;        443/TCP          106m</span><br><span class="line">myapp        NodePort    10.101.67.7   &lt;none&gt;        8080:30003/TCP   3m3s</span><br></pre></td></tr></table></figure>

<p>You can access this service using the following</p>
<ul>
<li>clusterIP:port</li>
<li>nodeIP:nodePort</li>
</ul>
<p>In addition to accessing the service using clusterIP, you can access the service outside of the cluster using node’s external IP. For minikube cluster, the node’s external IP can be retrieved using <code>minikube ip</code> command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl 172.17.0.44:30003</span><br></pre></td></tr></table></figure>

<p>You can get a node’s ip using <code>kubectl get nodes -o wide</code> command</p>
<h1 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h1><p>Loadbalancer exposes the service to the outside world. </p>
<p>Sample LoadBalancer type service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: myapp</span><br><span class="line">spec:</span><br><span class="line">  type: LoadBalancer</span><br><span class="line">  selector:</span><br><span class="line">    app: myapp</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">    port: 8080</span><br><span class="line">    nodePort: 30003</span><br></pre></td></tr></table></figure>

<p>Here there are three ports defined</p>
<ul>
<li>targetPort - the port to access on the pods targeted by the service</li>
<li>port - the port that wil be exposed by this service</li>
<li>nodePort - The port on each node on which this service is exposed when type&#x3D;NodePort or LoadBalancer. Usually assigned by the system.</li>
</ul>
<p>Use <code>kubectl get services</code> to list service info</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get services</span><br><span class="line">NAME         TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">kubernetes   ClusterIP      10.96.0.1     &lt;none&gt;        443/TCP          109m</span><br><span class="line">myapp        LoadBalancer   10.101.67.7   172.17.0.22   8080:30003/TCP   6m18s</span><br></pre></td></tr></table></figure>

<p>You can access this service using the following</p>
<ul>
<li>clusterIP:port</li>
<li>nodeIP:nodePort</li>
<li>loadBalancerIp:port</li>
</ul>
<p>Example to access the service using loadbalancerIP outside of the cluster. Kubernetes routes request to a nodePort, then routes to the clusterIP port. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl 172.17.0.22:8080</span><br></pre></td></tr></table></figure>

<h1 id="Service-Discovery-via-DNS"><a href="#Service-Discovery-via-DNS" class="headerlink" title="Service Discovery via DNS"></a>Service Discovery via DNS</h1><p>As of Kubernetes v1.12, CoreDNS is the recommended DNS Server, replacing kube-dns. However, kube-dns may still be installed by default with certain Kubernetes installer tools. Both the CoreDNS and kube-dns Service are named kube-dns in the metadata.name field.</p>
<p>When inside a Kubernetes cluster, you can use ClusterIP or DNS to visit the service. DNS Service will resolve the DNS name. </p>
<p>Every Service defined in the cluster is assigned a DNS A Record. The record is of format  <strong>&lt;Service-name&gt;.&lt;Namespace&gt;.svc.&lt;Cluster-Domain&gt;</strong>. You can often use <strong>&lt;Service-name&gt;.&lt;Namespace&gt;</strong> to refer to the service.</p>
<p>So in the application code, use url <a href="http://service-name.namespace/">http://service-name.namespace/</a> to visit the service. Kubernetes will resolve the hostname using dns service.</p>
<p>servicediscovery.yml: A pod that uses DNS name to visit myapp service.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">servicetest</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">servicetest</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">servicetest</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">byrnedo/alpine-curl</span></span><br><span class="line">    <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;curl http://myapp.default:8080;&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>This pod refers to myapp service in default namespace using hostname myapp.default. The complete dns name for myapp service is myapp.default.svc.cluster.local. cluster.local is the default  Namespace can be omitted if the service provider and consumer are in the same namespace. </p>
<p>Execute the following command to see how the pod visit the service using DNS name.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f servicediscovery.yml </span><br><span class="line">$ kubectl logs servicetest</span><br></pre></td></tr></table></figure>

<h1 id="Port-Forwarding"><a href="#Port-Forwarding" class="headerlink" title="Port Forwarding"></a>Port Forwarding</h1><p>Service is not the only way to access an application. One way is to use port forwarding to access a pod.</p>
<p>port-forwarding allows you to forward a local port in the host to a port on the pod</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl port-forward &lt;pod-name&gt; &lt;local-port&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure>

<p>You can use <code>curl hostname:host-port</code> to access the pod locally. Default hostname is localhost if address option is not set.</p>
<p><code>kubctl port-forward</code> has an option <code>--address</code> to specify the address to listen on.  It accepts IP addresses or localhost as a value. Default is localhost.</p>
<p>For more details on port forwarding, use <code>kubectl port-forward --help</code> command to see sample usage. See <a href="https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/">Port Forwarding documentation</a> for more detail explaination.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/#service-v1-core">Service API</a></li>
<li><a href="https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types">ServiceType</a></li>
<li><a href="https://stackoverflow.com/questions/41509439/whats-the-difference-between-clusterip-nodeport-and-loadbalancer-service-types">Diff between ClusterIP, NodePort and LoadBalancer service types in Kubernetes</a></li>
<li><a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">Kubernetes - DNS for Services and Pods</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes - Volumes</title>
    <url>/Kubernetes/Kubernetes-Volumes/</url>
    <content><![CDATA[<p>Disk files for a container is ephemeral. To persist data over container restart, we need to use PersistentVolume</p>
<span id="more"></span>

<p>Kubernetes supports many Volume Types</p>
<ul>
<li>emptyDir</li>
<li>azureDisk</li>
<li>awsElasticBlockStore</li>
<li>gcePersistentDisk</li>
<li>…</li>
</ul>
<h1 id="emptyDir"><a href="#emptyDir" class="headerlink" title="emptyDir"></a>emptyDir</h1><p>An <strong>emptyDir</strong> volume is first created when a Pod is assigned to a Node, and exists as long as that Pod is running on that node. It can be used for Pods to share files. </p>
<p>By default, emptyDir volumes are stored on whatever medium is backing the node - that might be disk or SSD or network storage, depending on your environment. </p>
<p>All containers in a pod can share an emptyDir. emptyDir volume can mount to the same or different path.</p>
<p>emptyDir volume is removed when a Pod is removed.</p>
<p>Example</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">k8s.gcr.io/test-webserver</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/cache</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="PersistentVolume"><a href="#PersistentVolume" class="headerlink" title="PersistentVolume"></a>PersistentVolume</h1><p>For persistent volume use PersistentVolume(PV) and PersistentVolumeClaim(PVC).</p>
<ul>
<li>PersistentVolume is usually managed by administrators</li>
<li>PersistentVolume can be requested by PersistentVolumeClaim</li>
</ul>
<p>There are three steps to use PersistentVolume.</p>
<ol>
<li>Administrator create PersistentVolume</li>
<li>Developer create PersistentVolumeClaim that claims part of that PersistentVolume disk space</li>
<li>Developer create pod that that uses PersistentVolumeClaim</li>
</ol>
<h2 id="Step1-Create-PersistentVolume"><a href="#Step1-Create-PersistentVolume" class="headerlink" title="Step1: Create PersistentVolume"></a>Step1: Create PersistentVolume</h2><p>mongo-pv.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">labels:</span> </span><br><span class="line">    <span class="attr">type:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongo-pv</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">mongo-demo</span></span><br><span class="line">  <span class="attr">accessModes:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">capacity:</span> </span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">hostPath:</span> </span><br><span class="line">    <span class="attr">path:</span> <span class="string">/data/mongo_data</span></span><br></pre></td></tr></table></figure>

<p>use <code>kubectl get pv</code> to display PersistentVolume resources. <strong>storageClassName</strong> is very important. It is used to tie PersistentVolume and PersistentVolumeClaim. The status is <em>Available</em> at this time. If a PersistentVolumeClaim is bound, the status will be <em>Bound</em>. </p>
<p>3 Access Modes</p>
<ul>
<li>ReadWriteOnce: The Volume can be mounted as read-write by a single node.</li>
<li>ReadOnlyMany: The Volume can be mounted read-only by many nodes.</li>
<li>ReadWriteMany: The Volume can be mounted as read-write by many nodes. PersistentVolumes that are backed by Compute Engine persistent disks don’t support this access mode.</li>
</ul>
<p>use <code>kubectl get pv</code> command to display the PersistentVolumes.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get pv</span><br><span class="line">NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">mongo-pv   1Gi        RWO            Retain           Available           mongo-demo              6s</span><br></pre></td></tr></table></figure>

<h2 id="Step2-Create-PersistentVolumeClaim"><a href="#Step2-Create-PersistentVolumeClaim" class="headerlink" title="Step2: Create PersistentVolumeClaim"></a>Step2: Create PersistentVolumeClaim</h2><p>mongo-pvc.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongo-pvc</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">mongo-demo</span></span><br><span class="line">  <span class="attr">accessModes:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span> </span><br><span class="line">      <span class="attr">storage:</span> <span class="string">250Mi</span></span><br></pre></td></tr></table></figure>

<p>use <code>kubectl get pvc</code> to display PersistentVolumeClaim</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get pvc</span><br><span class="line">NAME             STATUS   VOLUME     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">mongo-pv-claim   Bound    mongo-pv   1Gi        RWO            mongo-demo     8s</span><br></pre></td></tr></table></figure>

<h2 id="Step3-Create-Pod-that-uses-the-PersistentVolumeClaim"><a href="#Step3-Create-Pod-that-uses-the-PersistentVolumeClaim" class="headerlink" title="Step3: Create Pod that uses the PersistentVolumeClaim"></a>Step3: Create Pod that uses the PersistentVolumeClaim</h2><p>mongo.yml: defines a service and statefulset that uses PersistentVolume.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">mongo</span></span><br><span class="line"> <span class="attr">labels:</span></span><br><span class="line">  <span class="attr">app:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">27017</span></span><br><span class="line"> <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line"> <span class="attr">selector:</span></span><br><span class="line">  <span class="attr">app:</span> <span class="string">mongo</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mongo</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">&quot;mongo&quot;</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">mongod</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;--bind_ip&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">27017</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data/db</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo-volume</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">mongo-pvc</span></span><br></pre></td></tr></table></figure>

<p>After the statefulset is created, use <code>kubectl get statefulsets</code> to check the statefulset status</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get statefulsets</span><br><span class="line">NAME    READY   AGE</span><br><span class="line">mongo   1/1     11m</span><br></pre></td></tr></table></figure>

<p>Use <code>kubectl exec -it mongo-0 /bin/bash</code> to get into the container and use the mongodb database. The data will persiste over pod restart.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://kubernetes.io/docs/concepts/storage/volumes">Kubernetes volume</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir">emptyDir volume</a></li>
<li><a href="https://www.alibabacloud.com/blog/kubernetes-volume-basics-emptydir-and-persistentvolume_594834">Kubernetes Volume Basics: emptyDir and PersistentVolume by Alibaba Clouder</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
  <entry>
    <title>Agile</title>
    <url>/Others/Agile/</url>
    <content><![CDATA[<p>Agile and Scrum</p>
<span id="more"></span>

<h1 id="What-is-Agile"><a href="#What-is-Agile" class="headerlink" title="What is Agile"></a>What is Agile</h1><p>In software development, <strong>Agile is a set of value and principles.</strong></p>
<p>The core of Agile is iterative development. An Agile team use short iterations to better react to requirement changes. This will greatly reduce the risks that the product the team build is not what the customer want.</p>
<p>Benefits of Agile</p>
<ul>
<li>Reduce time to market</li>
<li>Responsive to feature request</li>
<li>Work is aligned to customer needs</li>
<li>Get rid of non productive activity(writing specification for sofeware)</li>
</ul>
<h1 id="Agile-Manifesto"><a href="#Agile-Manifesto" class="headerlink" title="Agile Manifesto"></a>Agile Manifesto</h1><p>Agile software development values</p>
<ul>
<li><strong>Individuals and interactions</strong> over processes and tools</li>
<li><strong>Working software</strong> over comprehensive documentation</li>
<li><strong>Customer collaboration</strong> over contract negotiation</li>
<li><strong>Responding to change</strong> over following a plan</li>
</ul>
<p>That is to say, favor items on the left to items on the right</p>
<h1 id="Agile-Principals"><a href="#Agile-Principals" class="headerlink" title="Agile Principals"></a>Agile Principals</h1><p>The following principles are based on the Agile Manifesto.</p>
<ol>
<li>Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.</li>
<li>Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage.</li>
<li>Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.</li>
<li>Business people and developers must work together daily throughout the project.</li>
<li>Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.</li>
<li>The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.</li>
<li>Working software is the primary measure of progress.</li>
<li>Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.</li>
<li>Continuous attention to technical excellence and good design enhances agility.</li>
<li>Simplicity–the art of maximizing the amount of work not done–is essential.</li>
<li>The best architectures, requirements, and designs emerge from self-organizing teams.</li>
<li>At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.</li>
</ol>
<h1 id="Scrum"><a href="#Scrum" class="headerlink" title="Scrum"></a>Scrum</h1><p>There are different frameworks for Agile: Kanban, Scrum and XP. <strong>Scrum</strong> is the most popular framework</p>
<p>Scrum breaks down the features into small manageable tasks that can be completed within a timeboxed iteration, called <strong>sprint</strong>. A sprint is commonly two weeks. </p>
<h2 id="Roles"><a href="#Roles" class="headerlink" title="Roles"></a>Roles</h2><p><strong>Product Owner(PO)</strong> - The product owner represents the product’s stakeholders and the voice of the customer, is responsible for the product backlog and accountable for maximizing the value that the team delivers. </p>
<p><strong>Scrum Master</strong> - Facilitate team meetings, removes team impediments, liaises with the product owner and ensures the team follows agreed processes in the scrum framework.</p>
<p><strong>Delivery Team Member</strong> - responsible for delivering product increments every sprint.</p>
<h2 id="Key-Concepts"><a href="#Key-Concepts" class="headerlink" title="Key Concepts"></a>Key Concepts</h2><h3 id="Product-Backlog"><a href="#Product-Backlog" class="headerlink" title="Product Backlog"></a>Product Backlog</h3><p><strong>Product Backlog</strong> contains an order list of product requirements that a scrum team maintains for a product. Some requirements are features, bug fixes and non-functional requirements.</p>
<h3 id="Sprint"><a href="#Sprint" class="headerlink" title="Sprint"></a>Sprint</h3><p><strong>Sprint</strong> is a time-boxed iteration. Usually 2 weeks. Each Sprint starts with sprint planning and ends with sprint review and sprint retrospective.</p>
<h3 id="Sprint-Backlog"><a href="#Sprint-Backlog" class="headerlink" title="Sprint Backlog"></a>Sprint Backlog</h3><p><strong>Spring Backlog</strong> cotnains list of work to be addressed for the sprint.</p>
<h3 id="User-Story"><a href="#User-Story" class="headerlink" title="User Story"></a>User Story</h3><p>The team divides the work to be done into functional increments called <strong>User Story</strong>.</p>
<p>The User story description can have a template like this</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">As a ...(who) I want ... (what) so that ...(why)</span><br></pre></td></tr></table></figure>

<p>A typical User story contains Acceptance Criteria, Story Points and sub-tasks.</p>
<ul>
<li>Acceptance Criteria are a list of statements that defines functional and non-functional requirements.</li>
<li><strong>Story points</strong> are measures of the size of the User Story, usually in Fibonacci numbers. can use points e.g. 1, 3 or 5</li>
<li><strong>sub-tasks</strong> are development tasks to complete the user story</li>
</ul>
<h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><ol>
<li>Product Owner create product backlog for the product</li>
<li>Sprint planning meeting at the beginning of the sprint. Estimate the story point for each user story, determine spring backlog and set a spring goal</li>
<li>Team member volunteer to work on stories. Story status(open, in progress, close) should be updated promptly for others to see</li>
<li>Participant the 15 minute daily stand-up. Answer the following question:</li>
</ol>
<ul>
<li>What did I accomplish yesterday toward our sprint goals?</li>
<li>What do I plan to accomplish today?</li>
<li>Do I have any impediments? How to address the impediment?</li>
</ul>
<ol start="5">
<li>Spring Review meeting at the end of the sprint. The goal of spring review meeting is to</li>
</ol>
<ul>
<li>Review work completed and unfinished</li>
<li>Demo to stakeholders and answer questions from stakeholders</li>
</ul>
<ol start="6">
<li>Retrospective meeting at the end of the sprint</li>
</ol>
<h2 id="Retrospective"><a href="#Retrospective" class="headerlink" title="Retrospective"></a>Retrospective</h2><p>At the end of a sprint, the team hold a Retrospective meeting to reflect on the past sprint and improve development process to make the team more efficient.</p>
<p>Questions to talk about in a retrospective meeting:</p>
<ul>
<li>What went well?</li>
<li>What did not go well?</li>
<li>What have we learned?</li>
<li>How to be more effective?</li>
<li>How to improve current process?</li>
<li>What should you do differently next sprint?</li>
</ul>
<h1 id="Pair-Programming"><a href="#Pair-Programming" class="headerlink" title="Pair Programming"></a>Pair Programming</h1><p>Acording to Wikipedia</p>
<blockquote>
<p><strong>Pair programming</strong> is an agile software development technique in which two programmers work together at one workstation. One, the driver, writes code while the other, the observer or navigator, reviews each line of code as it is typed in. The two programmers switch roles frequently.</p>
</blockquote>
<p>Pair programming for all the stories is not resource efficient. It is best to practice pair programming when</p>
<ul>
<li>The work is difficult</li>
<li>Share knowledge among team members</li>
</ul>
<h1 id="Good-Reads"><a href="#Good-Reads" class="headerlink" title="Good Reads"></a>Good Reads</h1><ul>
<li><a href="https://www.geeksforgeeks.org/techniques-to-be-an-awesome-agile-developer-part-1/">Techniques to be an awesome Agile Developer</a></li>
<li><a href="https://learning.oreilly.com/library/view/practices-of-an/9781680500325/">Practices of an Agile Developer</a></li>
<li><a href="https://www.cprime.com/resources/what-is-agile-what-is-scrum/">What is Agile? What is Scrum?</a></li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://agilemanifesto.org/">Agile Manifesto</a></li>
<li><a href="https://www.agilealliance.org/agile101/">agilealliance.com</a></li>
<li><a href="https://en.wikipedia.org/wiki/Scrum_(software_development)">Scrum(Software developmemnt</a></li>
</ul>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>Agile</tag>
      </tags>
  </entry>
  <entry>
    <title>DevOps</title>
    <url>/Others/Devops/</url>
    <content><![CDATA[<p>Let’s learn DevOps basics.</p>
<span id="more"></span>

<h1 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h1><p>There are many definition of DevOps. But the definition from Wikipedia is the easiest to understand. </p>
<blockquote>
<p><strong>DevOps</strong> is a set of practices that combines software development (Dev) and information-technology operations (Ops) which aims to shorten the systems development life cycle and provide continuous delivery with high software quality.</p>
</blockquote>
<p>A simpler Devops defintion is: <strong>Engineering teams are responsible for developing and running the applications.</strong></p>
<h1 id="Benefits-of-Devops"><a href="#Benefits-of-Devops" class="headerlink" title="Benefits of Devops"></a>Benefits of Devops</h1><ul>
<li><strong>Speed</strong> - innovate faster, more efficient at driving business result.</li>
<li><strong>Rapid Delivery</strong> - increase frequency and pace of releases.</li>
<li><strong>Reliability</strong> -ensure quality of application updates and infrastructure changes.</li>
<li><strong>Scale</strong> - Operate and manage your infrastructure and development processes at scale. </li>
<li><strong>Improved Collaboration</strong> - Build more effective teams under a DevOps cultural model</li>
<li><strong>Security</strong> - move quickly while retaining control and preseving compliance.</li>
</ul>
<h1 id="Practices"><a href="#Practices" class="headerlink" title="Practices"></a>Practices</h1><ul>
<li><strong>Continuous Integration</strong> - developers regularly merge their code changes into a central repository.</li>
<li><strong>Continuous Delivery</strong> - code changes are automatically built, tested, and prepared for a release to production.</li>
<li><strong>Microservices</strong> - build a single application as a set of small services.</li>
<li><strong>Infrastructure as Code</strong> - infrastructure is provisioned and managed using code and software development techniques</li>
<li><strong>Continuous Monitoring and Logging</strong> - monitor metrics and logs. Use alarts to proactively monitor services.</li>
<li><strong>Communication and Collaboration</strong> - use tools and automation to establish efficient communication and collaboration.</li>
</ul>
<p>Remember, DevOps emphasize <strong>automation</strong>. Build, test, deploy and provisioning automation helps development teams to deliver features faster and allows team members to focus more on delivering business value.</p>
<h1 id="Developer-and-Operations-Responsibilities"><a href="#Developer-and-Operations-Responsibilities" class="headerlink" title="Developer and Operations Responsibilities"></a>Developer and Operations Responsibilities</h1><p>Traditionally, Developers is responsible for making code changes. Operations team is responsible for keeping application available. </p>
<p>With Devops, the responsibilities are changed. Developers now take ownership of the application. They are now responsible for configure, develope and monitor the application. Operations team will assist with monitoring the system. And they are more focus on the ingrastructure and enforcing IT policies(backup, DR, security, compliance etc). </p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/DevOps">Wikipedia - DevOps</a></li>
</ul>
<p>Good Reads</p>
<ul>
<li><a href="https://www.atlassian.com/devops">DevOps: Breaking the Development-Operations barrier by Atlassian</a></li>
<li><a href="http://www.drdobbs.com/architecture-and-design/top-10-practices-for-effective-devops/240149363?pgno=1">Top 10 Practices for Effective DevOps</a></li>
<li><a href="https://devops.com/defining-the-dev-and-the-ops-in-devops">Defining the Dev and the Ops in Devops by Martin J. Logan</a></li>
</ul>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Microservices</title>
    <url>/Others/MicroServices/</url>
    <content><![CDATA[<p>Microservices is the method to build application as a collection of loosely coupled services.</p>
<span id="more"></span>

<h1 id="Monolithic-Architecture"><a href="#Monolithic-Architecture" class="headerlink" title="Monolithic Architecture"></a>Monolithic Architecture</h1><p>Monolithic is the traditional way of building application. For a monolithic architecture, application is built and deployed as a single unit.</p>
<p>Benefits of Monolithic architecture</p>
<ul>
<li>Simple to develop</li>
<li>Easy to make radical changes to the application</li>
<li>Straightforward to test</li>
<li>Straightforward to deploy</li>
<li>Easy to scale</li>
</ul>
<p>Problems with Monolithic architecture</p>
<ul>
<li>Too Complex and too large for developers to work on</li>
<li>Slow start-up time</li>
<li>Difficult to do continuous deployment</li>
<li>Slow to adopt changes</li>
</ul>
<h1 id="Microservices"><a href="#Microservices" class="headerlink" title="Microservices"></a>Microservices</h1><p>Acording to Chris Richardson, the author of Microservices Patterns, <strong>Microservices</strong> - also known as the <strong>Microservice Architecture</strong> - is an architectural style that structures an application as a collection of services that are</p>
<ul>
<li>Highly maintainable and testable</li>
<li>Loosely coupled</li>
<li>Independently deployable</li>
<li>Organized around business capabilities</li>
<li>Owned by a small team</li>
</ul>
<p>Advantages of Microservices</p>
<ul>
<li>Services are small and easy to understand and maintained</li>
<li>Face iteration</li>
<li>Scalable</li>
<li>Adopt new technology easily</li>
<li>Fault tolerant - problems with one service doesn’t affect others</li>
</ul>
<p>Disadvantages of Microservices</p>
<ul>
<li>Developers has to deal with distributed system, which is difficult</li>
<li>Transaction span multiple services is hard to implement</li>
<li>Hard to test application</li>
<li>Features span multiple service require careful coordination</li>
</ul>
<h1 id="Microservices-vs-SOA"><a href="#Microservices-vs-SOA" class="headerlink" title="Microservices vs SOA"></a>Microservices vs SOA</h1><ul>
<li>Service Granularity: services within SOA range in size. It can be very large enterprese service.</li>
<li>Component Sharing: SOA emphasize sharing. Miscroservices try to minimize sharing through “bounded context”.</li>
<li>Protocols: SOA favors remove access protocols(e.g. SOAP). Microservices rely on REST. gRPC can be used and it is getting popular.</li>
<li>Middleware vs API: SOA relys heavily on middleware. The messaging middleware can have a large capabilities such as message mediation and routing, message enrichmemtn and message protocol transformation. Microservices have an simple API layer between service consumer and service provider. It uses HTTP for syncrhnous communication and messaging system for asynchronous communication. common message brokers are RabbitMQ, ActiveMQ, Kafka.</li>
</ul>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Like Monolithic, Microservices has its own challenges. However, Microservices is the better choice  than Monilithic Architecture when it comes to handling complexity. It is the architecuture of the future software development.</p>
<p>Good Reads</p>
<ul>
<li><a href="https://dzone.com/articles/microservice-architecture-and-design-patterns-for">Microservice Architecture and Design patterns for Microservices by Madhuka Udantha</a></li>
</ul>
<p>Reference</p>
<ul>
<li><a href="https://microservices.io/">microservices.io by Chris Richardson</a></li>
<li><a href="https://microservices.io/book">Microservices Patterns by Chris Richardson</a></li>
<li><a href="https://martinfowler.com/articles/microservices.html">Microservices by James Lewis and Martin Fowler</a></li>
<li><a href="https://articles.microservices.com/monolithic-vs-microservices-architecture-5c4848858f59">Monolithic vs. Microservices Architecture by Anton Kharenko
</a></li>
</ul>
]]></content>
      <categories>
        <category>Microservices</category>
      </categories>
  </entry>
  <entry>
    <title>MongoDB Basics</title>
    <url>/Others/MongoDB-Basics/</url>
    <content><![CDATA[<p>MongoDB Basics</p>
<span id="more"></span>

<h1 id="MongoDB-Introduction"><a href="#MongoDB-Introduction" class="headerlink" title="MongoDB Introduction"></a>MongoDB Introduction</h1><p><strong>MongoDB is a source-available cross-platform document-oriented database program.</strong> Classified as a NoSQL database program, MongoDB uses JSON-like documents with optional schemas. MongoDB is developed by MongoDB Inc. and licensed under the Server Side Public License (SSPL).</p>
<p>Advantages of MongoDB</p>
<ul>
<li>Flexible schema - you don’t need to declare a schema to use MongoDB. This is useful when it comes to storing unstructed data.</li>
<li>Scalability - MongoDB is a distributed database, so it can be horizontally scale with sharding.</li>
<li>Powerful querying and analytics - MongoDB allows users to easily query the database and rarely use joins and transactions.</li>
</ul>
<p>When to avoid MongoDB</p>
<ul>
<li>Multi Object Transaction - MongoDB only allows ACID transaction for a single document.</li>
<li>Relational data - If the dataset has many one-to-many or many-to-many relations and needs joins, you should use traditional SQL database instead.</li>
</ul>
<p>Use cases</p>
<ul>
<li>Personalization - track users search and activity to create personalized online experience.</li>
<li>Product Catelog, asset managements - we can store product or asset data and their metadata in MongoDB because of its flexible schema and powerful query capability.</li>
<li>IoT application - MongoDB is horizontally scalability makes it a better fit for data generated by IoT sensors. MongoDB also offers Time Series Collections for IoT applications.</li>
</ul>
<h1 id="Document-and-Collection"><a href="#Document-and-Collection" class="headerlink" title="Document and Collection"></a>Document and Collection</h1><p>MongoDB is a document database so it stores records as <strong>Document</strong>. MongoDB stores documents as BSON. It is a JSON like document format.</p>
<p>Documents are organized as <strong>Collection</strong>. Collection is similar to Table in relational database.</p>
<h1 id="Running-MongoDB-as-Docker-Container"><a href="#Running-MongoDB-as-Docker-Container" class="headerlink" title="Running MongoDB as Docker Container"></a>Running MongoDB as Docker Container</h1><p>Install using Docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure>

<p>Running mongo container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name some-mongo -d -p 27017:27017 mongo</span><br></pre></td></tr></table></figure>

<p>Running mongo container with username and password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name some-mongo \</span><br><span class="line">  -e MONGO_INITDB_ROOT_USERNAME=myusername\</span><br><span class="line">  -e MONGO_INITDB_ROOT_PASSWORD=mypassword\</span><br><span class="line">  -p 27017:27017 \</span><br><span class="line">  mongo</span><br></pre></td></tr></table></figure>

<p>Use <code>docker exec</code> command to get shell access</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [container-id] bash</span><br></pre></td></tr></table></figure>

<p>You can now run <code>mongodb</code> command to start MongoDB Shell.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mongodb</span><br></pre></td></tr></table></figure>

<p>To connect to MongoDB using username and password</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mongodb -u myusername -p mypassword</span><br></pre></td></tr></table></figure>

<p>The MongoDB Shell, <strong>mongosh</strong>, is a fully functional JavaScript and Node.js 16.x REPL environment for interacting with MongoDB deployments. You can use the MongoDB Shell to test queries and operations directly with your database.</p>
<p><a href="https://www.mongodb.com/try/download/compass">MongoDB Compass</a> is the GUI you can use to interact with MongoDB.</p>
<h1 id="Database-Commands"><a href="#Database-Commands" class="headerlink" title="Database Commands"></a>Database Commands</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show all databases in the server</span></span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line"><span class="comment"># show current database</span></span><br><span class="line">db</span><br><span class="line"></span><br><span class="line"><span class="comment"># `use &lt;db&gt;` to switch databse</span></span><br><span class="line">use <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Removes the current database.</span></span><br><span class="line">db.dropDatabase();</span><br></pre></td></tr></table></figure>

<h1 id="Collection-Commands"><a href="#Collection-Commands" class="headerlink" title="Collection Commands"></a>Collection Commands</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show all collections</span></span><br><span class="line">show collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># create collection products</span></span><br><span class="line">db.createCollection(<span class="string">&quot;products&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show movie collection&#x27;s stats</span></span><br><span class="line">db.products.stats()</span><br><span class="line"></span><br><span class="line"><span class="comment"># drop products collection</span></span><br><span class="line">db.products.drop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Count Documents in products Collection.</span></span><br><span class="line"><span class="comment"># query parameter is required for setting the criteria, pass &#123;&#125; to count all documenta</span></span><br><span class="line">db.products.countDocuments(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Document-Commands"><a href="#Document-Commands" class="headerlink" title="Document Commands"></a>Document Commands</h1><h2 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># db.collection.insertOne() inserts a single document into a collection.</span></span><br><span class="line">db.products.insertOne(</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;Apple iPhone 13 Pro&quot;</span>,</span><br><span class="line">    category: <span class="string">&quot;Electronics&quot;</span>,</span><br><span class="line">    price: 1000.00,</span><br><span class="line">    color: <span class="string">&quot;Blue&quot;</span>,</span><br><span class="line">    created: new Date()</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment"># use db.collection.insertMany() method to insert multiple documents</span></span><br><span class="line">db.products.insertMany([</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;Samsung TV&quot;</span>,</span><br><span class="line">    category: <span class="string">&quot;Electronics&quot;</span>,</span><br><span class="line">    price: 100.00,</span><br><span class="line">    created: new Date()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;Sleep Pillow&quot;</span>,</span><br><span class="line">    category: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    price: 100.00,</span><br><span class="line">    size: <span class="string">&quot;King&quot;</span>,</span><br><span class="line">    created: new Date()</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get all documents in a collection</span></span><br><span class="line">db.products.find()</span><br><span class="line"></span><br><span class="line"><span class="comment"># find with query parameter: price is greater than 500</span></span><br><span class="line">db.products.find(&#123;</span><br><span class="line">  price: &#123;<span class="variable">$gt</span>: 50&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find product that has category equals &quot;Electornics&quot; and price grreater than 50</span></span><br><span class="line">db.products.find(&#123;</span><br><span class="line">  <span class="variable">$and</span>: [</span><br><span class="line">    &#123;category: &#123;<span class="variable">$eq</span>: <span class="string">&quot;Electronics&quot;</span>&#125;&#125;,</span><br><span class="line">    &#123;price: &#123;<span class="variable">$gt</span>: 50&#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find using text search. </span></span><br><span class="line"><span class="comment"># Note that you need to create a text index before doing text search.</span></span><br><span class="line">db.products.find( &#123;<span class="variable">$text</span>: &#123;<span class="variable">$search</span>: <span class="string">&quot;iPhone&quot;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p><code>$gt</code>, <code>$and</code>, <code>$text</code> are all <a href="https://www.mongodb.com/docs/manual/reference/operator/query">Query Selectors</a>. specifically, <code>$gt</code> is comparison operator and <code>$and</code> is logical operator.</p>
<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Modifies a single document in a collection.</span></span><br><span class="line">db.products.updateOne(</span><br><span class="line">   &#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Sleep Pillow&quot;</span> &#125;,</span><br><span class="line">   &#123; <span class="variable">$set</span>: &#123; <span class="string">&quot;price&quot;</span> : 79.99 &#125; &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db.products.updateMany(</span><br><span class="line">   &#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Sleep Pillow&quot;</span> &#125;,</span><br><span class="line">   &#123; <span class="variable">$set</span>: &#123; <span class="string">&quot;price&quot;</span> : 79.99 &#125; &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># update by _id</span></span><br><span class="line">db.products.updateOne(</span><br><span class="line">  &#123;<span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;629bb25a53cee9b4e83035a5&quot;</span>)&#125;,</span><br><span class="line">  &#123;<span class="variable">$set</span>: &#123; <span class="string">&quot;color&quot;</span>: <span class="string">&quot;green&quot;</span>&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># delete a single document that match the condition that price is greater than</span></span><br><span class="line">db.products.deleteOne(&#123;price: &#123;<span class="variable">$gt</span>: 500&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete by _id</span></span><br><span class="line">db.products.deleteOne(&#123;<span class="string">&quot;_id&quot;</span>: ObjectId(<span class="string">&quot;629bb25b53cee9b4e83035a7&quot;</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete all documents in products collection</span></span><br><span class="line">db.products.deleteMany(&#123;price: &#123;<span class="variable">$gt</span>: 500&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Index-Commands"><a href="#Index-Commands" class="headerlink" title="Index Commands"></a>Index Commands</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create index with name price_idx</span></span><br><span class="line"><span class="comment"># specify index value 1 for ascending. -1 for decending</span></span><br><span class="line">db.products.createIndex(&#123;price: 1&#125;, &#123;name: <span class="string">&quot;price_idx&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create text index</span></span><br><span class="line">db.products.createIndex(&#123;name: <span class="string">&quot;text&quot;</span>&#125;, &#123;name: <span class="string">&quot;name_idx&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get indexes</span></span><br><span class="line">db.products.getIndexes()</span><br><span class="line"></span><br><span class="line"><span class="comment"># get index size</span></span><br><span class="line">db.products.totalIndexSize()</span><br><span class="line"></span><br><span class="line"><span class="comment"># drop index</span></span><br><span class="line">db.products.dropIndex(<span class="string">&quot;price_idx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># drop indexes</span></span><br><span class="line">db.products.dropIndexes()</span><br></pre></td></tr></table></figure>

<p>createIndex can take a list of options. see <a href="https://www.mongodb.com/docs/manual/reference/method/db.collection.createIndex/#options">Options</a> for the complete list of options.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/MongoDB">Wikipedia MongoDB</a></li>
<li><a href="https://www.mongodb.com/advantages-of-mongodb">Advantages of using MongoDB</a></li>
<li><a href="https://stackoverflow.com/questions/4288615/why-not-mongodb/14678736">Stackoverflow - Why not MongoDB?</a></li>
<li><a href="https://www.mongodb.com/use-cases">MongoDB Use Cases</a></li>
<li><a href="https://www.mongodb.com/docs/manual/introduction/">MongoDB Manual</a></li>
<li><a href="https://hub.docker.com/_/mongo">Official mongo imagein dockerhub</a></li>
<li><a href="https://www.mongodb.com/docs/mongodb-shell/reference/methods/">MongoDB shell methods</a></li>
<li><a href="https://www.mongodb.com/docs/manual/reference/operator/query/">MongoDB query selector</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Introduction</title>
    <url>/Others/Python-Introduction/</url>
    <content><![CDATA[<p>Python Introduction</p>
<span id="more"></span>

<h1 id="Install-Python3"><a href="#Install-Python3" class="headerlink" title="Install Python3"></a>Install Python3</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install python3</span><br></pre></td></tr></table></figure>

<p>To check python3 version</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure>

<p>You can now run the python3 interpreter using <code>python3</code> command. </p>
<p>You can create python program using text editors such as VS Code and run the python program using <code>python3</code> command. VS Code has Python Extension that provides intelliSense and debugging support. You can also use PyCharm if you prefer an IDE.</p>
<h1 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h1><p>print objects. print() is a build-in function. <a href="https://docs.python.org/3.6/library/functions.html#print">print() reference</a></p>
<p>method signature</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(*objects, sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>Demo</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">234.56</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use **** as separator, separtor can be anything or empty string</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;3&quot;</span>, sep=<span class="string">&quot;****&quot;</span>)   <span class="comment"># =&gt; hello****python****3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;3&quot;</span>, sep=<span class="string">&quot;&quot;</span>)    <span class="comment"># =&gt; hellopython3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;3&quot;</span>, sep=<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h1><ul>
<li>Python variables can only begin with a letter(A-Za-z) or an underscore(_).</li>
<li>Python variables are dynamically-typed. Do not specify variable type when declaring one.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">greeting = <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>


<h1 id="Getting-input"><a href="#Getting-input" class="headerlink" title="Getting input"></a>Getting input</h1><p>Use input([promp]) build-in function to get input. <a href="https://docs.python.org/3/library/functions.html#input">input reference</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># getting input</span></span><br><span class="line">inputString = <span class="built_in">input</span>(<span class="string">&quot;please enter a string&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># It is useful to keep window open after script complete execution</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;press close to exit&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>To get input as int. Note that you need to use Ctrl+D to send EOF to indicate no more input.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = <span class="built_in">int</span>(sys.stdin.read())</span><br></pre></td></tr></table></figure>



<h1 id="Build-in-Types"><a href="#Build-in-Types" class="headerlink" title="Build-in Types"></a>Build-in Types</h1><p>Python has 5 standard data types</p>
<ul>
<li>Numbers(integers, floating point numbers, and complex numbers)</li>
<li>String</li>
<li>Boolean(value are True or False)</li>
<li>sequence types(List, Tuple, Dictionary)</li>
</ul>
<p><strong>Infinity</strong><br><br>In python, you can have a number with infinity value</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a=math.inf</span><br><span class="line">b=-math.inf</span><br></pre></td></tr></table></figure>

<p><strong>use type() to get object type</strong><br><br>type() is also a build-in function. <a href="https://docs.python.org/3/library/functions.html#type">type() reference</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">123</span>)    <span class="comment"># =&gt; &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">type</span>(<span class="number">123.45</span>)    <span class="comment"># =&gt; &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">type</span>(<span class="string">&quot;foo&quot;</span>)    <span class="comment"># =&gt; &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="None"><a href="#None" class="headerlink" title="None"></a>None</h1><p>Many languages has null value. In python, the equivelent is <code>None</code>. <code>None</code> is the only instance of class <code>NoneType</code> You can assign <code>None</code> to a variable. Use identity operator <code>is</code> to check if a variable has <code>None</code> value. </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_var = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> my_var <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;my_var is empty&quot;</span>)   <span class="comment"># &quot;my_var is empty&quot;</span></span><br><span class="line"></span><br><span class="line">my_var = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">if</span> my_var <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;my_var is not empty&quot;</span>) <span class="comment"># &#x27;my_var is not empty&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h1><h2 id="Arithmetic-Operator"><a href="#Arithmetic-Operator" class="headerlink" title="Arithmetic Operator"></a>Arithmetic Operator</h2><table>
<thead>
<tr>
<th>operator</th>
<th>meaning</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>addition</td>
</tr>
<tr>
<td>-</td>
<td>subtraction</td>
</tr>
<tr>
<td>*</td>
<td>multiplication</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>division</td>
</tr>
<tr>
<td>&#x2F;&#x2F;</td>
<td>floor division</td>
</tr>
<tr>
<td>%</td>
<td>Modulus</td>
</tr>
<tr>
<td>**</td>
<td>exponentiation</td>
</tr>
</tbody></table>
<h2 id="Comparison-Operator"><a href="#Comparison-Operator" class="headerlink" title="Comparison Operator"></a>Comparison Operator</h2><table>
<thead>
<tr>
<th>operator</th>
<th>meaning</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td>less than</td>
</tr>
<tr>
<td>&gt;</td>
<td>greeter than</td>
</tr>
<tr>
<td>&#x3D;&#x3D;</td>
<td>equal to</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>not equal to</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>less than or equal to</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>greeter than or equal to</td>
</tr>
</tbody></table>
<h2 id="Assignment-Operator"><a href="#Assignment-Operator" class="headerlink" title="Assignment Operator"></a>Assignment Operator</h2><table>
<thead>
<tr>
<th>operator</th>
<th>meaning</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>assign</td>
</tr>
<tr>
<td>+&#x3D;</td>
<td>add and assign</td>
</tr>
<tr>
<td>-&#x3D;</td>
<td>subtract and assign</td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>divide and assign</td>
</tr>
<tr>
<td>* &#x3D;</td>
<td>multiple and assign</td>
</tr>
<tr>
<td>%&#x3D;</td>
<td>modulus and assign</td>
</tr>
<tr>
<td>**&#x3D;</td>
<td>exponent and assign</td>
</tr>
<tr>
<td>&#x2F;&#x2F;&#x3D;</td>
<td>floor-divide and assign</td>
</tr>
</tbody></table>
<h2 id="Logical-Operator"><a href="#Logical-Operator" class="headerlink" title="Logical Operator"></a>Logical Operator</h2><table>
<thead>
<tr>
<th>operator</th>
<th>meaning</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>return true when both statement are true</td>
</tr>
<tr>
<td>or</td>
<td>return true when either statement is true</td>
</tr>
<tr>
<td>not</td>
<td>inverts the Boolean value of an expresion</td>
</tr>
</tbody></table>
<h2 id="Membership-operator"><a href="#Membership-operator" class="headerlink" title="Membership operator"></a>Membership operator</h2><p>There are two membership operators ‘in’ and ‘not in’</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;tea&#x27;</span> <span class="keyword">in</span> [<span class="string">&#x27;latte&#x27;</span>, <span class="string">&#x27;tea&#x27;</span>, <span class="string">&#x27;coke&#x27;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;tea&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;latte&#x27;</span>, <span class="string">&#x27;tea&#x27;</span>, <span class="string">&#x27;coke&#x27;</span>]</span><br></pre></td></tr></table></figure>


<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p><a href="https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str">str reference</a></p>
<ul>
<li>You can use single quotes or double quotes</li>
<li>If the string contains single quote, then it is better to use double quotes</li>
<li>tripple quotes “”” and ‘’’ can be used for multiline string</li>
<li>use square brackets for slicing</li>
<li>use + to concatenate strings</li>
<li>use len() function to return a string’s length</li>
<li>use &#x3D;&#x3D; to compare strings</li>
<li>Use <code>in</code> operator or find method to check if a string is a substring of another string</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">s[<span class="number">0</span>]    <span class="comment"># =&gt; H</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># slicing</span></span><br><span class="line">s[<span class="number">0</span>:<span class="number">3</span>]    <span class="comment"># =&gt; Hel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># String concat</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span> + <span class="string">&quot; &quot;</span> + <span class="string">&quot;World&quot;</span>   <span class="comment"># Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># formatting</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is %s and I am %d years old&quot;</span> % (<span class="string">&quot;Mark&quot;</span>, <span class="number">42</span>))    <span class="comment"># =&gt; My name is Mark and I am 42 years old</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get string length</span></span><br><span class="line"><span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># search for a substring</span></span><br><span class="line">s.find(<span class="string">&quot;Wor&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># upper case</span></span><br><span class="line">s.upper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># lower case</span></span><br><span class="line">s.lower()</span><br><span class="line"></span><br><span class="line"><span class="comment"># format</span></span><br><span class="line"><span class="string">&quot;the Sum of 1 + 2 is &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>+<span class="number">2</span>)    <span class="comment"># =&gt; &#x27;the Sum of 1 + 2 is 3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># convert number to string</span></span><br><span class="line"><span class="built_in">str</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check string contains</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;de&quot;</span> <span class="keyword">in</span> <span class="string">&quot;abcde&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;de is found&quot;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="Control-Statement-and-Iterator"><a href="#Control-Statement-and-Iterator" class="headerlink" title="Control Statement and Iterator"></a>Control Statement and Iterator</h1><h2 id="If-Statement"><a href="#If-Statement" class="headerlink" title="If Statement"></a>If Statement</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">input</span>(<span class="string">&quot;x:&quot;</span>)</span><br><span class="line">y = <span class="built_in">input</span>(<span class="string">&quot;y:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> x &lt; y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;x is less than y&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x &gt; y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;x is greater than y&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;x and y are equal&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="While-Statement"><a href="#While-Statement" class="headerlink" title="While Statement"></a>While Statement</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">10</span>:</span><br><span class="line">     <span class="built_in">print</span>(count)</span><br><span class="line">     count += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>The <strong>break</strong> statement terminates the loop containing it.</p>
<p>The <strong>continue</strong> statement is used to skip the rest of the code inside a loop for the current iteration only. </p>
<h2 id="For-loop"><a href="#For-loop" class="headerlink" title="For loop"></a>For loop</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># output 1 3 7 10</span></span><br></pre></td></tr></table></figure>

<h2 id="range-function"><a href="#range-function" class="headerlink" title="range function"></a>range function</h2><p>for loop with range() function.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output 0 to 4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output 10 to 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p>range() function generate a sequence of numbers  </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>(start, stop, step)</span><br></pre></td></tr></table></figure>

<h2 id="Pass-statement"><a href="#Pass-statement" class="headerlink" title="Pass statement"></a>Pass statement</h2><p><code>pass</code> statement does nothing. It is usally used when we have a loop or function that is not implemented yet.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h1 id="List-Tuple-and-Dictionary"><a href="#List-Tuple-and-Dictionary" class="headerlink" title="List, Tuple and Dictionary"></a>List, Tuple and Dictionary</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul>
<li>ordered list</li>
<li>use [index] to get the item in the list</li>
<li>if the index is negative, then it will count from the right instead of left</li>
<li>use in operator to check if an item is in the list</li>
<li>use len() function to get the string length</li>
<li>use append method to append item to a list</li>
</ul>
<p>see <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists">https://docs.python.org/3/tutorial/datastructures.html#more-on-lists</a> for all list operations</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">empytList = []    <span class="comment"># empty list</span></span><br><span class="line"></span><br><span class="line">people = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(people[<span class="number">0</span>])    <span class="comment"># =&gt; Alice</span></span><br><span class="line">people[<span class="number">1</span>] = <span class="string">&quot;Ted&quot;</span>    <span class="comment"># =&gt; change list item value</span></span><br><span class="line"></span><br><span class="line">people.append(<span class="string">&quot;Cathy&quot;</span>) <span class="comment"># append new element</span></span><br><span class="line">people.remove(<span class="string">&quot;Cathy&quot;</span>) <span class="comment"># remove element</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Use List as Stack</strong><br></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">stack = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">stack.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(stack.pop())    <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>

<p><strong>Queue</strong><br><br>Using list as Queue is not efficient. Use <code>collections.deque</code> because it has fast appends and pops at both ends.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">queue = deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">queue.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(queue.popleft())    <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>


<h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><p>Tuple - tuple is like an immutable list.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numbers = (<span class="number">2</span>, <span class="number">4</span> ,<span class="number">6</span> ,<span class="number">8</span>)</span><br><span class="line">numbers[<span class="number">0</span>]     <span class="comment"># print 2</span></span><br><span class="line">numbers[<span class="number">1</span>:<span class="number">3</span>]   <span class="comment"># print (4, 6)</span></span><br></pre></td></tr></table></figure>

<h2 id="Dicutionary"><a href="#Dicutionary" class="headerlink" title="Dicutionary"></a>Dicutionary</h2><p>Dictionary - like a Map, it stores key-value pairs. Order doesn’t matter for a dictionary.</p>
<p>see <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">https://docs.python.org/3/tutorial/datastructures.html#dictionaries</a> for all dictionary operations</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">employees = &#123; <span class="string">&quot;alice&quot;</span>: <span class="string">&quot;developer&quot;</span>, <span class="string">&quot;bob&quot;</span>: <span class="string">&quot;sales&quot;</span> &#125;</span><br><span class="line">employees[<span class="string">&quot;alice&quot;</span>]            <span class="comment"># output &#x27;developer&#x27;</span></span><br><span class="line">employees[<span class="string">&quot;alice&quot;</span>] = <span class="string">&quot;CEO&quot;</span>    <span class="comment"># sets value of &#x27;alice&#x27; to be &#x27;CEO&#x27;</span></span><br><span class="line">employees.keys()              <span class="comment"># dict_keys([&#x27;alice&#x27;, &#x27;bob&#x27;])</span></span><br><span class="line">employees.values()            <span class="comment"># dict_values([&#x27;CEO&#x27;, &#x27;sales&#x27;])</span></span><br><span class="line"><span class="keyword">del</span> employees[<span class="string">&quot;alice&quot;</span>]        <span class="comment"># delete key &quot;alice&quot;</span></span><br><span class="line">employees[<span class="string">&quot;abc&quot;</span>]              <span class="comment"># KeyError: &#x27;abc&#x27;</span></span><br><span class="line">employees.get(<span class="string">&quot;abc&quot;</span>)          <span class="comment"># None</span></span><br></pre></td></tr></table></figure>


<h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><p>Functions are defined using ‘def’</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>):</span><br><span class="line">     <span class="keyword">return</span> num1 + num2</span><br><span class="line"> </span><br><span class="line">add(<span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># =&gt; 5</span></span><br></pre></td></tr></table></figure>

<p>Python supports multiple return values.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">num1, num2</span>):</span><br><span class="line">     <span class="keyword">return</span> num1+num2, num1-num2</span><br><span class="line"></span><br><span class="line">x,y = cal(<span class="number">10</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>


<h1 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h1><p>By default, files are open in reading mode. modes are ‘r’, ‘w’, ‘x’(exclusive creation), ‘a’, ‘b’, ‘+’(reading and writing).</p>
<p>read file and write file.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># write file</span></span><br><span class="line">myfile = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">myfile.write(<span class="string">&quot;ABC\n&quot;</span>)</span><br><span class="line">myfile.write(<span class="string">&quot;DEF\n&quot;</span>)</span><br><span class="line">myfile.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># read file</span></span><br><span class="line">myfile = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">content = myfile.read()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line">myfile.close()</span><br></pre></td></tr></table></figure>

<br>
With statement
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;sample.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> myFile:</span><br><span class="line">    myFile.write(<span class="string">&quot;ABC\n&quot;</span>)</span><br><span class="line">    myFile.write(<span class="string">&quot;DEF\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;sample.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> myFile:</span><br><span class="line">    <span class="built_in">print</span>(myFile.read())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Read file line by line</strong><br></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f: </span><br><span class="line">    <span class="built_in">print</span>(line.strip())</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>Reference:</p>
<ul>
<li><a href="https://www.programiz.com/python-programming/file-operation">Python Tutorial - File operation</a></li>
</ul>
<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p>You can assign attributes to an Object. functions defined in an class should have a ‘self’<br>reference to the instance by convention. It can be named differently but not recommended.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.sound)</span><br><span class="line"></span><br><span class="line">animal = Animal()</span><br><span class="line">animal.sound = <span class="string">&quot;...&quot;</span></span><br><span class="line">animal.speak()</span><br></pre></td></tr></table></figure>


<p><strong>init method</strong><br><br>the init method is <strong>init</strong>(two underscore characters, followed by init, and then two more underscores)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sound</span>):</span><br><span class="line">    self.sound = sound</span><br></pre></td></tr></table></figure>

<p><strong>toString method</strong><br><br><strong>str</strong> is supposed to return a string representation of an object.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Animal&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>Inheritance</strong><br><br>syntax</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseClass</span>:</span><br><span class="line">  Body of base <span class="keyword">class</span></span><br><span class="line"><span class="title class_">class</span> DerivedClass(BaseClass):</span><br><span class="line">  Body of derived <span class="keyword">class</span></span><br></pre></td></tr></table></figure>

<p>Sample</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.sound)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;meow&quot;</span>)</span><br><span class="line"></span><br><span class="line">cat = Cat()</span><br><span class="line">cat.speak()</span><br></pre></td></tr></table></figure>



<h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><p>A module is a file containing Python definitions and statements. The file name is the module name with the suffix .py appended. </p>
<p>A module can contain executable statements as well as function definitions.</p>
<p>calc.py file defines module calc with two functions</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>):</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subtract</span>(<span class="params">num1, num2</span>):</span><br><span class="line">    <span class="keyword">return</span> num1 - num2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Import calc module and use its functions</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calc</span><br><span class="line"><span class="built_in">print</span>(calc.add(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(calc.subtract(<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p><strong>Importing build-in Module</strong><br></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import a math module</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">16</span>))</span><br></pre></td></tr></table></figure>

<p><strong>from … import …</strong><br><br>import specific functions from a module</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil, floor</span><br><span class="line"><span class="built_in">print</span>(ceil(<span class="number">3.7</span>))   <span class="comment"># =&gt; 4.0</span></span><br><span class="line"><span class="built_in">print</span>(floor(<span class="number">3.7</span>))  <span class="comment"># =&gt; 3.0</span></span><br></pre></td></tr></table></figure>

<p>import functions and datatypes</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple, deque</span><br></pre></td></tr></table></figure>

<p>**from … import * **<br><br>import all functions in a module, not recommended</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">16</span>))</span><br></pre></td></tr></table></figure>


<h1 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h1><p>A package is a collection of related python modules. A Package must contain a special file <strong>__init__.py</strong>. The initialization code in <strong>__init__.py</strong> will be executed when package is imported. You will usually see import statements in <strong>__init__.py</strong> file.</p>
<h1 id="Install-package-using-pip"><a href="#Install-package-using-pip" class="headerlink" title="Install package using pip"></a>Install package using pip</h1><p>Install an individual package globally in a Mac</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python3 -m pip install Flask</span><br></pre></td></tr></table></figure>

<p>If you have multiple packages to install, you can create a requirements.txt file with a list of packages to install.</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Flask==1.1.1</span><br></pre></td></tr></table></figure>

<p>run the following command to install packages</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python3 -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>uninstall package</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python3 -m pip uninstall Flask</span><br></pre></td></tr></table></figure>

<h1 id="Virtual-Environment"><a href="#Virtual-Environment" class="headerlink" title="Virtual Environment"></a>Virtual Environment</h1><p>A virtual environment is a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages.</p>
<p>Create a virtual environment</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">virtualenv &lt;folder_name&gt;</span><br></pre></td></tr></table></figure>

<p>we usually create a virtual environment in the project folder. The virtual environment folder is usually named ‘.venv’</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure>

<p>Activate the virtual environment</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure>

<p>To confirm the virtual environment is activated, check the location of your Python interpreter:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> python</span><br></pre></td></tr></table></figure>

<p>To install packages in the virtual environment</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python3 -m pip install colorama</span><br></pre></td></tr></table></figure>

<p>now you can import the package in your python script</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> Fore</span><br><span class="line"><span class="built_in">print</span>(Fore.RED + <span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>To Deactivate the virtual environment</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>


<h1 id="Main-method"><a href="#Main-method" class="headerlink" title="Main method"></a>Main method</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in main method&quot;</span>) <span class="comment"># =&gt; in main method</span></span><br></pre></td></tr></table></figure>
<p>The above code snippe is used quite often. It checks if a module is being imported or not.</p>
<p>In other words, the code within the ‘if’ block will be executed only when the code runs directly. Here ‘directly’ means ‘not imported’.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.programiz.com/python-programming/first-program">Python Tutorial</a></li>
<li><a href="https://realpython.com/python-modules-packages/">Python Modules and Packages – An Introduction by John Sturtz</a></li>
<li><a href="https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/">Install packagess using virtual Environment</a></li>
<li><a href="https://learn.microsoft.com/en-us/shows/intro-to-python-development/?wt.mc_id=python-c9-niner">Python for Beginners Tutorial Series | Microsoft Learn</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Redis Basics</title>
    <url>/Others/Redis-Basics/</url>
    <content><![CDATA[<p>Redis is an in-memory key-value store. </p>
<span id="more"></span>

<p>Redis use case</p>
<ul>
<li>Cache data</li>
<li>User session</li>
</ul>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>Download, extract and compile Redis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br><span class="line">$ tar xzf redis-5.0.3.tar.gz</span><br><span class="line">$ cd redis-5.0.3</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>

<p>The binaries are located at the src directory. To start the server:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./src/redis-server &amp;</span><br></pre></td></tr></table></figure>
<p>default port is 6379</p>
<p>To start a Redis CLI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./src/redis-cli</span><br></pre></td></tr></table></figure>

<p>To test Redis using CLI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br></pre></td></tr></table></figure>


<p>There is also a <a href="https://hub.docker.com/_/redis">Docker Image</a> for Redis you can use.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --rm -p 6379:6379 --name redis-demo redis</span><br></pre></td></tr></table></figure>

<p>You can then get into the container using bash or sh command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it redis-demo bash</span><br></pre></td></tr></table></figure>

<p>Redis container has installed <code>redis-cli</code> you can use to interact with redis.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># redis-cli</span><br></pre></td></tr></table></figure>

<h1 id="Redis-Keys"><a href="#Redis-Keys" class="headerlink" title="Redis Keys"></a>Redis Keys</h1><p>You can use any binary sequence as a key, meaning you can use string or even JPEG file. Maximum key size is 512M.</p>
<p>Try to stick with a schema for the key. convention is to use colon(:). For Instance “user:100”, “user:100:password”. for multi-words key, use dots. comment:1234:replay.to”</p>
<h2 id="KEYS"><a href="#KEYS" class="headerlink" title="KEYS"></a>KEYS</h2><p><a href="https://redis.io/commands/keys">KEYS command</a> Returns all keys matching pattern.</p>
<p>show keys matching pattern</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; KEYS *name*</span><br><span class="line">1) &quot;lastname&quot;</span><br><span class="line">2) &quot;firstname&quot;</span><br></pre></td></tr></table></figure>

<p>show all keys</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; KEYS *</span><br><span class="line">1) &quot;lastname&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">3) &quot;firstname&quot;</span><br></pre></td></tr></table></figure>

<h2 id="DEL"><a href="#DEL" class="headerlink" title="DEL"></a>DEL</h2><p>Use <a href="https://redis.io/commands/del">DEL Command</a> to delete a key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; DEL mykey</span><br></pre></td></tr></table></figure>

<h2 id="TYPE"><a href="#TYPE" class="headerlink" title="TYPE"></a>TYPE</h2><p>Use <a href="https://redis.io/commands/type">TYPE Command</a> to check the type of a key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; TYPE firstname</span><br></pre></td></tr></table></figure>

<p>The return type can be “string”, “hash”, “list”, “set” or “zset”.</p>
<h1 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>The simpliest data structure</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SET site:about &quot;this is my site&quot;</span><br><span class="line">OK</span><br><span class="line">&gt; GET site:about</span><br><span class="line">&quot;this is my site&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>data type to store objects.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; HSET books:helloredis title &quot;hello redis&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">&gt; HSET books:helloredis price  33.4</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">&gt; HGET books:helloredis title</span><br><span class="line">&quot;hello redis&quot;</span><br></pre></td></tr></table></figure>

<p><a href="https://redis.io/commands/hgetall">HGETALL</a> Command Returns all fields and values of the hash stored at key. In the return value, every field name is followed by its value, so the length of the reply is twice the size of the hash.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; HGETALL books:helloredis</span><br><span class="line">1) &quot;title&quot;</span><br><span class="line">2) &quot;hello redis&quot;</span><br></pre></td></tr></table></figure>

<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>An array of values.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; LPUSH books:helloredis:authors &#x27;alice&#x27; &#x27;bob&#x27;</span><br><span class="line">(integer) 2</span><br><span class="line"></span><br><span class="line">&gt; LRANGE books:helloredis:authors 0 10</span><br><span class="line">1) &quot;bob&quot;</span><br><span class="line">2) &quot;alice&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>unordered collection of values</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SADD books:helloredis:tags nosql in-memory</span><br><span class="line">(integer) 2</span><br><span class="line"></span><br><span class="line">&gt; SMEMBERS books:helloredis:tags</span><br><span class="line">1) &quot;in-memory&quot;</span><br><span class="line">2) &quot;nosql&quot;</span><br></pre></td></tr></table></figure>


<p>You can use <code>SETEX</code> command to set timeout in seconds</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SETEX mykey 10 &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">redis:6379&gt; TTL mykey</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure>

<h2 id="Sorted-Set"><a href="#Sorted-Set" class="headerlink" title="Sorted Set"></a>Sorted Set</h2><p>values are associated with a score. score is used for sorting.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; ZADD tags 1 redis</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">&gt; ZADD tags 3 nosql</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">&gt; ZADD tags 2 it</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">&gt; ZRANGE tags 0 10</span><br><span class="line">1) &quot;redis&quot;</span><br><span class="line">2) &quot;it&quot;</span><br><span class="line">3) &quot;nosql&quot;</span><br></pre></td></tr></table></figure>

<h1 id="Pub-x2F-Sub"><a href="#Pub-x2F-Sub" class="headerlink" title="Pub&#x2F;Sub"></a>Pub&#x2F;Sub</h1><p>Redis supports Pub&#x2F;Sub. senders(publishers) can send messages to specific receivers(subscribers).</p>
<p>To subscribe to a channel</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; subscribe foo</span><br></pre></td></tr></table></figure>

<p>To publish a message to foo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; publish foo &quot;Hello Redis&quot;</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>

<h1 id="Other-Commands"><a href="#Other-Commands" class="headerlink" title="Other Commands"></a>Other Commands</h1><h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h2><p><a href="https://redis.io/commands/monitor">MONITOR</a> is a debugging command that streams back every command processed by the Redis server. It can help in understanding what is happening to the database.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; monitor</span><br><span class="line">1339518083.107412 [0 127.0.0.1:60866] &quot;keys&quot; &quot;*&quot;</span><br><span class="line">1339518087.877697 [0 127.0.0.1:60866] &quot;dbsize&quot;</span><br><span class="line">1339518090.420270 [0 127.0.0.1:60866] &quot;set&quot; &quot;x&quot; &quot;6&quot;</span><br><span class="line">1339518096.506257 [0 127.0.0.1:60866] &quot;get&quot; &quot;x&quot;</span><br><span class="line">1339518099.363765 [0 127.0.0.1:60866] &quot;del&quot; &quot;x&quot;</span><br><span class="line">1339518100.544926 [0 127.0.0.1:60866] &quot;get&quot; &quot;x&quot;</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://redis.io/documentation">Redis Documentation</a></li>
<li><a href="https://redis.io/topics/pubsub">Pub&#x2F;Sub Documentation</a></li>
<li><a href="https://redis.io/commands">Redis Commands</a></li>
<li><a href="https://www.javatpoint.com/redis-tutorial">Javatpoint Redis tutorial</a></li>
</ul>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Synchronization and Blocking</title>
    <url>/Others/Synchronization-and-Blocking/</url>
    <content><![CDATA[<p>Synchronous vs Asynchronous and Blocking vs Non-Blocking</p>
<span id="more"></span>

<p>For example, A calls B.</p>
<p>Synchronous&#x2F;Asynchronous focus on how B passes result to A</p>
<p><strong>Synchronous</strong> - A keeps waiting for the result from B. A and B are Synchronous</p>
<p><strong>Asynchronous</strong> - B returns immediately. A does not wait for the result from B. When the result is ready. A will be notified. A and B are Asynchronous in this case.</p>
<p>Blocking&#x2F;Non-Blocking focus on A’s status</p>
<p><strong>Blocking</strong> - A keeps waiting for the reply from B. A is Blocking.</p>
<p><strong>Non-Blocking</strong> - B returns immediately. A does not have to wait for the reply from B. A is Non-Blocking. A may check periodically to see if result is ready OR A will get notified by B when result is ready.</p>
<p>Synchronous Blocking operations are the simplest and most common. Java’s InputStream.read() is a synchronous blocking operation.</p>
<p>Asynchronous Non-Blocking operations are widely used in Node.js. See how Node.js reads file using Asynchronous Non-Blocking method.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/file.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>Concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim</title>
    <url>/Others/Vim/</url>
    <content><![CDATA[<p>Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient.</p>
<span id="more"></span>


<h1 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h1><p><strong>h</strong> - move cursor left<br><strong>j</strong> - move cursor down<br><strong>k</strong> - move cursor up<br><strong>l</strong> - move cursor right<br><strong>10j</strong> - move cursor 10 lines down</p>
<hr>
<p><strong>w</strong> - jump forward to the next word<br><strong>W</strong> - jump forward to the next word(word can conrtain punctuation)<br><strong>3w</strong> - jump forward 3 words<br><strong>b</strong> - jump backward to the start of the previous word<br><strong>3b</strong> - jump backward 3 words<br><strong>e</strong> - jump forward to the end of a word<br><strong>E</strong> - jump forward to the end of a word(word can contain punctuation)</p>
<hr>
<p><strong>0</strong> - jump to beggining of the line<br><strong>^</strong> - jump to first non-whitespace character of the current line<br><strong>$</strong> - jump to end of the line</p>
<hr>
<p><strong>:20</strong> - jump to line 20<br><strong>20G</strong> or <strong>20gg</strong> - jump to line 20<br><strong>gg</strong> - jump to first line of the file<br><strong>G</strong> - jump to last line of the file</p>
<hr>
<p><strong>fh</strong> - jump to next ‘h’ character. f stands for “find**<br><strong>Fh</strong> - jump to the previous ‘h’ character<br><strong>%</strong> - jump to a matching parenthesis</p>
<hr>
<p><strong>Ctrl-U</strong> - scroll up half a screen of text<br><strong>Ctrl-D</strong> - scroll down half a screen of text<br><strong>Ctrl-F</strong> - scroll a whole screen forward<br><strong>Ctrl-B</strong> - scroll a whole screen backward</p>
<h1 id="Edit"><a href="#Edit" class="headerlink" title="Edit"></a>Edit</h1><p><strong>i</strong> - insert before current character, then enter insert mode<br><strong>I</strong> - insert atthe first non-whitespace character of the line, then enter insert mode<br><strong>a</strong> - insert after current character(append, then enter insert mode<br><strong>A</strong> - insert at the end of the line, then enter insert mode<br><strong>o</strong> - insert a line below the cursor, then enter insert mode<br><strong>O</strong> - insert a line above the cursor, then enter insert mode</p>
<p><strong>x</strong> - delete the current character<br><strong>ciw</strong> - change inner word<br><strong>cw</strong> - change word<br><strong>r</strong> - replace a single character<br><strong>diw</strong> - delete inner word<br><strong>.</strong> - repeat last command</p>
<h1 id="Search-and-Replace"><a href="#Search-and-Replace" class="headerlink" title="Search and Replace"></a>Search and Replace</h1><p><strong>&#x2F;pattern</strong> - search for pattern<br><strong>?pattern</strong> - search backward for pattern<br><strong>n</strong> - repeat search in same direction<br><strong>N</strong> - repeat search in opposite direction<br><strong>:%s&#x2F;old&#x2F;new&#x2F;g</strong> - replace all old with new throughout file, no confirmation<br><strong>:%s&#x2F;old&#x2F;new&#x2F;gc</strong> - replace all old with new throughout file with confirmation. ‘y’ to replace, ‘n’ to skip, ‘q’ to quit</p>
<h1 id="Copy-and-Paste"><a href="#Copy-and-Paste" class="headerlink" title="Copy and Paste"></a>Copy and Paste</h1><p>You can yarn(copy) and paste in Visual mode<br><strong>y</strong> - yank. this is copying text<br><strong>yy</strong> - yank(copy) the current line<br><strong>3yy</strong> - yank(copy) 3 lines<br><strong>p</strong> - paste after the cursor<br><strong>P</strong> - paste before the cursor<br><strong>x</strong> - delete(cut) the character after the cursor<br><strong>X</strong> - delete(cut) the character before the cursor<br><strong>dd</strong> - delete(cut) a line<br><strong>2dd</strong> - delete(cut) two lines<br><strong>dw</strong> - delete(cut) a world</p>
<h1 id="Undo-and-Redu"><a href="#Undo-and-Redu" class="headerlink" title="Undo and Redu"></a>Undo and Redu</h1><p><strong>u</strong> - - undo<br><strong>Crtl-R</strong> - redo</p>
<h1 id="Mode-Switch"><a href="#Mode-Switch" class="headerlink" title="Mode Switch"></a>Mode Switch</h1><p><strong>i</strong> - enter insert mode<br><strong>v</strong> - enter character-wise visual mode. this is for selecting characters.<br><strong>V</strong> - enter line-wise visual mode<br><strong>Ctrl+v</strong> - enter block-wise visual mode. This is for selecting on “Columns” and “rows”<br><strong>:</strong> - enter command mode<br><strong>Esc</strong> - enter normal mode from insert or replace mode<br><strong>Esc Esc</strong> - enter to normal mode from command or visual mode</p>
<p>Note that the mode will be display on the bottom left of your vim window.</p>
<h1 id="Open-and-Close-Files"><a href="#Open-and-Close-Files" class="headerlink" title="Open and Close Files"></a>Open and Close Files</h1><p><strong>:w</strong> - save the current file<br><strong>:q</strong> - close the current file<br><strong>:wq</strong> - save the current file then close<br><strong>ZZ</strong> - same as :wq, save the current file then close<br><strong>:x</strong> - same as :wq, save the current file then close<br><strong>:q!</strong> -close the current file without saving</p>
<h1 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h1><p><strong>tabnew</strong> - open a file in new tab<br><strong>gt</strong> or <strong>:tabn</strong> - new tab<br><strong>gT</strong> or <strong>:tabp</strong> - previous tab<br><strong>3gt</strong> - go to tab number 3</p>
<h1 id="Setting-Options"><a href="#Setting-Options" class="headerlink" title="Setting Options"></a>Setting Options</h1><p>To enable an option for an individual file, use <code>:set</code> to set the option. To permanently enable an option, write the options in ~&#x2F;.vimrc file without the colon(:) before the set command.</p>
<p>The most useful commons are setting line numbers. You can use <code>set number</code> to enable line number. To disable, use <code>set nonumber</code>. There is also option to use relative number.<br><strong>set number</strong> or <strong>set nu</strong> - show line number<br><strong>set relativenumber</strong> or <strong>set rnu</strong> - use relative number<br><strong>set nonu</strong> - hide line number<br><strong>set norelativenumber</strong> or <strong>setnornu</strong> - disable relative number</p>
<p>Common options can be found in <a href="https://www.shortcutfoo.com/blog/top-50-vim-configuration-options/#:~:text=The%20%E2%80%9Cvimrc%E2%80%9D%20(Vim%20resource,%2F_vimrc%E2%80%9D%20for%20Windows%20users.">Top 50 Vim Configuration Options</a></p>
<p>My ~&#x2F;.vimrc file looks like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set nu</span><br><span class="line">syntax on</span><br><span class="line">set cursorline</span><br><span class="line">colorscheme slate</span><br></pre></td></tr></table></figure>

<h1 id="Vim-Tips-and-Tricks"><a href="#Vim-Tips-and-Tricks" class="headerlink" title="Vim Tips and Tricks"></a>Vim Tips and Tricks</h1><h2 id="Use-with-VS-Code"><a href="#Use-with-VS-Code" class="headerlink" title="Use with VS Code"></a>Use with VS Code</h2><p>VS Code provides a Vim extension that allows you to use vim within VS Code.</p>
<p>You can add the following settings. This will allow vim to use system clipboard and use a better color for highlighting search.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;vim.usesystemclipboard&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;vim.searchhighlightcolor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffc438&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;vim.searchhighlighttextcolor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="View-Command"><a href="#View-Command" class="headerlink" title="View Command"></a>View Command</h2><p>The view command starts the vi full-screen editor in read-only mode. The read-only mode is only advisory to prevent accidental changes to the file. </p>
<h2 id="Comment-Multiple-Lines"><a href="#Comment-Multiple-Lines" class="headerlink" title="Comment Multiple Lines"></a>Comment Multiple Lines</h2><p>Fist move the cursor to the first character to comment out.</p>
<p>Then enter block visual mode using <code>Ctrl + V</code>. </p>
<p>Move cursor to the last line you want to comment out.</p>
<p>Type <code>Shift + I</code> to edit the first character. </p>
<p>Enter <code>#</code> or <code>//</code> depending on the programming language. Type <code>x</code> to uncomment.</p>
<p>Type <code>Esc</code> to exit visual mode.</p>
<h1 id="Reference-and-resources"><a href="#Reference-and-resources" class="headerlink" title="Reference and resources"></a>Reference and resources</h1><ul>
<li><a href="https://www.vim.org/">vim.org</a></li>
<li><a href="http://vimdoc.sourceforge.net/">Vim documentation</a></li>
<li><a href="https://vim.rtorr.com/">Vim Cheat Sheet</a></li>
<li><a href="https://dev.to/iggredible/mastering-visual-mode-in-vim-15pl">Mastering Visual Mode in Vim</a></li>
<li><a href="https://youtu.be/wlR5gYd6um0">Mastering the Vim Language</a></li>
<li><a href="https://unix.stackexchange.com/questions/120615/how-to-comment-multiple-lines-at-once">How to comment multiple lines at once</a></li>
</ul>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Set up a new hexo blog</title>
    <url>/Others/set-up-a-new-hexo-blog/</url>
    <content><![CDATA[<p>setting up a new hexo blog and deploy to github pages.</p>
<span id="more"></span> 
<h1 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h1><ul>
<li>Install Hexo-cli <code>npm install hexo-cli -g</code></li>
<li>Get help - <code>hexo help</code></li>
<li>create a blog <code>hexo init blog</code></li>
<li>run <code>npm install</code> to install dependencies</li>
<li>create a new post <code>hexo new post &quot;Post Title&quot;</code><ul>
<li>create a draft <code>hexo new draft &quot;Post Title&quot;</code></li>
<li>turn a draft into post <code>hexo publish &quot;Post Title&quot;</code></li>
</ul>
</li>
<li>run a local server <code>hexo server</code><ul>
<li>to preview draft <code>hexo server --draft</code></li>
<li>add <code>-o</code> option to immediately open the server url in your default web browser.</li>
</ul>
</li>
<li>Remove generated files and cache <code>hexo clean</code></li>
<li>generate static files <code>hexo generate</code></li>
<li>deploy blog <code>hexo deploy -g</code></li>
</ul>
<p>Hexo Documentation</p>
<ul>
<li><a href="https://hexo.io/docs/">Hexo Docs</a></li>
<li><a href="https://hexo.io/docs/commands">Hexo commands</a></li>
</ul>
<h2 id="Config-URL"><a href="#Config-URL" class="headerlink" title="Config URL"></a>Config URL</h2><p>After installing Hexo there are many configurations you can set to customize your blog. You can customize the config in <code>_config.yml</code> file.</p>
<p>The default permalink is :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;. It is dependent on the date and title. A better way is to change<br>the permalink to use title only</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span></span><br><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure>

<h2 id="Config-Language"><a href="#Config-Language" class="headerlink" title="Config Language"></a>Config Language</h2><p>language can be set in <code>_config.yml</code>.  Default is english</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: en</span><br></pre></td></tr></table></figure>

<h2 id="Github-Pages-Deployment"><a href="#Github-Pages-Deployment" class="headerlink" title="Github Pages Deployment"></a>Github Pages Deployment</h2><p>see one-command Deployment documentation <a href="https://hexo.io/docs/one-command-deployment">https://hexo.io/docs/one-command-deployment</a></p>
<p>install hexo git deployer plugin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>sample config</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/user/user.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h2 id="Generate-read-more"><a href="#Generate-read-more" class="headerlink" title="Generate read more"></a>Generate read more</h2><p>To create summary for a post. add <code>&lt;!-- more --&gt;</code></p>
<p>You can also enable automatically Excerpt, but it is not recommended.</p>
<h2 id="Insert-Image"><a href="#Insert-Image" class="headerlink" title="Insert Image"></a>Insert Image</h2><p>You can use the image path. path is relative to _posts directory. There are a couple of ways to do</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/image/path/image.jpg&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/image/path/image.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>you can create a directory with the same name as the post name without the extension, then insert the image into that directory. That way you don’t need to include the image path</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="Commenting-with-Disqus"><a href="#Commenting-with-Disqus" class="headerlink" title="Commenting with Disqus"></a>Commenting with Disqus</h2><p>First you need to sign up in Disqus and create a site for the blog. Then enable Disqus in themes&#x2F;next&#x2F;_config.yml. You can get the site’s short name from Disqus.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="string">your-short-name-here</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>If you want to disable comment in a post&#x2F;page. add <code>comments: false</code> to the <a href="https://hexo.io/docs/front-matter.html">front-matter</a></p>
<hr>

<h1 id="Next-Theme"><a href="#Next-Theme" class="headerlink" title="Next Theme"></a>Next Theme</h1><p><a href="https://github.com/iissnan/hexo-theme-next">Next Theme Homepage</a></p>
<h2 id="Install-Next-theme"><a href="#Install-Next-theme" class="headerlink" title="Install Next theme"></a>Install Next theme</h2><p>The easiest way to install Next theme is to clone the theme into themes directory</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git</span><br></pre></td></tr></table></figure>

<p>then change the theme in _config.next.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-next</span></span><br></pre></td></tr></table></figure>


<h2 id="select-schemes"><a href="#select-schemes" class="headerlink" title="select schemes"></a>select schemes</h2><p>select the scheme you like</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line"><span class="comment"># scheme: Gemini</span></span><br></pre></td></tr></table></figure>


<h2 id="Add-Tags-Page"><a href="#Add-Tags-Page" class="headerlink" title="Add Tags Page"></a>Add Tags Page</h2><p>add tags page to the blog</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>

<p>Edit source&#x2F;tags&#x2F;index.md page</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>Then uncomment tags menu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  tags: /tags/ || tags</span><br></pre></td></tr></table></figure>

<h2 id="Add-Categories-Page"><a href="#Add-Categories-Page" class="headerlink" title="Add Categories Page"></a>Add Categories Page</h2><p>add categories page to the blog. This is similar to adding tags page.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>

<p>Edit source&#x2F;categories&#x2F;index.md page</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>then uncomment categories menu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">    categories: /categories/ || th</span><br></pre></td></tr></table></figure>


<h2 id="Enable-Local-Search"><a href="#Enable-Local-Search" class="headerlink" title="Enable Local Search"></a>Enable Local Search</h2><p>see <a href="https://theme-next.js.org/docs/third-party-services/search-services">https://theme-next.js.org/docs/third-party-services/search-services</a></p>
<ol>
<li><p>install <a href="https://github.com/theme-next/hexo-generator-searchdb">hexo-generator-searchdb</a> plugin. This plugin is used to generate the site’s search data.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>configure <code>_config.yml</code>. Add the following: </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable local search in <code>_config.next.yml</code>\</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Enable-copy-code-button"><a href="#Enable-copy-code-button" class="headerlink" title="Enable copy code button"></a>Enable copy code button</h2><p>You can enable the button to copy code block in themes&#x2F;_config.yml. </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add copy button on codeblock</span></span><br><span class="line"><span class="attr">copy_button:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://hexo.io/docs/">Hexo Docs</a></li>
<li><a href="https://theme-next.js.org/">Next theme</a></li>
</ul>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Certificate Basics</title>
    <url>/Security/Certificate-Basics/</url>
    <content><![CDATA[<p>Basics about Certificate</p>
<span id="more"></span>

<h1 id="CA"><a href="#CA" class="headerlink" title="CA"></a>CA</h1><p>A <strong>certificate authority</strong> or <strong>certification authority (CA)</strong> is an entity that issues digital certificates. A digital certificate certifies the ownership of a public key by the named subject of the certificate. This allows others (relying parties) to rely upon signatures or on assertions made about the private key that corresponds to the certified public key. A CA acts as a trusted third party—trusted both by the subject (owner) of the certificate and by the party relying upon the certificate. The format of these certificates is specified by the X.509 standard.</p>
<p>Top providers are VeriSign, Digicert, GeoTrust, Comodo, GoDaddy…</p>
<h1 id="Digital-Certificate"><a href="#Digital-Certificate" class="headerlink" title="Digital Certificate"></a>Digital Certificate</h1><p>a <strong>public key certificate</strong>, also known as a <strong>digital certificate</strong> or identity certificate, is an electronic document used to prove the ownership of a public key. The certificate includes information about the key, information about the identity of its owner (called the subject), and the digital signature of an entity that has verified the certificate’s contents</p>
<p>X.509 is a standard defining the format of public key certificates. X.509 certificates are used in many Internet protocols, including TLS&#x2F;SSL, which is the basis for HTTPS[1], the secure protocol for browsing the web.</p>
<p>There are usually 3 types of certificates</p>
<ul>
<li><strong>root certificate</strong> is a self-signed certificate used to sign other certificates. Also sometimes called a trust anchor.</li>
<li><strong>Intermediate certificate</strong> is a certificate used to sign other certificates. An intermediate certificate must be signed by another intermediate certificate, or a root certificate.</li>
<li><strong>End-entity or leaf certificate</strong> is any certificate that cannot be used to sign other certificates. For instance, TLS&#x2F;SSL server and client certificates, email certificates, code signing certificates, and qualified certificates are all end-entity certificates.</li>
</ul>
<p>Certificate from root certificate to end-entity certificate forms a chain call <strong>certificate chain</strong>.</p>
<p>You can view a certificate for a website from Chrome title bar. Here is an example for google.com</p>
<img src="/Security/Certificate-Basics/certificate.png" class="">


<h1 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h1><ul>
<li>Certificate<ul>
<li>Version Number</li>
<li>Serial Number</li>
<li>Signature Algorithm ID</li>
<li>Issuer Name</li>
<li>Validity period<ul>
<li>Not Before</li>
<li>Not After</li>
</ul>
</li>
<li>Subject name</li>
<li>Subject Public Key Info<ul>
<li>Public Key Algorithm</li>
<li>Subject Public Key</li>
</ul>
</li>
<li>Issuer Unique Identifier (optional)</li>
<li>Subject Unique Identifier (optional)</li>
<li>Extensions (optional)<ul>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>Certificate Signature Algorithm</li>
<li>Certificate Signature</li>
</ul>
<p>For sample X.509 certificate see  [certificate example from Wikipedia](Sample X.509 certificates)</p>
<h1 id="Certificate-Fingerprint"><a href="#Certificate-Fingerprint" class="headerlink" title="Certificate Fingerprint"></a>Certificate Fingerprint</h1><p>Certificate Fingerprint is the hash of the whole certificate in der format.</p>
<p>Fingerprint example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MD5:  1B:DE:A8:E3:11:86:FD:89:8C:C1:D3:80:EE:19:D3:A8</span><br><span class="line">SHA1: 2C:77:39:40:F3:25:E2:78:35:1B:94:1E:A5:15:4C:18:24:07:E0:6F</span><br><span class="line">SHA256: C7:35:E7:79:CF:91:27:72:47:D1:44:98:72:90:27:12:08:7E:C1:73:F2:F3:B1:1D:00:29:2C:20:6C:3F:0C:F4</span><br></pre></td></tr></table></figure>


<h1 id="Common-Extensions"><a href="#Common-Extensions" class="headerlink" title="Common Extensions"></a>Common Extensions</h1><p>There are several commonly used filename extensions for certificates.</p>
<ul>
<li>.pem – (Privacy-enhanced Electronic Mail) Base64 encoded DER certificate, enclosed between “—–BEGIN CERTIFICATE—–” and “—–END CERTIFICATE—–”</li>
<li>.cer, .crt, .der – usually in binary DER form, but Base64-encoded certificates are common too</li>
<li>.p7b, .p7c – PKCS#7 SignedData structure without data, just certificate(s) or CRL(s)</li>
<li>.p12 – PKCS#12, may contain certificate(s) (public) and private keys (password protected). PKCS #12 is the successor to Microsoft’s “PFX”</li>
<li>.pfx – PFX, predecessor of PKCS#12 (usually contains data in PKCS#12 format, e.g., with PFX files generated in IIS)</li>
</ul>
<h1 id="Self-signed-vs-CA-signed-certificates"><a href="#Self-signed-vs-CA-signed-certificates" class="headerlink" title="Self-signed vs CA signed certificates"></a>Self-signed vs CA signed certificates</h1><p>Both self-signed and CA signed certificates provide encryption for data in motion. A CA-signed certificate also provides authentication - a level of assurance that the site is what it reports to be, and not an impostor website. </p>
<p>Browser will give warnings for certificate not issued by a CA.</p>
<h1 id="Certificate-Signing-Request"><a href="#Certificate-Signing-Request" class="headerlink" title="Certificate Signing Request"></a>Certificate Signing Request</h1><p>csr extension is for <strong>certificate signing request</strong> file. It is a request sent from an applicant to certificate authority in order to apply for a digital identity certificate. CA creates SSL Certifiate using CSR. see <a href="https://en.wikipedia.org/wiki/Certificate_signing_request">wikipedia for CSR</a>.</p>
<p>Components of CSR are</p>
<ul>
<li>Common Name</li>
<li>Organization</li>
<li>Organization Unit</li>
<li>City&#x2F;Locality</li>
<li>State&#x2F;County&#x2F;Region</li>
<li>Country</li>
<li>Email address</li>
<li>Public Key</li>
</ul>
<p>Reference</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Certificate_authority">Certificate authority</a></li>
<li><a href="https://support.kemptechnologies.com/hc/en-us/articles/202138325-Difference-between-a-self-signed-certificate-and-a-CA-signed-certificateZ">Difference Between A Self-Signed Certificate And A CA-Signed Certificate</a></li>
<li><a href="https://en.wikipedia.org/wiki/Public_key_certificate">Public key certificate - Wikipedia</a></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>OAuth2</title>
    <url>/Security/OAuth2/</url>
    <content><![CDATA[<p>OAuth2 Explained</p>
<span id="more"></span>

<h1 id="OAuth-Overview"><a href="#OAuth-Overview" class="headerlink" title="OAuth Overview"></a>OAuth Overview</h1><p>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner, or by allowing the third-party application to obtain access on its own behalf.</p>
<p>Oauth 2.0 is defined in <a href="https://tools.ietf.org/html/rfc6749">RFC 6749</a></p>
<p>Note that OAuth is an authorization framework. It is not an authentication protocol.</p>
<p>One use case is allowing a photo printing web application to access photo stored in a photo storage application. One way is to give your credentials to the photo printing application. This will give too much power to the photo printing application. It is very risky because the photo printing application may access your photo after printing the photo. If the credentials are leak from the photo printing application and the credentials are used elsewhere, the user’s other accounts are exposed too. A better way is to use OAuth 2.0 to grant temporary access to photo printing application.</p>
<h1 id="Four-Roles"><a href="#Four-Roles" class="headerlink" title="Four Roles"></a>Four Roles</h1><p>OAuth 2.0 defines four roles:</p>
<ul>
<li><strong>resource owner</strong> A user or application that owns the data. A github user or Google user can be a resource owner</li>
<li><strong>client</strong> A client that request access to resources on the resource server. A Web application, User agent or native application can be client.</li>
<li><strong>resource server</strong> The server hosting the protected resources, capable of accepting and responding to protected resource requests using access tokens.</li>
<li><strong>authorization server</strong> The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization.</li>
</ul>
<p>Authorization Server and Resource Server can be the same server or separated.</p>
<h1 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h1><p>OAuth defines two client types, based on their ability to authenticate securely with the authorization server</p>
<ul>
<li>confidential client is capable of maintaining the confidentiality of their credentials(e.g. back-end web server)</li>
<li>public client is incapable of maintaining the condidentiality of their credentials.(e.g. browser-based app)</li>
</ul>
<p>Before using OAuth, the client needs to register with the authorization server.</p>
<p>When registering a client, the client developer SHALL:</p>
<ul>
<li>provide its client redirection URIs </li>
<li>Include any other information required by the authorization server(e.g., application name, website, description, logo image, the acceptance of legal terms).</li>
</ul>
<p>After registration, the authorization server will provide client_id and client_secret to the client.</p>
<h1 id="OAuth-Flows"><a href="#OAuth-Flows" class="headerlink" title="OAuth Flows"></a>OAuth Flows</h1><p>An authorization grant is a credential representing the resource owner’s authorization. There are 4 types of Authorization Grant:</p>
<ul>
<li>Authorization Code</li>
<li>Implicit</li>
<li>Resource Owner Password Credentials</li>
<li>Client Credential</li>
</ul>
<p>Different Authorization grants result in different flows.</p>
<h1 id="Authorization-Code-Flow"><a href="#Authorization-Code-Flow" class="headerlink" title="Authorization Code Flow"></a>Authorization Code Flow</h1><p>This is the most secured and most used flow. Typically used by a web application with a back-end.</p>
<img src="AuthorizationCode.png" />

<p>1 Resource Owner(User) open Client(Web Application)’s page in the browser<br>2 User wants to login via Authorization Server. The login link is provided by the client. User clicks the login link and then user is redirect to Authorization Server. Here is an Example login URL. The response_type parameter is required and must be <strong>code</strong> for Authorization Code flow.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://authorization-server.com/authorize?</span><br><span class="line">  response_type=code</span><br><span class="line">  &amp;client_id=2N3NrUzg7AxWMAOELxx_24hG</span><br><span class="line">  &amp;redirect_uri=https://www.oauth.com/playground/authorization-code.html</span><br><span class="line">  &amp;scope=photo+offline_access</span><br><span class="line">  &amp;state=C4mziU0jkQIq-c3G</span><br></pre></td></tr></table></figure>

<p>The <strong>state</strong> parameter is used to protect against XSRF(Cross-site Request Forgery). Later, the authorization server sends back the state parameter. If the state parameter doesn’t match, someone else initiated the request. The state parameter is optional but highly recommended.</p>
<p>3 User successfully login to the Authorization Server. It can be username&#x2F;password authentication or MFA<br>4 Authorization Server sends a link that can redirect Client app to Authorization Server. This link contains Authorization Code. Example Redirect URI with authorication code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.oauth.com/playground/authorization-code.html?</span><br><span class="line">  state=C4mziU0jkQIq-c3G</span><br><span class="line">  &amp;code=1QwsiJ5o5_3BEfl1n5QqJT5yZygTms3hkB1VIHHS4AEHgRo7</span><br></pre></td></tr></table></figure>

<p>5 The browser redirect the link to Client app<br>6 Client receive the Authorization Code. If state parameter exist, client can validate the state to mitigate CSRF attacks. If the request is valid, client sends a POST request to Authorization Server that contains Authorization Code its client_id and client_secret. Example Post Request</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST https://authorization-server.com/token HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code</span><br><span class="line">  &amp;client_id=2N3NrUzg7AxWMAOELxx_24hG</span><br><span class="line">  &amp;client_secret=W9An-Y0nS8is_pV2oVBPxwRZcQ1l3LU24KwEqz2Qpa9FhNLH</span><br><span class="line">  &amp;redirect_uri=https://www.oauth.com/playground/authorization-code.html</span><br><span class="line">  &amp;code=1QwsiJ5o5_3BEfl1n5QqJT5yZygTms3hkB1VIHHS4AEHgRo7</span><br></pre></td></tr></table></figure>

<p>7 Authorization Server issue an Access Token and an optional Refresh Token to the Client App. Example response body with Access token and refresh token</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">86400</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpvbVm88ClZu1RKvnnn0-7lDRhMGd_fqI_R2imfW-1AVCQ-SoYefGfwMWToDtP1luIyoTxIy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;photo offline_access&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8Ns_B4371QudQR9PlO_75upx&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>8 Client request resource from the Resource Server. The access token will be used in Authorication HTTP Header.<br>9  Resource Server verify the access token provided by the Client App with Authorization Server and verify that the access token has proper scope to access the resource<br>10  After the access token is validated, return the requested resource to Client App<br>11  Display User’s page</p>
<h1 id="Implicit-Flow"><a href="#Implicit-Flow" class="headerlink" title="Implicit Flow"></a>Implicit Flow</h1><p>Implicit Flow is used by public clients. These clients are typically implemented in a browser using Javascript. Examples are React application or Angular applciation. Implicit flow is not as secured as Authorication Code flow. Try to use Authorication Code instead.</p>
<img src="Implicit.png" />

<p>The above sequence diagram doesn’t include interaction with resource server because it is the same as authorization code flow.</p>
<p>Example Request</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://authorization-server.com/authorize?</span><br><span class="line">  response_type=token</span><br><span class="line">  &amp;client_id=2N3NrUzg7AxWMAOELxx_24hG</span><br><span class="line">  &amp;redirect_uri=https://www.oauth.com/playground/implicit.html</span><br><span class="line">  &amp;scope=photo</span><br><span class="line">  &amp;state=vi3DgldxpCIUFoK3</span><br></pre></td></tr></table></figure>
<ul>
<li>response_type is required. value is <em>token</em></li>
<li>client_id isrequired</li>
<li>redirect_uri is optional</li>
<li>scope is optional</li>
<li>state is optional but recommended.</li>
</ul>
<h1 id="Client-Credential-Flow"><a href="#Client-Credential-Flow" class="headerlink" title="Client Credential Flow"></a>Client Credential Flow</h1><p>Used for System to System communication.</p>
<img src="ClientCredentials.png" />

<p>Example Request</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /token HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=client_credentials&amp;</span><br><span class="line">  client_id=iB4Riw198z&amp;</span><br><span class="line">  client_secret=28eThNzbz7&amp;</span><br><span class="line">  scope=read</span><br></pre></td></tr></table></figure>
<ul>
<li>The grant_type parameter is required. Must be <code>client_credentials</code>. </li>
<li>scope is optional</li>
</ul>
<h1 id="Password-Credentials-Flow"><a href="#Password-Credentials-Flow" class="headerlink" title="Password Credentials Flow"></a>Password Credentials Flow</h1><p>This flow is not very common. Usually used for backward compatibility.</p>
<img src="PasswordCredentails.png" />

<p>Example Request</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /token HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=password&amp;</span><br><span class="line">  username=jamessmith&amp;</span><br><span class="line">  password=Mwf5itvGB1&amp;</span><br><span class="line">  client_id=5fODxSi6Ws&amp;</span><br><span class="line">  scope=read</span><br></pre></td></tr></table></figure>
<ul>
<li>The grant_type parameter is required. Must be <code>password</code>. </li>
<li>username and password parameter are also requried. </li>
<li>scope is optional</li>
</ul>
<h1 id="OpenID-Connect"><a href="#OpenID-Connect" class="headerlink" title="OpenID Connect"></a>OpenID Connect</h1><p>OpenID Connect(ODIC) is a simple identity layer on top of the OAuth 2.0 protocol, which allows computing clients to verify the identity of an end-user based on the authentication performed by an authorization server, as well as to obtain basic profile information about the end-user in an interoperable and REST-like manner. In technical terms, OpenID Connect specifies a RESTful HTTP API, using JSON as a data format.</p>
<p>OpenID Connect allows a range of kinds of clients, including Web-based, mobile, and JavaScript clients, to request and receive information about authenticated sessions and end-users. The specification suite is extensible, supporting optional features such as encryption of identity data, discovery of OpenID Providers, and session management.</p>
<p>Since OpenID Connect builds on top of OAuth 2.0. The flow is the same as OAuth2.0.</p>
<p>After Client sends Authorization Code to exchange for access token, OpenID Connect returns access token and an optional refresh token. it also contains <strong>id_token</strong> too.</p>
<p><strong>id_token</strong> is A JWT that contains identity information about the user that is digitally signed by Google. You can use <a href="https://www.jsonwebtoken.io/">https://www.jsonwebtoken.io/</a> to parse a JWT.</p>
<p>Example response from Authorization Server that contains <code>access_token</code> and an <code>id_token</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">  &quot;expires_in&quot;: 86400,</span><br><span class="line">  &quot;access_token&quot;: &quot;E0jbEcCzezAxuyAUYt75qs-gubCo5t1krx9MJLh9CIVcP3PoD4iUIeJMeFjs_8Ho18CUTSEC&quot;,</span><br><span class="line">  &quot;scope&quot;: &quot;openid profile email photo&quot;,</span><br><span class="line">  &quot;id_token&quot;: &quot;eyJraWQiOiJzMTZ0cVNtODhwREo4VGZCXzdrSEtQUkFQRjg1d1VEVGxteW85SUxUZTdzIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJuYXVnaHR5LWhvcnNlQGV4YW1wbGUuY29tIiwibmFtZSI6Ik5hdWdodHkgSG9yc2UiLCJlbWFpbCI6Im5hdWdodHktaG9yc2VAZXhhbXBsZS5jb20iLCJpc3MiOiJodHRwczovL3BrLWRlbW8ub2t0YS5jb20vb2F1dGgyL2RlZmF1bHQiLCJhdWQiOiIyTjNOclV6ZzdBeFdNQU9FTHh4XzI0aEciLCJpYXQiOjE1OTIxNTE2NTUsImV4cCI6MTU5NDc0MzY1NSwiYW1yIjpbInB3ZCJdfQ.ZoPvZPaomdOnnz2GFRGbgaW7PPWIMFDqSBp0gbN4An4a9F-Bc-4_T9EBGV8aGetyjZYAON0gjNV0p0NGFiwettePWKuxBzusuGCEd9iXWWUO9-WTF5e2AGr3_jkg34dbxfiFXy3KgH7m0czm809cMaiZ_ofLYgJHVD8lqMQoWifhoNhpjPqa19Svc3nCHzSYHUgTXQWvA56NmQvyVPh_OM7GMpc6zHopmihJqt3eREof8N-bOd7FL39jeam2-k1TFSDogyJE513aC0OssRADr_TWvtL8xoaPkXM_7bXYs9_7erXmzF9la0hvmOuasieetpLhOvFeoiOJWCU9xhxj4Q&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can try OpenID Connect using <a href="https://www.oauth.com/playground/">OAuth 2.0 Playground</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://tutorials.jenkov.com/oauth2/index.html">OAuth 2.0 Tutorial by Jenkov</a></li>
<li><a href="https://www.oauth.com/playground/">OAuth 2.0 Playground</a></li>
<li><a href="https://www.youtube.com/watch?v=996OiexHze0">OAuth 2.0 and OpenID Connect (in plain English)</a></li>
<li><a href="https://en.wikipedia.org/wiki/OpenID_Connect">OpenID Connect Wikpedia</a></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
  </entry>
  <entry>
    <title>Openssl Usage</title>
    <url>/Security/openssl-usage/</url>
    <content><![CDATA[<p>OpenSSL is a toolkit for TLS and SSL protocols. It is also a general-purpose cryptography library.</p>
<span id="more"></span>

<h1 id="Openssl"><a href="#Openssl" class="headerlink" title="Openssl"></a>Openssl</h1><p>OpenSSL is licensed under an Apache-style license, which basically means that you are free to get and use it for commercial and non-commercial purposes subject to some simple license conditions.</p>
<p>OpenSSL provides:</p>
<ul>
<li>A command line application to perform a wide variety of cryptography tasks, such as creating and handling certificates and related files. OpenSSL commands</li>
<li>A comprehensive and extensive cryptographic library libcrypto.</li>
<li>A library for enabling SSL&#x2F;TLS communications libssl to provide SSL and TLS Protocols support within clients or servers applications.</li>
</ul>
<p>To display openssl version</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl version -a</span><br><span class="line">OpenSSL 1.1.0g  2 Nov 2017</span><br><span class="line">built on: reproducible build, date unspecified</span><br><span class="line">platform: debian-amd64</span><br><span class="line">compiler: gcc </span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>To display summary</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl -help</span><br></pre></td></tr></table></figure>

<p>To display summary for a command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl [command] -help</span><br></pre></td></tr></table></figure>


<h1 id="enc"><a href="#enc" class="headerlink" title="enc"></a>enc</h1><p><strong><a href="https://www.openssl.org/docs/manmaster/man1/enc.html">enc</a></strong> command is used for encryption and decryption. Enc is used for various block and stream ciphers using keys based on passwords or explicitly provided. It can also be used for Base64 encoding or decoding.</p>
<p>Synopsis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -ciphername [options]</span><br></pre></td></tr></table></figure>

<p>You can get a list a ciphers using the following command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -ciphers</span><br></pre></td></tr></table></figure>


<p>Example to encode a file using base64. encryption is the default so no need to include -e option.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -base64 -in file.bin -out file.b64</span><br></pre></td></tr></table></figure>

<p>Example to decode a file using base64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -d -base64 -in file.b64 -out file.bin</span><br></pre></td></tr></table></figure>

<p>Example to encode a file using aes-256. You need to provide a password to do the encryption.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -aes256 -in file.txt -out file.enc</span><br><span class="line">enter aes-256-cbc encryption password:</span><br><span class="line">Verifying - enter aes-256-cbc encryption password:</span><br></pre></td></tr></table></figure>

<h1 id="dgst"><a href="#dgst" class="headerlink" title="dgst"></a>dgst</h1><p><strong><a href="https://www.openssl.org/docs/manmaster/man1/dgst.html">dgst</a></strong> - perform digest operations</p>
<p>Usage: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dgst [options] [file...]</span><br></pre></td></tr></table></figure>

<p>Example to create md5 digest for a file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dgst -md5 file.txt </span><br></pre></td></tr></table></figure>

<p>Example to create sha1 digest for a file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dgst -sha1 -hex file.txt</span><br></pre></td></tr></table></figure>

<p>Example to create sha256 digest for a file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dgst -sha256 -hex file.txt</span><br></pre></td></tr></table></figure>


<h1 id="rand"><a href="#rand" class="headerlink" title="rand"></a>rand</h1><p><strong><a href="https://www.openssl.org/docs/manmaster/man1/rand.html">rand</a></strong> - generate pseudo-random bytes</p>
<p>SYNOPSIS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rand [-help] [-out file] [-rand file...] [-writerand file] [-base64] [-hex] num</span><br></pre></td></tr></table></figure>
<p>The rand command outputs <em>num</em> pseudo-random bytes after seeding the random number generator once. </p>
<p>Example to generate 10 bytes and then display as hex string</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl rand -hex 10</span><br><span class="line">59405a642b9c3041401c</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Example to generate 10 bytes and then print the base64 encoded output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl rand -base64 10</span><br><span class="line">a7tvmW3bCHVUKg==</span><br></pre></td></tr></table></figure>

<p>Example to generate a random key and use it for symmetric encryption.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl rand -base64 128 &gt; key.txt</span><br><span class="line">$ openssl enc -aes-256-cbc -salt -in file.txt -out file.txt.encoded -pass file:key.txt</span><br><span class="line">$ openssl enc -d -aes-256-cbc -in file.txt.encoded -out file.txt.decoded -pass file:key.txt</span><br></pre></td></tr></table></figure>


<h1 id="genrsa"><a href="#genrsa" class="headerlink" title="genrsa"></a>genrsa</h1><p><strong><a href="https://www.openssl.org/docs/manmaster/man1/genrsa.html">genrsa</a></strong> generate an RSA private key. Private and public keys are used in asymmetric encryption. </p>
<p>Example to generate private key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out private.pem 2048 </span><br></pre></td></tr></table></figure>

<p>To secure the private, you can prompt the user to enter a password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -aes256 -passout stdin -out private.pem 1024</span><br></pre></td></tr></table></figure>

<p>Example to generate public key from private key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsa -in private.pem -pubout -out public.pem</span><br></pre></td></tr></table></figure>

<p>Encrypt a file using public key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsautl -encrypt -pubin -inkey public.pem -in file.txt -out file.txt.enc</span><br></pre></td></tr></table></figure>

<p>The data to be encrypted should be small. Otherwise it will throw an error</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl rsautl -encrypt -pubin -inkey public.pem -in file.txt -out file.txt.enc</span><br><span class="line">RSA operation error</span><br><span class="line">140382596690368:error:0406D06E:rsa routines:RSA_padding_add_PKCS1_type_2:data too large for key size:../crypto/rsa/rsa_pk1.c:125:</span><br></pre></td></tr></table></figure>

<p>Decrypt a file using private key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsautl -decrypt -inkey private.pem -in file.txt.encrypted -out file.txt.dec</span><br></pre></td></tr></table></figure>

<p>Note: Do not use public key and private key to encrypt data. To send large data, generate a random symmetric key and encrypt it with RSA cipher(public key). After recipient receive and decrypt the symmetric key. The sender and receiver can use symmetric key to decrypt the message</p>
<h1 id="Create-Self-signed-Certificate"><a href="#Create-Self-signed-Certificate" class="headerlink" title="Create Self-signed Certificate"></a>Create Self-signed Certificate</h1><p>First create private key </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out privateKey.pem 4096</span><br></pre></td></tr></table></figure>
<p>Add <code>-des3</code> option to enter a pass phrase</p>
<p>Generate CSR(certificate signing request) using the private key. If the privateKey contains a pass phrase, you need to enter it. You will need to answsewr a series of questions here.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req -new -key privateKey.pem -out req.csr</span><br></pre></td></tr></table></figure>

<p>Optional: to examine a certificate request, use the following command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req -in req.csr -text</span><br></pre></td></tr></table></figure>

<p>Sign the CSR. -x509 option outputs a self signed certificate instead of a certificate request. If the privateKey contains a pass phrase, you need to enter it here.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -sha256 -days 365 -in req.csr -signkey privateKey.pem -out server.crt</span><br></pre></td></tr></table></figure>

<p>To examine the certificate</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -in server.crt -text -noout</span><br></pre></td></tr></table></figure>


<h1 id="Calculate-fingerprint"><a href="#Calculate-fingerprint" class="headerlink" title="Calculate fingerprint"></a>Calculate fingerprint</h1><p>Certificate Fingerprint is the hash of the der-encoded Certificate.</p>
<p>First convert the certificate to DER format</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -in cert.crt -outform DER -out cert.cer</span><br></pre></td></tr></table></figure>

<p>Then calculate the hash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl dgst -md5 cert.cer</span><br><span class="line">$ openssl dgst -sha1 cert.cer</span><br><span class="line">$ openssl dgst -sha256 cert.cer</span><br></pre></td></tr></table></figure>

<h1 id="Convert-Formats"><a href="#Convert-Formats" class="headerlink" title="Convert Formats"></a>Convert Formats</h1><p>Convert PEM to DER</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -in cert.crt -outform DER -out cert.cer</span><br></pre></td></tr></table></figure>

<p>Convert DER to PEM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -in cert.cer -outform DER -out cert.crt</span><br></pre></td></tr></table></figure>

<p>Convert PEM to PKCS7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl crl2pkcs7 -nocrl -certfile cert.crt -out cert.p7b</span><br></pre></td></tr></table></figure>

<p>Convert PKCS7 to PEM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs7 -in cert.p7b -print_certs -out cert.crt</span><br></pre></td></tr></table></figure>

<p>Convert PEM to PKCS12. You will need a private key and certificate.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -inkey cert.key -in cert.crt -export -out cert.pfx</span><br></pre></td></tr></table></figure>
<p>You will be prompted for key pass phrase and export password</p>
<p>Convert PKCS12 to PEM. the output file combines certificate and private key.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -in cert.pfx -nodes -out cert.combined.crt</span><br></pre></td></tr></table></figure>
<p>You will be prompted for the import password</p>
<p>Reference</p>
<ul>
<li><a href="https://www.openssl.org/">Openssl Homepage</a></li>
<li><a href="https://wiki.openssl.org/index.php/OpenSSL_Overview">Openssl Overview</a></li>
<li><a href="https://gist.github.com/fntlnz/cf14feb5a46b2eda428e000157447309#create-a-certificate-done-for-each-server">self-signed-certificate-with-custom-ca.md</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs/">OpenSSL Essentials by Mitchell Anicas</a></li>
<li><a href="https://devcenter.heroku.com/articles/ssl-certificate-self">Creating a Self-Signed SSL Certificate</a></li>
</ul>
<p>Useful Links</p>
<ul>
<li><a href="https://www.openssl.org/docs/manmaster/man1/">OpenSSL commands</a></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>React Component</title>
    <url>/React/React-Component/</url>
    <content><![CDATA[<p>React Component</p>
<span id="more"></span>
<p>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.</p>
<h1 id="Functional-Component"><a href="#Functional-Component" class="headerlink" title="Functional Component"></a>Functional Component</h1><p>You define a component as a function. The name of the Componet must be CamelCase</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can render the above component using JSX</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Hello</span> name=<span class="string">&quot;Smith&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>You can define a component using ES6 class, but this is not preferred now.</p>
<h1 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h1><ul>
<li>Props is short for “properties.”</li>
<li>A component’s constructor can take <strong>props</strong> as parameter. </li>
<li>props is pass from parent component to child component. In the typical React dataflow, props are the only way that parent components interact with their children. </li>
<li>props is read-only. If you assign a value to property, React will throw an error.</li>
</ul>
<p>Hello Component that uses properties</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can also rewrite the above component using Object Destructuring</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params">&#123;name&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Example to invoke a component with property</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">&#x27;Smith&#x27;</span>, <span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&#123;person.name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="children-property"><a href="#children-property" class="headerlink" title="children property"></a>children property</h2><ul>
<li>children is a special property that contains the content between the opening and closing tags when invoking a component.</li>
</ul>
<p>Example of a component that renders <code>&#123;props.children&#125;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyBold</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// to pass the children to the component</span></span><br><span class="line">&lt;<span class="title class_">MyBold</span>&gt;<span class="title class_">Bob</span> <span class="title class_">Smith</span>&lt;/<span class="title class_">MyBold</span>&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Conditional-Rendering"><a href="#Conditional-Rendering" class="headerlink" title="Conditional Rendering"></a>Conditional Rendering</h1><p>if number is less than or equals 100, then print the number, else print “num greater than 100”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">PrintNum</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>( <span class="built_in">parseInt</span>(props.<span class="property">num</span>) &lt;= <span class="number">100</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>num <span class="symbol">&amp;gt;</span> 100<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Inline If with Logical &amp;&amp; Operator - This is handy for including an element</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> error = <span class="string">&quot;SOME ERROR&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;error &amp;&amp; </span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>Something went wrong<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Inline If-Else with Conditional Operator</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">PrintNum</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">parseInt</span>(props.<span class="property">num</span>) &lt;= <span class="number">100</span>)? <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>props.num<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>: <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>num greater than 100<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>There are many ways to do conditional rendering, please choose the method that fits best.</p>
<h1 id="Rendering-a-List"><a href="#Rendering-a-List" class="headerlink" title="Rendering a List"></a>Rendering a List</h1><p>we can use the <code>map()</code> function to render each element in the list.</p>
<p>Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> students = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">88</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">34</span>, <span class="attr">name</span>: <span class="string">&quot;Zed&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> studentList = students.<span class="title function_">map</span>(<span class="function">(<span class="params">student</span>) =&gt;</span></span><br><span class="line">    (<span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;student.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;student.name&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;studentList&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://reactjs.org/docs/components-and-props.html">Components and Props</a></li>
<li><a href="https://reactjs.org/docs/conditional-rendering.html">Conditional Rendering</a></li>
<li><a href="https://reactjs.org/docs/lists-and-keys.html">Lists and Keys</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React CSS</title>
    <url>/React/React-CSS/</url>
    <content><![CDATA[<p>There are many ways to work with CSS in React application. </p>
<span id="more"></span>

<p>The common approaches to work with CSS are</p>
<ul>
<li>Regular CSS class</li>
<li>Style Attribute</li>
<li>CSS in JS</li>
</ul>
<h1 id="Regular-CSS-class"><a href="#Regular-CSS-class" class="headerlink" title="Regular CSS class"></a>Regular CSS class</h1><p>You can use <code>className</code> attribute to specify a CSS class.</p>
<p>Box.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.Greenbox</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.BlueBox</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In the component, you can import the CSS file <code>import &quot;./Box.css&quot;</code>, then set <code>className</code> attribute. You can set <code>className</code> attribute as a String or assign it as a JSX expression.</p>
<p>Box.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./Box.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Box</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> className = props.<span class="property">color</span> === <span class="string">&quot;green&quot;</span>? <span class="string">&quot;GreenBox&quot;</span>: <span class="string">&quot;BlueBox&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Style-Attribute"><a href="#Style-Attribute" class="headerlink" title="Style Attribute"></a>Style Attribute</h1><p>The <strong>style</strong> attribute accepts a JavaScript object with camelCased properties rather than a CSS string. <strong>using the <em>style</em> attribtue as the primary means of styling elements is generally not recommended</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> greenboxStyle = &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&quot;300px&quot;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&quot;150px&quot;</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&quot;green&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;greenboxStyle&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a>CSS in JS</h1><p>“CSS-in-JS” refers to a pattern where CSS is composed using JavaScript instead of defined in external files.</p>
<p>Note that this functionality is not a part of React, but provided by third-party libraries. YOu can find a list of css-in-js library in <a href="https://github.com/MicheleBertoli/css-in-js">here</a>.</p>
<p><a href="https://github.com/styled-components/styled-components">styled-components</a> is a popular CSS in JS library, To install styled-components</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install styled-components</span><br></pre></td></tr></table></figure>

<p>Box.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Box</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">GreenBox</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">        width: 300px;</span></span><br><span class="line"><span class="string">        height: 150px;</span></span><br><span class="line"><span class="string">        background-color: green;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">GreenBox</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="CSS-Modules-Support"><a href="#CSS-Modules-Support" class="headerlink" title="CSS Modules Support"></a>CSS Modules Support</h1><p>Create React App supports CSS Modules. CSS Modules is <strong>CSS files in which all class names and animation names are scoped locally by default.</strong></p>
<p>see <a href="https://create-react-app.dev/docs/adding-a-css-modules-stylesheet/">https://create-react-app.dev/docs/adding-a-css-modules-stylesheet/</a> for more details.</p>
<p>Box.module.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.GreenBox</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.BlueBox</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Box.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./Box.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Box</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.GreenBox&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://codeburst.io/4-four-ways-to-style-react-components-ac6f323da822">Four ways to style react components</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Context</title>
    <url>/React/React-Context/</url>
    <content><![CDATA[<p>React Context</p>
<span id="more"></span>

<h1 id="Rect-Context"><a href="#Rect-Context" class="headerlink" title="Rect Context"></a>Rect Context</h1><p>React Context is a powerful feature that allows you to manage state across your entire application without having to pass props down manually at every level of the component tree.</p>
<p>Here are the basic steps to use React Context:</p>
<h1 id="Step-1-Create-the-Context"><a href="#Step-1-Create-the-Context" class="headerlink" title="Step 1: Create the Context"></a>Step 1: Create the Context</h1><p>First, you need to create the context. You’ll need to <strong>export it from a file</strong> so that your components can use it. <code>createContext</code> function takes a value as initialValue. If there is no context provider, the default value will be used.</p>
<p>CounterContext.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">CounterContext</span> = <span class="title function_">createContext</span>(&#123;  </span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">setCount</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Here we provide a default object <code>&#123; count: 0, setCount: (v) =&gt; &#123;&#125; &#125;</code> for the CounterContext.</p>
<h1 id="Step-2-Use-the-Context"><a href="#Step-2-Use-the-Context" class="headerlink" title="Step 2: Use the Context"></a>Step 2: Use the Context</h1><p><code>useContext</code> is a React Hook that lets you read and subscribe to <a href="https://react.dev/learn/passing-data-deeply-with-context">context</a> from your component.</p>
<p>ChildComponent.js </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CounterContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./CounterContext&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; count, setCount &#125; = <span class="title function_">useContext</span>(<span class="title class_">CounterContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>count: &#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount((count) =&gt; count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          Increment</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount((count) =&gt; count - 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          Decrement</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you don’t provide the Context,  the default value will be used. in this case, the <code>count</code> value and <code>setCount</code> function from the CounterContext will be used.</p>
<h1 id="Step-3-Provide-the-Context"><a href="#Step-3-Provide-the-Context" class="headerlink" title="Step 3: Provide the Context"></a>Step 3: Provide the Context</h1><p>Provide the context.</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CounterContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./CounterContext&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&quot;./ChildComponent&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">CounterContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">count</span>, <span class="attr">setCount</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">CounterContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Here we provide the Context and give the value <code>&#123; count, setCount &#125;</code> created from <code>useState</code> Hook.</p>
<iframe src="https://codesandbox.io/embed/react-context-basic-fvf669?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="React Context Basic"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>React Context provides a clean and efficient way to manage state in your React applications. By creating a context provider, you can encapsulate your state logic and make it accessible to any component in your application without the need for prop drilling. Understanding these basic concepts will empower you to build more complex and interactive applications using React. Happy coding!</p>
<p>References:</p>
<ul>
<li><a href="https://react.dev/learn/passing-data-deeply-with-context">https://react.dev/learn/passing-data-deeply-with-context</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>Deploy React Application To AWS Amplify</title>
    <url>/React/React-Deploy-To-Amplify/</url>
    <content><![CDATA[<p>AWS Amplify simplifies the steps to deploy frontend application to a globally available CDN. Here are the steps to deploy React application to AWS Amplify</p>
<span id="more"></span>

<p>First go to AWS Amplify <a href="https://console.aws.amazon.com/amplify/home#/home">https://console.aws.amazon.com/amplify/home#/home</a> , and select <strong>Host your web app</strong>.</p>
<img src="/React/React-Deploy-To-Amplify/host-web-app.png" class="">

<br>

<p>Select Git Repository</p>
<img src="/React/React-Deploy-To-Amplify/choose-git-repo.png" class="">

<br>

<p>Select a repository and branch</p>
<img src="/React/React-Deploy-To-Amplify/select-repo.png" class="">

<br>

<p>Review and click <strong>Save and deploy</strong>. This will deploy the application to amplify. After the deployment is complete, you can now open the web application from the browser. The deployed application should have a domain such as <a href="https://master.d2zimxm532432.amplifyapp.com/">https://master.d2zimxm532432.amplifyapp.com/</a>.</p>
<img src="/React/React-Deploy-To-Amplify/save-and-deploy.png" class="">


<br>

<p>Add a Custom Domain. You can register a domain on Amazon Route53 and use the custom domain to access the web application. Go to <strong>Domain management</strong> and click <strong>Add domain</strong>. Select the domain and Click <strong>Save</strong>.</p>
<img src="/React/React-Deploy-To-Amplify/domain-management.png" class="">

]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>Deploy React Application to AWS S3</title>
    <url>/React/React-Deploy-To-S3/</url>
    <content><![CDATA[<p>Here are the detailed steps needed to deploy a React application to AWS. These steps applies not only to React, but any front end web applications. </p>
<span id="more"></span>
<ul>
<li>First we deploy the web app to S3 bucket and set up static site hosting</li>
<li>Register a custom domain and create SSL certificate associated to the domain </li>
<li>Setup CloudFront distribution</li>
<li>Configure Route 53 to route traffic to the cloudFront distribution</li>
</ul>
<h1 id="Deploying-React-Application"><a href="#Deploying-React-Application" class="headerlink" title="Deploying React Application"></a>Deploying React Application</h1><h2 id="Build-React-App"><a href="#Build-React-App" class="headerlink" title="Build React App"></a>Build React App</h2><ol>
<li><p>First create a simple React application and cd to the directory. If you already have a web application, you can skip here.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx create-react-app testapp</span><br><span class="line"><span class="built_in">cd</span> testapp</span><br></pre></td></tr></table></figure>
</li>
<li><p>Then build the application</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Enable-website-hosting"><a href="#Enable-website-hosting" class="headerlink" title="Enable website hosting"></a>Enable website hosting</h2><ol>
<li><p>Go to AWS S3 Console at <a href="https://console.aws.amazon.com/s3/">https://console.aws.amazon.com/s3/</a> and create a bucket</p>
</li>
<li><p>Choose <strong>Properties</strong></p>
</li>
<li><p>Under <strong>Static website hosting</strong> click Edit. Check the checkbox to enable website hosting. Then set index file, for react app, the index file is <code>index.html</code>.</p>
<img src="/React/React-Deploy-To-S3/static-website-hosting.png" class="">
</li>
<li><p>Save Changes and note the Endpoint. The Endpoint is the Amazon S3 website endpoint for your bucket.</p>
</li>
</ol>
<h2 id="Setting-permissions-for-website-access"><a href="#Setting-permissions-for-website-access" class="headerlink" title="Setting permissions for website access"></a>Setting permissions for website access</h2><p>When you configure a bucket as a static website, if you want your website to be public, you can grant public read access. </p>
<ol>
<li><p>Go to AWS S3 Console at <a href="https://console.aws.amazon.com/s3/">https://console.aws.amazon.com/s3/</a> and select the bucket created</p>
</li>
<li><p>Choose <strong>Permissions</strong> </p>
</li>
<li><p>Under <strong>Block public access (bucket settings)</strong>, choose Edit. clear all checkboxes and save Changes.</p>
</li>
</ol>
<img src="/React/React-Deploy-To-S3/public-access.png" class="">

<ol start="4">
<li>Choose <strong>Permissions</strong> tab and Edit <strong>Bucket Policy</strong>. add the following policy.<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Policy1608922285404&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Stmt1608922283381&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s3:GetObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:s3:::name-of-the-bucket/*&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>This creates a bucket policy that grants everyone s3:GetObject permission.</p>
<h2 id="Deploy-React-App-to-S3-Bucket"><a href="#Deploy-React-App-to-S3-Bucket" class="headerlink" title="Deploy React App to S3 Bucket"></a>Deploy React App to S3 Bucket</h2><p>Upload the react application to S3 bucket</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws s3 sync build/ s3://name-of-the-bucket</span><br></pre></td></tr></table></figure>

<p>React application is deployed to S3 now. The endpoint can be found in <em>static website hosting</em> property of the S3 bucket.<br>The format of the endpoint looks like this: <a href="http://name-of-the-bucket.s3-website-us-east-1.amazonaws.com/">http://name-of-the-bucket.s3-website-us-east-1.amazonaws.com/</a>.</p>
<h1 id="Register-a-Custom-Domain"><a href="#Register-a-Custom-Domain" class="headerlink" title="Register a Custom Domain"></a>Register a Custom Domain</h1><p>You can easily register a domain using AWS’s Route 53 service. Just need to choose a unique domain name and provide some personal information. The registration may take some time to finish.</p>
<img src="/React/React-Deploy-To-S3/route53.png" class="">
<p><em>route53 dashboard</em></p>
<p>After registering a domain, you can see the domain appear in the <strong>Hosted zones</strong>. You can find the DNS Records for the domain here.</p>
<h1 id="Create-SSL-Certificate"><a href="#Create-SSL-Certificate" class="headerlink" title="Create SSL Certificate"></a>Create SSL Certificate</h1><p>AWS Certificate Manager (ACM) handles the complexity of creating, storing, and renewing public and private SSL&#x2F;TLS X.509 certificates and keys that protect your AWS websites and applications.</p>
<p>You can Request a certificate in Amazon Certificate Manager.</p>
<img src="/React/React-Deploy-To-S3/request-certificate.png" class="">
<p><em>select Request a certificate</em></p>
<img src="/React/React-Deploy-To-S3/public-certificate.png" class="">
<p><em>select public certificate</em></p>
<img src="/React/React-Deploy-To-S3/add-domain-name.png" class="">
<p><em>Enter domain name here, replace domain with the requested domain from route53</em></p>
<img src="/React/React-Deploy-To-S3/dns-validation.png" class="">
<p><em>select DNS validation</em></p>
<p>In the validation step,  click <strong>Create record in Route 53</strong> button for all domain names. When the Certificate status is <em>Issued</em>, You are ready to move to CloudFront distribution.</p>
<h1 id="CloudFront-Distribution"><a href="#CloudFront-Distribution" class="headerlink" title="CloudFront Distribution"></a>CloudFront Distribution</h1><p>Open CloudFront to create the Distribution.</p>
<p>For <strong>Origin Domain Name</strong>, use the url for the original S3 bucket URL: <a href="http://name-of-the-bucket.s3-website-us-east-1.amazonaws.com/">http://name-of-the-bucket.s3-website-us-east-1.amazonaws.com/</a>. Select <strong>Redirect HTTP to HTTPS</strong> Protocol Policy.</p>
<img src="/React/React-Deploy-To-S3/create-distribution.png" class="">

<br>

<p>In Distribution Settings, Set <strong>Price Class</strong> to be <em>Use Only U.S., Canada and Europe</em>. This will reduce cost. </p>
<p>Add the custom domain to <strong>Alternate Domain Names(CNAMEs)</strong>.</p>
<p>Check <strong>Custom SSL Certificate(example.com)</strong> checkbox. Then Select the SSL certificate for the custom domain.</p>
<p>If you don’t want to use a custom domain, then use CloudFront domain name(*.cloudfront.net).</p>
<img src="/React/React-Deploy-To-S3/dist-ssl.png" class="">

<p>After setting up CloudFront, The cloudfront domain for the distribution(*.cloudfront.net) should be accessible. However, to use the custom domain, you need to configure Route53 to route traffic to Cloudfront.</p>
<h1 id="Configure-Route53-to-Route-Traffic-to-CloudFront"><a href="#Configure-Route53-to-Route-Traffic-to-CloudFront" class="headerlink" title="Configure Route53 to Route Traffic to CloudFront"></a>Configure Route53 to Route Traffic to CloudFront</h1><p>Go to <strong>Route 53</strong>, select <strong>Hosted zones</strong> and click on the Domain created earlier. </p>
<p>Click <strong>Create record</strong> to create a <strong>A</strong> record to route traffic to cloudfront. </p>
<p>Select <strong>Alias</strong> and route traffic to the cloudfront distribution we setup in the previous step. Make sure the domain(*.cloudfront.net) matches the cloudfront distribution domain.</p>
<p>Click <strong>Create records</strong>.</p>
<img src="/React/React-Deploy-To-S3/route53-add-record.png" class="">
<br>

<p>This is the last step. After a few minutes, you should be able to access the web application using the custom domain.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://serverless-stack.com/chapters/deploy-to-s3.html">Deploy to S3</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/EnableWebsiteHosting.html">S3 User Guide - Enabling website hosting</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteAccessPermissionsReqd.html">S3 User Guide - Settting permissions for website access</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Event</title>
    <url>/React/React-Event/</url>
    <content><![CDATA[<p>React Event Handling</p>
<span id="more"></span>

<h1 id="Event-Handling"><a href="#Event-Handling" class="headerlink" title="Event Handling"></a>Event Handling</h1><ul>
<li>Use camel case for event handling attribute. e.g. onClick instead of onclick</li>
<li>Pass a function, don’t pass a function call</li>
</ul>
<p>Example</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ClickButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button Click&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickHandler&#125;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can also use in-line functions as event handler</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&quot;Bob&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;Bob&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Passing-Arguments-to-Event-Handler"><a href="#Passing-Arguments-to-Event-Handler" class="headerlink" title="Passing Arguments to Event Handler"></a>Passing Arguments to Event Handler</h1><p>Here is an example to pass <code>id</code> to the function. the handle function will take parameter <code>id</code> and event e as parameter</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">handle</span>(id, e)&#125;&gt;<span class="title class_">Delete</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>if event e is not needed:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="title function_">handle</span>(id)&#125;&gt;<span class="title class_">Delete</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Prevent-Default"><a href="#Prevent-Default" class="headerlink" title="Prevent Default"></a>Prevent Default</h1><p>To prevent the default behavior, you must call <code>preventDefault</code> explicitly.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ActionLink</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The link was clicked.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Click me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://reactjs.org/docs/handling-events.html">Handling Events</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Intro</title>
    <url>/React/React-Intro/</url>
    <content><![CDATA[<p>In this post we will get to know about React.</p>
<span id="more"></span>

<h1 id="What-is-React"><a href="#What-is-React" class="headerlink" title="What is React"></a>What is React</h1><p>React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called “components”.</p>
<h1 id="Virutal-DOM"><a href="#Virutal-DOM" class="headerlink" title="Virutal DOM"></a>Virutal DOM</h1><p>DOM stands for “Document Object Model”. Traditionally we explicitly write code to update the DOM.</p>
<p>React maintains a Virtual DOM for us. Whenever the state of our application changes, the virtual DOM gets updated first, React compares the updated virtual DOM to the previous virtual DOM. Then apply the change to the real DOM.</p>
<p>To learn more about the Virtual DOM, see <a href="https://programmingwithmosh.com/react/react-virtual-dom-explained/#:~:text=React%20uses%20virtual%20DOM%20to,re%2Drendering%20of%20the%20UI.">React Virtual DOM Explained in Simple English</a></p>
<h1 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h1><p><a href="https://github.com/facebook/create-react-app">Create React App</a> is a comfortable environment for learning React, and is the best way to start building a new single-page application in React.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<p>create-react-app will create an react application. You can start working with react by updating App component in src&#x2F;App.js</p>
<p>If you prefer to use typescript, include <code>--template typescript</code> option</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app --template typescript</span><br></pre></td></tr></table></figure>

<p>If you use VS Code, you can install <a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets">ES7 React&#x2F;Redux&#x2F;GraphQL&#x2F;React-Native snippets</a> extension. This extension provides useful React&#x2F;Redux snippets in ES7 with Babel plugin features. </p>
<h1 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h1><p>Here is what a component looks like. We will dive deep into React Component in the future post.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Declare a new state variable, which we&#x27;ll call &quot;count&quot;</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This component uses React Hooks, which is the prefered way to create a component.</p>
<h1 id="React-Resources"><a href="#React-Resources" class="headerlink" title="React Resources"></a>React Resources</h1><ul>
<li><a href="https://reactjs.org/docs/getting-started.html">React Documentation</a></li>
<li><a href="https://create-react-app.dev/">Create React App</a><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></li>
<li><a href="https://reactjs.org/tutorial/tutorial.html#what-is-react">What Is React?</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React JSX Syntax</title>
    <url>/React/React-JSX/</url>
    <content><![CDATA[<p>JSX Syntax</p>
<span id="more"></span>

<h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><p>JSX is a syntax extension to JavaScript. Use JSX to describe what the UI should look like. </p>
<p>Babel compiles JSX down to React.createElement() calls. So the output of JSX is React Element.</p>
<p>JSX Example</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> heading=<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>Multiline JSX Example</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> heading=</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Hello React</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>For multi-line JSX, you can wrap the elements in parentheses for readability. It is not required to do this.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> heading=(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello React</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="Embedding-JS-Expression"><a href="#Embedding-JS-Expression" class="headerlink" title="Embedding JS Expression"></a>Embedding JS Expression</h1><p>Valide Javascript expression can be inserted inside the <strong>curly braces</strong>.</p>
<p>By default, ReactDOM escapes any values embedded in JSX before rendering them.</p>
<p>Example of Javascript Expression in JSX</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">firstname</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">lastname</span>: <span class="string">&#x27;Smith&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> heading=(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello &#123;person.firstname&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Another Example</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;book-list&quot;</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        data.<span class="property">books</span>.<span class="title function_">map</span>( <span class="function">(<span class="params">book</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;book.id&#125;</span>&gt;</span>&#123;book.name&#125; - &#123;book.genre&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>In JSX, <strong>curly braces</strong> is used to evaluate JavaScript expression during compilation.</p>
<h1 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h1><p>You can set attributes of a element with JSX.</p>
<p>You can have String literals as attribute value just like regular HTML syntax</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://google.com&quot;</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>Or you can use Javascript expression as attribute value. Here <strong>src</strong> attribute is using a Javascript expression</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;food.imgurl&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.</p>
<h1 id="Special-Attributes"><a href="#Special-Attributes" class="headerlink" title="Special Attributes"></a>Special Attributes</h1><p><code>class</code> and <code>for</code> are both javascript’s keyworlds, they need to be changed to <code>className</code> and <code>htmlFor</code> attribute</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h1 className=<span class="string">&quot;redheading&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">Hello</span> &#123;name&#125;</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>


<h1 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h1><p>HTML Comment is invalid in JSX Syntax. So you can’t use <code>&lt;!-- --&gt;</code> to add comment in JSX. </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sometext = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- This is incorrect JSX Syntax --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Lorem ipsum dolor sit amet, consectetur adipiscing elit,</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>The correct way to add comment is to use regular JS comment <code>/* */</code> in a curly brace.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sometext = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* JSX Comment */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Lorem ipsum dolor sit amet, consectetur adipiscing elit</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<h1 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h1><p>JSX Expression must have a parent.</p>
<p>JSX Expression without a parent is invalid</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// invalid</span></span><br><span class="line"><span class="keyword">let</span> post = (    </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;heading&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;body&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>You need to add a fragment (<code>&lt;&gt;</code> and <code>&lt;/&gt;</code>) around the elements</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> post = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span>   </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;heading&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;body&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>It is equivalent to add <code>React.Fragment</code> element around the elemnts to produce valid JSX</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> post = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span>   </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;heading&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;body&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Forms</title>
    <url>/React/React-Froms/</url>
    <content><![CDATA[<p>Unlike the other HTML Element,form controls keeps some internal state. We can manage the form controls’ state using React component’s states.</p>
<span id="more"></span>

<h1 id="Controlled-Component"><a href="#Controlled-Component" class="headerlink" title="Controlled Component"></a>Controlled Component</h1><p>For a Controlled Component, the state is kept in the state property of the component. The state of the component is the “single source of truth”. React component that renders a control also controls what happens in that form on subsequent user input. You are responsible to write the event handler and change the associated component state.</p>
<p>Example of controlled component using text field. The value of the text field is the component state value. onChange event will update the state variable and then cause the input’s value attribute to update.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TextFieldTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [firstName, setFirstName] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> [lastName, setLastName] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;firstName&quot;</span> <span class="attr">value</span>=<span class="string">&#123;firstName&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setFirstName(e.target.value.toUpperCase())&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&#123;lastName&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setLastName(e.target.value.toUpperCase())&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;`$&#123;firstName&#125; $&#123;lastName&#125;`&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h1><p>In HTML, <code>&lt;select&gt;</code> creates a drop-down list. You can pass an object with <code>value</code> attribute to the select element</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Beverage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [selectedBeverage, setSelectedBeverage] = <span class="title function_">useState</span>(&#123;<span class="attr">value</span>:<span class="string">&quot;water&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;selectedBeverage.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> setSelectedBeverage(&#123;value: e.target.value&#125;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;water&quot;</span>&gt;</span>Water<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;tea&quot;</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> () =&gt;</span> alert(&quot;You order &quot; + selectedBeverage.value)&#125;&gt;Order<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Checkboxes"><a href="#Checkboxes" class="headerlink" title="Checkboxes"></a>Checkboxes</h1><p>You can select multiple checkboxes, so the state is an array instead of a single value.</p>
<p>Example of a checkbox group</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Beverage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [selectedBeverages, setSelectedBeverages] = <span class="title function_">useState</span>([])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;checked, value&#125;= e.<span class="property">target</span></span><br><span class="line">        <span class="keyword">if</span>( checked &amp;&amp; selectedBeverages.<span class="title function_">indexOf</span>(value) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">let</span> newValue = [...selectedBeverages]</span><br><span class="line">            newValue.<span class="title function_">push</span>(value)</span><br><span class="line">            <span class="title function_">setSelectedBeverages</span>(newValue)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">setSelectedBeverages</span>([...selectedBeverages].<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> v !== value))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;beverage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;water&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> handler(e)&#125; checked=&#123;selectedBeverages.indexOf(&quot;water&quot;) &gt;= 0&#125; /&gt;Water</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;beverage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tea&quot;</span>  <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> handler(e)&#125; checked=&#123;selectedBeverages.indexOf(&quot;tea&quot;) &gt;= 0&#125; /&gt;Tea</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;beverage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>  <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> handler(e)&#125; checked=&#123;selectedBeverages.indexOf(&quot;java&quot;) &gt;= 0&#125; /&gt;Java</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&#x27;order &#x27; + selectedBeverages)&#125; &gt;Order<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://reactjs.org/docs/forms.html">React Forms</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Refs</title>
    <url>/React/React-Refs/</url>
    <content><![CDATA[<p>React useRef Hook</p>
<span id="more"></span>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p>Refs provide a way to access DOM nodes or React elements created in the render method.</p>
<p>usecases</p>
<ul>
<li>Managing focus, text selection, or media playback.</li>
<li>Triggering imperative animations.</li>
<li>Integrating with third-party DOM libraries.</li>
</ul>
<p><code>useRef</code> returns a mutable ref object whose <code>.current</code> property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component.</p>
<p>Example to focus a text field</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TextFieldFocus</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> clickHandler()&#125;&gt;Focus the input<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://reactjs.org/docs/refs-and-the-dom.html">Refs and the DOM</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Router</title>
    <url>/React/React-Router/</url>
    <content><![CDATA[<p>React Router is the most used routing solution for React.</p>
<span id="more"></span>

<p>React Router Installation</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install react-router-dom</span><br></pre></td></tr></table></figure>


<p>First we need to wrap everything that gets rendered inside <code>&lt;BrowserRouter&gt;</code> element. we can do that in index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">BrowserRouter</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>A <code>&lt;Switch&gt;</code> looks through all its children <code>&lt;Route&gt;</code> elements and renders the first one whose path matches the current URL. Use a <code>&lt;Switch&gt;</code> any time you have multiple routes, but you want only one of them to render at a time</p>
<p>Here the component will be display only when the path matches the current url. The <code>exact</code> attribute means the URL has to be exact match. Without the <code>exact</code> attribute, other URLs that contains “&#x2F;“ is a match.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Switch</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> <span class="attr">exact</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/dashboard&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Dashboard&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Here is Home, About and Dashboard components</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dashboard</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can add navigation links to help navigate the URLs</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/dashboard&quot;</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>To try out the basic example: <a href="https://reactrouter.com/web/example/basic">https://reactrouter.com/web/example/basic</a></p>
<p>Reference</p>
<ul>
<li><a href="https://reactrouter.com/">React Router Homepage</a></li>
<li><a href="https://www.freecodecamp.org/news/react-router-in-5-minutes/">Learn React Router in 5 Minutes - A Beginner’s Tutorial by Bob Ziroll</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Test</title>
    <url>/React/React-Test/</url>
    <content><![CDATA[<p>Let’s learn some basics on how to use Jest and React Testing Library to test React components.</p>
<span id="more"></span>

<h1 id="Jest-Basic"><a href="#Jest-Basic" class="headerlink" title="Jest Basic"></a>Jest Basic</h1><p>Jest is a delightful JavaScript Testing Framework with a focus on simplicity.</p>
<p>Application created using Create React App already contains Jest, so you don’t need to install it separately.</p>
<p>To run the test, just run <code>npm test</code> command. all the files with <em>.test.js</em> or <em>.spec.js</em> extension will be executed.</p>
<p>The simpliest Jest test:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum.test.js</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;adds 1 + 2 to equals 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="number">1</span>+<span class="number">2</span>).<span class="title function_">toBe</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Matchers"><a href="#Matchers" class="headerlink" title="Matchers"></a>Matchers</h1><p><code>toBe</code> is a matcher. <code>toBe</code> uses Object.is to test exact equality. If you want to check the value of an object, use <code>toEqual</code> instead. <code>toEqual</code> recursively checks every field of an object or array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;object assignment&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123; <span class="attr">one</span>: <span class="number">1</span> &#125;;</span><br><span class="line">  data[<span class="string">&quot;two&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">  <span class="title function_">expect</span>(data).<span class="title function_">toEqual</span>(&#123; <span class="attr">one</span>: <span class="number">1</span>, <span class="attr">two</span>: <span class="number">2</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>There are other matches that tests numbers, strings, arrays exceptions. see <a href="https://jestjs.io/docs/en/using-matchers">Using Matchers</a> for more details. For the full list, see <a href="https://jestjs.io/docs/en/expect">expect API</a></p>
<h1 id="Testing-Async-Code"><a href="#Testing-Async-Code" class="headerlink" title="Testing Async Code"></a>Testing Async Code</h1><h2 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h2><p>By default, Jest tests complete once they reach the end of their execution, so the following test will not work. The callback method is never called.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don&#x27;t do this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="literal">true</span></span><br><span class="line">        <span class="title function_">cb</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;return value is true&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inside callback&quot;</span>)</span><br><span class="line">        <span class="title function_">expect</span>(data).<span class="title function_">toBeTruthy</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fetchData</span>(callback)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>To fix this, pass a <code>done</code> argument to the test. Jest will wait until the <code>done</code> callback is called before finishing the test.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Do this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="literal">true</span></span><br><span class="line">        <span class="title function_">cb</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;return value is true&quot;</span>, <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="title function_">expect</span>(data).<span class="title function_">toBeTruthy</span>();</span><br><span class="line">        <span class="title function_">done</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fetchData</span>(callback)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise - it is more straightforward to test promise. When you return a promise from Jest test case, Jest will wait for that prmise to resolve.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myPromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;promise return foo&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">myPromise</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(data).<span class="title function_">toBe</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>To test a promise that rejects</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myRejectPromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;test promise that rejects&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">myRejectPromise</span>().<span class="title function_">catch</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(data).<span class="title function_">toBe</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Async-and-Await"><a href="#Async-and-Await" class="headerlink" title="Async and Await"></a>Async and Await</h2><p>An alternative is to use async and await to test Promise.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myPromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;test promise that rejects&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> returnedValue = <span class="keyword">await</span> <span class="title function_">myPromise</span>();</span><br><span class="line">    <span class="title function_">expect</span>(returnedValue).<span class="title function_">toBe</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h1 id="Setup-and-Teardown"><a href="#Setup-and-Teardown" class="headerlink" title="Setup and Teardown"></a>Setup and Teardown</h1><p>Jest provide &#96;beforeEach, afterEach, beforeAll and afterAll methods for setup and teardown</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeEach&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;afterEach&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeAll</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeAll&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="title function_">afterAll</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;afterAll&quot;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>By default, the <code>before</code> and <code>after</code> blocks apply to every test in a file. You can also group tests together using a <code>describe</code> block. When they are inside a <code>describe</code> block, the <code>before</code> and <code>after</code> blocks only apply to the tests within that <code>describe</code> block.</p>
<h1 id="Mock-Functions"><a href="#Mock-Functions" class="headerlink" title="Mock Functions"></a>Mock Functions</h1><p>Mock functions allow you to test the links between code by erasing the actual implementation of a function</p>
<p>Lets test <code>forEach</code> function</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">forEach</span>(<span class="params">items, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; items.<span class="property">length</span>; index++) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(items[index]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>we can use a mock callback function and inspect the mock’s state to ensure the callback is invoked as expected.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;test forEach&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mockCallback = jest.<span class="title function_">fn</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="number">42</span> + x);</span><br><span class="line">    <span class="title function_">forEach</span>([<span class="number">0</span>, <span class="number">1</span>], mockCallback);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The mock function is called twice</span></span><br><span class="line">    <span class="title function_">expect</span>(mockCallback.<span class="property">mock</span>.<span class="property">calls</span>.<span class="property">length</span>).<span class="title function_">toBe</span>(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The first argument of the first call to the function was 0</span></span><br><span class="line">    <span class="title function_">expect</span>(mockCallback.<span class="property">mock</span>.<span class="property">calls</span>[<span class="number">0</span>][<span class="number">0</span>]).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The first argument of the second call to the function was 1</span></span><br><span class="line">    <span class="title function_">expect</span>(mockCallback.<span class="property">mock</span>.<span class="property">calls</span>[<span class="number">1</span>][<span class="number">0</span>]).<span class="title function_">toBe</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The return value of the first call to the function was 42</span></span><br><span class="line">    <span class="title function_">expect</span>(mockCallback.<span class="property">mock</span>.<span class="property">results</span>[<span class="number">0</span>].<span class="property">value</span>).<span class="title function_">toBe</span>(<span class="number">42</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="Mock-Return-Values"><a href="#Mock-Return-Values" class="headerlink" title="Mock Return Values"></a>Mock Return Values</h2><p>The above mock callback function does not return a value. You can create mock functions that returns value.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myMock = jest.<span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myMock</span>());</span><br><span class="line"><span class="comment">// &gt; undefined</span></span><br><span class="line"></span><br><span class="line">myMock.<span class="title function_">mockReturnValueOnce</span>(<span class="number">10</span>).<span class="title function_">mockReturnValueOnce</span>(<span class="string">&#x27;x&#x27;</span>).<span class="title function_">mockReturnValue</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myMock</span>(), <span class="title function_">myMock</span>(), <span class="title function_">myMock</span>(), <span class="title function_">myMock</span>());</span><br><span class="line"><span class="comment">// &gt; 10, &#x27;x&#x27;, true, true</span></span><br></pre></td></tr></table></figure>


<h2 id="Mock-Implementation"><a href="#Mock-Implementation" class="headerlink" title="Mock Implementation"></a>Mock Implementation</h2><p>You can not only mock the return value but the implementation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myMockFn = jest.<span class="title function_">fn</span>(<span class="function"><span class="params">cb</span> =&gt;</span> <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_">myMockFn</span>(<span class="function">(<span class="params">err, val</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val));</span><br><span class="line"><span class="comment">// &gt; true</span></span><br></pre></td></tr></table></figure>

<h1 id="Mock-Modules"><a href="#Mock-Modules" class="headerlink" title="Mock Modules"></a>Mock Modules</h1><p>users.js - this class uses axis module</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/users.json&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">resp</span> =&gt;</span> resp.<span class="property">data</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Users</span>;</span><br></pre></td></tr></table></figure>

<p>You can use <code>jest.mock(...)</code> function to automatically mock the axios module.</p>
<p>users.test.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Users</span> <span class="keyword">from</span> <span class="string">&#x27;./users&#x27;</span></span><br><span class="line"></span><br><span class="line">jest.<span class="title function_">mock</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;should fetch users&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> users = [&#123;<span class="attr">uname</span>: <span class="string">&#x27;Bob&#x27;</span>&#125;]</span><br><span class="line">    <span class="keyword">const</span> resp = &#123;<span class="attr">data</span>: users&#125;</span><br><span class="line">    axios.<span class="property">get</span>.<span class="title function_">mockResolvedValue</span>(resp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Users</span>.<span class="title function_">all</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">expect</span>(data).<span class="title function_">toEqual</span>(users))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="Testing-React-App"><a href="#Testing-React-App" class="headerlink" title="Testing React App"></a>Testing React App</h1><p>Create React App includes <a href="https://testing-library.com/docs/react-testing-library/intro">React Testing Library</a> by default. React Testing Library is a simple and complete React DOM testing utilities that encourage good testing practices.</p>
<p>Here is a modified version of Basic Example from <a href="https://github.com/testing-library/react-testing-library">https://github.com/testing-library/react-testing-library</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hidden-message.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HiddenMessage</span>(<span class="params">&#123;children&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [showMessage, setShowMessage] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>Show Message<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">id</span>=<span class="string">&quot;toggle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> setShowMessage(e.target.checked)&#125;</span></span><br><span class="line"><span class="language-xml">        checked=&#123;showMessage&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      &#123;showMessage ? children : null&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HiddenMessage</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hidden-message.test.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@testing-library/jest-dom&#x27;</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> jest-dom adds handy assertions to Jest and is recommended, but not required</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;render, fireEvent&#125; <span class="keyword">from</span> <span class="string">&#x27;@testing-library/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HiddenMessage</span> <span class="keyword">from</span> <span class="string">&#x27;./hidden-message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;shows the children when the checkbox is checked&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> testMessage = <span class="string">&#x27;Test Message&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> &#123;queryByText, getByLabelText, getByText&#125; = <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">HiddenMessage</span>&gt;</span>&#123;testMessage&#125;<span class="tag">&lt;/<span class="name">HiddenMessage</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// query* functions will return the element or null if it cannot be found</span></span><br><span class="line">  <span class="comment">// get* functions will return the element or throw an error if it cannot be found</span></span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">queryByText</span>(testMessage)).<span class="title function_">toBeNull</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the queries can accept a regex to make your selectors more resilient to content tweaks and changes.</span></span><br><span class="line">  fireEvent.<span class="title function_">click</span>(<span class="title function_">getByLabelText</span>(<span class="regexp">/show/i</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// .toBeInTheDocument() is an assertion that comes from jest-dom</span></span><br><span class="line">  <span class="comment">// otherwise you could use .toBeDefined()</span></span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">getByText</span>(testMessage)).<span class="title function_">toBeInTheDocument</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>To learn more details on using React Testing Library, see Video Tutorial: <a href="https://www.youtube.com/watch?v=ZmVBCpefQe8&t=1655s">Intro to React Testing</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://jestjs.io/docs/en/getting-started">Jest Documentation</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>Boosting React Performance with useMemo</title>
    <url>/React/React-useMemo/</url>
    <content><![CDATA[<p>useMemo is a React Hook that lets you cache the result of a calculation between re-renders.</p>
<span id="more"></span>
<h3 id="The-Problem-it-Solves"><a href="#The-Problem-it-Solves" class="headerlink" title="The Problem it Solves:"></a>The Problem it Solves:</h3><p>React components may re-render due to various triggers, leading to unnecessary recalculations. <code>useMemo</code> steps in to memoize results, recalculating only when dependencies change, a game-changer for performance.</p>
<h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax:"></a>Syntax:</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">computeExpensiveValue</span>(a, b), [a, b]);</span><br></pre></td></tr></table></figure>

<p>In this example, computeExpensiveValue is a function that performs a computationally expensive operation, and [a, b] represents the dependencies. The result of the computation is memoized and only recalculated if the values of a or b change.</p>
<h3 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases:"></a>Use Cases:</h3><p>1 <strong>Computational Efficiency:</strong><br>Optimize complex calculations based on props or state efficiently.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = (<span class="params">&#123; data &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> processedData = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">processData</span>(data), [data]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;processedData&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2 <strong>Preventing Unnecessary Renders:</strong><br>Avoid unnecessary component renders due to constant parent re-renders.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = (<span class="params">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> squaredValue = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> value * value, [value]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;squaredValue&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3 <strong>Optimizing Function Components:</strong><br>Enhance the performance of functional components with intensive computations.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = (<span class="params">&#123; data &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> processedData = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">processData</span>(data), [data]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;processedData&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices:"></a>Best Practices:</h3><ol>
<li><strong>Identify Expensive Operations:</strong><br>Prioritize <code>useMemo</code> for resource-intensive computations.</li>
<li><strong>Choose Dependencies Wisely:</strong><br>Select dependencies carefully to recalculate only when necessary.</li>
<li><strong>Measure Performance Impact:</strong><br>Profile your application using tools like React DevTools for a performance check.</li>
</ol>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion:"></a>Conclusion:</h3><p>In the pursuit of high-performance React applications, strategic use of hooks like <code>useMemo</code> is key. By memoizing values, developers can significantly improve efficiency, responsiveness, and the overall user experience. Strike a balance between performance gains and code readability, ensuring a smooth development journey.</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React useReducer Hook</title>
    <url>/React/React-useReducer-Hook/</url>
    <content><![CDATA[<p>React useReducer hook</p>
<span id="more"></span>
<h1 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h1><p>In React, the <code>useReducer</code> hook is used to manage complex state logic with a reducer function. Here’s an example of how you can use <code>useReducer</code> to manage state in a simple counter application:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reducer function takes the current state and an action, returns a new state</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;DECREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Counter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// useReducer returns the current state and a dispatch function to dispatch actions</span></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;INCREMENT&#x27; &#125;)&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;DECREMENT&#x27; &#125;)&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Counter</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>In this example, the <code>reducer</code> function defines how the state should be updated based on different action types. The <code>useReducer</code> hook takes the reducer function and an initial state object as arguments and returns the current state and a <code>dispatch</code> function. The <code>dispatch</code> function is used to send actions to the reducer, which then updates the state accordingly.</p>
<p>The <code>Counter</code> component demonstrates how to use the <code>useReducer</code> hook. It maintains a count state and provides buttons to increment and decrement the count. When you click the buttons, it dispatches actions of type <code>&#39;INCREMENT&#39;</code> and <code>&#39;DECREMENT&#39;</code>, causing the reducer to update the state and re-render the component with the new state value.</p>
<h1 id="Difference-between-useState-and-useReducer"><a href="#Difference-between-useState-and-useReducer" class="headerlink" title="Difference between useState and useReducer"></a>Difference between useState and useReducer</h1><p><code>useState</code> and <code>useReducer</code> are both hooks provided by React to manage state in functional components, but they serve different purposes and are suited for different scenarios.</p>
<p><strong><code>useState</code>:</strong></p>
<ul>
<li><code>useState</code> is a simpler and more straightforward hook used for managing local component state.</li>
<li>It is best suited for independent, isolated state updates within a component.</li>
<li>You can use <code>useState</code> when you have a single piece of state that needs to be updated independently of other state values.</li>
<li>Example usage: managing a boolean flag, input field value, or any other simple state variable within a component.</li>
</ul>
<p><strong><code>useReducer</code>:</strong></p>
<ul>
<li><code>useReducer</code> is more advanced and flexible. It is useful when you have complex state logic that involves multiple sub-values or when the next state depends on the previous state.</li>
<li>It is especially helpful when dealing with state transitions in a predictable way, such as form validation, dynamic form fields, or complex UI components.</li>
<li><code>useReducer</code> is also beneficial when multiple actions need to be handled by a single reducer function.</li>
<li>It provides a clear separation between updating state and the logic for updating state, which can lead to more maintainable code as your state logic grows.</li>
</ul>
<p>References:</p>
<ul>
<li><a href="https://react.dev/reference/react/useReducer">https://react.dev/reference/react/useReducer</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React useState Hook</title>
    <url>/React/React-useState-Hook/</url>
    <content><![CDATA[<p>React useState hook</p>
<span id="more"></span>

<h1 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h1><p>Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own.</p>
<p>React Hooks are functions whose names starts with <code>use</code>. </p>
<p>built-in Hooks in React:</p>
<ul>
<li>State Hooks - remember information like user input.</li>
<li>Context Hooks - receive information from top-level component</li>
<li>Ref Hooks - let a component hold information that isn’t used for rendering, like DOM node or a timeout ID.</li>
<li>Effect Hooks - Effects let a component connect to and synchronize with external systems. This includes dealing with network, browser DOM, animations, widgets written using a differnt UI library, and other non-React code.</li>
<li>Performance Hooks - common way to optimize re-rendering performance by skipping unnecessary work.</li>
<li>Resource Hooks - Resources can be accessed by a component without having them as part of their state. For example, a component can read a message from a Promise or read styling information from a context.</li>
<li>Other Hooks - useDebugValue, useId and useSyncExternalStore</li>
</ul>
<h2 id="Rules-of-Hooks"><a href="#Rules-of-Hooks" class="headerlink" title="Rules of Hooks"></a>Rules of Hooks</h2><p><strong>Don’t call Hooks inside loops, conditions, or nested functions.</strong>  Instead, always use Hooks at the top level of your React function, before any early returns. You can only call Hooks while React is rendering a function component.</p>
<h1 id="useState-Hook"><a href="#useState-Hook" class="headerlink" title="useState Hook"></a>useState Hook</h1><p><strong>state</strong> is like a component’s personal data storage. </p>
<p>Properties are read only, so it cannot hold information that changes. React provide states to keep track of the state of the component. A state can be number, string, javascript object or array.</p>
<p><code>useState</code> is a Hook that lets you add React state to function components. useState returns a paire of values, the current state and a function to update the value.</p>
<p>To import useState</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>A Counter component that contains a <code>count</code> state. The initial value of count is 0.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe src="https://codesandbox.io/embed/usestate-hook-9pb9j?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="useState Hook"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<p>You read the state uing JSX syntax </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;<span class="title class_">You</span> clicked &#123;count&#125; times&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>You update the state using the returned setter</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Updating-state-based-on-the-previous-state"><a href="#Updating-state-based-on-the-previous-state" class="headerlink" title="Updating state based on the previous state"></a>Updating state based on the previous state</h1><p>If we change the code to call setCount multiple times, it does not work because set function doesn’t change the state variable in the already running code. </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We need to pass an updater function to the set function instead.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount + <span class="number">1</span>);</span><br><span class="line">  <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount + <span class="number">1</span>);</span><br><span class="line">  <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>React puts your updater functions in a queue. Then, during the next render, it will call them in the same orde</p>
<iframe src="https://codesandbox.io/embed/usestate-hook-2-w6wpyf?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="useState Hook 2"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>


<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://react.dev/reference/react/hooks">React Hooks</a></li>
<li><a href="https://react.dev/warnings/invalid-hook-call-warning">Roles of Hooks</a></li>
<li><a href="https://reactjs.org/docs/hooks-state.html">Using the State Hook</a></li>
<li><a href="https://react.dev/reference/react/useState#updating-state-based-on-the-previous-state">Updating state based on the previous state</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>Redux Middleware</title>
    <url>/React/Redux-middleware/</url>
    <content><![CDATA[<p>Redux Middleware</p>
<span id="more"></span>

<h1 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h1><p>Redux Middleware provides a third-party extension point between dispatching an action, and the moment it reaches the reducer. </p>
<h1 id="redux-logger-Middleware"><a href="#redux-logger-Middleware" class="headerlink" title="redux-logger Middleware"></a>redux-logger Middleware</h1><p><a href="https://github.com/LogRocket/redux-logger">redux-logger</a> is a production Redux logging tool that lets you replay problems as if they happened in your own browser. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i redux-logger</span><br></pre></td></tr></table></figure>

<p>To enable Logger Middleware, use <code>applyMiddleware(...middleware)</code> function to apply the middleware</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">&quot;redux-logger&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">  rootReducer,</span><br><span class="line">  <span class="title function_">applyMiddleware</span>(logger)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>with the logger middleware, you will be able to see the redux state change from the console.</p>
<h1 id="redux-thunk-Middleware"><a href="#redux-thunk-Middleware" class="headerlink" title="redux-thunk Middleware"></a>redux-thunk Middleware</h1><p>A thunk is a function that returns another function. </p>
<p><a href="https://github.com/reduxjs/redux-thunk">redux-thunk</a> middleware allows you to write action creators that return a function instead of an action. The primiary use case of redux-thunk is to send HTTP Request. </p>
<p>Installation</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install redux-thunk</span><br></pre></td></tr></table></figure>


<p>To enable Redux Thunk</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note: this API requires redux@&gt;=3.1.0</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer, <span class="title function_">applyMiddleware</span>(thunk));</span><br></pre></td></tr></table></figure>

<h1 id="Async-Action-using-redux-thunk"><a href="#Async-Action-using-redux-thunk" class="headerlink" title="Async Action using redux-thunk"></a>Async Action using redux-thunk</h1><p>By default Redux’s actions are dispatched synchronously. This cause problem for non-trivial applications that needs to communicate with external APIs to perform side effect. </p>
<p><a href="https://en.wikipedia.org/wiki/Thunk">Thunk</a> is a programming concept where a function is used to delay the evaluation&#x2F;calculation of an operation.</p>
<p><strong>Redux Thunk</strong> is a middleware that lets you call action creators that return a function instead of an action object. That function receives the store’s dispatch method, which is then used to dispatch regular synchronous actions inside the function’s body once the asynchronous operations have been completed.</p>
<p>The most common use case for Redux Thunk is for communicating asynchronously with an external API to retrieve or save data. Redux Thunk makes it easy to dispatch actions that follow the lifecycle of a request to an external API.</p>
<p>Install redux-thunk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install redux-thunk</span><br></pre></td></tr></table></figure>

<p>actions&#x2F;index.js - here we define a action creator - <code>getTodo</code> function returns a function instead of an object. The function takes a dispatch as parameter and dispatch object when async action completes.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getTodo</span> = id =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">getTodoStarted</span>());</span><br><span class="line">    axios</span><br><span class="line">      .<span class="title function_">get</span>(<span class="string">`https://jsonplaceholder.typicode.com/todos/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title function_">getTodoSuccess</span>(res.<span class="property">data</span>));</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title function_">getTodoFailure</span>(err.<span class="property">message</span>));</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getTodoStarted</span> = (<span class="params"></span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;GET_TODO_STARTED&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getTodoSuccess</span> = todo =&gt; (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;GET_TODO_SUCCESS&quot;</span>,</span><br><span class="line">  <span class="attr">payload</span>: &#123;</span><br><span class="line">    ...todo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getTodoFailure</span> = error =&gt; (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;GET_TODO_FAILURE&quot;</span>,</span><br><span class="line">  <span class="attr">payload</span>: &#123;</span><br><span class="line">    error</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>From the component, we can dispatch a function instead of an Object</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(<span class="title function_">getTodo</span>(id))</span><br></pre></td></tr></table></figure>


<p>Here is the complete example that uses async action to fetch data</p>
<iframe
     src="https://codesandbox.io/embed/redux-async-action-r6evr?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Redux Async Action"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<p>Reference</p>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/redux-redux-thunk">Understanding Asynchronous Redux Actions with Redux Thunk</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React useEffect Hook</title>
    <url>/React/React-useEffect-Hook/</url>
    <content><![CDATA[<p>React UseEffect Hook</p>
<span id="more"></span>

<h1 id="Side-effects"><a href="#Side-effects" class="headerlink" title="Side effects"></a>Side effects</h1><p>Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of <strong>side effects</strong>. Whether or not you’re used to calling these operations “side effects”</p>
<h1 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h1><ul>
<li>The Effect Hook lets you perform side effects in functional components</li>
<li>Signature is <code>useEffect(fn, [])</code></li>
<li>It is a close replacement for <strong>componentDidMount</strong>, <strong>componentDidUpdate</strong> and <strong>componentWillUnmount</strong>.</li>
<li>The second parameter is dependency list. If given dependency list, useEffect hook only executes when dependency changes. This improves performance.</li>
<li>If dependency list is an empty array, then useEffect is only called once at initial render</li>
<li>you can have multiple useEffect functions defined in a component, each with a differnt dependency</li>
<li>To Clean up, add the clean up function in the return statement in the useEffect hook</li>
</ul>
<h1 id="Component-Mount"><a href="#Component-Mount" class="headerlink" title="Component Mount"></a>Component Mount</h1><p>If you pass an empty array ([]) as second parameter, the props and state inside the effect will always have their initial values. This is equivalent to <strong>componentDidMount</strong> lifecycle method.</p>
<p>Todo.js - fetch data when component mounts</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Todo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [todoid, setTodoid] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> [todo, setTodo] = <span class="title function_">useState</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span> )</span><br><span class="line">            .<span class="title function_">then</span>( <span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="title function_">setTodo</span>(res))</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;todo.title&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>useEffect do not take an async function that returns a promise. If you need to use async function, write the async function inside the effect and call it immediately.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span> ()&#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> response.<span class="title function_">json</span>()</span><br><span class="line">    <span class="title function_">setTodo</span>(json)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fetchData</span>()</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>

<h1 id="With-Dependency-List"><a href="#With-Dependency-List" class="headerlink" title="With Dependency List"></a>With Dependency List</h1><p>dependency list can contain props or state. Whenever the dependency changes, the useEffect function gets called.</p>
<p>Example: when the state todoid change, fetch the data from API endpoint</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Todo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [todoid, setTodoid] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> [todo, setTodo] = <span class="title function_">useState</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/todos/&quot;</span> + todoid)</span><br><span class="line">            .<span class="title function_">then</span>( <span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="title function_">setTodo</span>(res))</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br><span class="line">    &#125;, [todoid])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;todoid&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setTodoid(e.target.value)&#125;  /&gt;</span></span><br><span class="line"><span class="language-xml">            &#123;todo.title&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Clean-up"><a href="#Clean-up" class="headerlink" title="Clean up"></a>Clean up</h1><ul>
<li>React performs the cleanup when the component unmounts.</li>
<li>useEffect keeps the side effect code together</li>
<li>The returned function from useEffect function call is invoke when cleaning up.</li>
</ul>
<p>Here is the example from Hooks doc - clean up function will get called when the component unmounts.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FriendStatus</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleStatusChange</span>(<span class="params">status</span>) &#123;</span><br><span class="line">      <span class="title function_">setIsOnline</span>(status.<span class="property">isOnline</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">ChatAPI</span>.<span class="title function_">subscribeToFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">    <span class="comment">// Specify how to clean up after this effect:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">cleanup</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">ChatAPI</span>.<span class="title function_">unsubscribeFromFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Loading...&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">&#x27;Online&#x27;</span> : <span class="string">&#x27;Offline&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://reactjs.org/docs/hooks-overview.html">Hooks at a Glance</a></li>
<li><a href="https://reactjs.org/docs/hooks-effect.html">Using the Effect Hook</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>Redux</title>
    <url>/React/Redux/</url>
    <content><![CDATA[<p>Redux Basics</p>
<span id="more"></span>

<h1 id="What-is-Redux"><a href="#What-is-Redux" class="headerlink" title="What is Redux?"></a>What is Redux?</h1><p><strong>Redux is a library for managing and updating application state, using events called “actions”</strong>. It serves as a centralized store for state that needs to be used across your entire application, with rules ensuring that the state can only be updated in a predictable fashion.</p>
<p>The patterns and tools provided by Redux make it easier to understand when, where, why, and how the state in your application is being updated, and how your application logic will behave when those changes occur. </p>
<h1 id="When-to-use-Redux"><a href="#When-to-use-Redux" class="headerlink" title="When to use Redux"></a>When to use Redux</h1><ul>
<li>You have large amounts of application state that are needed in many places in the app</li>
<li>The app state is updated frequently over time</li>
<li>The logic to update that state may be complex</li>
<li>The app has a medium or large-sized codebase, and might be worked on by many people</li>
</ul>
<h1 id="Three-Principles"><a href="#Three-Principles" class="headerlink" title="Three Principles"></a>Three Principles</h1><p>Redux can be described in three fundamental principles:</p>
<ul>
<li><strong>Single source of truth</strong> The state of your whole application is stored in an object tree within a single store</li>
<li><strong>State is read-only</strong> The only way to change the state is to emit an action, an object describing what happened</li>
<li><strong>Changes are amde with pure function</strong> To specify how the state tree is transformed by actions, you write pure reducers</li>
</ul>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>To use Redux, need to first install redux and react-redux</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install redux react-redux</span><br></pre></td></tr></table></figure>


<h1 id="Counter-Example-without-Redux"><a href="#Counter-Example-without-Redux" class="headerlink" title="Counter Example without Redux"></a>Counter Example without Redux</h1><p>We can convert a Counter component from using state to use Redux to store its state. </p>
<p>Counter component that doesn’t use Redux:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">function Counter() &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  const [step, setStep] = useState(1);</span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;step&quot;</span> <span class="attr">value</span>=<span class="string">&#123;step&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;</span> <span class="attr">e</span> =&gt;</span> setStep(parseInt(e.target.value)) &#125; /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + step)&#125;&gt;Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count - step)&#125;&gt;Decrease<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Counter;</span><br></pre></td></tr></table></figure>
<p>Currently the count is a local state to the Counter component, we will move the count to Redux store and create actions and reducers to change this state.</p>
<h1 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h1><p>An <strong>action</strong> is a plain JavaScript object that has a <code>type</code> field. You can think of an action as an event that describes something that happened in the application. Actions usually contains payloads that is needed to update the state.</p>
<p>An action creator is a function that creates and returns an action object. We typically use these so we don’t have to write the action object by hand every time:</p>
<p>actions&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">increase</span> = step =&gt; (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;INCREASE&quot;</span>,</span><br><span class="line">  <span class="attr">payload</span>: &#123;</span><br><span class="line">    step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">decrease</span> = step =&gt; (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;DECREASE&quot;</span>,</span><br><span class="line">  <span class="attr">payload</span>: &#123;</span><br><span class="line">    step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Here we define two action creators, <em>increase</em> and <em>decrease</em>.</p>
<h1 id="Reducers"><a href="#Reducers" class="headerlink" title="Reducers"></a>Reducers</h1><p>A reducer is a function that receives the current state and an action object, decides how to update the state if necessary, and returns the new state: <code>(state, action) =&gt; newState.</code></p>
<p>Reducers must always follow some specific rules:</p>
<ul>
<li>They should only calculate the new state value based on the <code>state</code> and <code>action</code> arguments</li>
<li>They are not allowed to modify the existing <code>state</code>. Instead, they must make immutable updates, by copying the existing <code>state</code> and making changes to the copied values.</li>
<li>They must not do any asynchronous logic, calculate random values, or cause other “side effects”</li>
</ul>
<p>reducers&#x2F;counter.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">counter</span> = (<span class="params">state = initialState, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;INCREASE&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, </span><br><span class="line">        <span class="attr">value</span>: state.<span class="property">value</span> + action.<span class="property">payload</span>.<span class="property">step</span> </span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;DECREASE&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, </span><br><span class="line">        <span class="attr">value</span>: state.<span class="property">value</span> - action.<span class="property">payload</span>.<span class="property">step</span> </span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counter;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Here the initialState is a javascript object that contains a number.</p>
<p><strong>Redux expects that all state updates are done immutably.</strong> so you need to return a new object&#x2F;array instead of modifying the existing state.</p>
<p>There are usually multiple Reducers, we can use <em>combineReducers</em> function to combine multiple reducers.</p>
<p>reducers&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">&#x27;./counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">    counter</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h1 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h1><p>The current Redux application state lives in an object called the <strong>store</strong>.</p>
<p>The store is created by passing in a reducer.</p>
<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer)</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Optional: To use Redux with <a href="https://github.com/zalmoxisus/redux-devtools-extension">Redux DevTools Extension</a>, you need to add an extract argument to createStore function.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">  reducer, <span class="comment">/* preloadedState, */</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">__REDUX_DEVTOOLS_EXTENSION__</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">__REDUX_DEVTOOLS_EXTENSION__</span>()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h1 id="Dispatch"><a href="#Dispatch" class="headerlink" title="Dispatch"></a>Dispatch</h1><p>The Redux store has a method called <code>dispatch</code>. The only way to update the state is to call <code>store.dispatch()</code> and pass in an action object. <strong>You can think of dispatching actions as “triggering an event” in the application.</strong></p>
<p>One way to use dispatch is to use <code>useDispatch</code> hook.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br></pre></td></tr></table></figure>

<p>Counter Component</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; connect &#125; from &quot;react-redux&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; increase, decrease &#125; from &quot;../actions&quot;;</span><br><span class="line"></span><br><span class="line">function Counter(props) &#123;</span><br><span class="line">  const [step, setStep] = useState(1);</span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;step&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">value</span>=<span class="string">&#123;step&#125;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> setStep(parseInt(e.target.value, 10))&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> props.incr(step)&#125;&gt;Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> props.decr(step)&#125;&gt;Decrease<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = state =&gt; &#123;</span><br><span class="line">  return &#123; count: state.counter.value &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = dispatch =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    incr: step =&gt; dispatch(increase(step)),</span><br><span class="line">    decr: step =&gt; dispatch(decrease(step))</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">export default connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Counter);</span><br></pre></td></tr></table></figure>

<p>React Redux provides a <a href="https://react-redux.js.org/api/connect">connect</a> function for you to read values from the Redux store and dispatch actions. connect function accepts two parameters. </p>
<ul>
<li>mapStateToProps - function that transforms the current Redux store state into props of the component</li>
<li>mapDispatchToProps - function or object. If it is a function. it should return an object full of functions that use <code>dispatch</code> to dispatch actions. If it is an object, it will contain functions that use <code>dispatch</code> to dispatch actions.</li>
</ul>
<h1 id="Dataflow"><a href="#Dataflow" class="headerlink" title="Dataflow"></a>Dataflow</h1><p>Initial setup: A redux store is created with a root reducer function. </p>
<p>Update</p>
<ol>
<li>When user clicks a button, app code dispatch an action to the Redux store. <code>&#123;type: &#39;INCREASE&#39;, step: 2&#125;</code></li>
<li>Reducer function runs with the previous state and current action. Return value as the new state.</li>
<li>Store notify all parts of the UI that are subscribed that the store has been updated</li>
<li>UI component re-render with the new state.</li>
</ol>
<h1 id="Counter-Example-with-Redux"><a href="#Counter-Example-with-Redux" class="headerlink" title="Counter Example with Redux"></a>Counter Example with Redux</h1><p>Here is the complete code for Counter example that uses Redux </p>
<iframe
     src="https://codesandbox.io/embed/redux-intro1-3kp1o?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Redux Intro1"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts">Redux Essentials, Part 1: Redux Overview and Concepts</a></li>
<li><a href="https://react-redux.js.org/introduction/basic-tutorial">React Redux Basic Tutorial</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Cloud - Eureka</title>
    <url>/SpringCloud/Spring-Cloud-Eureka/</url>
    <content><![CDATA[<p>Let’s learn Service Discovery and use Eureka as a service registry.</p>
<span id="more"></span>

<h1 id="Service-Discovery"><a href="#Service-Discovery" class="headerlink" title="Service Discovery"></a>Service Discovery</h1><p>Nowadays services are usually running on the cloud and have dynamic network locations. Network locations changes when service is restarted or upgraded. Locating such service with a configuration file just doesn’t work. Service Discovery can solve this problem</p>
<p>There are two main service discovery patterns: </p>
<ul>
<li>client‑side discovery - application service register its location to central registry.  The  client queries service registry to get the available service location and then make a request to one of the available service. The Biggest drawback is clients has to know how to talk to the service registry and this creates tight coupling between service registry and clients. Example Client-side discovery registry are Zookeeper, Etcd</li>
<li>server‑side discovery - The client makes a request to a service via load balancer. The load balancer queries the service registry and routes each request to an available service instance. AWS Elastic Load Balancer(ELB) is an example of server-side discovery router.</li>
</ul>
<h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><p>Eureka is a REST based service that is primarily used in the AWS cloud for locating services for the purpose of load balancing and failover of middle-tier servers.</p>
<p>Eureka is an example of client-side discovery service registry. </p>
<p>Remember that Eureka 1.x is still active. The work on Eureka 2.0 is discontinued. </p>
<p>Eureka Comes with Two Components</p>
<ul>
<li>Eureka Server</li>
<li>Eureka Client</li>
</ul>
<p>There are two types of applications that uses Eureka</p>
<ul>
<li>Application Client - use Eureka Client to make requests to the Application Service.</li>
<li>Application Service - receives requests from Application Client and sends a response back.</li>
</ul>
<h1 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h1><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>main application - <code>@EnableEurekaServer</code> annotation shows it is a Eureka Server</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscoveryServerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(DiscoveryServerApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>application.properties file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.port=8761</span><br><span class="line"></span><br><span class="line">eureka.client.register-with-eureka=false</span><br><span class="line">eureka.client.fetch-registry=false</span><br></pre></td></tr></table></figure>

<p>Properties explained</p>
<ul>
<li><code>eureka.client.register-with-eureka</code> Register itself as a Client, default is true</li>
<li><code>eureka.client.fetch-registry</code> fetch registry from eureka server, default is true</li>
<li><code>eureka.client.serviceUrl.defaultZone</code> comma separated list of peers</li>
</ul>
<p>Now Eureka Server is running at <a href="http://localhost:8761/">http://localhost:8761/</a></p>
<h1 id="Eureka-Clients"><a href="#Eureka-Clients" class="headerlink" title="Eureka Clients"></a>Eureka Clients</h1><p>All clients need to have eureka-client dependency in pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ClientAController.java - A very simple Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientAController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/msg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;message from server1.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ClientA application.properties file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.application.name=eureka-client-a</span><br><span class="line"></span><br><span class="line">server.port=8000</span><br><span class="line"></span><br><span class="line"># eureka server url</span><br><span class="line">eureka.client.service-url.default-zone=http://localhost:8761/eureka</span><br></pre></td></tr></table></figure>

<p><code>@EnableEurekaClient</code> can be added to the main class, but this is optional.</p>
<p>ClientBController.java - note that it can refer to clientA host using the registered application name.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientBController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getMsgFromClientA&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsgFromClientA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msgFromClientA</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://eureka-client-a/msg&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Message From ClientA: &quot;</span> + msgFromClientA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ClientB application.properties file</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.application.name=eureka-client-b</span><br><span class="line"></span><br><span class="line">server.port=<span class="number">8001</span></span><br><span class="line"></span><br><span class="line"># eureka server url</span><br><span class="line">eureka.client.service-url.<span class="keyword">default</span>-zone=http:<span class="comment">//localhost:8761/eureka</span></span><br></pre></td></tr></table></figure>

<p>Configuration for RestTemplate dependency. It has @LoadBalancered annotation so that it can resolve application host name and do load balance.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output for URL <a href="http://localhost:8001/getMsgFromClientA">http://localhost:8001/getMsgFromClientA</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Message From ClientA: message from server1.</span><br></pre></td></tr></table></figure>

<h1 id="Feign-Rest-Client"><a href="#Feign-Rest-Client" class="headerlink" title="Feign Rest Client"></a>Feign Rest Client</h1><p><a href="https://github.com/OpenFeign/feign">OpenFeign</a> is a declarative REST client for Spring Boot apps. Feign makes writing java http clients easier. You can use Feign to replace RestTemplate.</p>
<p>Maven Dependency</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>EurekaClientBApplication.java - add <code>@EnableFeignClients</code> annotation to top level Spring boot Application class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaClientBApplication</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(EurekaClientBApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Create FeignClient Interface. Feign Client has <code>@FeignClient</code> annotation. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value=&quot;eureka-client-a&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/msg&quot;)</span></span><br><span class="line">    String <span class="title function_">getMsgFromClientA</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ClientBController class - replace RestTemplate with Feign client.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientBController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyFeignClient myFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getMsgFromClientA&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsgFromClientA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Message From ClientA: &quot;</span> + myFeignClient.getMsgFromClientA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Feign supports Hystrix. To enable Hystrix, add <code>feign.hystrix.enabled=true</code> to application.properties file. You can also implement fallback method when the service call fails. For more information on OpenFeign, see <a href="https://www.baeldung.com/spring-cloud-openfeign">Spring Cloud OpenFeign by Baeldung</a></p>
<h1 id="Eureka-Server-Cluster"><a href="#Eureka-Server-Cluster" class="headerlink" title="Eureka Server Cluster"></a>Eureka Server Cluster</h1><p>In production, we usually need to have 3 or more instances of registration service for High Availability. Each eureka service knows each other.</p>
<p>application.yml file with 3 different profiles.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">peer1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">peer1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer2:8762/eureka/,</span> <span class="string">http://peer3:8763/eureka/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">peer2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8762</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">peer2</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer1:8761/eureka/,</span> <span class="string">http://peer3:8763/eureka/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">peer3</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8763</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">peer3</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer1:8761/eureka/,</span> <span class="string">http://peer2:8762/eureka/</span></span><br></pre></td></tr></table></figure>

<p>Add the following to &#x2F;etc&#x2F;hosts file when you are running the cluster in local machine.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 peer1</span><br><span class="line">127.0.0.1 peer2</span><br><span class="line">127.0.0.1 peer3</span><br></pre></td></tr></table></figure>

<p>Spring Cloud Eureka Docs</p>
<ul>
<li><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.2.RELEASE/reference/html/#service-discovery-eureka-clients">Eureka Clients</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.2.RELEASE/reference/html/#spring-cloud-eureka-server">Eureka Server</a>)</li>
<li><a href="https://github.com/Netflix/eureka/wiki">Eureka Wiki in Github</a></li>
</ul>
<p>Reference</p>
<ul>
<li><a href="https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/">Service Discovery in a Microservices Architecture</a></li>
<li><a href="https://www.baeldung.com/spring-cloud-netflix-eureka">Introduction to Spring Cloud Netflix – Eureka by baeldung</a></li>
<li><a href="https://stackoverflow.com/questions/38549902/eureka-server-how-to-achieve-high-availability">Eureka Server: How to achieve high availability</a></li>
<li><a href="https://www.baeldung.com/spring-cloud-openfeign">Spring Cloud OpenFeign by Baeldung</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
  </entry>
  <entry>
    <title>Redux Toolkit</title>
    <url>/React/ReduxToolkit/</url>
    <content><![CDATA[<p>Redux Toolkit is a package that simplifies the process of managing state in a React application using Redux. </p>
<span id="more"></span>

<h1 id="Redux-Toolkit"><a href="#Redux-Toolkit" class="headerlink" title="Redux Toolkit"></a>Redux Toolkit</h1><p>Here’s a simple example of how you can use Redux Toolkit to manage a counter in a React app:</p>
<h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>First, make sure you have Redux Toolkit installed. If not, you can install it using npm or yarn:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure>

<h1 id="Create-Redux-Store"><a href="#Create-Redux-Store" class="headerlink" title="Create Redux Store"></a>Create Redux Store</h1><p>create a file <code>src/app/store.js</code>. use <code>configureStore</code> to create an empty Redux store.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Add-Redux-Store-to-React"><a href="#Add-Redux-Store-to-React" class="headerlink" title="Add Redux Store to React"></a>Add Redux Store to React</h1><p>Now, we can add this store to our React app. In <code>index.js</code>. Add <code>&lt;Provider&gt;</code> to the root component of your app and pass the store as a prop.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&quot;./app/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(rootElement);</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="Create-Redux-Slice"><a href="#Create-Redux-Slice" class="headerlink" title="Create Redux Slice"></a>Create Redux Slice</h1><p>Now, let’s create a Redux slice using Redux Toolkit. Create a file called <code>counterSlice.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  initialState,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">incrementByAmount</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += action.<span class="property">payload</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Action creators are generated for each case reducer function</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="property">actions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure>

<p>In this example, we define a slice of the Redux store called <code>counter</code>. It has an initial state of <code>&#123;value: 0&#125;</code> and reducer functions: <code>increment</code>, <code>decrement</code> and <code>incrementByAmount</code>.</p>
<p>incrementByAmount takes a payload as an argument and increments the state by that amount.</p>
<p>Export action creators from the slice. These are functions that dispatch actions to the reducer. We can use these functions in our React components to update the state.</p>
<h1 id="Add-Slice-to-Redux-Store"><a href="#Add-Slice-to-Redux-Store" class="headerlink" title="Add Slice to Redux Store"></a>Add Slice to Redux Store</h1><p>Now we can add the reducers we defined from slice to the Redux store. In <code>store.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&#x27;./counterSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>

<h1 id="Use-Redux-Store-In-React-Component"><a href="#Use-Redux-Store-In-React-Component" class="headerlink" title="Use Redux Store In React Component"></a>Use Redux Store In React Component</h1><p>Now, you can use this store in your React component. For example, in <code>Counter.js</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Counter.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; decrement, increment, incrementByAmount &#125; <span class="keyword">from</span> <span class="string">&quot;./counterSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">counter</span>.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line">  <span class="keyword">const</span> [incrementAmount, setIncrementAmount] = <span class="title function_">useState</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleIncrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">increment</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleDecrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">decrement</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleIncrementAmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">incrementByAmount</span>(<span class="title class_">Number</span>(incrementAmount) || <span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleIncrement&#125;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleDecrement&#125;</span>&gt;</span>Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;incrementAmount&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setIncrementAmount(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleIncrementAmount&#125;</span>&gt;</span>Add Amount<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this component, we use the <code>useSelector</code> hook to access the state from the Redux store </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getting state value from Redux store using useSelector hook</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">counter</span>.<span class="property">value</span>);</span><br></pre></td></tr></table></figure>

<p>We use the <code>useDispatch</code> hook to get the <code>dispatch</code> function. When the “Increment” or “Decrement” buttons are clicked, the corresponding actions are dispatched, updating the state through the reducer defined in the <code>counterSlice.js</code> file.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import the actions from slice</span></span><br><span class="line"><span class="keyword">import</span> &#123; decrement, increment, incrementByAmount &#125; <span class="keyword">from</span> <span class="string">&quot;./counterSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get dispatch hook</span></span><br><span class="line"><span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// dispatch action</span></span><br><span class="line"><span class="title function_">dispatch</span>(<span class="title function_">increment</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// dispatch action with payload</span></span><br><span class="line"><span class="title function_">dispatch</span>(<span class="title function_">incrementByAmount</span>(<span class="title class_">Number</span>(incrementAmount) || <span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<h1 id="Full-Exaple"><a href="#Full-Exaple" class="headerlink" title="Full Exaple:"></a>Full Exaple:</h1><iframe src="https://codesandbox.io/embed/reduxtoolkit-wylhnz?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="ReduxToolkit"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>


<p>Resources</p>
<ul>
<li><a href="https://redux-toolkit.js.org/">Redux Toolkit</a></li>
<li><a href="https://redux-toolkit.js.org/tutorials/quick-start">Redux Quick Start</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Actuator</title>
    <url>/SpringBoot/Spring-Boot-Actuator/</url>
    <content><![CDATA[<p>Spring Boot Actuator provides metrics and app monitoring to our application.</p>
<span id="more"></span>

<h1 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h1><p>add spring-boot-starter-actuator dependency. </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>If you are creating a web application, you need spring-boot-starter-web dependency</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h1><p>Start from Spring Boot 2.x, most endpoints are disabled by default. Only <em>&#x2F;health</em> and <em>&#x2F;info</em> are enabled.</p>
<p>To allow all the endpoints, set <em>management.endpoints.web.exposure.include</em> property to *</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>we can also enable specific endpoints, for example: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=beans, metrics</span><br></pre></td></tr></table></figure>

<p>Here are all the endpoint</p>
<ul>
<li><strong>&#x2F;auditevents</strong> - provides information about the application’s audit events. Audit events are login or logout events.</li>
<li><strong>&#x2F;beans</strong> - provides information about the application’s beans.</li>
<li><strong>&#x2F;conditions</strong> - provides information about the evaluation of conditions on configuration and auto-configuration classes.</li>
<li><strong>&#x2F;configprops</strong> - provides information about the application’s @ConfigurationProperties beans.</li>
<li><strong>&#x2F;env</strong> - provides information about the application’s Environment.</li>
<li><strong>&#x2F;flyway</strong> - provides information about database migrations performed by Flyway.</li>
<li><strong>&#x2F;health</strong> - provides detailed information about the health of the application.</li>
<li><strong>&#x2F;heapdump</strong> - provides a heap dump from the application’s JVM.</li>
<li><strong>&#x2F;httptrace</strong> - provides information about HTTP request-response exchanges.</li>
<li><strong>&#x2F;info</strong> - provides general information about the application.</li>
<li><strong>&#x2F;liquibase</strong> - provides information about database change sets applied by Liquibase.</li>
<li><strong>&#x2F;logfile</strong> - provides access to the contents of the application’s log file.</li>
<li><strong>&#x2F;mappings</strong> - provides information about the application’s request mappings.</li>
<li><strong>&#x2F;metrics</strong> - provides access to application metrics.</li>
<li><strong>&#x2F;prometheus</strong> - provides Spring Boot application’s metrics in the format required for scraping by a Prometheus server.</li>
<li><strong>&#x2F;scheduledtasks</strong> - provides information about the application’s scheduled tasks.</li>
<li><strong>&#x2F;sessions</strong> - provides information about the application’s HTTP sessions that are managed by Spring Session.</li>
<li><strong>&#x2F;shutdown</strong> - to gracefully shut down the application. Need to use Http POST method for this endpoint.</li>
<li><strong>&#x2F;threaddump</strong> - provides a thread dump from the application’s JVM.</li>
</ul>
<h1 id="Actuator-Endpoint"><a href="#Actuator-Endpoint" class="headerlink" title="Actuator Endpoint"></a>Actuator Endpoint</h1><p><a href="http://localhost:8080/actuator/">http://localhost:8080/actuator/</a> - The &#x2F;actuator endpoint list all the available actuator endpoints avaialble.</p>
<p>sample response:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;beans&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/beans&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;health&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/health&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;health-path&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/health/&#123;*path&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/info&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;conditions&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/conditions&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Health-Endpoint"><a href="#Health-Endpoint" class="headerlink" title="Health Endpoint"></a>Health Endpoint</h1><p><a href="http://localhost:8080/actuator/health">http://localhost:8080/actuator/health</a> - The health endpoint provides detailed information about the health of the application.</p>
<p>sample response</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;UP&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Health-Indicator"><a href="#Health-Indicator" class="headerlink" title="Health Indicator"></a>Health Indicator</h2><p>You can create customized Health Indicator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServicesHealthIndicator</span> <span class="keyword">implements</span> <span class="title class_">HealthIndicator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Health <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">service1Health</span> <span class="operator">=</span> checkService1Health();</span><br><span class="line">        <span class="type">String</span> <span class="variable">service2Health</span> <span class="operator">=</span> checkService2Health();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; serviceHealthMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        serviceHealthMap.put(<span class="string">&quot;service1&quot;</span>, service1Health);</span><br><span class="line">        serviceHealthMap.put(<span class="string">&quot;service2&quot;</span>, service2Health);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;up&quot;</span>.equals(service1Health) &amp;&amp; <span class="string">&quot;up&quot;</span>.equals(service2Health)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Health.up().withDetails(serviceHealthMap).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Health.down().withDetails(serviceHealthMap).build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">checkService1Health</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;up&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">checkService2Health</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;up&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>By default, details are not shown, you need to enable it in application.properties file by setting <em>management.endpoint.health.show-details</em> property. Values are <em>never</em>, <em>always</em> and <em>when-authorized</em>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management.endpoint.health.show-details=always</span><br></pre></td></tr></table></figure>

<p>Sample response</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UP&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;services&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UP&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;service2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;up&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;service1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;up&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;diskSpace&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UP&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">234685313024</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;free&quot;</span><span class="punctuation">:</span> <span class="number">172010881024</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;threshold&quot;</span><span class="punctuation">:</span> <span class="number">10485760</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Info-Endpoint"><a href="#Info-Endpoint" class="headerlink" title="Info Endpoint"></a>Info Endpoint</h1><p><a href="http://localhost:8080/actuator/info">http://localhost:8080/actuator/info</a> - The info endpoint provides general information about the application. You can set the information about the application using properties with info prefix.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info.app.name=Sample Application</span><br><span class="line">info.app.description=Desc</span><br><span class="line">info.app.version=1.0.0</span><br></pre></td></tr></table></figure>

<p>sample response</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;app&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sample Application&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Desc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Beans"><a href="#Beans" class="headerlink" title="Beans"></a>Beans</h1><p><a href="http://localhost:8080/actuator/beans">http://localhost:8080/actuator/beans</a> - Shows all the beans’ aliases, scope, type, resource and dependencies.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;contexts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;application&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;beans&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;endpointCachingOperationInvokerAdvisor&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;singleton&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.class]&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;environment&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;defaultServletHandlerMapping&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;singleton&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.springframework.web.servlet.HandlerMapping&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Mappings"><a href="#Mappings" class="headerlink" title="Mappings"></a>Mappings</h1><p><a href="http://localhost:8080/actuator/mappings">http://localhost:8080/actuator/mappings</a> - Shows all the mapping information</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;handler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public java.lang.String com.example.demo.controller.HelloController.sayHello()&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;predicate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123; /hello&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;handlerMethod&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;className&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.example.demo.controller.HelloController&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sayHello&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;descriptor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;()Ljava/lang/String;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;requestMappingConditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;consumes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;methods&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;patterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/hello&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;produces&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="scheduledtasks"><a href="#scheduledtasks" class="headerlink" title="scheduledtasks"></a>scheduledtasks</h1><p><a href="http://localhost:8080/actuator/scheduledtasks">http://localhost:8080/actuator/scheduledtasks</a> - check scheduled tasks</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;cron&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fixedDelay&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fixedRate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;runnable&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.example.demo.Application.someJob&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;initialDelay&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="number">2000</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;custom&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Httptrace"><a href="#Httptrace" class="headerlink" title="Httptrace"></a>Httptrace</h1><p>shows http trace. It includes detailed information about the request and response. Sample response</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;traces&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">     <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-05-27T09:29:55.652Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;principal&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;session&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GET&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/favicon.ico&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;referer&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;http://localhost:8080/hello&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;accept-language&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,zh-TW;q=0.6&quot;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;localhost:8080&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;keep-alive&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;cache-control&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;no-cache&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;accept-encoding&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;gzip, deflate, br&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;pragma&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;no-cache&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;accept&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;image/webp,image/apng,image/*,*/*;q=0.8&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;user-agent&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;remoteAddress&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;response&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;Accept-Ranges&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;bytes&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Last-Modified&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Tue, 30 Apr 2019 06:18:32 GMT&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Content-Length&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;946&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Date&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Mon, 27 May 2019 09:29:55 GMT&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Content-Type&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;image/x-icon&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;timeTaken&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Threaddump"><a href="#Threaddump" class="headerlink" title="Threaddump"></a>Threaddump</h1><p><a href="http://localhost:8080/actuator/threaddump">http://localhost:8080/actuator/threaddump</a> - dumps threads</p>
<h1 id="Shutdown"><a href="#Shutdown" class="headerlink" title="Shutdown"></a>Shutdown</h1><p>This endpoint is very dangerous so keeping it disabled is recommended. To enable this endpoint, add the following line to application.properties file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management.endpoint.shutdown.enabled=true</span><br></pre></td></tr></table></figure>

<p>shutdown only support POST request</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -X POST &quot;http://localhost:8080/actuator/shutdown&quot;</span><br><span class="line">&#123;&quot;message&quot;:&quot;Shutting down, bye...&quot;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.x/actuator-api/html/#overview">Spring Boot Actuator Web API Documentation
</a></li>
<li><a href="https://www.baeldung.com/spring-boot-actuators">Spring Boot Actuator</a></li>
</ul>
<p>source code: <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/actuator">SpringBootExamples - actuator</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - ApplicationRunner and CommandLineRunner</title>
    <url>/SpringBoot/Spring-Boot-ApplicationRunner-and-CommandLineRunner/</url>
    <content><![CDATA[<p><a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/ApplicationRunner.html">ApplicationRunner</a> and <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/CommandLineRunner.html">CommandLineRunner</a> interfaces lets you to execute the code after the Spring Boot application is started.</p>
<span id="more"></span>

<h1 id="ApplicationRunner"><a href="#ApplicationRunner" class="headerlink" title="ApplicationRunner"></a>ApplicationRunner</h1><p><a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/ApplicationRunner.html">ApplicationRunner</a> interface allows you to run some code after Sprint Boot starts. </p>
<p>MyApplicationRunner.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(MyApplicationRunner.class);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        args.getOptionNames().forEach(LOG::info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CommandLineRunner"><a href="#CommandLineRunner" class="headerlink" title="CommandLineRunner"></a>CommandLineRunner</h1><p><a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/CommandLineRunner.html">CommandLineRunner</a> interface allows you to run some code after Sprint Boot starts. The difference between CommandLineRunner and ApplicationRunner is run() method’s parameter. With <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/CommandLineRunner.html">CommandLineRunner</a> you get raw unprocessed arguments.</p>
<p>MyCommandListRunner.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCommandListRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(MyCommandListRunner.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Stream.of(args).forEach(LOG::info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>sample output with application argument <code>--foo=bar</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2019-05-02 22:59:35.261  INFO 15067 --- [  restartedMain] com.example.demo.MyApplicationRunner                  : foo</span><br><span class="line">2019-05-02 22:59:35.261  INFO 15067 --- [  restartedMain] com.example.demo.MyCommandListRunner           : --foo=bar</span><br></pre></td></tr></table></figure>


<p>Reference</p>
<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-command-line-runner">Application Runners and Command Line Runners</a></li>
<li><a href="https://www.tutorialspoint.com/spring_boot/spring_boot_runners.htm">Spring Boot Runners</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - auto-configuration</title>
    <url>/SpringBoot/Spring-Boot-Auto-Configuration/</url>
    <content><![CDATA[<p>Spring Boot auto-configuration makes it easy to configure your application.</p>
<span id="more"></span>

<h1 id="Auto-configured"><a href="#Auto-configured" class="headerlink" title="Auto-configured"></a>Auto-configured</h1><p>Spring Boot auto-configuration is a feature that automatically configures your Spring application based on the JAR dependencies you have added to your project. It is a way to reduce the amount of boilerplate code you need to write.</p>
<p>You can enable auto configuration by adding <code>@EnableAutoConfiguration</code> to one of your <code>@Configuration</code> classes. Spring Boot will automatically configure your application based on the dependencies you have added to your project.</p>
<p>If you already have <code>@SpringBootApplication</code>, you don’t need to add @EnableAutoConfiguration. @SpringBootApplication already includes @EnableAutoConfiguration.</p>
<h1 id="Disabling-Auto-Configuration"><a href="#Disabling-Auto-Configuration" class="headerlink" title="Disabling Auto-Configuration"></a>Disabling Auto-Configuration</h1><p>If you find configuration class that you don’t want to apply. You can exclude it by adding <code>@EnableAutoConfiguration(exclude = &#123;ClassName.class&#125;)</code> to one of your <code>@Configuration</code> classes.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Debugging-Auto-configured"><a href="#Debugging-Auto-configured" class="headerlink" title="Debugging Auto-configured"></a>Debugging Auto-configured</h1><p>If you want to see what auto-configuration is being applied to your application, you can add <code>--debug</code> to your application start command.<br>Or you can add <code>debug=true</code> to your <code>application.properties</code> or <code>application.yml</code> file.</p>
<p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">debug</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>When you start your application, you will see CONDITIONS EVALUATION REPORT in the log file. It will show you what auto-configuration is being applied to your application.</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - CLI</title>
    <url>/SpringBoot/Spring-Boot-CLI/</url>
    <content><![CDATA[<p>You can use Spring Boot CLI to generate Spring Boot application</p>
<span id="more"></span>

<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>You can download CLI from <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.installing.cli.manual-installation">spring boot cli</a></p>
<p>After you download the zip file. unzip it to a place you like. You need to add the binary file path to the PATH environment variable.</p>
<h1 id="Initialize-a-new-Project"><a href="#Initialize-a-new-Project" class="headerlink" title="Initialize a new Project"></a>Initialize a new Project</h1><p>To display help</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring --help</span><br></pre></td></tr></table></figure>

<p>To list the capabilities of the service. Use it to discover the dependencies and the types that are available</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring init --list</span><br></pre></td></tr></table></figure>

<p>To create a default project. This will generate demo.zip file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring init</span><br></pre></td></tr></table></figure>

<p>To create a project ‘myapp’ with web, devtools, lombok, jpa,h2 dependency and with artifactId myapp. Unpacked.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring init -j=17 -t=maven-project -d=web,devtools,lombok myapp</span><br></pre></td></tr></table></figure>

<p>Also create a maven project. This time with group id, name, artifiactId and java version</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring init -j=17 -t=maven-project -d=web,devtools,lombok,jpa,h2 \</span><br><span class="line">-g=com.xinghua24 -n=myapp -a=myapp myapp</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring init -j=17 -t=maven-project -d=web,devtools,lombok,jpa,mysql \</span><br><span class="line">-g=com.xinghua24 -n=myapp -a=myapp myapp</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Code Structure</title>
    <url>/SpringBoot/Spring-Boot-Code-Structure/</url>
    <content><![CDATA[<p>Recommended Spring Boot Project code structure.</p>
<span id="more"></span>
<h1 id="Typical-Layout"><a href="#Typical-Layout" class="headerlink" title="Typical Layout"></a>Typical Layout</h1><p>A typical spring boot project layout:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com</span><br><span class="line"> +- example</span><br><span class="line">     +- myapplication</span><br><span class="line">         +- Application.java</span><br><span class="line">         |</span><br><span class="line">         +- customer</span><br><span class="line">         |   +- Customer.java</span><br><span class="line">         |   +- CustomerController.java</span><br><span class="line">         |   +- CustomerService.java</span><br><span class="line">         |   +- CustomerRepository.java</span><br><span class="line">         |</span><br><span class="line">         +- order</span><br><span class="line">             +- Order.java</span><br><span class="line">             +- OrderController.java</span><br><span class="line">             +- OrderService.java</span><br><span class="line">             +- OrderRepository.java</span><br></pre></td></tr></table></figure>


<p>It is recommended that the Application class that contains the main method to be located at the root package above other classes. This allows package scan to apply on your project. Application class is usually annotated with @SpringBootApplication annotation. </p>
<p>Application.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SpringBootApplication-Annotation"><a href="#SpringBootApplication-Annotation" class="headerlink" title="@SpringBootApplication Annotation"></a>@SpringBootApplication Annotation</h1><p>@SpringBootApplication is a composite of three annotations</p>
<ul>
<li>@EnableAutoConfiguration: attempts to automatically configure Spring application based on dependencies</li>
<li>@ComponentScan: allows spring beans for the application to be scanned</li>
<li>@Configuration: enables java base configuration</li>
</ul>
<h1 id="Dependency-Injection-Makes-Easy"><a href="#Dependency-Injection-Makes-Easy" class="headerlink" title="Dependency Injection Makes Easy"></a>Dependency Injection Makes Easy</h1><p>If you follow the typical Spring Boot Application structure, there is no need to use <strong>@ComponentScan</strong> to scan beans. <strong>@SpringBootApplication</strong> at the root package will scan all beans in the application. Just use <strong>@Autowired</strong> to wire the beans</p>
<p>Reference</p>
<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-structuring-your-code.html">Spring Boot Document - Structuring Your Code</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-locating-the-main-class">Spring Boot Document - Locating the Main Application Class</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-using-springbootapplication-annotation.html">Spring Boot Document - @SpringBootApplication Annotation</a></li>
<li><a href="https://www.tutorialspoint.com/spring_boot/spring_boot_beans_and_dependency_injection.htm">Beans and Dependency Injection</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - @Async</title>
    <url>/SpringBoot/Spring-Boot-Async/</url>
    <content><![CDATA[<p>Spring supports asynchronus processing using @Async annotaiton.</p>
<span id="more"></span>

<h1 id="Enable-Async-Processing"><a href="#Enable-Async-Processing" class="headerlink" title="Enable Async Processing"></a>Enable Async Processing</h1><p>To enable Scheduling annotation, add <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/EnableAsync.html">@EnableAsync</a> to one of your <code>@Configuration</code> class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean(name = &quot;asyncExecutor&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Executor <span class="title function_">asyncExecutor</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    executor.setCorePoolSize(<span class="number">3</span>);</span><br><span class="line">    executor.setMaxPoolSize(<span class="number">3</span>);</span><br><span class="line">    executor.setQueueCapacity(<span class="number">100</span>);</span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;AsynchThread-&quot;</span>);</span><br><span class="line">    executor.initialize();</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This class also create a customized <code>Executor</code> bean. If you don’t create a <code>Executor</code> bean. Spring by default will create a <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html">SimpleAsyncTaskExecutor</a> bean.</p>
<h1 id="Async-Annotation"><a href="#Async-Annotation" class="headerlink" title="@Async Annotation"></a>@Async Annotation</h1><p><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html">@Async</a> tells Spring that the method is asynchronous and should run on a separate thread.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageService</span> &#123;</span><br><span class="line">  <span class="meta">@Async( &quot;asyncExecutor&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">      log.info(Thread.currentThread().getName() + <span class="string">&quot; - sending message....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We can invoke the method to demonstrate it is executed asynchronously. The folowing controller calls the async method in its sendMessage() method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/greeting&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  SendMessageService sendMessageService;</span><br><span class="line">  <span class="comment">// GET localhost:8080/greeting/sendMessage</span></span><br><span class="line">  <span class="meta">@RequestMapping(value = &quot;/sendMessage&quot;,</span></span><br><span class="line"><span class="meta">      method = RequestMethod.GET,</span></span><br><span class="line"><span class="meta">      produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">  <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    sendMessageService.sendMessage();</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To test the method, we can invoke <a href="http://localhost:8080/greeting/sendMessage">http://localhost:8080/greeting/sendMessage</a> multiple times. We will see similar  log output in the console. From the log, we know the method runs on asynchronous threads.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AsynchThread-1 - sending message....</span><br><span class="line">AsynchThread-2 - sending message....</span><br><span class="line">AsynchThread-3 - sending message....</span><br><span class="line">AsynchThread-1 - sending message....</span><br></pre></td></tr></table></figure>

<p>Project files: <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/async">https://github.com/xinghua24/SpringBootExamples/tree/master/async</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://spring.io/guides/gs/async-method/">Async method</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Configuration</title>
    <url>/SpringBoot/Spring-Boot-Configuration/</url>
    <content><![CDATA[<p>There are many ways to set configuration to a Spring Boot application.</p>
<span id="more"></span>

<h1 id="What-is-Property-in-Spring-Boot"><a href="#What-is-Property-in-Spring-Boot" class="headerlink" title="What is Property in Spring Boot"></a>What is Property in Spring Boot</h1><p><strong>Properties</strong> play an important role in almost all applications, and may originate from a variety of sources: properties files, JVM system properties, system environment variables, JNDI, servlet context parameters, ad-hoc Properties objects, Maps, and so on.</p>
<p><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/env/Environment.html">Environment</a> is an interface representing the environment in which the current application is running. Spring Boot stores properties in an Environment bean.</p>
<h1 id="Command-Line-Properties"><a href="#Command-Line-Properties" class="headerlink" title="Command Line Properties"></a>Command Line Properties</h1><p>We can set properties from the command line. Spring Boot will add them to Spring Environment. Command line properties take precedence over the other property sources.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar app.jar --server.port=8000</span><br></pre></td></tr></table></figure>

<p>you can ualso use system properties.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Dserver.port=&quot;8000&quot; -jar app.jar</span><br></pre></td></tr></table></figure>


<h1 id="application-properties-File"><a href="#application-properties-File" class="headerlink" title="application.properties File"></a>application.properties File</h1><p>The default Property File is <strong>application.properties</strong> in src&#x2F;main&#x2F;resources folder. </p>
<p>application.properties example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/persondb</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>

<p>YAML based configuration is also supported. so the same config in .yml format would be</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://stage-server:3306/persondb</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>You can get System Property value with the following system. In case when the system property is not defined, default value will be used.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.tmp=$&#123;java.io.tmpdir:/mytmp&#125;</span><br></pre></td></tr></table></figure>

<p>You can also reference an environment variable like the system properties.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.secret=$&#123;MY_SECRET:defaultsecret&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Common-application-properties"><a href="#Common-application-properties" class="headerlink" title="Common application properties"></a>Common application properties</h2><p>Various properties can be specified inside your application.properties file, inside your application.yml file, or as command line switches. </p>
<p>Spring boot defines common application properties in <strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html">Appendix A. Common application properties</a></strong>. We can also create our own properties for our application.</p>
<h2 id="Use-Random-Values"><a href="#Use-Random-Values" class="headerlink" title="Use Random Values"></a>Use Random Values</h2><p>You can provide random values in the config files.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">myRand:</span></span><br><span class="line">  <span class="attr">randStr:</span> <span class="string">$&#123;random.value&#125;</span></span><br><span class="line">  <span class="attr">randInt:</span> <span class="string">$&#123;random.int&#125;</span></span><br><span class="line">  <span class="attr">randLong:</span> <span class="string">$&#123;random.long&#125;</span></span><br><span class="line">  <span class="attr">randUuid:</span> <span class="string">$&#123;random.uuid&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference-a-Value"><a href="#Reference-a-Value" class="headerlink" title="Reference a Value"></a>Reference a Value</h2><p>You can reference another property in a config file.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-spring-boot-app</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">xing</span></span><br><span class="line">  <span class="attr">intro:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">$&#123;app.name&#125;</span> <span class="string">created</span> <span class="string">by</span> <span class="string">$&#123;app.author&#125;</span></span><br></pre></td></tr></table></figure>


<h1 id="Value-Annotation"><a href="#Value-Annotation" class="headerlink" title="@Value Annotation"></a>@Value Annotation</h1><p>You can inject some default value as string using @Value annotation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;Some Default  String Value&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String someValue;</span><br></pre></td></tr></table></figure>

<h2 id="Value-from-application-properties-file"><a href="#Value-from-application-properties-file" class="headerlink" title="Value from application.properties file"></a>Value from application.properties file</h2><p>You can also get property value from a application.properties file. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;myservice.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this example, you get <code>myservice.url</code> property from the application.properties file.</p>
<p>You can also provide some default value for the property. Here when app.secret is not defined in application.proerties file, “mydefaultsecret” will be used as the value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;app.secret:mydefaultsecret&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String secret;</span><br></pre></td></tr></table></figure>

<h2 id="Value-from-System-Property"><a href="#Value-from-System-Property" class="headerlink" title="Value from System Property"></a>Value from System Property</h2><p>You can also get System property with the same syntax</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;java.io.tmpdir&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String tmpDir;</span><br></pre></td></tr></table></figure>

<p>You can also use SpEL to get system property too</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;java.io.tmpdir&#x27;]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String tmpdir;</span><br></pre></td></tr></table></figure>

<h2 id="Value-from-Environment-Variable"><a href="#Value-from-Environment-Variable" class="headerlink" title="Value from Environment Variable"></a>Value from Environment Variable</h2><p>You can also get environment variables such as <code>HOME</code>, <code>PATH</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;HOME&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String homeDir;</span><br></pre></td></tr></table></figure>

<h1 id="Bind-Configuration-to-Java-Object"><a href="#Bind-Configuration-to-Java-Object" class="headerlink" title="Bind Configuration to Java Object"></a>Bind Configuration to Java Object</h1><p>use @ConfigurationProperties annotaiton to bind configuration to Java Object</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;myservice&quot;, ignoreUnknownFields = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceConfig</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String url;</span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>You can also use @ConfigurationProperties annotation with @Bean annotation to bind configuration to a bean in a Config class file.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;myservice&quot;, ignoreUnknownFields = true)</span></span><br><span class="line">    <span class="keyword">public</span> MyService <span class="title function_">myService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For more information on @ConfigurationProperties annotation, see <a href="https://www.baeldung.com/configuration-properties-in-spring-boot">Guide to @ConfigurationProperties in Spring Boot</a></p>
<h1 id="Register-a-Properties-file"><a href="#Register-a-Properties-file" class="headerlink" title="Register a Properties file"></a>Register a Properties file</h1><p><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html">@PropertySource</a> is an annotation that provides a convenient and declarative mechanism for adding a PropertySource to Spring’s Environment. To be used in conjunction with @Configuration classes.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:customdbsource.yml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomDBConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;spring.datasource.customsource.driver-class-name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here @PropertySource is used with @Configuration annotation, you can also use it with @SpringBootApplication annotation. You can use @Value to inject properties from property source. Or you can use Environment bean to get the property value.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:customdbsource.yml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomDBConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServiceUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> env.getProperty(<span class="string">&quot;other-service.url&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name=&quot;customDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;customDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">CustomDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create()</span><br><span class="line">            .driverClassName(env.getProperty(<span class="string">&quot;spring.datasource.customsource.driver-class-name&quot;</span>))</span><br><span class="line">            .url(env.getProperty(<span class="string">&quot;spring.datasource.customsource.jdbc-url&quot;</span>))</span><br><span class="line">            .username(env.getProperty(<span class="string">&quot;spring.datasource.customsource.username&quot;</span>))</span><br><span class="line">            .password(env.getProperty(<span class="string">&quot;spring.datasource.customsource.password&quot;</span>)).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>If you have multiple config files, you can use multiple <code>@PropertySource</code> annotation or use <code>@PropertySources</code> to group them together.</p>
<p>for more info on <code>@PropertySource</code>, see <a href="https://www.mkyong.com/spring/spring-propertysources-example/">Spring @PropertySource example by Mkyong</a></p>
<h1 id="Environment-Bean"><a href="#Environment-Bean" class="headerlink" title="Environment Bean"></a>Environment Bean</h1><p>You can use @Value to get the property value. An alternative is to use <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/env/Environment.html">Environment</a> bean to get the value.</p>
<p>In Sprint Boot, first autowire Environment bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;  </span><br></pre></td></tr></table></figure>

<p>Then we can get property value like this</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env.getProperty(&quot;JAVA_HOME&quot;)</span><br><span class="line"></span><br><span class="line">env.getProperty(&quot;app.name&quot;)</span><br></pre></td></tr></table></figure>


<h1 id="Profile-specific-Properties-file"><a href="#Profile-specific-Properties-file" class="headerlink" title="Profile specific Properties file"></a>Profile specific Properties file</h1><p>Applications are usually deployed to different environments. We can use add configurations for different environments. Just define “application-{environment}.properties” in src&#x2F;main&#x2F;resources directory.</p>
<p>Profile-specific properties files will <strong>override</strong> the non-profile specific properties file.</p>
<p>application-dev.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://dev-server:3306/mydb</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>application-stage.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://stage-server:3306/mydb</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>You can set active profile in the command line using program argument. in this case, system property <code>spring.profiles.active</code> is set to <code>dev</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar app.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure>

<p>Use environment variable to set active profile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SPRING_PROFILES_ACTIVE=local gradle clean bootRun</span><br></pre></td></tr></table></figure>

<p>For maven project, you can use -D to define system property</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn spring-boot:run -Dspring-boot.run.profiles=local</span><br></pre></td></tr></table></figure>

<p>You can set default profile in application.yml file</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config">Spring Boot Documentation - Externalized Configuration</a></li>
<li><a href="https://www.baeldung.com/properties-with-spring">Baeldung - Properties with Spring and Spring Boot</a></li>
<li><a href="https://www.tutorialspoint.com/spring_boot/spring_boot_application_properties.htm">Spring Boot application properties</a></li>
</ul>
<p>Source Code: <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/config">SpringBootExamples - config</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Dockerizing Spring Boot App</title>
    <url>/SpringBoot/Spring-Boot-Dockerizing-Spring-Boot-App/</url>
    <content><![CDATA[<p>Let’s learn how to dockerize a Spring Boot Application.</p>
<span id="more"></span>

<h1 id="Adding-Dockerfile"><a href="#Adding-Dockerfile" class="headerlink" title="Adding Dockerfile"></a>Adding Dockerfile</h1><p>First set the final jar file name in pom.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">	&lt;finalName&gt;DemoSpringBootApp&lt;/finalName&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>


<p>Add Dockerfile </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM adoptopenjdk:11-jre-hotspot</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ADD /target/DemoSpringBootApp.jar /app/</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app/DemoSpringBootApp.jar&quot;]</span><br></pre></td></tr></table></figure>

<p>There is no need to use jdk, jre will be enough to run java applciation. </p>
<p><code>-Djava.security.egd=file:/dev/./urandom</code> is less secure on Linux but allows faster startup. see <a href="http://ruleoftech.com/2016/avoiding-jvm-delays-caused-by-random-number-generation">Avoiding JVM delays caused by random number generation - by Marko</a></p>
<h1 id="Dockerize-Application-Manually"><a href="#Dockerize-Application-Manually" class="headerlink" title="Dockerize Application Manually"></a>Dockerize Application Manually</h1><p>Navigate to project folder and execute commands to build and run application. image name is xinghua24&#x2F;demospringbootapp.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br><span class="line">docker build -f Dockerfile -t xinghua24/demospringbootapp .</span><br><span class="line">docker run -p 8080:8080 -t xinghua24/demospringbootapp</span><br></pre></td></tr></table></figure>


<h1 id="dockerfile-maven-Plugin"><a href="#dockerfile-maven-Plugin" class="headerlink" title="dockerfile-maven Plugin"></a>dockerfile-maven Plugin</h1><p>Use Maven plugin dockerfile-maven-plugin is more convenient than manually build the container.</p>
<p>dockerfile-maven-plugin has the following goals</p>
<ul>
<li>dockerfile:build - build Docker image from Dockerfile</li>
<li>dockerfile:tag - tag a Docker image</li>
<li>dockerfile:push - push Docker image to a repository</li>
</ul>
<p>add the following snippe to pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dockerfile-maven-version</span>&gt;</span>1.4.8<span class="tag">&lt;/<span class="name">dockerfile-maven-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dockerfile-maven-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">repository</span>&gt;</span>xinghua24/demospringbootapp<span class="tag">&lt;/<span class="name">repository</span>&gt;</span> <span class="comment">&lt;!--  image name --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Navigate to project folder and execute commands to package the application. Now docker container will be generated automatically.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br><span class="line"></span><br><span class="line"><span class="comment"># to start the application</span></span><br><span class="line">docker run -p 8080:8080 -t xinghua24/demospringbootapp</span><br></pre></td></tr></table></figure>


<h1 id="Multistage-Build"><a href="#Multistage-Build" class="headerlink" title="Multistage Build"></a>Multistage Build</h1><p>Nowadays it is very common to have two stage build that can build artifact from source and run it. Here is an example Dockerfile that does the two stage build. Problem with this approach is it is very time consuming for maven to download dependencies and build the jar file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM maven:3.6.3-jdk-11-slim as builder</span><br><span class="line"></span><br><span class="line"># Copy local code to the container image.</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY pom.xml .</span><br><span class="line">COPY src ./src</span><br><span class="line"></span><br><span class="line"># Build a release artifact.</span><br><span class="line">RUN mvn package -DskipTests</span><br><span class="line"></span><br><span class="line">FROM adoptopenjdk:11-jre-hotspot</span><br><span class="line"></span><br><span class="line"># Copy the jar to the production image from the builder stage.</span><br><span class="line">COPY --from=builder /app/target/app-*.jar /app.jar</span><br><span class="line"></span><br><span class="line">ENV PORT 8080</span><br><span class="line"></span><br><span class="line"># Run the web service on container startup.</span><br><span class="line">CMD [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-Dserver.port=$&#123;PORT&#125;&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://spring.io/guides/gs/spring-boot-docker/">Spring Boot with Docker Guide</a></li>
<li><a href="https://stackoverflow.com/questions/27767264/how-to-dockerize-maven-project-and-how-many-ways-to-accomplish-it">Stackoverflow - how to dockerize maven project</a></li>
</ul>
<p>source code - <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/docker">SpringBootExamples - docker</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Cookies</title>
    <url>/SpringBoot/Spring-Boot-Cookies/</url>
    <content><![CDATA[<p>Lets learn how to use cookies for a Spring Boot application.</p>
<span id="more"></span>

<h1 id="What-is-HTTP-Cookies"><a href="#What-is-HTTP-Cookies" class="headerlink" title="What is HTTP Cookies"></a>What is HTTP Cookies</h1><p>An <strong>HTTP cookie</strong> (web cookie, browser cookie) is a small piece of data that a server sends to the user’s web browser. The browser may store it and send it back with later requests to the same server. Typically, it’s used to tell if two requests came from the same browser — keeping a user logged-in, for example. It remembers stateful information for the stateless HTTP protocol.</p>
<p><strong>Session management</strong> Logins, shopping carts, game scores, or anything else the server should remember</p>
<p><strong>Personalization</strong> User preferences, themes, and other settings</p>
<p><strong>Tracking</strong> Recording and analyzing user behavior</p>
<p>The <code>Set-Cookie</code> HTTP response header from the server sets the cookie in the client side. Here is an example HTTP Response that sets a cookie with key <code>foo</code>. This cookie expires at 18-Jun-2020 02:39:49 GMT.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Set-Cookie: foo=bar; Max-Age=604800; Expires=Thu, 18-Jun-2020 02:39:49 GMT</span><br><span class="line">Content-Type: text/html;charset=UTF-8</span><br><span class="line">Content-Length: 16</span><br><span class="line">Date: Thu, 11 Jun 2020 02:39:49 GMT</span><br><span class="line">Keep-Alive: timeout=60</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure>

<p>The subsequent HTTP Request will have <code>Cookie</code> header set to include the Cookie value. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /readCookie HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: en-US,en;</span><br><span class="line">Cookie: foo=bar</span><br></pre></td></tr></table></figure>

<p>You can also use Javascript to set a cookie. Hre is an example to set a cookie named <code>foo</code> with value <code>bar</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.cookie = &quot;foo=bar&quot;</span><br></pre></td></tr></table></figure>

<p>You can inspect a site’s cookie in the Application tab under storage&#x2F;Cookies session.</p>
<img src="Cookies.png" />


<h1 id="Cookies-Operations"><a href="#Cookies-Operations" class="headerlink" title="Cookies Operations"></a>Cookies Operations</h1><h2 id="Set-Cookie"><a href="#Set-Cookie" class="headerlink" title="Set Cookie"></a>Set Cookie</h2><p>You can create a cookie instance and add the cookie to the Http response. There are a few properties you can set for a Cookie.</p>
<p>The <code>MaxAge</code> attribute of the cookie sets the expiration of a cookie. default is <code>-1</code>. <code>-1</code> means it is a Session Cookie. Session cookie will be erased when the user closes the browser.</p>
<p>A cookie with the <code>Secure</code> attribute is sent to the server only with an encrypted request over the HTTPS protocol. Set this attribute to be true to prevent man-in-the-middle attach.</p>
<p>A cookie with the <code>HttpOnly</code> attribute is inaccessible to the JavaScript Document.cookie API. Set this attribute to be true to prevent Cross-site scripting(XSS) attack.</p>
<p>The <code>Domain</code> attribute specifies which hosts are allowed to receive the cookie. If unspecified, it defaults to the same origin that set the cookie, excluding subdomains. </p>
<p>The <code>Path</code> attribute indicates a URL path that must exist in the requested URL in order to send the Cookie header.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/setCookie</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/setCookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">setCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    cookie.setSecure(<span class="literal">false</span>);</span><br><span class="line">    cookie.setHttpOnly(<span class="literal">false</span>);</span><br><span class="line">    cookie.setMaxAge(<span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>); <span class="comment">// expires in 7 days</span></span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;cookie is added!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Get-a-Cookie"><a href="#Get-a-Cookie" class="headerlink" title="Get a Cookie"></a>Get a Cookie</h2><p>You can use <code>@CookieValue</code> annotation to read a cookie’s value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/readCookie</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/readCookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">readCookie</span><span class="params">(<span class="meta">@CookieValue(&quot;foo&quot;)</span> String fooCookieValue)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;The value of foo cookie is &quot;</span> + fooCookieValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Another way to get Cookie value is via <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/util/WebUtils.html">WebUtils</a>. WebUtils has a <code>getCookie</code> method to get the first cookie with the given name, or null if none is found.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> WebUtils.getCookie(request, <span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="Get-all-Cookies"><a href="#Get-all-Cookies" class="headerlink" title="Get all Cookies"></a>Get all Cookies</h2><p>You can get all cookies from Http Request.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/readAllCookie</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/readAllCookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">readAllCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">if</span>( cookies != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(cookies).map(c-&gt; c.getName() + <span class="string">&quot;=&quot;</span> + c.getValue()).collect(Collectors.joining(<span class="string">&quot;&lt;br&gt;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;No cookie is found!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Delete-a-Cookie"><a href="#Delete-a-Cookie" class="headerlink" title="Delete a Cookie"></a>Delete a Cookie</h2><p>To delete a cookie, unset its value and set its MaxAge to be 0. Make sure the attributes also matches.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/deleteCookie</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/deleteCookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;foo&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">    cookie.setSecure(<span class="literal">false</span>);</span><br><span class="line">    cookie.setHttpOnly(<span class="literal">false</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;cookie is deleted!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Reference</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies">Using HTTP cookies by MDN</a></li>
<li><a href="https://dzone.com/articles/how-to-use-cookies-in-spring-boot">How to Use Cookies in Spring Boot by Atta Shah</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - DataSource</title>
    <url>/SpringBoot/Spring-Boot-DataSource/</url>
    <content><![CDATA[<p>Configuring DataSource in a Spring Boot Project.</p>
<span id="more"></span>

<h1 id="Config-a-DataSource"><a href="#Config-a-DataSource" class="headerlink" title="Config a DataSource"></a>Config a DataSource</h1><p>Add Maven dependencies for MySQL</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>configuration for MySQL datasource in application.properties file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/orderDB</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>


<p>That is all you need for datasource configuration. You can now autowire DataSource or JdbcTemplate in your Spring Boot app.</p>
<p>To test the datasource, you can list the tables using DataSource.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DatabaseMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// list tables in the databse</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">md</span> <span class="operator">=</span> ds.getConnection().getMetaData();</span><br><span class="line">        String[] types = &#123; <span class="string">&quot;TABLE&quot;</span> &#125;;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> md.getTables(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&quot;%&quot;</span>, types);</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;Table in Database: &#123;&#125;&quot;</span>, rs.getString(<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        LOG.info(<span class="string">&quot;datasource: &#123;&#125;&quot;</span>, ds.toString());</span><br><span class="line">        LOG.info(<span class="string">&quot;jdbcTemplate: &#123;&#125;&quot;</span>, jdbcTemplate.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="H2-Datasource"><a href="#H2-Datasource" class="headerlink" title="H2 Datasource"></a>H2 Datasource</h1><p>When developing database application, H2 database can be used to quickly test ideas. It has a lot of benifits: </p>
<ul>
<li>Very fast, open source, JDBC API</li>
<li>Embedded and server modes; in-memory databases</li>
<li>Browser based Console application</li>
<li>Small footprint: around 2 MB jar file size</li>
</ul>
<p>You can download H2 Database from <a href="https://www.h2database.com/html/main.html">https://www.h2database.com/html/main.html</a> page.<br>And then run <code>java -jar h2-*.jar</code> to spin up the local server at <a href="http://127.0.1.1:8082/">http://127.0.1.1:8082</a>.</p>
<p>To use H2 database, include the following dependencies</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In reality, H2 dependency’s scope to be <code>test</code> because it is only used in unit test unless you want to use h2 in memory database for prototyping. </p>
<p>By default, Spring Boot configures the application to connect to an in-memory H2 store with the username sa and an empty password. However, we can change those parameters by adding the following properties to the application.properties file</p>
<p>application.properties file for in memory h2 datasource. You can skip the configuration if h2 maven dependency is detected.</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">org.h2.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:h2:mem:testdb</span></span><br><span class="line"><span class="comment"># spring.datasource.username=sa</span></span><br><span class="line"><span class="comment"># spring.datasource.password=</span></span><br><span class="line"><span class="attr">spring.jpa.database-platform</span>=<span class="string">org.hibernate.dialect.H2Dialect</span></span><br></pre></td></tr></table></figure>
<p>For H2 database, the default username is “sa” and no password is required. If you are using in memory database, you actually don’t need to specify username and password at all.</p>
<p>application.properties file for external h2 service as datasource</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">org.h2.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:h2:tcp://localhost/~/test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">sa</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string"></span></span><br><span class="line"><span class="attr">spring.jpa.database-platform</span>=<span class="string">org.hibernate.dialect.H2Dialect</span></span><br></pre></td></tr></table></figure>
<p>You need to configure connection URl for the embedded database to ensure automatic shutdown is disabled. So use DB_CLOSE_ON_EXIT&#x3D;FALSE</p>
<p>H2 Console is a very good tool to exammine the database. it can be enabled by adding the following line to the application.properties file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.h2.console.enabled=true</span><br></pre></td></tr></table></figure>
<p>You can access H2 console using url <a href="http://localhost:8080/h2-console">http://localhost:8080/h2-console</a>. The url and credentials are set in applicaiton.properties file.</p>
<h1 id="DataSourceBuilder"><a href="#DataSourceBuilder" class="headerlink" title="DataSourceBuilder"></a>DataSourceBuilder</h1><p>When there are multiple DataSources, you will probably need to have more than one datasource set up in application.properties file. In this case, we will need to use DataSourceBuilder to manually create individual DataSource with different bean name.</p>
<p>application.properties file with a custom datasource</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.customsource.driver-class-name=org.h2.Driver</span><br><span class="line">spring.datasource.customsource.jdbc-url=jdbc:h2:tcp://localhost/~/test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</span><br><span class="line">spring.datasource.customsource.username=sa</span><br><span class="line">spring.datasource.customsource.password=</span><br></pre></td></tr></table></figure>

<p>Configure a Datasource using DataSourceBuilder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomDataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name=&quot;customDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;customDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">CustomDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create()</span><br><span class="line">            .driverClassName(env.getProperty(<span class="string">&quot;spring.datasource.customsource.driver-class-name&quot;</span>))</span><br><span class="line">            .url(env.getProperty(<span class="string">&quot;spring.datasource.customsource.jdbc-url&quot;</span>))</span><br><span class="line">            .username(env.getProperty(<span class="string">&quot;spring.datasource.customsource.username&quot;</span>))</span><br><span class="line">            .password(env.getProperty(<span class="string">&quot;spring.datasource.customsource.password&quot;</span>)).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Configure a Datasource using DataSourceBuilder with the help of @ConfigurationProperties annotation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomDataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name=&quot;customDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;customDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.customsource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">CustomDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="data-sql-and-schema-sql-File"><a href="#data-sql-and-schema-sql-File" class="headerlink" title="data.sql and schema.sql File"></a>data.sql and schema.sql File</h1><p>You can load initial data in <em>data.sql</em> file. When this file is presented in the classpath, spring boot will pick it up and populate the tables in the database.</p>
<p>If you want to use a customized schema, you can provide a customized <em>schema.sql</em> file under src&#x2F;main&#x2F;resources folder. If you do that, you need to disable JPA DDL generation.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.jpa.hibernate.ddl-auto=none</span><br></pre></td></tr></table></figure>

<h1 id="DDL-Generation"><a href="#DDL-Generation" class="headerlink" title="DDL Generation"></a>DDL Generation</h1><p>JPA has features for DDL(Data Definition Language) generation, and these can be set up to run on startup against the database. This is controlled through two external properties:</p>
<p>There are two ways to set this configuration</p>
<ul>
<li><code>spring.jpa.generate-ddl</code> - (boolean) switches the feature on and off and is vendor independent.</li>
<li><code>spring.jpa.hibernate.ddl-auto</code> (enum) is a Hibernate feature that controls the behavior in a more fine-grained way. See below for more detail.</li>
</ul>
<p>ddl-auto property can have one of the values: <code>create</code>, <code>create-drop</code>, <code>validate</code>, <code>update</code> and <code>none</code>.</p>
<ul>
<li>create – Hibernate first drops existing tables, then creates new tables</li>
<li>update – Hibernate attempt to update schema</li>
<li>create-drop – similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing</li>
<li>validate – Hibernate only validates whether the tables and columns exist, otherwise it throws an exception</li>
<li>none – turns off the DDL generation.</li>
</ul>
<p>In production environment, you usually use <code>none</code> so that schema is not accidentially dropped.</p>
<p>generate-ddl will be ignored if ddl-auto is set because ddl-auto is more fine-grained.</p>
<h1 id="Log-SQL-Statement"><a href="#Log-SQL-Statement" class="headerlink" title="Log SQL Statement"></a>Log SQL Statement</h1><p>Add the following to application.properties file to log sql statement.  <code>format_sql</code> will format the sql. </p>
<p>Only add <code>logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE</code> when you need to log bind values too.</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.jpa.properties.hibernate.show_sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.use_sql_comments</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">logging.level.org.hibernate.type.descriptor.sql.BasicBinder</span>=<span class="string">TRACE</span></span><br></pre></td></tr></table></figure>

<p>This will log the formatted sql statement with the bind values</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-05-03 15:39:00.749  INFO 17557 --- [  XNIO-1 task-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms</span><br><span class="line">Hibernate: </span><br><span class="line">    /* select</span><br><span class="line">        generatedAlias0 </span><br><span class="line">    from</span><br><span class="line">        User as generatedAlias0 </span><br><span class="line">    where</span><br><span class="line">        generatedAlias0.username=:param0 */ select</span><br><span class="line">            user0_.id as id1_2_,</span><br><span class="line">            user0_.enabled as enabled2_2_,</span><br><span class="line">            user0_.password as password3_2_,</span><br><span class="line">            user0_.username as username4_2_ </span><br><span class="line">        from</span><br><span class="line">            user user0_ </span><br><span class="line">        where</span><br><span class="line">            user0_.username=?</span><br><span class="line">2020-05-03 15:39:06.081 TRACE 17557 --- [  XNIO-1 task-3] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [user]</span><br></pre></td></tr></table></figure>

<p>Reference</p>
<ul>
<li><a href="https://www.baeldung.com/spring-boot-configure-data-source-programmatic">Configuring a DataSource Programmatically in Spring Boot</a></li>
<li><a href="https://www.baeldung.com/spring-data-jpa-multiple-databases">Spring JPA – Multiple Databases</a></li>
<li><a href="https://www.baeldung.com/spring-boot-h2-database">Spring Boot With H2 Database</a></li>
<li><a href="https://www.baeldung.com/spring-boot-data-sql-and-schema-sql">Quick Guide on Loading Initial Data with Spring Boot by Baeldung</a></li>
<li><a href="https://stackoverflow.com/questions/30118683/how-to-log-sql-statements-in-spring-boot">Stackoverflow - How to log SQL statements in Spring Boot?</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/1.1.0.M1/reference/html/howto-database-initialization.html">Database Initialization</a></li>
</ul>
<p>Source code: <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/datasourcebuilder">SpringBootExamples - datasourcebuilder</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Email</title>
    <url>/SpringBoot/Spring-Boot-Email/</url>
    <content><![CDATA[<p>Spring Boot Email</p>
<span id="more"></span>

<h1 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h1><p>Need to add spring-boot-starter-mail dependency to pom.xml file.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Spring has email support to help send email. </p>
<p>spring-boot-starter-mail has dependency on jakarta.mail library. The 2.x version supports <code>jakarta.mail</code> namespace. The 1.x version supports <code>javax.mail</code> namespace. The <code>javax.mail</code> namespace is deprecated.</p>
<p>The interface used for sending email is <code>MailSender</code> interface. It has a simple implementation <code>JavaMailSenderImpl</code>.</p>
<p>Spring auto configures <code>JavaMailSenderImpl</code> bean if it finds <code>spring.mail.*</code> properties in <code>application.properties</code> or <code>application.yml</code> file.</p>
<h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><p>Sample <code>application.properties</code> file to configure an outlook email properties.</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mail.properties.mail.smtp.connecttimeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.timeout</span>=<span class="string">3000</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.writetimeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">spring.mail.host</span>=<span class="string">smtp-mail.outlook.com</span></span><br><span class="line"><span class="attr">spring.mail.port</span>=<span class="string">587</span></span><br><span class="line"><span class="attr">spring.mail.username</span>=<span class="string">xxxx@hotmail.com</span></span><br><span class="line"><span class="attr">spring.mail.password</span>=<span class="string">yourpassword</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.store.protocol</span>=<span class="string">pop3</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smpt.auth</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>


<h1 id="Sending-Email"><a href="#Sending-Email" class="headerlink" title="Sending Email"></a>Sending Email</h1><p>You can just auto wire <code>JavaMailSender</code> and use it to send email.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> JavaMailSender emailSender;</span><br></pre></td></tr></table></figure>

<p>Or you can create a new instance of <code>JavaMailSenderImpl</code> and use it to send email.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JavaMailSender</span> <span class="variable">sender</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaMailSenderImpl</span>();</span><br></pre></td></tr></table></figure>

<p>Sending a simple Email</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSimpleMail</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">    message.setTo(<span class="string">&quot;xxxx@hotmail.com&quot;</span>);</span><br><span class="line">    message.setFrom(<span class="string">&quot;xxxx@hotmail.com&quot;</span>);</span><br><span class="line">    message.setSubject(<span class="string">&quot;Simple Mail Subject&quot;</span>);</span><br><span class="line">    message.setText(<span class="string">&quot;Simple Mail Body&quot;</span>);</span><br><span class="line">    emailSender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can use MimeMessageHelper to help send MimeMessage.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMimeMailWithHelper</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">    <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> emailSender.createMimeMessage();</span><br><span class="line">    <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">false</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    helper.setTo(<span class="string">&quot;xxxx@hotmail.com&quot;</span>);</span><br><span class="line">    helper.setFrom(<span class="string">&quot;xxxx@hotmail.com&quot;</span>);</span><br><span class="line">    helper.setSubject(<span class="string">&quot;Mime Message Subject2&quot;</span>);</span><br><span class="line">    helper.setText(<span class="string">&quot;&lt;b&gt;Mime Message Body2&lt;/b&gt;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    emailSender.send(helper.getMimeMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MimeMessageHelper is useful to send email with attachment.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMimeMailWithAttachment</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException, IOException &#123;</span><br><span class="line">    <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> emailSender.createMimeMessage();</span><br><span class="line">    <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    helper.setTo(<span class="string">&quot;xxxx@hotmail.com&quot;</span>);</span><br><span class="line">    helper.setFrom(<span class="string">&quot;xxxx@hotmail.com&quot;</span>);</span><br><span class="line">    helper.setSubject(<span class="string">&quot;Mime Message With Attachment Subject&quot;</span>);</span><br><span class="line">    helper.setText(<span class="string">&quot;&lt;b&gt;Mime Message With Attachment Subject&lt;/b&gt;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;attachement.jpeg&quot;</span>);</span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayDataSource</span>(resource.getInputStream(), <span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    helper.addAttachment(<span class="string">&quot;attachement.jpeg&quot;</span>, dataSource);</span><br><span class="line">    </span><br><span class="line">    emailSender.send(helper.getMimeMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>reference</p>
<ul>
<li><a href="https://docs.spring.io/spring-framework/reference/integration/email.html">Spring Email</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Error Handling</title>
    <url>/SpringBoot/Spring-Boot-Error-Handling/</url>
    <content><![CDATA[<p>Spring Boot Error Handling</p>
<span id="more"></span>

<h1 id="Default-Exception-Handling"><a href="#Default-Exception-Handling" class="headerlink" title="Default Exception Handling"></a>Default Exception Handling</h1><p>Java class that throws an exception.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getError&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">getError</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Some Exception is thrown.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring will check the Accept heather. If text&#x2F;html is accepted, then show a Whitelabel Error Page. Otherwise, return json with error message</p>
<img src="Whitelabel-Error-Page.png" />
<small>Whitelabel Error Page</small>


<p>Error message in Json format</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-14T03:27:59.421+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Internal Server Error&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Some Exception is thrown.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/getError&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<p>To stop Spring from printing stack trace, set server.error.include-stacktrace property to application.properties file. Default is always</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.error.include-stacktrace=never</span><br></pre></td></tr></table></figure>

<p>You can disable whitelabel page by setting server.error.whitelabel.enabled property to false.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.error.whitelabel.enabled=false</span><br></pre></td></tr></table></figure>


<h1 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="ControllerAdvice"></a>ControllerAdvice</h1><p>ControllerAdvice annotation is a specialization of @Component for classes that declare @ExceptionHandler, @InitBinder, or @ModelAttribute methods to be shared across multiple @Controller classes.</p>
<p>ResponseEntityExceptionHandler defines convenient methods to handle Exception. It is often used with @ControllerAdvice class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResponseEntityExceptionHandler</span> <span class="keyword">extends</span> <span class="title class_">ResponseEntityExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;RuntimeException.class&#125;)</span></span><br><span class="line">    <span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title function_">handleRuntimException</span><span class="params">(</span></span><br><span class="line"><span class="params">            RuntimeException ex, WebRequest request)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> handleExceptionInternal(ex, map,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>(), HttpStatus.INTERNAL_SERVER_ERROR, request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The error handler will handle RuntimeException globally for all @Controller</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Some Exception is thrown.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.baeldung.com/exception-handling-for-rest-with-spring">Error Handling for REST with Spring by Eugen Paraschiv</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Filters and Interceptors</title>
    <url>/SpringBoot/Spring-Boot-Filters-and-Interceptors/</url>
    <content><![CDATA[<p>Let’s learn about Filters and Interceptors</p>
<span id="more"></span>

<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>A filter must implement <a href="https://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html">javax.servlet.Filter</a> Interface</p>
<p>A filter is an object that performs filtering tasks on either the request to a resource (a servlet or static content), or on the response from a resource, or both.</p>
<p>Filters are great for login authentication and work on ServletRequest and ServletResponse. Interceptors works on the method execution.</p>
<p>Filter interface contains three methods</p>
<ul>
<li>init(FilterConfig filterConfig)</li>
<li>doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</li>
<li>destroy()</li>
</ul>
<p>The FilterChain passed in to doFilter method allows the Filter to pass on the request and response to the next entity in the chain.</p>
<p>You can set the filter order using <strong>@Order</strong> annotation</p>
<p>Filter Example</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestResponseLoggingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(RequestResponseLoggingFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">res</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">&quot;Logging Request  &#123;&#125; : &#123;&#125;&quot;</span>, req.getMethod(), req.getRequestURI());</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">&quot;Logging Response :&#123;&#125;&quot;</span>, res.getContentType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h1><p>All interceptors implement <code>HandlerInterceptor</code> interface. </p>
<p><code>HandlerInterceptor</code> can be registered for only certain request paths. use <code>/**</code> for all URL path.</p>
<p><code>HandlerInterceptor</code> contains three methods: </p>
<ul>
<li>preHandle() : called before a request is handled. The default returns true to proceed the request.</li>
<li>postHandle() : called after request is handled. It also has access to ModelAndView object.</li>
<li>afterCompletion() : after all processing is completed. e.g. view is render</li>
</ul>
<p>Spring provides <code>HandlerInterceptorAdapter</code> abstract class that provides simplified implementation of<br>pre-only&#x2F;post-only interceptors.</p>
<p>ProcessTimeInterceptor logs the process time for the incoming request</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessTimeInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(ProcessTimeInterceptor.class);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        request.setAttribute(<span class="string">&quot;startTime&quot;</span>, startTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sample log output: Request Processing Time: 4ms for path /</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">            ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> (Long) request.getAttribute(<span class="string">&quot;startTime&quot;</span>);</span><br><span class="line">        request.removeAttribute(<span class="string">&quot;startTime&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(request.getQueryString())) &#123;</span><br><span class="line">            path = request.getServletPath();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            path = request.getServletPath() + <span class="string">&quot;?&quot;</span> + request.getQueryString();</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.info(<span class="string">&quot;Request Processing Time: &quot;</span> + (endTime - startTime) + <span class="string">&quot;ms for path &quot;</span> </span><br><span class="line">                + path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then add the interceptor to the interceptors list.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProcessTimeInterceptor processTimeInterceptor;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">		registry.addInterceptor(processTimeInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Sample output for the above Filter and Interceptor</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2019-05-06 23:25:40.862  INFO 5722 --- [nio-8080-exec-8] c.e.demo.RequestResponseLoggingFilter    : Logging Request  GET : /hello</span><br><span class="line">2019-05-06 23:25:40.865  INFO 5722 --- [nio-8080-exec-8] com.example.demo.ProcessTimeInterceptor  : Request Processing Time: 2ms for path /hello</span><br><span class="line">2019-05-06 23:25:40.865  INFO 5722 --- [nio-8080-exec-8] c.e.demo.RequestResponseLoggingFilter    : Logging Response :text/html;charset=UTF-8</span><br></pre></td></tr></table></figure>

<p>Reference</p>
<ul>
<li><a href="https://www.baeldung.com/spring-boot-add-filter">Baeldung Spring Boot Filter</a></li>
<li><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/HandlerInterceptor.html">HandlerInterceptor Documentation</a></li>
<li><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/HandlerInterceptorAdapter.html">HandlerInterceptorAdapter Documentation</a></li>
<li><a href="https://www.mkyong.com/spring-mvc/spring-mvc-handler-interceptors-example/">Spring MVC handler interceptors example - Mkyong</a></li>
<li><a href="https://howtodoinjava.com/spring-mvc/spring-intercepting-requests-using-handlerinterceptor-with-example/">Spring HandlerInterceptor Example</a></li>
</ul>
<p>source code - <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/filter-and-interceptor">SpringBootExamples - filter-and-interceptor</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - HttpSession</title>
    <url>/SpringBoot/Spring-Boot-HttpSession/</url>
    <content><![CDATA[<p>HttpSession</p>
<span id="more"></span>

<p>You can use <code>HttpServletRequest.getSession()</code> method to get the current HttpSession.</p>
<h1 id="Set-Session-Attribute"><a href="#Set-Session-Attribute" class="headerlink" title="Set Session Attribute"></a>Set Session Attribute</h1><p>Use <code>HttpSession.setAttribute()</code> method to set attribute to the session. The session value can be any Object.</p>
<p>Here is an example to set a session in the controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/setValue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">setValue</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">    session.setAttribute(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/util/WebUtils.html">WebUtils</a> offers method to set Session attribute.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebUtils.setSessionAttribute(request, <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br></pre></td></tr></table></figure>


<h1 id="Get-Session-Attribute"><a href="#Get-Session-Attribute" class="headerlink" title="Get Session Attribute"></a>Get Session Attribute</h1><p>Use <code>HttpSession.getAttribute()</code> to get attribute value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getValue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">    <span class="keyword">if</span>( session.getAttribute(<span class="string">&quot;foo&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">        LOG.info(session.getAttribute(<span class="string">&quot;foo&quot;</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Get Session attribute using <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/util/WebUtils.html">WebUtils</a>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebUtils.getSessionAttribute(request, <span class="string">&quot;foo&quot;</span>).toString();</span><br></pre></td></tr></table></figure>

<h1 id="Get-All-Session-Attribute"><a href="#Get-All-Session-Attribute" class="headerlink" title="Get All Session Attribute"></a>Get All Session Attribute</h1><p>use <code>Enumeration e = session.getAttributeNames()</code> to get all the session names, then use <code>HttpSession.getAttribute()</code> method to get the session attribute.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getAll&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">    <span class="type">Enumeration</span> <span class="variable">e</span> <span class="operator">=</span> session.getAttributeNames();</span><br><span class="line">    <span class="keyword">while</span>(e.hasMoreElements()) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> e.nextElement();</span><br><span class="line">        LOG.info(key.toString() + <span class="string">&quot;=&quot;</span> + session.getAttribute(key.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Handling Date Request Parameter</title>
    <url>/SpringBoot/Spring-Boot-Handling-Date-Request-Parameter/</url>
    <content><![CDATA[<p>Handling Date types in the Spring Boot Controller </p>
<span id="more"></span>


<h1 id="Handling-Date-type"><a href="#Handling-Date-type" class="headerlink" title="Handling Date type"></a>Handling Date type</h1><p>Date can be received as parameterusing long, java.utils.Date, ZonedDateTime and LocalDateTime.<br>The @DateTimeFormat annotation lets you specify the format with the ISO enum. Alternatively, the format can be specified with the pattern attribute of the annotation. </p>
<p>see DateController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GET http://localhost:8080/testLong?start=1527814861000 Here we pass number of</span></span><br><span class="line"><span class="comment"> * milliseconds since the standard base time known as &quot;the epoch&quot;. </span></span><br><span class="line"><span class="comment"> * use https://www.epochconverter.com/ to convert to epoch time</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;testLong&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Date&gt; <span class="title function_">testLong</span><span class="params">(<span class="type">long</span> start)</span> &#123;</span><br><span class="line">	<span class="type">Date</span> <span class="variable">startDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(start);</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.ok().body(startDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET http://localhost:8080/testDate?start=2018-01-01</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;testDate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Date&gt; <span class="title function_">testDate</span><span class="params">(</span></span><br><span class="line"><span class="params">		<span class="meta">@RequestParam(&quot;start&quot;)</span> <span class="meta">@DateTimeFormat(iso = DateTimeFormat.ISO.DATE)</span> Date start)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.ok().body(start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET http://localhost:8080/testDatePattern?start=2018-03EST</span></span><br><span class="line"><span class="comment">// GET http://localhost:8080/testDatePattern?start=2018-03EST</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;testDatePattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Date&gt; <span class="title function_">testDatePattern</span><span class="params">(</span></span><br><span class="line"><span class="params">		<span class="meta">@RequestParam(&quot;start&quot;)</span> <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MMz&quot;)</span> Date start)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.ok().body(start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET http://localhost:8080/testDateTime?start=2018-10-31T01:30:00.000-05:00</span></span><br><span class="line"><span class="comment">// GET http://localhost:8080/testDateTime?start=2018-10-31T01:30:00.000Z</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;testDateTime&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Date&gt; <span class="title function_">testDateTime</span><span class="params">(</span></span><br><span class="line"><span class="params">		<span class="meta">@RequestParam(&quot;start&quot;)</span> <span class="meta">@DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)</span> Date start)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.ok().body(start);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">// GET http://localhost:8080/testZonedDateTime?start=2018-10-31T01:30:00.000Z</span></span><br><span class="line"><span class="comment">// GET http://localhost:8080/testZonedDateTime?start=2018-10-31T01:30:00.000%2B01:00 // 2018-10-31T01:30+01:00 </span></span><br><span class="line"><span class="comment">// &#x27;+&#x27; URL encoded =&gt; &#x27;%2B&#x27;</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;testZonedDateTime&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">testZonedDateTime</span><span class="params">(</span></span><br><span class="line"><span class="params">		<span class="meta">@RequestParam(&quot;start&quot;)</span> <span class="meta">@DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)</span> ZonedDateTime start)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.ok().body(start.toString());</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">// GET http://localhost:8080/testLocalDateTime?start=2018-10-31T01:30:00.000Z</span></span><br><span class="line"><span class="comment">// GET http://localhost:8080/testLocalDateTime?start=2018-10-31T01:30:00.000%2B01:00 // 2018-10-31T01:30</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;testLocalDateTime&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">testLocalDateTime</span><span class="params">(</span></span><br><span class="line"><span class="params">		<span class="meta">@RequestParam(&quot;start&quot;)</span> <span class="meta">@DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)</span> LocalDateTime start)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.ok().body(start.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you have Jackson integeration with your application to serialize your bean to JSON format<br>then you can use Jackson anotation @JsonFormat to format you date to specified format.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// POST localhost:8080/testDateContainer</span></span><br><span class="line"><span class="comment">// body &#123;&quot;date&quot;: &quot;2018-01-01&quot;, &quot;dateTime&quot;: &quot;2018-07-04T12:08:56.235-0000&quot;&#125;</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;testDateContainer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">testDateContainer</span><span class="params">(<span class="meta">@RequestBody</span> DateContainer dataContainer)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.ok().body(dataContainer.toString());</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DateContainer</span> &#123;</span><br><span class="line">	<span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">	Date date;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// pattern follows java.text.SimpleDateFormat</span></span><br><span class="line">	<span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&quot;)</span></span><br><span class="line">	Date dateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Reference</p>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">SimpleDateFormat</a></li>
</ul>
<p>Sourcecode - <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/web-application">SpringBootExamples - web-application</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Intro</title>
    <url>/SpringBoot/Spring-Boot-Intro/</url>
    <content><![CDATA[<p>Spring Boot makes it easy to create production ready Spring-based applications.</p>
<span id="more"></span>

<h1 id="Getting-Start"><a href="#Getting-Start" class="headerlink" title="Getting Start"></a>Getting Start</h1><p>Visit Spring initializr - <a href="https://start.spring.io/">https://start.spring.io/</a>. add ‘Web’ dependency. and click ‘Generate Project’ to generate Spring Boot project</p>
<p>You can use curl to download the project from <a href="https://start.spring.io/">https://start.spring.io/</a> too.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl https://start.spring.io/starter.tgz \</span><br><span class="line">-d dependencies=web,actuator \</span><br><span class="line">-d language=java \</span><br><span class="line">-d <span class="built_in">type</span>=maven-project \</span><br><span class="line">-d baseDir=demo-project | tar -xzvf -</span><br></pre></td></tr></table></figure>

<p>For more information on Spring Initializr, see <a href="https://github.com/spring-io/initializr">Spring Initializr Repo</a></p>
<img src="/SpringBoot/Spring-Boot-Intro/spring-initializr.png" class="">

<p>The project can now be imported to IDE.</p>
<h1 id="Adding-Maven-Dependency"><a href="#Adding-Maven-Dependency" class="headerlink" title="Adding Maven Dependency"></a>Adding Maven Dependency</h1><p>Add web dependency to pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The complete pom.xml should look like this</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Adding-Controller"><a href="#Adding-Controller" class="headerlink" title="Adding Controller"></a>Adding Controller</h1><p>Add controller to handle http request.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Running-Application"><a href="#Running-Application" class="headerlink" title="Running Application"></a>Running Application</h1><p>The main method calls <code>SpringApplication</code> class’s <code>run</code> method to bootstrap our application.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now run the application using the main method. go to <code>http://localhost:8080/hello</code> to see the output.</p>
<p>Alternatively, you can run as maven project</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./mvnw spring-boot:run</span><br></pre></td></tr></table></figure>

<p>If you are a gradle user, execute bootRun task instead</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./gradlew bootRun</span><br></pre></td></tr></table></figure>

<p>Go to <a href="http://localhost:8080/hello">http://localhost:8080/hello</a> and the result page will show text</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure>


<h1 id="Adding-Junit-Test"><a href="#Adding-Junit-Test" class="headerlink" title="Adding Junit Test"></a>Adding Junit Test</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@WebMvcTest(HelloController.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloControllerTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shouldReturnMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="built_in">this</span>.mockMvc.perform(get(<span class="string">&quot;/hello&quot;</span>)).andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(<span class="string">&quot;Hello World&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>see source code at <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/hello-world">github</a></p>
<h1 id="Creating-Executable-Jar"><a href="#Creating-Executable-Jar" class="headerlink" title="Creating Executable Jar"></a>Creating Executable Jar</h1><p>To create an executable jar(fat jar)<br>, we need to have <code>spring-boot-maven-plugin</code> in our pom.xml file. The project generated by Spring initializr adds <code>spring-boot-maven-plugin</code> in pom.xml already.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Run <code>mvn package</code> will generate the executable jar file. use <code>java -jar</code> command to run the jar. The executable jar is ready for production deployment.</p>
<h1 id="Online-Tutorials"><a href="#Online-Tutorials" class="headerlink" title="Online Tutorials"></a>Online Tutorials</h1><ul>
<li><a href="https://www.tutorialspoint.com/spring_boot/index.htm">Tutorialspoint Spring Boot Tutorial</a></li>
<li><a href="https://www.baeldung.com/category/spring/spring-boot/">Baeldung Spring Boot Category</a></li>
<li><a href="https://www.mkyong.com/tutorials/spring-boot-tutorials/">Mkyong Spring Boot Tutorial</a></li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/reference/htmlsingle/">Spring Boot Reference</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot JPA One to One</title>
    <url>/SpringBoot/Spring-Boot-JPA-One-To-One/</url>
    <content><![CDATA[<p>Lets learn how to use Spring Boot JPA to implement One to One relationship.</p>
<span id="more"></span>

<p>You can model One-to-One relationships between entities using the <code>@OneToOne</code> annotation. In a one-to-one relationship, each record in one table is associated with one and only one record in another table.</p>
<h1 id="Bidirectional-One-to-One-Relationship"><a href="#Bidirectional-One-to-One-Relationship" class="headerlink" title="Bidirectional One-to-One Relationship"></a>Bidirectional One-to-One Relationship</h1><p>We can have two entities <code>Person</code> and <code>Address</code>. A person can have only one address and an address belongs to only one person.</p>
<p>Person entity:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne(mappedBy = &quot;person&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>@OneToOne</code> annotation is used to create a one-to-one relationship between the <code>Person</code> and <code>Address</code> entities. The <code>mappedBy</code> attribute is used to specify the property in the <code>Address</code> entity that owns the relationship.</p>
<p>Address entity:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;person_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>An address belongs to only one person. The <code>@JoinColumn</code> annotation is used to specify the foreign key column in the <code>Address</code> entity that refers to the primary key column in the <code>Person</code> entity.</p>
<p>Test the relationship by creating a <code>Person</code> and an <code>Address</code> and setting the address to the person.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.setName(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">address.setStreet(<span class="string">&quot;123 Main St&quot;</span>);</span><br><span class="line">address.setCity(<span class="string">&quot;Springfield&quot;</span>);</span><br><span class="line"></span><br><span class="line">person.setAddress(address);</span><br><span class="line">address.setPerson(person);</span><br><span class="line"></span><br><span class="line">personRepository.save(person);</span><br></pre></td></tr></table></figure>


<h1 id="Unidirectional-One-to-One-Relationship"><a href="#Unidirectional-One-to-One-Relationship" class="headerlink" title="Unidirectional One-to-One Relationship"></a>Unidirectional One-to-One Relationship</h1><p>It is also possible to create a unidirectional one-to-one relationship.</p>
<p>Person entity:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Address entity:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;person_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.setName(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">address.setStreet(<span class="string">&quot;123 Main St&quot;</span>);</span><br><span class="line">address.setCity(<span class="string">&quot;Springfield&quot;</span>);</span><br><span class="line"></span><br><span class="line">address.setPerson(person);</span><br><span class="line"></span><br><span class="line">addressRepository.save(address);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - JdbcClient</title>
    <url>/SpringBoot/Spring-Boot-JdbcClient/</url>
    <content><![CDATA[<p>Spring Boot Integration with JdbcClient</p>
<span id="more"></span>

<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>JdbcClient is a simple wrapper around JdbcTemplate to simplify the usage of JdbcTemplate in Spring Boot applications.</p>
<h1 id="Injections"><a href="#Injections" class="headerlink" title="Injections"></a>Injections</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcClient jdbcClient;</span><br></pre></td></tr></table></figure>
<h1 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>RowMapper - map the result set to the entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerRowMapper</span> <span class="keyword">implements</span> <span class="title class_">RowMapper</span>&lt;Customer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">mapRow</span><span class="params">(ResultSet rs, <span class="type">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Customer</span>()</span><br><span class="line">                .setId(rs.getLong(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">                .setName(rs.getString(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">                .setEmail(rs.getString(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Run-updates-using-JdbcClient"><a href="#Run-updates-using-JdbcClient" class="headerlink" title="Run updates using JdbcClient"></a>Run updates using JdbcClient</h1><p>You can use positional parameters or named parameters</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> jdbcClient.sql(<span class="string">&quot;INSERT INTO customer (name, email) VALUES (?, ?)&quot;</span>)</span><br><span class="line">    .param(<span class="string">&quot;Alice&quot;</span>)</span><br><span class="line">    .param(<span class="string">&quot;alice@def.com&quot;</span>)</span><br><span class="line">    .update();</span><br><span class="line"></span><br><span class="line">jdbcClient.sql(<span class="string">&quot;INSERT INTO customer (name, email) VALUES (:name, :email)&quot;</span>)</span><br><span class="line">    .param(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Bob&quot;</span>)</span><br><span class="line">    .param(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;bob@def.com&quot;</span>)</span><br><span class="line">    .update();</span><br></pre></td></tr></table></figure>

<h1 id="Run-Queries-using-JdbcClient"><a href="#Run-Queries-using-JdbcClient" class="headerlink" title="Run Queries using JdbcClient"></a>Run Queries using JdbcClient</h1><p>You can use positional parameters or named parameters in the query. You need to provide a RowMapper to map the result set to the entity.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Customer&gt; customers = jdbcClient</span><br><span class="line">    .sql(<span class="string">&quot;SELECT * FROM customer WHERE id = :customerId&quot;</span>)</span><br><span class="line">    .param(<span class="string">&quot;customerId&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    .query(<span class="keyword">new</span> <span class="title class_">CustomerRowMapper</span>())</span><br><span class="line">    .list();</span><br><span class="line">customers.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - JPA</title>
    <url>/SpringBoot/Spring-Boot-JPA/</url>
    <content><![CDATA[<p>Let’s learn how to use Java Persistence API(JPA) to map objects to relational databases using an example project.</p>
<span id="more"></span>

<h1 id="Maven-dependency"><a href="#Maven-dependency" class="headerlink" title="Maven dependency"></a>Maven dependency</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>spring-boot-starter-data-jpa contains the following dependencies:</p>
<ul>
<li>Hibernate: One of the most popular JPA implementations.</li>
<li>Spring ORMs: Core ORM support from the Spring Framework.</li>
<li>Spring Data JPA: Makes it easy to implement JPA-based repositories.</li>
</ul>
<h1 id="Datasource"><a href="#Datasource" class="headerlink" title="Datasource"></a>Datasource</h1><p>application.properties - configure data source and related settings</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data source</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">org.h2.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:h2:mem:testdb</span></span><br><span class="line"><span class="comment"># spring.datasource.username=sa</span></span><br><span class="line"><span class="comment"># spring.datasource.password=</span></span><br><span class="line"><span class="attr">spring.jpa.database-platform</span>=<span class="string">org.hibernate.dialect.H2Dialect</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Console access: http://localhost:8080/h2-console</span></span><br><span class="line"><span class="attr">spring.h2.console.enabled</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">none</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.show_sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.use_sql_comments</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>schema.sql - H2 SQL Script to create Database</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span>,</span><br><span class="line">`created` <span class="type">date</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_role` (</span><br><span class="line">`user_id` <span class="type">bigint</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role_id` <span class="type">bigint</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> <span class="keyword">user</span>(`id`),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (`role_id`) <span class="keyword">REFERENCES</span> role(`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>data.sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(`username`, `password`, `enabled`, `created`) <span class="keyword">values</span>( <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="literal">true</span>, <span class="string">&#x27;2019-01-02&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> role(`name`) <span class="keyword">values</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> role(`name`) <span class="keyword">values</span>(<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_role(`user_id`, `role_id`) <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_role(`user_id`, `role_id`) <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>


<h1 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h1><p>Traditionally, JPA entities are specified in persistence.xml file. With Spring Boot, you can define entity with annotations. classes annotated with @Entity, @Embeddable or @MappedSuperclass are used as entity.</p>
<p>User Entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@JsonIdentityInfo(</span></span><br><span class="line"><span class="meta">        generator = ObjectIdGenerators.PropertyGenerator.class,</span></span><br><span class="line"><span class="meta">        property = &quot;id&quot;)</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDate created;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany(cascade = &#123;CascadeType.ALL&#125;, fetch = FetchType.EAGER)</span></span><br><span class="line">    <span class="meta">@JoinTable(</span></span><br><span class="line"><span class="meta">            name=&quot;user_role&quot;,</span></span><br><span class="line"><span class="meta">            joinColumns = &#123;@JoinColumn(name=&quot;user_id&quot;)&#125;,</span></span><br><span class="line"><span class="meta">            inverseJoinColumns = &#123;@JoinColumn(name=&quot;role_id&quot;)&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    Set&lt;Role&gt; roles = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ToStringBuilder</span>(<span class="built_in">this</span>).append(username).append(enabled).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashCodeBuilder</span>().append(username).append(enabled).toHashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="built_in">this</span>) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj.getClass() != getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">User</span> <span class="variable">rhs</span> <span class="operator">=</span> (User) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EqualsBuilder</span>()</span><br><span class="line">                .append(id, rhs.id)</span><br><span class="line">                .append(username, rhs.username)</span><br><span class="line">                .append(enabled, rhs.enabled)</span><br><span class="line">                .isEquals();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Role Entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;role&quot;)</span></span><br><span class="line"><span class="meta">@JsonIdentityInfo(</span></span><br><span class="line"><span class="meta">        generator = ObjectIdGenerators.PropertyGenerator.class,</span></span><br><span class="line"><span class="meta">        property = &quot;id&quot;)</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany(mappedBy=&quot;roles&quot;, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ToStringBuilder</span>(<span class="built_in">this</span>).append(name).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashCodeBuilder</span>().append(name).toHashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="built_in">this</span>) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj.getClass() != getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Role</span> <span class="variable">rhs</span> <span class="operator">=</span> (Role) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EqualsBuilder</span>()</span><br><span class="line">                .append(id, rhs.id)</span><br><span class="line">                .append(name, rhs.name)</span><br><span class="line">                .isEquals();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Here we define a Many to Many relationship suing  @ManyToMany, @JoinTable and @JoinColumn annotations. User entity owns the relationship be cuase it has @JoinTable annotation.</p>
<p>The Role entity has mappedBy attribute to indicate the relationship is mapped by User entity’s roles collection.</p>
<p>To learn more about creating One-to-One, One-to-Many and Many-to-Many relationship in JPA. see the following post:</p>
<ul>
<li><a href="https://www.baeldung.com/jpa-one-to-one">One-to-One Relationship in JPA by baeldung</a></li>
<li><a href="https://www.baeldung.com/hibernate-one-to-many">Hibernate One to Many Annotation Tutorial by baeldung</a></li>
<li><a href="https://www.baeldung.com/hibernate-many-to-many">Hibernate Many to Many Annotation Tutorial by Zeger Hendrikse</a></li>
</ul>
<h2 id="Solving-JSON-recursive-dependency"><a href="#Solving-JSON-recursive-dependency" class="headerlink" title="Solving JSON recursive dependency"></a>Solving JSON recursive dependency</h2><p>When using Jackson to serialize JPA Entities with one-to-many or many-to-many relationship, you can easily get infinite recursion problem because they are bidirection relation. To avoid the error, add <strong>@JsonIdentityInfo</strong> annotation to tell Jackson the iendity info.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@JsonIdentityInfo(</span></span><br><span class="line"><span class="meta">        generator = ObjectIdGenerators.PropertyGenerator.class,</span></span><br><span class="line"><span class="meta">        property = &quot;id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;role&quot;)</span></span><br><span class="line"><span class="meta">@JsonIdentityInfo(</span></span><br><span class="line"><span class="meta">        generator = ObjectIdGenerators.PropertyGenerator.class,</span></span><br><span class="line"><span class="meta">        property = &quot;id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@JsonIdentityInfo</code> is not the only way to solve this problem, you can also use </p>
<ul>
<li><code>@JsonBackReference</code> and <code>@JsonManagedReference</code> to handle the relationship</li>
<li><code>@JsonIgnore</code> or <code>@JsonIgnoreProperties</code> annotation to ignore the serialization of one or more property.</li>
</ul>
<p>Refer to this post to see how they are used to handle bidirectional relationship in Json: <a href="https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion">https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion</a></p>
<h2 id="Used-with-Lombok"><a href="#Used-with-Lombok" class="headerlink" title="Used with Lombok"></a>Used with Lombok</h2><p>Like Json serialization, you can also get stackoverflow when using auto generated methods from Lombok.</p>
<p>It is very common to use lombok to generate a class’s getters, setters etc to reduce boilerplate code.  However, the default implementation for toString, equals and hashCode method will cause recursion for a many-to-many relationship. To solve this problem, either stop using <strong>@Data</strong> annotation to generate code or explicitly define <em>toString</em>, <em>hashCode</em> and <em>equals</em> method.</p>
<p>The User and Role entity class both explicitely define <em>toString</em>, <em>hashCode</em> and <em>equals</em> method to avoid recusion.</p>
<h1 id="JpaRepository"><a href="#JpaRepository" class="headerlink" title="JpaRepository"></a>JpaRepository</h1><p><a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html">JpaRepository</a> extends <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html">CrudRepository</a> and <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/PagingAndSortingRepository.html">PagingAndSortingRepository</a>. <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html">CrudRepository</a> provides methods for generic CRUD operations. <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/PagingAndSortingRepository.html">PagingAndSortingRepository</a> extends CrudRepository and provides additional methods to retrieve entities using pagination and sorting.</p>
<p>Class extends <em>JpaRepository</em> interface will have all the basic CRUB methods defined and implemented. </p>
<p>You can also add customize methods and queries to the interface. <strong>Spring Data will analyze the methods defined by the interfaces and tries to automatically generate queries from the method name.</strong> </p>
<p>Use the @Query annotation in Spring Data JPA to execute both JPQL and native SQL queries. For more on JPQL, see </p>
<ul>
<li><a href="https://thorben-janssen.com/jpql/">JPQL – How to Define Queries in JPA and Hibernate</a></li>
<li><a href="https://www.youtube.com/live/ZqD-lNutsys?si=Wh5zWAc26O4c3Cnb">Video Tutorial - JPA Fundamentals - Lesson 12 - JPQL and using queries</a></li>
<li><a href="https://www.baeldung.com/spring-data-jpa-query">https://www.baeldung.com/spring-data-jpa-query</a></li>
</ul>
<p>For more information on various ways to query in JPA, see <a href="https://docs.spring.io/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods">Spring Data JPA Query Methods</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    <span class="meta">@Query(&quot;from User where created between :start and :end&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByDateRange</span><span class="params">(<span class="meta">@Param(&quot;start&quot;)</span> LocalDate start, <span class="meta">@Param(&quot;end&quot;)</span> LocalDate end)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Using-Jpa-Entity"><a href="#Using-Jpa-Entity" class="headerlink" title="Using Jpa Entity"></a>Using Jpa Entity</h1><p>You can now autowire the JpaRepository to service class and use it.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findByUsername</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findByUsername(username).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="About-Lazy-Loading"><a href="#About-Lazy-Loading" class="headerlink" title="About Lazy Loading"></a>About Lazy Loading</h1><p>You can set the loading strategy by setting fetch attribute. The value can be <code> fetchType.LAZY</code> or <code>fetchType.EAGER</code>. </p>
<p>If you encounter LazyInitializationException when using lazy loading, add <code>@Transactional</code> to the service method because session is needed for lazy loading otherwise a lazyinitializationexception will be thrown.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.xinghua24.bookmark.entity.User.roles, could not initialize proxy - no Session</span><br><span class="line">	at org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:606) ~[hibernate-core-5.4.12.Final.jar:5.4.12.Final]</span><br><span class="line">	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:218) ~[hibernate-core-5.4.12.Final.jar:5.4.12.Final]</span><br><span class="line">	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585) ~[hibernate-core-5.4.12.Final.jar:5.4.12.Final]</span><br><span class="line">	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149) ~[hibernate-core-5.4.12.Final.jar:5.4.12.Final]</span><br></pre></td></tr></table></figure>

<p>For more on Lazy loading, see <a href="https://www.baeldung.com/hibernate-lazy-eager-loading">Eager&#x2F;Lazy Loading In Hibernate by baeldung</a></p>
<h1 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h1><p>If we use spring-boot-starter-jdbc or spring-boot-starter-data-jpa, Spring Boot will turn on <code>@EnableTransactionManagement</code> by default. You can use <code>@Transaction</code> to declare transaction at class level or method level. <code>@Transaction</code> by default rolls back on all transactions. You can use rollbackOn and dontRollbackOn attribute to customize the exceptions to rollback.</p>
<p>Service method with <code>@Transactional</code> annotation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackOn = IllegalArgumentException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepo.findById(<span class="number">1L</span>).orElse(<span class="literal">null</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;Name shouldn&#x27;t be changed!!!!&quot;</span>);</span><br><span class="line">        userRepo.save(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ILLEGAL OPERATION&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When this method is called, even if the repository saves the change, the exception will cause the transaction to roll back and undo the previous change.</p>
<p>Note that <strong>@Transaction</strong> should be apply to service class(with @Service annotation). Don’t apply this annotation to multiple layers of the application. Also, the method should be declare public for the transaction to work.</p>
<h1 id="generate-ddl-vs-ddl-auto"><a href="#generate-ddl-vs-ddl-auto" class="headerlink" title="generate-ddl vs ddl-auto"></a>generate-ddl vs ddl-auto</h1><p>JPA can generate ddl to set up database on startup. There are 2 properties you can set in configuration file.</p>
<ul>
<li><code>spring.jpa.generate-ddl</code> (boolean) switches the feature on and off and is vendor independent.</li>
<li><code>spring.jpa.hibernate.ddl-auto</code> (enum) is a Hibernate feature that controls the behavior in a more fine-grained way. See below for more detail.</li>
</ul>
<p><code>ddl-auto</code> can take the following options:</p>
<ul>
<li>none</li>
<li>validate - validate only, not changing the schema</li>
<li>update - update the schema</li>
<li>create - create the schema</li>
<li>create-drop - create the schema, drop at the end of the session</li>
</ul>
<p><code>ddl-auto</code> and <code>generate-ddl</code> should not be used in production.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.spring.io/spring-data/data-jpa/docs/current/reference/html/">Spring Data JPA Reference</a></li>
<li><a href="https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa">Baeldung - Introduction to Spring Data JPA by Eugen Paraschiv </a></li>
<li><a href="https://www.baeldung.com/spring-data-jpa-query">Baeldung - Spring Data JPA @Query</a></li>
<li><a href="https://www.baeldung.com/transaction-configuration-with-jpa-and-spring">Baeldung - Transactions with Spring and JPA by Eugen Paraschiv </a></li>
<li><a href="https://stackoverflow.com/questions/21113154/spring-boot-ddl-auto-generator">Spring boot ddl auto generator</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/1.1.0.M1/reference/html/howto-database-initialization.html">Spring Boot database initialization</a></li>
</ul>
<p>Furthur research on Spring Data, see Baeldung’s Spring Data Topic <a href="https://www.baeldung.com/category/persistence/spring-persistence/spring-data/">https://www.baeldung.com/category/persistence/spring-persistence/spring-data/</a></p>
<p>Source Code: <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/jpa">https://github.com/xinghua24/SpringBootExamples/tree/master/jpa</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Logging</title>
    <url>/SpringBoot/Spring-Boot-Logging/</url>
    <content><![CDATA[<p>Lets look at the Logging options for Spring Boot.</p>
<span id="more"></span>

<p>If you use starters(spring-boot-starter artifact in pom.xml), Logback is used for logging by default. This is because spring-boot-starter contains spring-boot-starter-logging.</p>
<h1 id="Logging-level"><a href="#Logging-level" class="headerlink" title="Logging level"></a>Logging level</h1><p>The logging levels are ERROR, WARN, INFO, DEBUG, or TRACE. Default is INFO so DEBUG and TRACE logs are not visible.</p>
<p>Controller to test Logging level</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class LoggingController &#123;</span><br><span class="line">    private static final Logger LOG = LoggerFactory.getLogger(LoggingController.class);</span><br><span class="line">    </span><br><span class="line">    // http://localhost:8080/log</span><br><span class="line">    @RequestMapping(&quot;/log&quot;)</span><br><span class="line">    public String log() &#123;</span><br><span class="line">        LOG.error(&quot;This is an error message.&quot;);</span><br><span class="line">        LOG.warn(&quot;This is a warning message.&quot;);</span><br><span class="line">        LOG.info(&quot;This is an info message.&quot;);</span><br><span class="line">        LOG.debug(&quot;This is a debug message.&quot;);</span><br><span class="line">        LOG.trace(&quot;This is a trace message.&quot;);</span><br><span class="line">        return &quot;foo&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>You can set logging level in application.properties file or using program arguments.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging.level.root=info</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging.level.root=INFO</span><br></pre></td></tr></table></figure>

<p>we can also pass log level via command line arguments</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar target/app.jar --logging.level.root=error</span><br></pre></td></tr></table></figure>

<p>Spring Boot also allows you to set the logging level for a specific package in application.properties file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging.level.org.hibernate=DEBUG</span><br></pre></td></tr></table></figure>

<h1 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h1><p>You can configure logback by adding one of the following files to classpath</p>
<ul>
<li>logback-spring.xml</li>
<li>logback.xml</li>
</ul>
<p>Sample logback.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- set default log level to be INFO --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Log Level: ALL &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h1><p>To use Log4j, we need to exclude spring-boot-starter-logging for all dependencies that uses spring-boot-starter-logging. Then add log4j2 dependency</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Then add one of the log4j2 files</p>
<ul>
<li>log4j2-spring.xml</li>
<li>log4j2.xml</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-logging">Spring Boot Documentation - Logging</a></li>
<li><a href="https://www.baeldung.com/spring-boot-logging">Baeldung Spring Boot Logging</a></li>
</ul>
<p>source code: <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/logging">https://github.com/xinghua24/SpringBootExamples/tree/master/logging</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot JPA Many to Many</title>
    <url>/SpringBoot/Spring-Boot-JPA-Many-To-Many/</url>
    <content><![CDATA[<p>Lets learn how to use Spring Boot JPA to implement Many to Many relationship.</p>
<span id="more"></span>

<p>In a many-to-many relationship, each record in the first table can be related to one or more records in the second table, and vice versa.</p>
<h1 id="Bidirectional"><a href="#Bidirectional" class="headerlink" title="Bidirectional"></a>Bidirectional</h1><p>We can have two entities <code>Student</code> and <code>Course</code>. A student can enroll in multiple courses and a course can have multiple students.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable(</span></span><br><span class="line"><span class="meta">        name = &quot;student_course&quot;,</span></span><br><span class="line"><span class="meta">        joinColumns = @JoinColumn(name = &quot;student_id&quot;),</span></span><br><span class="line"><span class="meta">        inverseJoinColumns = @JoinColumn(name = &quot;course_id&quot;)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; courses;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>@ManyToMany</code> annotation is used to create a many-to-many relationship between the <code>Student</code> and <code>Course</code> entities. The <code>@JoinTable</code> annotation is used to specify the join table that will be used to store the relationship between the two entities. The <code>joinColumns</code> attribute specifies the foreign key column in the join table that refers to the primary key column in the <code>Student</code> entity, and the <code>inverseJoinColumns</code> attribute specifies the foreign key column in the join table that refers to the primary key column in the <code>Course</code> entity.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany(mappedBy = &quot;courses&quot;)</span></span><br><span class="line">        <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@ToString</span>.Exclude</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A course can have multiple students. The <code>mappedBy</code> attribute is used to specify the property in the <code>Student</code> entity that owns the relationship.</p>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>insert data</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create a student</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student.setName(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">studentRepository.save(student);</span><br><span class="line"></span><br><span class="line"><span class="comment">// another student</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student2.setName(<span class="string">&quot;Jane Doe&quot;</span>);</span><br><span class="line">studentRepository.save(student2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a javaCourse</span></span><br><span class="line"><span class="type">Course</span> <span class="variable">javaCourse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">javaCourse.setName(<span class="string">&quot;Java 101&quot;</span>);</span><br><span class="line">courseRepository.save(javaCourse);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a pythonCourse</span></span><br><span class="line"><span class="type">Course</span> <span class="variable">pythonCourse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">pythonCourse.setName(<span class="string">&quot;Python 101&quot;</span>);</span><br><span class="line">courseRepository.save(pythonCourse);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add the student to the javaCourse and pythonCourse</span></span><br><span class="line">javaCourse.getStudents().add(student);</span><br><span class="line">pythonCourse.getStudents().add(student);</span><br><span class="line">student.getCourses().add(javaCourse);</span><br><span class="line">student.getCourses().add(pythonCourse);</span><br><span class="line">studentRepository.save(student);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add the student2 to the javaCourse</span></span><br><span class="line">javaCourse.getStudents().add(student2);</span><br><span class="line">student2.getCourses().add(javaCourse);</span><br><span class="line">studentRepository.save(student2);</span><br></pre></td></tr></table></figure>

<p>Get a student’s courses</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">studentRepository.findById(<span class="number">1L</span>)</span><br><span class="line">    .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Student Not Found&quot;</span>))</span><br><span class="line">    .getCourses();</span><br><span class="line"></span><br><span class="line">studentRepository.findById(<span class="number">2L</span>)</span><br><span class="line">    .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Student Not Found&quot;</span>))</span><br><span class="line">    .getCourses();</span><br></pre></td></tr></table></figure>

<h1 id="Unidirectional-with-ManyToMany"><a href="#Unidirectional-with-ManyToMany" class="headerlink" title="Unidirectional with @ManyToMany"></a>Unidirectional with @ManyToMany</h1><p>It is possible to create a unidirectional Many-to-Many relationship as well.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable(</span></span><br><span class="line"><span class="meta">        name = &quot;student_course&quot;,</span></span><br><span class="line"><span class="meta">        joinColumns = @JoinColumn(name = &quot;student_id&quot;),</span></span><br><span class="line"><span class="meta">        inverseJoinColumns = @JoinColumn(name = &quot;course_id&quot;)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; courses;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this case, the <code>Course</code> entity does not have a reference to the <code>Student</code> entity, so the relationship is unidirectional. The join table is still used to store the relationship between the two entities.</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Postgres</title>
    <url>/SpringBoot/Spring-Boot-Postgres/</url>
    <content><![CDATA[<p>Spring Boot Integration with Postgres</p>
<span id="more"></span>

<h1 id="Maven-Dependencies"><a href="#Maven-Dependencies" class="headerlink" title="Maven Dependencies"></a>Maven Dependencies</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Run-MySQL-using-Docker-Compose"><a href="#Run-MySQL-using-Docker-Compose" class="headerlink" title="Run MySQL using Docker Compose"></a>Run MySQL using Docker Compose</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use postgres/example user/password credentials</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># set shared memory limit when using docker-compose</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">128mb</span></span><br><span class="line">    <span class="comment"># or set shared memory limit when deploy via swarm stack</span></span><br><span class="line">    <span class="comment">#volumes:</span></span><br><span class="line">    <span class="comment">#  - type: tmpfs</span></span><br><span class="line">    <span class="comment">#    target: /dev/shm</span></span><br><span class="line">    <span class="comment">#    tmpfs:</span></span><br><span class="line">    <span class="comment">#      size: 134217728 # 128*2^20 bytes = 128Mb</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">example</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5432:5432</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8000</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure>

<h1 id="Configuration-for-a-MySQL-dataSource"><a href="#Configuration-for-a-MySQL-dataSource" class="headerlink" title="Configuration for a MySQL dataSource"></a>Configuration for a MySQL dataSource</h1><p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:postgresql://localhost:5432/postgres</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">postgres</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">example</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">org.postgresql.Driver</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.dialect</span>=<span class="string">org.hibernate.dialect.PostgreSQLDialect</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">create-drop</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>


<h1 id="Jpa-Entity-and-Repository"><a href="#Jpa-Entity-and-Repository" class="headerlink" title="Jpa Entity and Repository"></a>Jpa Entity and Repository</h1><p>Entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Repository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerRepo</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Customer, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CommandLineRunner <span class="title function_">runCLR</span><span class="params">(CustomerRepo userRepo)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommandLineRunner</span>()&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">			userRepo.save(<span class="keyword">new</span> <span class="title class_">Customer</span>().setName(<span class="string">&quot;John Doe&quot;</span>).setEmail(<span class="string">&quot;abc@def.com&quot;</span>).setPassword(<span class="string">&quot;1234&quot;</span>));</span><br><span class="line">			userRepo.findAll().forEach(System.out::println);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Output in console</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Customer(id=0, name=John Doe, email=abc@def.com, password=1234)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot JPA One to Many</title>
    <url>/SpringBoot/Spring-Boot-JPA-One-ToMany/</url>
    <content><![CDATA[<p>Lets learn how to use Spring Boot JPA to implement One to Many relationship.</p>
<span id="more"></span>

<p>you can model Many-to-One and One-to-Many relationships between entities using the @ManyToOne and @OneToMany annotations. </p>
<h1 id="Bidirectional"><a href="#Bidirectional" class="headerlink" title="Bidirectional"></a>Bidirectional</h1><p>We can have two entities <code>Post</code> and <code>Comment</code>. A post can have multiple comments and a comment belongs to a post.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Comment</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;post_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Post post;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>@ManyToOne</code> annotation is used to create a many-to-one relationship between the <code>Comment</code> and <code>Post</code> entities. The <code>@JoinColumn</code> annotation is used to specify the foreign key column in the <code>Comment</code> entity that refers to the primary key column in the <code>Post</code> entity.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(cascade = CascadeType.ALL, mappedBy = &quot;post&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Comment&gt; comments;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A post can have multiple comments. The <code>mappedBy</code> attribute is used to specify the property in the <code>Comment</code> entity that owns the relationship.</p>
<h1 id="Unidirectional-with-ManyToOne"><a href="#Unidirectional-with-ManyToOne" class="headerlink" title="Unidirectional with @ManyToOne"></a>Unidirectional with @ManyToOne</h1><p>Bidirectional One-to-Many relationship is the most common way to map a one-to-many relationship. It is possible to create a unidirectional One-to-Many&#x2F;Many-To-One relationship as well.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Comment</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;post_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Post post;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@ManyToOne</code> annotation is used to create a many-to-one relationship between the <code>Comment</code> and <code>Post</code> entities. The <code>@JoinColumn</code> annotation is used to specify the foreign key column in the <code>Comment</code> entity that refers to the primary key column in the <code>Post</code> entity.</p>
<p>Post doesn’t have a reference to Comment.</p>
<p>Use case: If you ONLY need to navigate from the owning entity to the owned entity, you can use a unidirectional relationship.</p>
<h1 id="Cascade-Types"><a href="#Cascade-Types" class="headerlink" title="Cascade Types"></a>Cascade Types</h1><p>The <code>cascade</code> attribute is used to specify the operations that should be cascaded to the target of the association. The <code>cascade</code> attribute can be specified on the <code>@OneToOne</code>, <code>@OneToMany</code>, and <code>@ManyToMany</code> annotations.</p>
<p>Optionas are:</p>
<ul>
<li><code>CascadeType.ALL</code>: All operations are cascaded.</li>
<li><code>CascadeType.PERSIST</code>: Only persist operation is cascaded.</li>
<li><code>CascadeType.MERGE</code>: Only merge operation is cascaded.</li>
<li><code>CascadeType.REMOVE</code>: Only remove operation is cascaded.</li>
<li><code>CascadeType.REFRESH</code>: Only refresh operation is cascaded.</li>
<li><code>CascadeType.DETACH</code>: Only detach operation is cascaded.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OneToMany(cascade = CascadeType.ALL, mappedBy = &quot;post&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Comment&gt; comments;</span><br></pre></td></tr></table></figure>
<p>Here we are using <code>CascadeType.ALL</code> to cascade all operations to Comment entity. If we save a Post entity, all associated Comment entities will be saved automatically. If we delete a Post entity, all associated Comment entities will be deleted automatically.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OneToMany(cascade = CascadeType.PERSIST, mappedBy = &quot;post&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Comment&gt; comments;</span><br></pre></td></tr></table></figure>
<p>Here we are using <code>CascadeType.PERSIST</code> to cascade only persist operation to Comment entity. If we save a Post entity, all associated Comment entities will be saved automatically. If we delete a Post entity, associated Comment entities will not be deleted automatically.</p>
<p>It is common to use <code>CascadeType.ALL</code> or <code>CascadeType.PERSIST</code> when you have a bidirectional relationship. Otherwise, you may end up with orphaned entities in the database.</p>
<h1 id="FetchType"><a href="#FetchType" class="headerlink" title="FetchType"></a>FetchType</h1><p>The <code>fetch</code> attribute is used to specify the fetch type for the association. The <code>fetch</code> attribute can be specified on the <code>@OneToOne</code>, <code>@OneToMany</code>, and <code>@ManyToMany</code> annotations. Default fetch type is <code>FetchType.LAZY</code>.</p>
<p>Options are:</p>
<ul>
<li><code>FetchType.EAGER</code>: The associated entity is loaded eagerly when the owning entity is loaded.</li>
<li><code>FetchType.LAZY</code>: The associated entity is loaded lazily when the association is accessed.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OneToMany(cascade = CascadeType.ALL, mappedBy = &quot;post&quot;, fetch = FetchType.EAGER)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Comment&gt; comments;</span><br></pre></td></tr></table></figure>
<p>Here we are using <code>FetchType.EAGER</code> to load all associated Comment entities when a Post entity is loaded.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Post <span class="title function_">getPostById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span> postRepository.findById(id).orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Post not found&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;Post Title: &quot;</span> + post.getTitle());</span><br><span class="line">    List&lt;Comment&gt; comments = post.getComments();</span><br><span class="line">    System.out.println(<span class="string">&quot;Comments: &quot;</span> + comments);</span><br><span class="line">    <span class="keyword">return</span> post;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here comments associated with the post will be loaded eagerly when the post is loaded.</p>
<p>If you use <code>FetchType.LAZY</code>, comments will be loaded lazily when you access them(calling <code>post.getComments()</code>).</p>
<h1 id="Orphan-Removal"><a href="#Orphan-Removal" class="headerlink" title="Orphan Removal"></a>Orphan Removal</h1><p>The <code>orphanRemoval</code> attribute is used to specify whether to remove the associated entity when it is no longer referenced by the owning entity. The <code>orphanRemoval</code> attribute can be specified on the <code>@OneToOne</code>, <code>@OneToMany</code>, and <code>@OneToOne</code> annotations. Default value is <code>false</code>. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OneToMany(cascade = CascadeType.ALL, mappedBy = &quot;post&quot;, orphanRemoval = true)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Comment&gt; comments;</span><br></pre></td></tr></table></figure>
<p>Here we are using <code>orphanRemoval = true</code> to remove the associated Comment entity when it is no longer referenced by the Post entity.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deletePost</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span> postRepository.findById(id).orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Post not found&quot;</span>));</span><br><span class="line">    postRepository.delete(post);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When we delete a Post entity, all associated Comment entities will be deleted automatically. It is identical to using <code>CascadeType.REMOVE</code> in this case. You can use <code>orphanRemoval = true</code> or <code>CascadeType.REMOVE</code> to achieve the same result.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteComments</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span> postRepository.findById(<span class="number">1L</span>).orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Post not found&quot;</span>));</span><br><span class="line">    post.getComments().clear();</span><br><span class="line">    postRepository.save(post);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When we remove all comments from the comments list and save the Post entity, all associated Comment entities will be deleted from the database. If <code>orphanRemoval = false</code>, associated Comment entities will NOT be deleted from the database.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.jboss.org/hibernate/annotations/3.5/reference/en/html_single/">Hibernate Annotations</a></li>
<li><a href="https://www.baeldung.com/jpa-cascade-types">Hibernate Cascade Types</a></li>
<li><a href="https://www.baeldung.com/hibernate-fetchmode">Hibernate FetchType</a></li>
<li><a href="https://www.baeldung.com/jpa-orphan-removal">Hibernate Orphan Removal</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Rest Controller</title>
    <url>/SpringBoot/Spring-Boot-RestController/</url>
    <content><![CDATA[<p>Spring RestController Usage</p>
<span id="more"></span>

<h1 id="Rest-Controller-Annotations"><a href="#Rest-Controller-Annotations" class="headerlink" title="Rest Controller Annotations"></a>Rest Controller Annotations</h1><p>Annotations used for Spring MVC are used in Spring Boot too. Here are the common annotations:</p>
<ul>
<li><strong>@RestController</strong> - @Controller + @ResponseBody</li>
<li><strong>@ResponseBody</strong> - indicates that the result type should be written straight in the response body in whatever format you specify like JSON or XML.</li>
<li><strong>@RequestMapping</strong> - This annotation is used at both the class and method level. The @RequestMapping annotation is used to map web requests onto specific handler classes and handler methods.</li>
<li><strong>@PostMapping</strong> - shortcut for @RequestMapping(method &#x3D; RequestMethod.POST). There is also @GetMapping, @PutMapping, @DeleteMapping</li>
<li><strong>@RequestParam</strong> - get the parameters in the request URL</li>
<li><strong>@RequestBody</strong> - method parameter should be bound to the value of the HTTP request body.</li>
<li><strong>@PathVariable</strong> - used to handle dynamic changes in the URI where a certain URI value acts as a parameter.</li>
</ul>
<h1 id="Sample-Application"><a href="#Sample-Application" class="headerlink" title="Sample Application"></a>Sample Application</h1><p>The sample application demos most of the commonly used annotations in a Spring Boot web application</p>
<p>Entity class Task</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> &#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">  <span class="meta">@Column(name = &quot;id&quot;, nullable = false)</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">  String description;</span><br><span class="line"></span><br><span class="line">  <span class="type">boolean</span> done;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>MyController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;api/tasks&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TaskRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;Task&gt;&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Task&gt; tasks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Task&gt;();</span><br><span class="line"></span><br><span class="line">            repository.findAll().forEach(tasks::add);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tasks.isEmpty())</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NO_CONTENT);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(tasks, HttpStatus.OK);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(<span class="literal">null</span>, HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Task&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        Optional&lt;Task&gt; existingtaskOptional = repository.findById(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (existingtaskOptional.isPresent()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(existingtaskOptional.get(), HttpStatus.OK);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/search&quot;, params = &#123;&quot;description&quot;, &quot;done&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;Task&gt;&gt; <span class="title function_">getByDescriptionAndDone</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value=&quot;description&quot;, required = true)</span> String description,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value=&quot;done&quot;, required = false, defaultValue = &quot;false&quot;)</span> <span class="type">boolean</span> done)</span> &#123;</span><br><span class="line">        List&lt;Task&gt; tasksFound = repository.findByDescriptionAndDone(description, done);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(tasksFound);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Task&gt; <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Task task)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Task</span> <span class="variable">savedtask</span> <span class="operator">=</span> repository.save(task);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(savedtask);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.internalServerError().build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(</span></span><br><span class="line"><span class="meta">        value = &quot;/&#123;id&#125;&quot;,</span></span><br><span class="line"><span class="meta">        consumes = MediaType.APPLICATION_JSON_VALUE,</span></span><br><span class="line"><span class="meta">        produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Task&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="meta">@RequestBody</span> Task task)</span> &#123;</span><br><span class="line">        Optional&lt;Task&gt; existingtaskOptional = repository.findById(id);</span><br><span class="line">        <span class="keyword">if</span> (existingtaskOptional.isPresent()) &#123;</span><br><span class="line">            <span class="type">Task</span> <span class="variable">existingtask</span> <span class="operator">=</span> existingtaskOptional.get();</span><br><span class="line">            existingtask.setDescription(task.getDescription());</span><br><span class="line">            existingtask.setDone(task.isDone());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(repository.save(existingtask), HttpStatus.OK);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;HttpStatus&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            repository.deleteById(id);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NO_CONTENT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.EXPECTATION_FAILED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h1><p>A convenience annotation that is itself annotated with @Controller and @ResponseBody. This is used to indicate the class is used as Rest Controller.</p>
<p>@RequestMapping annotation can be used at the class level to map requests.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;api/tasks&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h1><p>You can use @RequestMapping to map a GET request. However, it is often more convenient to use @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, or @PatchMapping.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Task&gt;&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;Task&gt; tasks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Task&gt;();</span><br><span class="line"></span><br><span class="line">        repository.findAll().forEach(tasks::add);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tasks.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NO_CONTENT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(tasks, HttpStatus.OK);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(<span class="literal">null</span>, HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="PathVairiable"><a href="#PathVairiable" class="headerlink" title="@PathVairiable"></a>@PathVairiable</h1><p>Use @PathVariable to bind parameter to path variable.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/byId/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Task&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    Optional&lt;Task&gt; existingtaskOptional = repository.findById(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (existingtaskOptional.isPresent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(existingtaskOptional.get(), HttpStatus.OK);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h1><p>Use <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestParam.html">@RequestParam</a> to bind parameters to query parameters. </p>
<p>You can set if parameter is required and its default value for @RequestParam.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value=&quot;/search&quot;, params = &#123;&quot;description&quot;, &quot;done&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Task&gt;&gt; <span class="title function_">getByDescriptionAndDone</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(value=&quot;description&quot;, required = true)</span> String description,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(value=&quot;done&quot;, required = false, defaultValue = &quot;false&quot;)</span> <span class="type">boolean</span> done)</span> &#123;</span><br><span class="line">    List&lt;Task&gt; tasksFound = repository.findByDescriptionAndDone(description, done);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(tasksFound);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h1><p>POST or PUT request may have request body, use @RequestBody to bind the parameter to request body</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Task&gt; <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Task task)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">savedtask</span> <span class="operator">=</span> repository.save(task);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(savedtask, HttpStatus.CREATED);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(<span class="literal">null</span>, HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="consumes-and-produces"><a href="#consumes-and-produces" class="headerlink" title="consumes and produces"></a>consumes and produces</h1><p>consumes element narrows the primary mapping by media types that can be consumed by the mapped handler.<br>produces element narrows the primary mapping by media types that can be produced by the mapped handler.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping(</span></span><br><span class="line"><span class="meta">    value = &quot;/&#123;id&#125;&quot;,</span></span><br><span class="line"><span class="meta">    consumes = MediaType.APPLICATION_JSON_VALUE,</span></span><br><span class="line"><span class="meta">    produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Task&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="meta">@RequestBody</span> Task task)</span> &#123;</span><br><span class="line">    Optional&lt;Task&gt; existingtaskOptional = repository.findById(id);</span><br><span class="line">    <span class="keyword">if</span> (existingtaskOptional.isPresent()) &#123;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">existingtask</span> <span class="operator">=</span> existingtaskOptional.get();</span><br><span class="line">        existingtask.setDescription(task.getDescription());</span><br><span class="line">        existingtask.setDone(task.isDone());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(repository.save(existingtask), HttpStatus.OK);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Return-a-ResponseEntity"><a href="#Return-a-ResponseEntity" class="headerlink" title="Return a ResponseEntity"></a>Return a ResponseEntity</h1><p>You can create a ResponseEntity using <code>new</code> and return it.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Task&gt; <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Task task)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">savedtask</span> <span class="operator">=</span> repository.save(task);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(savedtask, HttpStatus.CREATED);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(<span class="literal">null</span>, HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Or you can use a Builder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Task&gt; <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Task task)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">savedtask</span> <span class="operator">=</span> repository.save(task);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(savedtask);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.internalServerError().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Download-files"><a href="#Download-files" class="headerlink" title="Download files"></a>Download files</h1><p>Return value is <code>org.springframework.core.io.Resource</code>. You can use InputStreamResource or ByteArrayResource to return file.</p>
<p>Using InputStreamResource</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Download file using InputStreamResource</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Resource&gt; <span class="title function_">downloadFile</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;abc.txt&quot;</span>;</span><br><span class="line">	<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> ResourceUtils.getFile(ResourceUtils.CLASSPATH_URL_PREFIX + filename);</span><br><span class="line"></span><br><span class="line">	<span class="type">InputStreamResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamResource</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line"></span><br><span class="line">	<span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">	headers.add(HttpHeaders.CONTENT_DISPOSITION, <span class="string">&quot;attachment; filename=abc.txt&quot;</span>);</span><br><span class="line">	headers.add(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache, no-store, must-revalidate&quot;</span>);</span><br><span class="line">	headers.add(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">	headers.add(<span class="string">&quot;Expires&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">		.headers(headers)</span><br><span class="line">		.contentLength(file.length())</span><br><span class="line">		.contentType(MediaType.APPLICATION_OCTET_STREAM)</span><br><span class="line">		.body(resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Use ByteArrayResource if byte array is already available.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Download image file using ByteArrayResource</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/downloadimage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Resource&gt; <span class="title function_">downloadImage</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;star.jpeg&quot;</span>;</span><br><span class="line">	<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> ResourceUtils.getFile(ResourceUtils.CLASSPATH_URL_PREFIX + filename);</span><br><span class="line"></span><br><span class="line">	<span class="type">ByteArrayResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayResource</span>(FileUtils.readFileToByteArray(file));</span><br><span class="line"></span><br><span class="line">	<span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">	headers.add(HttpHeaders.CONTENT_DISPOSITION, <span class="string">&quot;attachment; filename=star.jpeg&quot;</span>);</span><br><span class="line">	headers.add(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache, no-store, must-revalidate&quot;</span>);</span><br><span class="line">	headers.add(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">	headers.add(<span class="string">&quot;Expires&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">		.headers(headers)</span><br><span class="line">		.contentLength(file.length())</span><br><span class="line">		.contentType(MediaType.APPLICATION_OCTET_STREAM)</span><br><span class="line">		.body(resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Another option is to write to copy to the response output stream.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(path = &quot;/fileoutput&quot;, produces = MediaType.TEXT_PLAIN_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; fileoutput(HttpServletResponse response) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;abc.txt&quot;</span>;</span><br><span class="line">	<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> ResourceUtils.getFile(ResourceUtils.CLASSPATH_URL_PREFIX + filename);</span><br><span class="line"></span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">yourInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">	IOUtils.copy(yourInputStream, response.getOutputStream());</span><br><span class="line">	response.flushBuffer();</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Unit-Test-using-WebMvcTest"><a href="#Unit-Test-using-WebMvcTest" class="headerlink" title="Unit Test using @WebMvcTest"></a>Unit Test using @WebMvcTest</h1><p>Use <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTest.html">@WebMvcTest</a> annotation to test a controller without the  full application configuration.</p>
<p>By default @WebMvcTest auto configures the Controller and MockMvc. You can use @MockBean to create beans required by the Controller.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebMvcTest(TaskController.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskControllerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@MockBean</span></span><br><span class="line">  <span class="keyword">private</span> TaskRepository repository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findTask</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Task</span> <span class="variable">laundryTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>();</span><br><span class="line">    laundryTask.setDescription(<span class="string">&quot;Laundry&quot;</span>);</span><br><span class="line">    when(repository.findAll()).thenReturn(List.of(laundryTask));</span><br><span class="line">    <span class="built_in">this</span>.mockMvc.perform(get(<span class="string">&quot;/api/tasks&quot;</span>))</span><br><span class="line">        .andExpect(status().isOk())</span><br><span class="line">        .andExpect(jsonPath(<span class="string">&quot;$[0].description&quot;</span>).value(<span class="string">&quot;Laundry&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you want to only test a controller use @WebMvcTest annotation.</p>
<p>If you are looking to load your full application context and use MockMVC, you should consider @SpringBootTest combined with @AutoConfigureMockMvc rather than this annotation.</p>
<h1 id="Integration-Test"><a href="#Integration-Test" class="headerlink" title="Integration Test"></a>Integration Test</h1><p>You can use @SpringBootTest to start a complete Spring Boot application with full app context.</p>
<p>Use @SpringBootTest for integration test. The initial data can be loaded using src&#x2F;test&#x2F;resources&#x2F;data.sql file.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="meta">@ActiveProfiles(profiles = &quot;integration-test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskControllerFullConfigTest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TaskRepository repository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findTask</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="built_in">this</span>.mockMvc.perform(get(<span class="string">&quot;/api/tasks&quot;</span>))</span><br><span class="line">        .andExpect(status().isOk())</span><br><span class="line">        .andExpect(jsonPath(<span class="string">&quot;$[0].description&quot;</span>).value(<span class="string">&quot;Laundry&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://spring.io/guides/gs/testing-web/">Spring Testing Web</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - MongoDB</title>
    <url>/SpringBoot/Spring-Boot-MongoDB/</url>
    <content><![CDATA[<p>Spring Boot Integration with mongoDB</p>
<span id="more"></span>

<h1 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h1><p>Add dependency for mongodb. Use embed mongodb instance in this project</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.flapdoodle.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>de.flapdoodle.embed.mongo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="MongoDB-Integration"><a href="#MongoDB-Integration" class="headerlink" title="MongoDB Integration"></a>MongoDB Integration</h1><p>MongoDB integration is very similar to MySQL integration. we add annotaiton to entity class and then create repository class to interact with the data store.</p>
<p>When embed mongodb dependency is included in POM file, you dont need to configure MongoDB connection info</p>
<p>If you don’t want to use an embeded  mongodb server, you can use an actual server or a mongodb docker container. To run a mongodb container: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mongo</span><br><span class="line">docker run -d -p 27017-27019:27017-27019 --rm --name mongodb mongo</span><br></pre></td></tr></table></figure>

<p>In the project, remove the embeded mongodb dependency, and then add the following to configuration files. You can specify the database to use here.</p>
<p>To connect to local MongoDB instance without username and password</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.mongodb.uri</span>=<span class="string">mongodb://127.0.0.1:27017/test</span></span><br></pre></td></tr></table></figure>

<p>To connect local MongoDB instance with username and password</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.mongodb.uri</span>=<span class="string">mongodb://myusername:mypassword@localhost:27017/test?authSource=admin</span></span><br></pre></td></tr></table></figure>

<p>There are two main ways to work with MongoDB, <a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo-template">MongoTemplate</a> ad the Repository support. </p>
<h1 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document(collection = &quot;product&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Date created;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Document annotation is optional. It tells spring this class maps to MongoDB document. use <code>@Id</code> annnotation to map the id field.</p>
<h1 id="MongoTemplate"><a href="#MongoTemplate" class="headerlink" title="MongoTemplate"></a>MongoTemplate</h1><p><a href="https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoTemplate.html">MongoTemplate</a> provides rich methods to interact with MongoDB.</p>
<p>To use MongoTemplate just autowire MongoTemplate bean. Spring automatically creates MongoTemplate bean for you when you configure a MongoDB database.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br></pre></td></tr></table></figure>

<p>Then you can use mongoTemplate’s methods insert, update, query and delete documents</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.data.mongodb.core.query.Criteria.where;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.data.mongodb.core.query.Query.query;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.data.mongodb.core.query.Update.update;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Insert</span></span><br><span class="line">        List&lt;Product&gt; productList = List.of(</span><br><span class="line">                Product.builder().name(<span class="string">&quot;iPhone&quot;</span>).category(<span class="string">&quot;Electronic&quot;</span>).price(<span class="number">1000.00</span>).created(<span class="keyword">new</span> <span class="title class_">Date</span>()).build(),</span><br><span class="line">                Product.builder().name(<span class="string">&quot;Samsung TV&quot;</span>).category(<span class="string">&quot;Electronic&quot;</span>).price(<span class="number">300.00</span>).created(<span class="keyword">new</span> <span class="title class_">Date</span>()).build(),</span><br><span class="line">                Product.builder().name(<span class="string">&quot;Pillow&quot;</span>).category(<span class="string">&quot;Home&quot;</span>).price(<span class="number">200.0</span>).created(<span class="keyword">new</span> <span class="title class_">Date</span>()).build()</span><br><span class="line">        );</span><br><span class="line">        mongoTemplate.insertAll(productList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Query all</span></span><br><span class="line">        List&lt;Product&gt; productsFromMongo = mongoTemplate.findAll(Product.class);</span><br><span class="line">        productsFromMongo.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update</span></span><br><span class="line">        mongoTemplate.updateFirst(query(where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;iPhone&quot;</span>)), update(<span class="string">&quot;price&quot;</span>, <span class="number">1200</span>), Product.class);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">p</span> <span class="operator">=</span> mongoTemplate.findOne(query(where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;iPhone&quot;</span>)), Product.class);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// delete</span></span><br><span class="line">        mongoTemplate.remove(query(where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;iPhone&quot;</span>)), Product.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// drop collection</span></span><br><span class="line">        mongoTemplate.dropCollection(Product.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h1><p>To use MongoRepository, we need to add <code>@EnableMongoRepositories</code> annotation to Spring Boot configuration.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeConfigurationClass</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Repository class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductRepository</span> <span class="keyword">extends</span> <span class="title class_">MongoRepository</span>&lt;Product, String&gt; &#123;</span><br><span class="line">    List&lt;Product&gt; <span class="title function_">findByCategory</span><span class="params">(String category)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Similar to JpaRepository interface, <a href="https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/repository/MongoRepository.html">MongoRepository</a> interface has methods to create, update, query and delete documents.</p>
<p>Repository demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableMongoRepositories</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductRepository productRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">iphone</span> <span class="operator">=</span></span><br><span class="line">                Product.builder().name(<span class="string">&quot;iPhone&quot;</span>).category(<span class="string">&quot;Electronic&quot;</span>).price(<span class="number">1000.00</span>).created(<span class="keyword">new</span> <span class="title class_">Date</span>()).build();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">samsungTV</span> <span class="operator">=</span></span><br><span class="line">                Product.builder().name(<span class="string">&quot;Samsung TV&quot;</span>).category(<span class="string">&quot;Electronic&quot;</span>).price(<span class="number">300.00</span>).created(<span class="keyword">new</span> <span class="title class_">Date</span>()).build();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">pillow</span> <span class="operator">=</span></span><br><span class="line">                Product.builder().name(<span class="string">&quot;Pillow&quot;</span>).category(<span class="string">&quot;Home&quot;</span>).price(<span class="number">200.0</span>).created(<span class="keyword">new</span> <span class="title class_">Date</span>()).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Insert</span></span><br><span class="line">        List&lt;Product&gt; productList = List.of(iphone, samsungTV, pillow);</span><br><span class="line">        productRepository.insert(productList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Query</span></span><br><span class="line">        List&lt;Product&gt; electronics = productRepository.findByCategory(<span class="string">&quot;Electronic&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----electronics----&quot;</span>);</span><br><span class="line">        electronics.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Query by Example</span></span><br><span class="line">        Optional&lt;Product&gt; iphoneFromMongo =</span><br><span class="line">                productRepository.findOne(Example.of(Product.builder().name(<span class="string">&quot;iPhone&quot;</span>).build(), ExampleMatcher.matchingAny()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update</span></span><br><span class="line">        iphoneFromMongo.ifPresentOrElse(ip -&gt; &#123;</span><br><span class="line">            ip.setPrice(<span class="number">1200</span>);</span><br><span class="line">            productRepository.save(ip);</span><br><span class="line">        &#125;, () -&gt; &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;iPhone not found :-(&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Query all</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---findAll----&quot;</span>);</span><br><span class="line">        productRepository.findAll().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete</span></span><br><span class="line">        productRepository.deleteAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>see <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/data-mongodb">https://github.com/xinghua24/SpringBootExamples/tree/master/data-mongodb</a> for the source code.</p>
<p>Reference</p>
<ul>
<li><a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html">Spring Data MongoDB Documentation</a></li>
<li><a href="https://www.baeldung.com/spring-data-mongodb-tutorial">Introduction to Spring Data MongoDB by Baeldung</a></li>
<li><a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo-template">MongoTemplate Documentation</a></li>
<li><a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo.repositories">MongoDB Repository Documentation</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - MySQL</title>
    <url>/SpringBoot/Spring-Boot-MySQL/</url>
    <content><![CDATA[<p>Spring Boot Integration with MySQL</p>
<span id="more"></span>

<h1 id="Maven-Dependencies"><a href="#Maven-Dependencies" class="headerlink" title="Maven Dependencies"></a>Maven Dependencies</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Run-MySQL-using-Docker-Compose"><a href="#Run-MySQL-using-Docker-Compose" class="headerlink" title="Run MySQL using Docker Compose"></a>Run MySQL using Docker Compose</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--lower_case_table_names=1</span> </span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:3306:3306&quot;</span></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8000</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure>

<p>use <code>docker-compose up -d</code> to start the MySQL and Adminer</p>
<h1 id="Configuration-for-a-MySQL-dataSource"><a href="#Configuration-for-a-MySQL-dataSource" class="headerlink" title="Configuration for a MySQL dataSource"></a>Configuration for a MySQL dataSource</h1><p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">test</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">test</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.jpa.database-platform</span>=<span class="string">org.hibernate.dialect.MySQLDialect</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ddl-auto values (create, update, create-drop, validate)</span></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">create-drop</span></span><br></pre></td></tr></table></figure>

<p>ddl-auto is used to automatically create the schema (DDL) based on the Entity classes. The possible values are:</p>
<ul>
<li>update: update the schema, preserving previous data</li>
<li>create: This option will drop the existing schema and create a new one every time the application starts. It does not drop the schema when the application stops.</li>
<li>create-drop: This option will drop the existing schema and create a new one every time the application starts, just like create. However, it will also drop the schema when the application stops.</li>
<li>validate: validate the schema, make no changes to the database, if schema is not valid, SchemaManagementException will be thrown at runtime and the application will not start</li>
<li>none: do nothing with the schema, make no changes to the database</li>
</ul>
<p>for production, it is recommended to use <code>validate</code> or <code>none</code></p>
<h1 id="Jpa-Entity-and-Repository"><a href="#Jpa-Entity-and-Repository" class="headerlink" title="Jpa Entity and Repository"></a>Jpa Entity and Repository</h1><p>Entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Repository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepo</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CommandLineRunner <span class="title function_">run</span><span class="params">(UserRepo userRepo)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommandLineRunner</span>()&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">			userRepo.save(<span class="keyword">new</span> <span class="title class_">User</span>().setName(<span class="string">&quot;John Doe&quot;</span>).setEmail(<span class="string">&quot;abc@def.com&quot;</span>).setPassword(<span class="string">&quot;1234&quot;</span>));</span><br><span class="line">			userRepo.findAll().forEach(System.out::println);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Output in theconsole</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(id=0, name=John Doe, email=abc@def.com, password=1234)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Scheduling Tasks</title>
    <url>/SpringBoot/Spring-Boot-Scheduling-Tasks/</url>
    <content><![CDATA[<p>Scheduling tasks in spring boot</p>
<span id="more"></span>

<h1 id="Enable-Scheduling"><a href="#Enable-Scheduling" class="headerlink" title="Enable Scheduling"></a>Enable Scheduling</h1><p>To enable Scheduling annotation, add <code>@EnableScheduling</code> to one of your <code>@Configuration</code> class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Scheduled-Annotation"><a href="#Scheduled-Annotation" class="headerlink" title="@Scheduled Annotation"></a>@Scheduled Annotation</h1><h2 id="Fix-rate"><a href="#Fix-rate" class="headerlink" title="Fix rate"></a>Fix rate</h2><p>we can execute a task on a fixed period. add <code>@Scheduled</code> annotation and set fixedRate attribute.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(fixedRate = 2000L)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someJob</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;Current Time is &quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm:ss&quot;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Delay"><a href="#Delay" class="headerlink" title="Delay"></a>Delay</h2><p>fixedDelay - Execute the annotated method with a fixed period between the end of the last invocation and the start of the next.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(initialDelay = 1000L, fixedDelay = 2000L)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someJob</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;Current Time is &quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm:ss&quot;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Cron-Expression"><a href="#Cron-Expression" class="headerlink" title="Cron Expression"></a>Cron Expression</h2><p>Cron expression used by <code>@Scheduled</code> is NOT the same as cron in Linux. There are 6 fields in a cron expression. Each has its own range of valid values. </p>
<p>For testing cron expressions check <a href="https://crontab.guru/">https://crontab.guru/</a>. Note that second is not in standard Linux Cron.</p>
<p>Cron expression consiste of six fields:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">second, minute, hour, day of the month, month, day(s) of week</span><br></pre></td></tr></table></figure>

<p>cron meaning and valid values</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───────────── second (0-59)</span><br><span class="line">│ ┌───────────── minute (0 - 59)</span><br><span class="line">│ │ ┌───────────── hour (0 - 23)</span><br><span class="line">│ │ │ ┌───────────── day of the month (1 - 31)</span><br><span class="line">│ │ │ │ ┌───────────── month (1 - 12) (or JAN-DEC)</span><br><span class="line">│ │ │ │ │ ┌───────────── day of the week (0 - 7)</span><br><span class="line">│ │ │ │ │ │          (0 or 7 is Sunday, or MON-SUN)</span><br><span class="line">│ │ │ │ │ │</span><br><span class="line">* * * * * *</span><br></pre></td></tr></table></figure>
<p>Please see <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#scheduling-cron-expression">Cron Expression Documentation</a> for more details and examples.</p>
<p>To run at 8:00, 8:30, 9:00 9:30 every day</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(cron = &quot;* */30 8-9 * * *&quot;, zone = &quot;America/New_York&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someJob</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;Current Time is &quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm:ss&quot;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To run at 11:00PM every day</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(cron = &quot;0 0 23 * * *&quot;, zone = &quot;America/New_York&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someJob</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;Current Time is &quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm:ss&quot;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To avoid hard coding the cron value, we can use Spring Expression to externalize the configuration of the task.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(cron = &quot;$&#123;myTask.cron&#125;&quot;, zone = &quot;America/New_York&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someJob</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;Current Time is &quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm:ss&quot;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>application.properties file</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">myTask.cron</span>=<span class="string">*/10 * 0 * * *</span></span><br></pre></td></tr></table></figure>


<h1 id="Setting-Scheduler’s-pool-size"><a href="#Setting-Scheduler’s-pool-size" class="headerlink" title="Setting Scheduler’s pool size"></a>Setting Scheduler’s pool size</h1><p>The default size is 1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.task.scheduling.pool.size=5</span><br></pre></td></tr></table></figure>

<h1 id="ShedLock"><a href="#ShedLock" class="headerlink" title="ShedLock"></a>ShedLock</h1><p><a href="https://github.com/lukas-krecan/ShedLock">ShedLock</a> makes sure that your scheduled tasks are executed at most once at the same time. If a task is being executed on one node, it acquires a lock which prevents execution of the same task from another node (or thread). Please note, that if one task is already being executed on one node, execution on other nodes does not wait, it is simply skipped.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#scheduling-annotation-support">Spring Documentation of Scheduling</a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#scheduling-annotation-support-scheduled">@Scheduled annotation</a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#scheduling-cron-expression">Cron Expression</a></li>
<li><a href="https://www.baeldung.com/spring-scheduled-tasks">Baeldung @Scheduled Annotation in Spring</a></li>
<li><a href="https://www.youtube.com/watch?v=92-qLIxv0JA">Youtube @Scheduled crash course</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - RestTemplate</title>
    <url>/SpringBoot/Spring-Boot-RestTemplate/</url>
    <content><![CDATA[<p>RestTemplate Explained.</p>
<span id="more"></span>
<p>RestTemplate is a synchronous client to perform HTTP requests.</p>
<h1 id="RestTemplate-Bean"><a href="#RestTemplate-Bean" class="headerlink" title="RestTemplate Bean"></a>RestTemplate Bean</h1><p>RestTemplate is best decalred as a java bean for reusability.</p>
<p>Create RestTemplate bean and RestTemplate bean with connection timeout</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@Primary</span></span><br><span class="line">	<span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean(&quot;restTemplateWithTimeout&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> RestTemplate <span class="title function_">restTemplateWithTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line">		<span class="type">HttpComponentsClientHttpRequestFactory</span> <span class="variable">clientHttpRequestFactory</span></span><br><span class="line">			<span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpComponentsClientHttpRequestFactory</span>();</span><br><span class="line">		clientHttpRequestFactory.setConnectTimeout(timeout);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>(clientHttpRequestFactory);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="RestTemplate-Demo"><a href="#RestTemplate-Demo" class="headerlink" title="RestTemplate Demo"></a>RestTemplate Demo</h1><p>Methods</p>
<ul>
<li>getForObject</li>
<li>getForEntity()</li>
<li>postForEntity()</li>
<li>exchange()</li>
</ul>
<p>If you need to set the HTTP request headers, you need to use <code>exchange</code> method.</p>
<p>MyService.java - Here are the methods inside a service(MyService) that uses RestTemplate to call jsonplaceholder API endpoint.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Post <span class="title function_">simpleGet</span><span class="params">()</span> &#123;</span><br><span class="line">  log.info(<span class="string">&quot;------------RestTemplate.getForEntity()-----------&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ResponseEntity&lt;Post&gt; response = restTemplate.getForEntity(</span><br><span class="line">        <span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>, Post.class);</span><br><span class="line">    <span class="keyword">if</span>(response.getStatusCode() == HttpStatus.OK) &#123;</span><br><span class="line">      log.info(<span class="string">&quot;Response body: &quot;</span> + response.getBody());</span><br><span class="line">      <span class="keyword">return</span> response.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(RestClientException e ) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;Fail to retrieve Post&quot;</span>, e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Post[] exchangeWithUriVariables() &#123;</span><br><span class="line">  log.info(<span class="string">&quot;------------RestTemplate.getForEntity() getting Array -----------&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Map&lt;String,String&gt; uriVariables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    uriVariables.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">    uriVariables.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">    <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    headers.add(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">    HttpEntity&lt;Void&gt; requestEntity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(headers);</span><br><span class="line">    ResponseEntity&lt;Post[]&gt;  response = restTemplate.exchange(</span><br><span class="line">        <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>, HttpMethod.GET, requestEntity, Post[].class, uriVariables );</span><br><span class="line">    <span class="keyword">if</span>(response.getStatusCode() == HttpStatus.OK) &#123;</span><br><span class="line">      log.info(<span class="string">&quot;Response body size: &quot;</span> + response.getBody().length);</span><br><span class="line">      <span class="keyword">return</span> response.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(RestClientException e ) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;Fail to retrieve Post array&quot;</span>, e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Post <span class="title function_">simplePost</span><span class="params">()</span> &#123;</span><br><span class="line">  log.info(<span class="string">&quot;------------RestTemplate.postForEntity()-----------&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Post</span>();</span><br><span class="line">    post.setTitle(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">    post.setBody(<span class="string">&quot;some content&quot;</span>);</span><br><span class="line">    post.setId(<span class="number">333</span>);</span><br><span class="line">    post.setUserId(<span class="number">234</span>);</span><br><span class="line">    HttpEntity&lt;Post&gt; requestEntity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(post);</span><br><span class="line">    ResponseEntity&lt;Post&gt; response = restTemplate.postForEntity(</span><br><span class="line">        <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>, requestEntity, Post.class);</span><br><span class="line">    <span class="keyword">if</span>(response.getStatusCode() == HttpStatus.CREATED) &#123;</span><br><span class="line">      log.info(<span class="string">&quot;Response body: &quot;</span> + response.getBody());</span><br><span class="line">      <span class="keyword">return</span> response.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(RestClientException e ) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;Fail to post post&quot;</span>, e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Post <span class="title function_">exchangePost</span><span class="params">()</span> &#123;</span><br><span class="line">  log.info(<span class="string">&quot;------------RestTemplate.exchange() POST-----------&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Post</span>();</span><br><span class="line">    post.setTitle(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">    post.setBody(<span class="string">&quot;some content&quot;</span>);</span><br><span class="line">    post.setId(<span class="number">333</span>);</span><br><span class="line">    post.setUserId(<span class="number">234</span>);</span><br><span class="line">    <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">    headers.add(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">    HttpEntity&lt;Post&gt; requestEntity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(post, headers);</span><br><span class="line">    ResponseEntity&lt;Post&gt; response = restTemplate.exchange(</span><br><span class="line">        <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>, HttpMethod.POST, requestEntity, Post.class);</span><br><span class="line">    <span class="keyword">if</span>(response.getStatusCode() == HttpStatus.CREATED) &#123;</span><br><span class="line">      log.info(<span class="string">&quot;Response body: &quot;</span> + response.getBody());</span><br><span class="line">      <span class="keyword">return</span> response.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(RestClientException e ) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;Fail to retrieve post&quot;</span>, e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Post <span class="title function_">exchangePut</span><span class="params">()</span> &#123;</span><br><span class="line">  log.info(<span class="string">&quot;------------RestTemplate.exchange() PUT-----------&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Post</span>();</span><br><span class="line">    post.setTitle(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">    post.setBody(<span class="string">&quot;some content&quot;</span>);</span><br><span class="line">    post.setId(<span class="number">333</span>);</span><br><span class="line">    post.setUserId(<span class="number">234</span>);</span><br><span class="line">    HttpEntity&lt;Post&gt; requestEntity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(post);</span><br><span class="line">    ResponseEntity&lt;Post&gt; response = restTemplate.exchange(</span><br><span class="line">        <span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>, HttpMethod.PUT, requestEntity,</span><br><span class="line">        Post.class);</span><br><span class="line">    <span class="keyword">if</span>(response.getStatusCode() == HttpStatus.OK) &#123;</span><br><span class="line">      log.info(<span class="string">&quot;Response body: &quot;</span> + response.getBody());</span><br><span class="line">      <span class="keyword">return</span> response.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(RestClientException e ) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;Fail to put Post&quot;</span>, e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simpleDelete</span><span class="params">()</span> &#123;</span><br><span class="line">  log.info(<span class="string">&quot;------------RestTemplate.delete()-----------&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    restTemplate.delete(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;delete successfully&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RestClientException e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;Fail to delete post&quot;</span>, e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h1><p>Spring RestTemplate allows us to add interceptors that implement ClientHttpRequestInterceptor interface.<br>The <code>intercept(HttpRequest, byte[], ClientHttpRequestExecution)</code> method of this interface will intercept<br>the given request and return the response by giving us access to the request, body and execution objects.</p>
<p>Define a RestTemplate Interceptor that logs request headers, request body and response headers</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestClientLogInterceptor</span> <span class="keyword">implements</span> <span class="title class_">ClientHttpRequestInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(RestClientLogInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ClientHttpResponse <span class="title function_">intercept</span><span class="params">(HttpRequest request, <span class="type">byte</span>[] body, ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        request.getHeaders().forEach((k,v) -&gt; LOG.debug(<span class="string">&quot;Request Header[&#123;&#125;]: &#123;&#125;&quot;</span>, k, v));</span><br><span class="line">		LOG.debug(<span class="string">&quot;Request body: &#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(reqBody));</span><br><span class="line">        <span class="type">ClientHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> execution.execute(request, body);</span><br><span class="line">        response.getHeaders().forEach((k,v) -&gt; LOG.debug(<span class="string">&quot;Response Header[&#123;&#125;]: &#123;&#125;&quot;</span>, k, v));</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>create RestTemplate bean with Interceptor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;restTemplateWithInterceptor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplateWithInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">	restTemplate.setInterceptors(Collections.singletonList(<span class="keyword">new</span> <span class="title class_">RestClientLogInterceptor</span>()));</span><br><span class="line">	<span class="keyword">return</span> restTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Testing-RestTemplate"><a href="#Testing-RestTemplate" class="headerlink" title="Testing RestTemplate"></a>Testing RestTemplate</h1><p>Here is some test cases that tests the service class with RestTemplate service calls.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceTest</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> RestTemplate restTemplate;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> MyService myService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@BeforeEach</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span> <span class="params">()</span> &#123;</span><br><span class="line">    restTemplate = mock(RestTemplate.class);</span><br><span class="line">    myService = <span class="keyword">new</span> <span class="title class_">MyService</span>(restTemplate);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleGet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Post</span> <span class="variable">responseBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Post</span>();</span><br><span class="line">    responseBody.setId(<span class="number">1</span>);</span><br><span class="line">    responseBody.setTitle(<span class="string">&quot;Post Title&quot;</span>);</span><br><span class="line">    responseBody.setBody(<span class="string">&quot;Some Content&quot;</span>);</span><br><span class="line">    ResponseEntity&lt;Post&gt; response = ResponseEntity.ok(responseBody);</span><br><span class="line">    when(restTemplate.getForEntity( anyString(), eq(Post.class))).thenReturn(response);</span><br><span class="line">    <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span> myService.simpleGet();</span><br><span class="line">    assertEquals(<span class="number">1</span>, post.getId());</span><br><span class="line">    assertEquals(<span class="string">&quot;Post Title&quot;</span>, post.getTitle());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExchangePost</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Post</span> <span class="variable">responseBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Post</span>();</span><br><span class="line">    responseBody.setId(<span class="number">1</span>);</span><br><span class="line">    responseBody.setTitle(<span class="string">&quot;Post Title&quot;</span>);</span><br><span class="line">    responseBody.setBody(<span class="string">&quot;Some Content&quot;</span>);</span><br><span class="line">    ResponseEntity&lt;Post&gt; response = ResponseEntity.status(HttpStatus.CREATED).body(responseBody);</span><br><span class="line">    when(restTemplate.exchange( anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(Post.class))).thenReturn(response);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check response</span></span><br><span class="line">    <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span> myService.exchangePost();</span><br><span class="line">    assertEquals(<span class="number">1</span>, post.getId());</span><br><span class="line">    assertEquals(<span class="string">&quot;Post Title&quot;</span>, post.getTitle());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check request eneity argument that is passed to restTemplate method.</span></span><br><span class="line">    ArgumentCaptor&lt;HttpEntity&gt; argCaptor = ArgumentCaptor.forClass(HttpEntity.class);</span><br><span class="line">    verify(restTemplate).exchange( anyString(), eq(HttpMethod.POST), argCaptor.capture(), eq(Post.class));</span><br><span class="line">    <span class="type">Post</span> <span class="variable">reqBody</span> <span class="operator">=</span> (Post) argCaptor.getValue().getBody();</span><br><span class="line">    assertEquals(<span class="string">&quot;Test&quot;</span>, reqBody.getTitle());</span><br><span class="line">    assertTrue(argCaptor.getValue().getHeaders().getAccept().stream()</span><br><span class="line">        .anyMatch( type -&gt; type.toString().equals(MediaType.APPLICATION_JSON_VALUE.toString())));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="WebClient"><a href="#WebClient" class="headerlink" title="WebClient"></a>WebClient</h1><p>RestTemplate is synchronous. It will be deprecated in the future version. <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.html">WebClient</a> is an modern webclient that can perform sync and async requests. see <a href="https://www.baeldung.com/spring-5-webclient">https://www.baeldung.com/spring-5-webclient</a> for more details.</p>
<p>Link to Source Code: <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/RestTemplateExample">https://github.com/xinghua24/SpringBootExamples/tree/master/RestTemplateExample</a></p>
<p>Reference</p>
<ul>
<li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html">RestTemplate Reference</a></li>
<li><a href="http://www.baeldung.com/rest-template">baeldung RestTemplate Tutorial</a></li>
<li><a href="http://www.baeldung.com/spring-rest-template-interceptor">RestTemplate Interceptor</a></li>
<li><a href="https://www.baeldung.com/spring-mock-rest-template">RestTemplate mock test</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Spring Data Redis</title>
    <url>/SpringBoot/Spring-Boot-Spring-Data-Redis/</url>
    <content><![CDATA[<p>Lets learn to integrate Spring Data Redis into a Spring Boot application.</p>
<span id="more"></span>

<p>First, you need a Redis server. You can start a redis server as Docker container:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --rm -p 6379:6379 --name redis-demo redis</span><br></pre></td></tr></table></figure>

<h1 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h1><p>You need to include <code>spring-boot-starter-data-redis</code> dependency in your spring boot’s pom.xml file in order to use Spring Data Redis.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><p>Here is an example of Redis Configuration. The configuration below sets up a redis connection to localhost:6379 and RedisTemplate.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisRepositories</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LettuceConnectionFactory <span class="title function_">jedisConnectionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LettuceConnectionFactory</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    RedisTemplate&lt;?, ?&gt; redisTemplate() &#123;</span><br><span class="line">        RedisTemplate&lt;<span class="type">byte</span>[], <span class="type">byte</span>[]&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(jedisConnectionFactory());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>We need to provide <code>@EnableRedisRepositories</code> annotation to tell Spring boot to use Reids Repositories.</p>
<p><a href="https://docs.spring.io/spring-data/data-redis/docs/current/api/org/springframework/data/redis/connection/lettuce/LettuceConnectionFactory.html">LettuceConnectionFactory</a> is a connection factory that creates Lettuce-based connections. Here we configure by providing hostname and port number. In reality, it should be configured using environmetnal configuration.</p>
<p><a href="https://docs.spring.io/spring-data/data-redis/docs/current/api/index.html?org/springframework/data/redis/connection/lettuce/LettuceConnectionFactory.html">RedisTemplate</a> is used for Redis data access.</p>
<p>Another approach is to configure the Redis connection in application.yml. Spring will automatically configure RedisConnectionFactory and RedisTemplate for you.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.redis.host=localhost</span></span><br><span class="line"><span class="string">spring.redis.port=6379</span></span><br><span class="line"><span class="string">spring.redis.password=</span></span><br></pre></td></tr></table></figure>

<h1 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h1><p>A very simple object that annotated with @RedisHash. The identity should have @Id annotation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisHash;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@RedisHash(&quot;customer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h1><p>Redis Repository class are interfaces that extends CrudRepository interface. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerRepository</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;Customer, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><p>Controller class that tests the repository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/customers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerRepository customerRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET localhost:8080/customers/all</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Iterable&lt;Customer&gt; <span class="title function_">all</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> customerRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// POST localhost:8080/cusotmers/save</span></span><br><span class="line">    <span class="comment">// curl -X POST -H &#x27;Content-Type: application/json&#x27; localhost:8080/customers/save -d &#x27;&#123;&quot;name&quot;: &quot;James&quot;&#125;&#x27;</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Customer customer)</span> &#123;</span><br><span class="line">        customerRepository.save(customer);</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DELETE localhost:8080/cusotmers/&#123;id&#125;</span></span><br><span class="line">    <span class="comment">// curl -X DELETE localhost:8080/customers/-2768644627155708900</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        customerRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Execute POST http request to save a customer to redis data store.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST -H &#x27;Content-Type: application/json&#x27; localhost:8080/customers/save -d &#x27;&#123;&quot;name&quot;: &quot;James&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>go to <code>localhost:8080/customers/all</code> to view all the customers in the redis data store.</p>
<p><a href="https://github.com/xinghua24/SpringBootExamples/tree/master/data-redis">source code</a> for this post</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://dzone.com/articles/introduction-to-spring-data-redis">Introduction to Spring Data Redis by Piotr Mińkowski</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Swagger 2 Set up</title>
    <url>/SpringBoot/Spring-Boot-Swagger-2-set-up/</url>
    <content><![CDATA[<p>Lets learn how to set up Swagger for a Spring Boot application.</p>
<span id="more"></span>

<p>Swagger makes it easy to document Restful API. You can visit <a href="https://swagger.io/">Swagger’s Homepage</a> to get more information about Swagger.</p>
<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>First need to add maven dependency for springfox-swagger2. Springfox is an implementation for Swagger. </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="Java-Configuration"><a href="#Java-Configuration" class="headerlink" title="Java Configuration"></a>Java Configuration</h1><p>You can enable Swagger using <strong>@EnableSwagger2</strong> annotation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.demo.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Here <a href="http://springfox.github.io/springfox/javadoc/2.9.2/springfox/documentation/spring/web/plugins/Docket.html">Docket</a> is a builder which is intended to be the primary interface into the Springfox framework. Provides sensible defaults and convenience methods for configuration.</p>
<p>Here are the methods used</p>
<ul>
<li>Docket.select() - returns an instance of ApiSelectorBuilder to give fine grained control over the endpoints exposed via swagger.</li>
<li>ApiSelectorBuilder.apis() - allows selection of RequestHandler’s using a predicate. The example here uses an any predicate (default). Out of the box predicates provided are any, none, withClassAnnotation, withMethodAnnotation and basePackage.</li>
<li>ApiSelectorBuilder.paths() - allows selection of Path’s using a predicate. The example here uses an any predicate (default). Out of the box Springfox provide predicates regex, ant, any, none.</li>
<li>ApiSelectorBuilder.build() - builds a Docket</li>
</ul>
<p>RequestHandlerSelectors and PathSelectors are both predicates. You can use any() for both. You can customize by selecting the package used or path.</p>
<h1 id="Swagger-Usage"><a href="#Swagger-Usage" class="headerlink" title="Swagger Usage"></a>Swagger Usage</h1><p>All Swagger annotations are documented <a href="https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations">here</a>.</p>
<p>Controller with Swagger API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(value=&quot;GreetingAPI&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/greeting&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/sayHello&quot;, </span></span><br><span class="line"><span class="meta">			params = &quot;firstName&quot;,</span></span><br><span class="line"><span class="meta">			method = RequestMethod.GET, </span></span><br><span class="line"><span class="meta">			produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">	<span class="meta">@ApiOperation(value=&quot;simply say hello to someone&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;Greeting&gt; <span class="title function_">sayHello</span><span class="params">(</span></span><br><span class="line"><span class="params">	        <span class="meta">@ApiParam(value=&quot;Whom to say hello to&quot;)</span></span></span><br><span class="line"><span class="params">	        <span class="meta">@RequestParam(value = &quot;firstName&quot;)</span> String firstName)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(<span class="keyword">new</span> <span class="title class_">Greeting</span>(firstName));</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Swagger UI Url will be <a href="http://localhost:8080/context-root/swagger-ui.html">http://localhost:8080/context-root/swagger-ui.html</a>. In our case, the Url will be <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p>
<h1 id="API-Info"><a href="#API-Info" class="headerlink" title="API Info"></a>API Info</h1><p>You can set the API Info for the API. These information will appear in the UI.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.demo.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build().apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;My API&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;My API Description&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">springfox</span>.documentation.service.Contact(<span class="string">&quot;John Doe&quot;</span>, <span class="string">&quot;www.example.com&quot;</span>, <span class="string">&quot;john@example.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Response-Customization"><a href="#Response-Customization" class="headerlink" title="Response Customization"></a>Response Customization</h1><p>You can customize the Response Message section. Here is the example</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.demo.controller&quot;</span>))</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build().apiInfo(apiInfo())</span><br><span class="line">            .useDefaultResponseMessages(<span class="literal">false</span>)                                   </span><br><span class="line">            .globalResponseMessage(RequestMethod.GET,                     </span><br><span class="line">              Arrays.asList(<span class="keyword">new</span> <span class="title class_">ResponseMessageBuilder</span>()   </span><br><span class="line">                .code(<span class="number">500</span>)</span><br><span class="line">                .message(<span class="string">&quot;500 message&quot;</span>)</span><br><span class="line">                .responseModel(<span class="keyword">new</span> <span class="title class_">ModelRef</span>(<span class="string">&quot;Error&quot;</span>))</span><br><span class="line">                .build(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ResponseMessageBuilder</span>() </span><br><span class="line">                  .code(<span class="number">403</span>)</span><br><span class="line">                  .message(<span class="string">&quot;Forbidden!&quot;</span>)</span><br><span class="line">                  .build()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The Resulting API:</p>
<img src="/SpringBoot/Spring-Boot-Swagger-2-set-up/response.png" class="">


<p>Reference</p>
<ul>
<li><a href="https://www.baeldung.com/swagger-2-documentation-for-spring-rest-api">baeldung - Setting Up Swagger 2 with a Spring REST API</a></li>
<li><a href="https://dzone.com/articles/spring-boot-2-restful-api-documentation-with-swagg">Spring Boot 2 RESTful API Documentation With Swagger 2 Tutorial</a></li>
</ul>
<p>For more information on Springfox, see </p>
<ul>
<li><a href="https://github.com/springfox/springfox">Springfox github repo</a></li>
<li><a href="http://springfox.github.io/springfox/">Springfox Reference Documentation</a></li>
<li><a href="http://springfox.github.io/springfox/">Springfox API Documentation</a></li>
</ul>
<p>Sourcecode - <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/web-application">SpringBootExamples - web-application</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - Thymeleaf</title>
    <url>/SpringBoot/Spring-Boot-Thymeleaf/</url>
    <content><![CDATA[<p>Thymeleaf is a modern server-side Java template engine for both web and standalone environments.</p>
<span id="more"></span>

<p>This post follows this tutorial <a href="https://spring.io/guides/gs/serving-web-content/">Serving Web Content with Spring MVC</a> from Spring.</p>
<p>You can download the source code from <a href="https://github.com/spring-guides/gs-serving-web-content.git">https://github.com/spring-guides/gs-serving-web-content.git</a></p>
<h1 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h1><p>Maven Dependency</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>If you use Gradle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span><br><span class="line">implementation &#x27;org.springframework.boot:spring-boot-starter-thymeleaf&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="Using-Thymeleaf"><a href="#Using-Thymeleaf" class="headerlink" title="Using Thymeleaf"></a>Using Thymeleaf</h1><p>Create a sample Controller that uses Thymeleaf template.</p>
<p>GreetingController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/greeting&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">greeting</span><span class="params">(<span class="meta">@RequestParam(name=&quot;name&quot;, required=false, defaultValue=&quot;World&quot;)</span> String name, Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;greeting&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Thymeleaf templates are stored in templates folder in classpath.</p>
<p>classpath:templates&#x2F;greeting.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Getting Started: Serving Web Content<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;Hello, &#x27; + $&#123;name&#125; + &#x27;!&#x27;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Here is the result</p>
<img src="thymeleaf-result.png" />

<p>To learn more on Thymeleaf, use <a href="https://www.thymeleaf.org/documentation.html">Thymeleaf Documentation</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - @Transactional</title>
    <url>/SpringBoot/Spring-Boot-Transactional/</url>
    <content><![CDATA[<p>@Transactional annotation is used to define the scope of a single database transaction. If there is an exception thrown in the method, the transaction is rolled back. If the method completes successfully, the transaction is committed.</p>
<span id="more"></span>
<h1 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h1><p>When used on a class, it applies to all the public methods in the class. When used on a method, it applies only to that method. </p>
<p>The default @Transactional settings are as follows:</p>
<ul>
<li>The propagation setting is PROPAGATION_REQUIRED.</li>
<li>The isolation level is ISOLATION_DEFAULT.</li>
<li>The transaction is read-write.</li>
<li>The transaction timeout defaults to the default timeout of the underlying transaction system, or to none if timeouts are not supported.</li>
<li>Any RuntimeException or Error triggers rollback, and any checked Exception does not.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">   customerRepository.save(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Smith&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If the saveCustomer method throws an exception, the transaction is rolled back. If the method completes successfully, the transaction is committed.</p>
<h1 id="Propagation"><a href="#Propagation" class="headerlink" title="Propagation"></a>Propagation</h1><p>The propagation setting is used to define the transaction boundaries. The following are the propagation settings:</p>
<ul>
<li>REQUIRED - If a transaction exists, use it. If no transaction exists, create a new one.</li>
<li>SUPPORTS - If a transaction exists, use it. If no transaction exists, run without a transaction.</li>
<li>MANDATORY - If a transaction exists, use it. If no transaction exists, throw an exception.</li>
<li>REQUIRES_NEW - Always create a new transaction.</li>
<li>NOT_SUPPORTED - Run without a transaction. If a transaction exists, suspend it.</li>
<li>NEVER - Run without a transaction. If a transaction exists, throw an exception.</li>
<li>NESTED - If a transaction exists, create a nested transaction. If no transaction exists, create a new transaction.</li>
</ul>
<p>default propagation is REQUIRED.</p>
<p>setting propagation to REQUIRES_NEW</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">  customerRepository.save(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Smith&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="REQUIRES-NEW"><a href="#REQUIRES-NEW" class="headerlink" title="REQUIRES_NEW"></a>REQUIRES_NEW</h2><p>Setting propagation &#x3D; Propagation.REQUIRES_NEW indicates that the annotated method should always execute in a new transaction. If there is an existing transaction, it will be suspended and a new transaction will be started. Once the new transaction completes, the previous transaction will resume.</p>
<p>You should use REQUIRES_NEW in the following scenarios:</p>
<p><strong>Independent Operations</strong>: When you need the operations in the annotated method to be independent of the calling transaction. For instance, if the method needs to commit its changes regardless of the outer transaction’s outcome.</p>
<p><strong>Audit Logging</strong>: When logging actions need to be recorded even if the main transaction fails. This ensures that logs are written independently of the main transaction’s success or failure.</p>
<p><strong>Error Handling</strong>: When you need to ensure certain operations are completed even if the surrounding transaction is rolled back. For example, sending an email notification or updating a status flag.</p>
<p><strong>Isolation</strong>: When the method’s changes should not affect or be affected by the outer transaction. This can be important in situations where you want to avoid transaction propagation and ensure strict isolation of database operations.</p>
<p>Here is an example of using <code>@Transactional(propagation = Propagation.REQUIRES_NEW)</code> in a Spring Boot application:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// Update user details</span></span><br><span class="line">        updateUserDetails(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Log the update operation in a separate transaction</span></span><br><span class="line">        logUserUpdate(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logUserUpdate</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// Log the update operation</span></span><br><span class="line">        <span class="comment">// This will run in a separate transaction</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Important considerations when using REQUIRES_NEW:</p>
<p><strong>Performance Overhead:</strong><br>Creating a new transaction has a performance overhead, so use it judiciously.</p>
<p><strong>Connection Pool Exhaustion:</strong><br>If overused, it can lead to connection pool exhaustion as each new transaction requires its own connection</p>
<h2 id="NESTED"><a href="#NESTED" class="headerlink" title="NESTED"></a>NESTED</h2><p>Setting propagation &#x3D; Propagation.NESTED indicates that the annotated method should execute in a nested transaction. If there is an existing transaction, the method will create a savepoint within that transaction. If there is no existing transaction, a new transaction will be started.</p>
<p>NESTED propagation is useful in scenarios where you want to create a nested transaction within an existing transaction. This allows you to have a savepoint within the outer transaction, so that if the nested transaction fails, you can roll back only the changes made within the nested transaction, while still keeping the changes made in the outer transaction intact. This can be helpful in complex business logic scenarios where you need to ensure atomicity and consistency of multiple related operations within a larger transaction. An example use case for NESTED propagation is when you need to perform a series of database updates, and if any of the updates fail, you want to roll back only the changes made in that specific update, while still keeping the changes made in the previous updates.</p>
<h2 id="NOT-SUPPORTED"><a href="#NOT-SUPPORTED" class="headerlink" title="NOT_SUPPORTED"></a>NOT_SUPPORTED</h2><p>Setting propagation &#x3D; Propagation.NOT_SUPPORTED indicates that the annotated method should execute without a transaction. If there is an existing transaction, it will be suspended for the duration of the method execution.</p>
<p>NOT_SUPPORTED propagation is useful in scenarios where you want to run a method outside the scope of any transaction. This can be helpful when you want to perform read-only operations that do not require transactional support, or when you want to run a method that should not be affected by the current transaction context. An example use case for NOT_SUPPORTED propagation is when you need to perform a series of read-only database queries that do not require transactional support, or when you want to run a method that should not be affected by the current transaction context.</p>
<h2 id="NEVER"><a href="#NEVER" class="headerlink" title="NEVER"></a>NEVER</h2><p>Setting propagation &#x3D; Propagation.NEVER indicates that the annotated method should execute without a transaction. If there is an existing transaction, an exception will be thrown.</p>
<p>Use Case:<br>Use Propagation.NEVER when you want to guarantee that specific pieces of code are not executed within a transaction context. This can be useful when you want to ensure that certain operations are always executed outside the scope of any transaction, or when you want to prevent specific methods from being called within a transaction context. If a method annotated with Propagation.NEVER is called within a transaction context, an IllegalTransactionStateException will be thrown, preventing the method from executing.</p>
<p>Alternatives is to use Propogation.NOT_SUPPORTED, which will suspend the current transaction if one exists, and execute the method without a transaction. If no transaction exists, the method will be executed without a transaction. Propagation.NOT_SUPPORTED is more flexible than Propagation.NEVER, as it allows the method to be executed both within and outside a transaction context, while Propagation.NEVER strictly prohibits the method from being executed within a transaction context.</p>
<h1 id="Isolation"><a href="#Isolation" class="headerlink" title="Isolation"></a>Isolation</h1><p>The isolation level determines how much a transaction is isolated from other transactions. The following are the isolation levels:</p>
<ul>
<li>DEFAULT</li>
<li>READ_UNCOMMITTED</li>
<li>READ_COMMITTED</li>
<li>REPEATABLE_READ</li>
<li>SERIALIZABLE</li>
</ul>
<p>default isolation level is DEFAULT.</p>
<p>setting isolation level to READ_COMMITTED</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">  customerRepository.save(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Smith&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Read-Only"><a href="#Read-Only" class="headerlink" title="Read-Only"></a>Read-Only</h1><p>The read-only setting is used to specify whether the transaction is read-only. If the transaction is read-only, the transaction is optimized for read operations. The default setting is false.</p>
<p>setting read-only to true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">  customerRepository.save(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Smith&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="rollbackFor"><a href="#rollbackFor" class="headerlink" title="rollbackFor"></a>rollbackFor</h1><p>The rollbackFor setting is used to specify which exceptions trigger a rollback. By default, any RuntimeException or Error triggers a rollback. Any checked Exception does not trigger a rollback.</p>
<p>setting rollbackFor to IllegalArgumentException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = IllegalArgumentException.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">  customerRepository.save(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Smith&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="transactionManagers"><a href="#transactionManagers" class="headerlink" title="transactionManagers"></a>transactionManagers</h1><p>The transactionManager setting is used to specify the transaction manager to use. If not specified, the default transaction manager is used.</p>
<p>setting transactionManager to transactionManager2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(transactionManager = &quot;transactionManager2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">  customerRepository.save(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Smith&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Most Spring applications need only a single transaction manager, but there may be situations where you want multiple independent transaction managers in a single application. You can use the value or transactionManager attribute of the @Transactional annotation to optionally specify the identity of the TransactionManager to be used. </p>
<h1 id="jakarta-transaction-Transactional-vs-org-springframework-transaction-annotation-Transactional"><a href="#jakarta-transaction-Transactional-vs-org-springframework-transaction-annotation-Transactional" class="headerlink" title="jakarta.transaction.Transactional vs org.springframework.transaction.annotation.Transactional"></a>jakarta.transaction.Transactional vs org.springframework.transaction.annotation.Transactional</h1><p>The <code>jakarta.transaction.Transactional</code> annotation is a standard annotation defined in the Jakarta Transaction API. The <code>org.springframework.transaction.annotation.Transactional</code> annotation is a Spring-specific annotation that provides additional features beyond the standard <code>jakarta.transaction.Transactional</code> annotation. The Spring-specific <code>org.springframework.transaction.annotation.Transactional</code> annotation is more commonly used in Spring applications.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.spring.io/spring-framework/reference/data-access/transaction/declarative/annotations.html">Using @Transactional</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Bash String Operations</title>
    <url>/Linux/Bash-String-Operations/</url>
    <content><![CDATA[<p>Bash String Operations</p>
<span id="more"></span>

<p>Parameter expansion allows you to expand a parameter and modify the value.</p>
<h1 id="String-length"><a href="#String-length" class="headerlink" title="String length"></a>String length</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ str=<span class="string">&quot;The quick brown fox&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#str&#125;</span></span><br><span class="line">19</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Upper-case-and-Lower-case"><a href="#Upper-case-and-Lower-case" class="headerlink" title="Upper case and Lower case"></a>Upper case and Lower case</h1><p>This feature is avaiable on Bash version 4.0 or above. use <code>echo $BASH_VERSION</code> command to get bash version.</p>
<p>To upper case</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ str=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str&#125;</span></span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str^&#125;</span></span><br><span class="line">Abc</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str^^&#125;</span></span><br><span class="line">ABC</span><br></pre></td></tr></table></figure>

<p>To lower case</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ str=<span class="string">&#x27;ABC&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;abc&#125;</span></span><br><span class="line">ABC</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str,&#125;</span></span><br><span class="line">aBC</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str,,&#125;</span></span><br><span class="line">abc</span><br></pre></td></tr></table></figure>


<h1 id="String-replace"><a href="#String-replace" class="headerlink" title="String replace"></a>String replace</h1><p>replace first match. format is <code>$&#123;string/pattern/replacement&#125;</code>. see example</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ str=<span class="string">&quot;foo foo bar&quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str/foo/baz&#125;</span></span><br><span class="line">baz foo bar</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str/f*o/baz&#125;</span></span><br><span class="line">baz bar</span><br></pre></td></tr></table></figure>

<p>replace all matches. format is <code>$&#123;string//pattern/replacement&#125;</code>. see example</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str//foo/baz&#125;</span></span><br><span class="line">baz baz bar</span><br></pre></td></tr></table></figure>

<p>replace from the front. format is <code>$&#123;string/#pattern/replacement&#125;</code>. see example</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str/#foo/baz&#125;</span></span><br><span class="line">baz foo bar</span><br></pre></td></tr></table></figure>

<p>replace from the back. format is <code>$&#123;string/%pattern/replacement&#125;</code>. see example</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str/%bar/baz&#125;</span></span><br><span class="line">foo foo baz</span><br></pre></td></tr></table></figure>

<h1 id="SubString"><a href="#SubString" class="headerlink" title="SubString"></a>SubString</h1><p>format</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;string:position&#125;</span></span><br><span class="line"><span class="variable">$&#123;string:position:length&#125;</span></span><br></pre></td></tr></table></figure>

<p>example</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ str=<span class="string">&quot;The quick brown fox&quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str:4&#125;</span></span><br><span class="line">quick brown fox</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str:4:5&#125;</span></span><br><span class="line">quick</span><br></pre></td></tr></table></figure>

<h1 id="Indexof"><a href="#Indexof" class="headerlink" title="Indexof"></a>Indexof</h1><p>format is <code>expr index &quot;$string&quot; $substring</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ str=<span class="string">&quot;foo foo bar&quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">expr</span> index <span class="string">&quot;<span class="variable">$str</span>&quot;</span> bar  <span class="comment"># find index of &#x27;bar&#x27;</span></span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<h1 id="Trim"><a href="#Trim" class="headerlink" title="Trim"></a>Trim</h1><p>Format</p>
<ul>
<li>${variable%pattern} Trim the shortest match from the end</li>
<li>${variable%%pattern} Trim the longest match from the end</li>
<li>${variable#pattern} Trim the shortest match from the beginning</li>
<li>${variable##pattern} Trim the longest match from the beginning</li>
</ul>
<p>Example to extract filename and extension</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ FILE=<span class="string">&quot;myFile.tar.gz&quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;FILE%.*&#125;</span></span><br><span class="line">myFile.tar</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;FILE%%.*&#125;</span></span><br><span class="line">myFile</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;FILE#*.&#125;</span></span><br><span class="line">tar.gz</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;FILE##*.&#125;</span></span><br><span class="line">gz</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://tldp.org/LDP/abs/html/refcards.html#AEN22828">String Operation</a></li>
<li><a href="https://www.thegeekstuff.com/2010/07/bash-string-manipulation/">Bash String Manipulation Examples by  SASIKALA</a></li>
<li><a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">Parameter Expansion</a></li>
<li><a href="https://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash">Extract filename and extension in Bash</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot - Web Application</title>
    <url>/SpringBoot/Spring-Boot-Web-Application/</url>
    <content><![CDATA[<p>Let’s learn basic web application using Spring Boot.</p>
<span id="more"></span>

<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>You need to add spring-boot-starter-web dependencies in order to develop web application.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>spring-boot-devtools module provides automatic restart and live reload. It will help reduce a lot of development time.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Rest-Controller-Annotations"><a href="#Rest-Controller-Annotations" class="headerlink" title="Rest Controller Annotations"></a>Rest Controller Annotations</h1><p>Annotations used for Spring MVC are used in Spring Boot too. Here are the common annotations:</p>
<ul>
<li>@RestController - @Controller + @ResponseBody</li>
<li>@ResponseBody - indicates that the result type should be written straight in the response body in whatever format you specify like JSON or XML.</li>
<li>@RequestMapping - This annotation is used at both the class and method level. The @RequestMapping annotation is used to map web requests onto specific handler classes and handler methods.</li>
<li>@PostMapping - shortcut for @RequestMapping(method &#x3D; RequestMethod.POST). There is also @GetMapping, @PutMapping, @DeleteMapping</li>
<li>@RequestParam - get the parameters in the request URL</li>
<li>@RequestBody - method parameter should be bound to the value of the HTTP request body.</li>
<li>@PathVariable - used to handle dynamic changes in the URI where a certain URI value acts as a parameter.</li>
</ul>
<p>The sample application demos most of the commonly used annotations in a Spring Boot web application</p>
<p>Greeting.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Greeting</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String content;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Greeting</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.id = counter.incrementAndGet();</span><br><span class="line">		content = StringUtils.EMPTY;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Greeting</span><span class="params">(String content)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.id = counter.incrementAndGet();</span><br><span class="line">		<span class="built_in">this</span>.content = content;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/greeting&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">	<span class="comment">// simple GET</span></span><br><span class="line">	<span class="comment">// GET localhost:8080/greeting/hello</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/hello&quot;,</span></span><br><span class="line"><span class="meta">			method = RequestMethod.GET,</span></span><br><span class="line"><span class="meta">			produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;Greeting&gt; <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(<span class="keyword">new</span> <span class="title class_">Greeting</span>(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// GET with query parameter</span></span><br><span class="line">	<span class="comment">// GET localhost:8080/greeting/sayHello?firstname=world</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/sayHello&quot;, </span></span><br><span class="line"><span class="meta">			params = &quot;firstName&quot;,</span></span><br><span class="line"><span class="meta">			method = RequestMethod.GET, </span></span><br><span class="line"><span class="meta">			produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;Greeting&gt; <span class="title function_">sayHello</span><span class="params">(</span></span><br><span class="line"><span class="params">	        <span class="meta">@RequestParam(value = &quot;firstName&quot;)</span> String firstName)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(<span class="keyword">new</span> <span class="title class_">Greeting</span>(firstName));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// GET with path parameter</span></span><br><span class="line">	<span class="comment">// GET localhost:8080/greeting/sayHelloPath/&#123;name&#125;</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/sayHelloPath/&#123;name&#125;&quot;, </span></span><br><span class="line"><span class="meta">			method = RequestMethod.GET, </span></span><br><span class="line"><span class="meta">			produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;Greeting&gt; <span class="title function_">sayHelloPath</span><span class="params">(<span class="meta">@PathVariable(value = &quot;name&quot;)</span> String name)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(<span class="keyword">new</span> <span class="title class_">Greeting</span>(name));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// GET with query parameters as Map</span></span><br><span class="line">	<span class="comment">// GET localhost:8080/greeting/sayHelloToAll?test1=1&amp;test2&amp;test3</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/sayHelloToAll&quot;, </span></span><br><span class="line"><span class="meta">			method = RequestMethod.GET, </span></span><br><span class="line"><span class="meta">			produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;List&lt;Greeting&gt;&gt; <span class="title function_">sayHelloToAll</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, String&gt; names)</span> &#123;</span><br><span class="line">		List&lt;Greeting&gt; greetings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Greeting&gt;();</span><br><span class="line">		names.keySet().forEach(key -&gt; &#123;</span><br><span class="line">			greetings.add(<span class="keyword">new</span> <span class="title class_">Greeting</span>(key));</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(greetings);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// POST localhost:8080/greeting/postGreeting</span></span><br><span class="line">	<span class="comment">// @RequestMapping(value = &quot;/postGreeting&quot;, method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">	<span class="meta">@PostMapping(value = &quot;/postGreeting&quot;, </span></span><br><span class="line"><span class="meta">			consumes = MediaType.APPLICATION_JSON_VALUE, </span></span><br><span class="line"><span class="meta">			produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;Greeting&gt; <span class="title function_">postGreeting</span><span class="params">(<span class="meta">@RequestBody</span> Greeting greeting)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>( StringUtils.isBlank(greeting.getContent())) &#123;</span><br><span class="line">			<span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); <span class="comment">// use build() to create responseEntity without body</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(greeting);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// return empty body(response entity is void</span></span><br><span class="line">	<span class="comment">// http://localhost:8080/greeting/returnvoid</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/returnempty&quot;, </span></span><br><span class="line"><span class="meta">			method = RequestMethod.GET)</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">returnempty</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).build();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>To see a complete Spring Boot Crud Web application, see <a href="https://howtodoinjava.com/spring-boot2/spring-boot-crud-hibernate/">https://howtodoinjava.com/spring-boot2/spring-boot-crud-hibernate/</a></p>
<h1 id="Set-Port-Number"><a href="#Set-Port-Number" class="headerlink" title="Set Port Number"></a>Set Port Number</h1><p>You can set port number using properties configuration</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.port=8000</span><br></pre></td></tr></table></figure>

<p>or pass port number setting as command line argument</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar app.jar --server.port=8000</span><br></pre></td></tr></table></figure>

<h1 id="Set-Context-Path"><a href="#Set-Context-Path" class="headerlink" title="Set Context Path"></a>Set Context Path</h1><p>You can set context path using properties configuration</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.servlet.context-path=/myapp</span><br></pre></td></tr></table></figure>


<h1 id="Jetty-and-Undertow-Embedded-Server"><a href="#Jetty-and-Undertow-Embedded-Server" class="headerlink" title="Jetty and Undertow Embedded Server"></a>Jetty and Undertow Embedded Server</h1><p>To use Jetty embedded server, you need to exclude tomcat dependency and add jetty</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>For undertow</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>For performance comparison between embedded servlet containers Tomcat, Jetty and Undertow, see <a href="https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/">https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/</a></p>
<p>Reference</p>
<ul>
<li><a href="https://www.baeldung.com/spring-boot-application-configuration">Baeldung - Spring Boot application configuration</a></li>
</ul>
<p>Sourcecode - <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/web-application">SpringBootExamples - web-application</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot - WebClient</title>
    <url>/SpringBoot/Spring-Boot-WebClient/</url>
    <content><![CDATA[<p>Spring Boot WebClient class is a non-blocking, reactive client to perform HTTP requests. </p>
<span id="more"></span>

<p>The <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.html">WebClient</a> class is a core component in Spring Boot applications for making non-blocking and reactive HTTP requests. It’s designed as the successor to the older <code>RestTemplate</code> and offers several advantages:</p>
<p>Reactive approach: WebClient leverages the reactive programming paradigm, making it efficient in handling asynchronous operations and working well with event-driven systems. This can significantly improve the performance of your application, especially under high load.</p>
<p>Non-blocking: It avoids blocking the main thread while waiting for responses, allowing your application to remain responsive and handle other tasks concurrently.</p>
<p>Flexibility: It supports both synchronous and asynchronous operations, catering to various application needs.<br>Builder pattern: It uses a fluent builder pattern for configuring requests, making the code more readable and maintainable.</p>
<h1 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h1><p>To use WebClient in your Spring Boot application, you need to add the <code>spring-boot-starter-webflux</code> dependency to your <code>pom.xml</code> file:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Gradle Dependency</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-webflux&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="Create-WebClient-Bean"><a href="#Create-WebClient-Bean" class="headerlink" title="Create WebClient Bean"></a>Create WebClient Bean</h1><p>You can create a <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.html">WebClient</a> bean in your Spring Boot application by using the <code>WebClient.create()</code> method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebClient.create();</span><br></pre></td></tr></table></figure>

<p>You can also create WebClient with a base URL:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebClient.create(<span class="string">&quot;https://jsonplaceholder.typicode.com&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>You can use <code>WebClient.builder()</code> to create a WebClient. You can set the baseUrl and configurations such as setting default headers, etc.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> WebClient.builder()</span><br><span class="line">  .baseUrl(<span class="string">&quot;https://jsonplaceholder.typicode.com&quot;</span>)</span><br><span class="line">  .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">  .defaultHeader(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure>


<h1 id="Sending-Request"><a href="#Sending-Request" class="headerlink" title="Sending Request"></a>Sending Request</h1><p>You can use <code>get()</code>, <code>post()</code>, <code>put()</code>, <code>delete()</code> methods to send requests.</p>
<p>Use <code>uri()</code> method to set the request URI.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> webClient.get()</span><br><span class="line">  	.uri(<span class="string">&quot;/posts/1&quot;</span>)</span><br><span class="line">  	.retrieve()</span><br><span class="line">  	.bodyToMono(String.class)</span><br><span class="line">  	.block();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">webClient.get()</span><br><span class="line">  .uri(<span class="string">&quot;/posts/&#123;id&#125;&quot;</span>, id)</span><br><span class="line">  .retrieve()</span><br><span class="line">  .bodyToMono(Post.class)</span><br><span class="line">  .block();</span><br></pre></td></tr></table></figure>

<h1 id="Request-Header"><a href="#Request-Header" class="headerlink" title="Request Header"></a>Request Header</h1><p>You can use <code>header()</code> method to set headers for the request. WebClient also provides methods to set content type, accept, and accept charset headers.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">webClient</span><br><span class="line">    .post()</span><br><span class="line">    .uri(<span class="string">&quot;/posts&quot;</span>)</span><br><span class="line">    .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">    .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">    .acceptCharset(StandardCharsets.UTF_8)</span><br><span class="line">    .header(HttpHeaders.AUTHORIZATION, <span class="string">&quot;Bearer &quot;</span> + <span class="string">&quot;token-here&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Request-Body"><a href="#Request-Body" class="headerlink" title="Request Body"></a>Request Body</h1><p>You can use <code>bodyValue()</code> method to set the request body. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Post</span> <span class="variable">response</span> <span class="operator">=</span> webClient.post()</span><br><span class="line">    .uri(<span class="string">&quot;/posts&quot;</span>)</span><br><span class="line">    .bodyValue(post)</span><br></pre></td></tr></table></figure>

<p>Another option is to use BodyInserters to set the request body.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">webClient</span><br><span class="line">    .post()</span><br><span class="line">    .uri(<span class="string">&quot;/posts&quot;</span>)</span><br><span class="line">    .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">    .body(BodyInserters.fromValue(post))</span><br></pre></td></tr></table></figure>


<h1 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h1><p>Use <code>retrieve()</code> method to declare how to extract the response body. <code>retrieve()</code> method returns <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.ResponseSpec.html">ResponseSpec</a> which provides methods to extract the response body.</p>
<p>use <code>toEntity()</code> method to get the response body and headers.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mono&lt;ResponseEntity&lt;Post&gt;&gt; postEntityMono = webClient.get()</span><br><span class="line">  .uri(<span class="string">&quot;/posts/&#123;id&#125;&quot;</span>, <span class="number">1</span>)</span><br><span class="line">  .retrieve()</span><br><span class="line">  .toEntity(Post.class);</span><br></pre></td></tr></table></figure>

<p><code>toEntity()</code> method returns a <code>Mono</code> object. You can use <code>block()</code> method to get the response entity.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResponseEntity&lt;Post&gt; postEntity = webClient.get()</span><br><span class="line">    .uri(<span class="string">&quot;/posts/&#123;id&#125;&quot;</span>, id)</span><br><span class="line">    .retrieve()</span><br><span class="line">    .toEntity(Post.class)</span><br><span class="line">    .block();</span><br><span class="line">System.out.println(postEntity.getStatusCode().value());</span><br><span class="line">System.out.println(postEntity.getBody());</span><br></pre></td></tr></table></figure>

<p>If interested only the response body, you can use <code>bodyToMono()</code> or <code>bodytoFlux()</code> method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mono&lt;Post&gt; post = webClient.get()</span><br><span class="line">    .uri(<span class="string">&quot;/posts/&#123;id&#125;&quot;</span>, id)</span><br><span class="line">    .retrieve()</span><br><span class="line">    .bodyToMono(Post.class)</span><br></pre></td></tr></table></figure>

<p>use <code>bodyToFlux()</code> method to get a list of response body.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux&lt;Post&gt; posts = webClient.get()</span><br><span class="line">  .uri(<span class="string">&quot;/posts&quot;</span>)</span><br><span class="line">  .retrieve()</span><br><span class="line">  .bodyToFlux(Post.class)</span><br><span class="line">  .collectList();</span><br></pre></td></tr></table></figure>

<p>If response doesn’t have a body, can use <code>toBodilessEntity()</code> method to get the response entity.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResponseEntity&lt;Void&gt; result = webClient.post()</span><br><span class="line">    .uri(<span class="string">&quot;/posts&quot;</span>)</span><br><span class="line">    .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">    .bodyValue(post)</span><br><span class="line">    .retrieve()</span><br><span class="line">    .toBodilessEntity()</span><br><span class="line">    .block();</span><br></pre></td></tr></table></figure>

<h1 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h1><p>You can use <code>onStatus()</code> method to handle the response status. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">post = webClient.get()</span><br><span class="line">    .uri(<span class="string">&quot;/badRequest&quot;</span>)</span><br><span class="line">    .retrieve()</span><br><span class="line">    .onStatus(HttpStatusCode::is4xxClientError, clientResponse -&gt; &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Client Error &#123;&#125;&quot;</span>, clientResponse.statusCode());</span><br><span class="line">        <span class="keyword">return</span> Mono.error(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Client Error&quot;</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    .onStatus(HttpStatusCode::is5xxServerError, clientResponse -&gt; &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Server Error &#123;&#125;&quot;</span>, clientResponse.statusCode());</span><br><span class="line">        <span class="keyword">return</span> Mono.error(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Server Error&quot;</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    .bodyToMono(Post.class)</span><br><span class="line">    .block();</span><br></pre></td></tr></table></figure>

<p>Synchonous way to handle error:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    post = webClient.get()</span><br><span class="line">        .uri(<span class="string">&quot;/badRequest&quot;</span>)</span><br><span class="line">        .retrieve()</span><br><span class="line">        .bodyToMono(Post.class)</span><br><span class="line">        .block();</span><br><span class="line">&#125; <span class="keyword">catch</span> (WebClientResponseException e) &#123;</span><br><span class="line">    <span class="keyword">if</span>( e.getStatusCode().is4xxClientError()) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Client Error &#123;&#125;&quot;</span>, e.getStatusCode().value(), e);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getStatusCode().is5xxServerError()) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Server Error &#123;&#125; &quot;</span>, e.getStatusCode().value(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h1><p>You can use <code>filter()</code> method to add filters to the WebClient. For example, you can add logging filter to log the request and response.<br><code>filter()</code> method takes an <code>ExchangeFilterFunction</code> as an argument.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> WebClient.builder()</span><br><span class="line">  .baseUrl(<span class="string">&quot;https://jsonplaceholder.typicode.com&quot;</span>)</span><br><span class="line">  .filter(logRequest())</span><br><span class="line">  .filter(logResponse())</span><br><span class="line">  .build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ExchangeFilterFunction <span class="title function_">logRequest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ExchangeFilterFunction.ofRequestProcessor(clientRequest -&gt; &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Request: &#123;&#125; &#123;&#125;&quot;</span>, clientRequest.method(), clientRequest.url());</span><br><span class="line">        clientRequest.headers().forEach((name, values) -&gt; values.forEach(value -&gt; log.info(<span class="string">&quot;&#123;&#125;=&#123;&#125;&quot;</span>, name, value)));</span><br><span class="line">        <span class="keyword">return</span> Mono.just(clientRequest);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ExchangeFilterFunction <span class="title function_">logResponse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ExchangeFilterFunction.ofResponseProcessor(clientResponse -&gt; &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Response: &#123;&#125;&quot;</span>, clientResponse.statusCode());</span><br><span class="line">        <span class="keyword">return</span> Mono.just(clientResponse);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The helper class ExchangeFilterFunctions has method <code>basicAuthentication</code> to add Basic Authentication header to the request.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> WebClient.builder()</span><br><span class="line">  .baseUrl(<span class="string">&quot;https://url.com&quot;</span>)</span><br><span class="line">  .filter(ExchangeFilterFunctions.basicAuthentication(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;password&quot;</span>))</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure>

<h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>We can use <code>MockWebServer</code> to test WebClient. For more info on <code>MockWebServer</code>, please refer to <a href="https://github.com/square/okhttp/tree/master/mockwebserver">MockWebServer</a>.</p>
<p>We can use Mockito to mock WebClient. However it is preferred to use <code>MockWebServer</code> to test WebClient.</p>
<p>Maven Dependency</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockwebserver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Sample test case code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a MockWebServer.</span></span><br><span class="line"> <span class="type">MockWebServer</span> <span class="variable">mockBackEnd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockWebServer</span>();</span><br><span class="line"></span><br><span class="line"> <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Post</span>()</span><br><span class="line">     .setUserId(<span class="number">1</span>)</span><br><span class="line">     .setTitle(<span class="string">&quot;My first post&quot;</span>)</span><br><span class="line">     .setBody(<span class="string">&quot;Mock Post Body&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// stub some responses.</span></span><br><span class="line"> mockBackEnd.enqueue(<span class="keyword">new</span> <span class="title class_">MockResponse</span>()</span><br><span class="line">     .setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">     .setBody(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(post)));</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Start the mockBackEnd.</span></span><br><span class="line"> mockBackEnd.start();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Create a WebClient that uses the MockWebServer.</span></span><br><span class="line"> <span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> WebClient.builder()</span><br><span class="line">     .baseUrl(mockBackEnd.url(<span class="string">&quot;/&quot;</span>).toString())</span><br><span class="line">     .build();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Create a DemoService that uses the WebClient.</span></span><br><span class="line"> <span class="type">DemoService</span> <span class="variable">demoService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DemoService</span>(webClient);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Call the method.</span></span><br><span class="line"> <span class="type">Post</span> <span class="variable">result</span> <span class="operator">=</span> demoService.getPost(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"> assertEquals(post.getBody(), result.getBody());</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Optional - verify the requests.</span></span><br><span class="line"> <span class="type">RecordedRequest</span> <span class="variable">recordedRequest</span> <span class="operator">=</span> mockBackEnd.takeRequest();</span><br><span class="line"> assertEquals(<span class="string">&quot;GET&quot;</span>, recordedRequest.getMethod());</span><br><span class="line"> assertEquals(<span class="string">&quot;/posts/1&quot;</span>, recordedRequest.getPath());</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Shut down the mockBackEnd.</span></span><br><span class="line"> mockBackEnd.shutdown();</span><br></pre></td></tr></table></figure>

<p>Another example using static MockWebServer:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DemoServiceTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MockWebServer mockBackEnd;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DemoService demoService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        mockBackEnd = <span class="keyword">new</span> <span class="title class_">MockWebServer</span>();</span><br><span class="line">        mockBackEnd.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a WebClient that uses the MockWebServer.</span></span><br><span class="line">        <span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> WebClient.builder()</span><br><span class="line">            .baseUrl(mockBackEnd.url(<span class="string">&quot;/&quot;</span>).toString())</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a DemoService that uses the WebClient.</span></span><br><span class="line">        demoService = <span class="keyword">new</span> <span class="title class_">DemoService</span>(webClient);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        mockBackEnd.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getPost</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Post</span> <span class="variable">mockResponsePost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Post</span>()</span><br><span class="line">            .setUserId(<span class="number">1</span>)</span><br><span class="line">            .setTitle(<span class="string">&quot;My first post&quot;</span>)</span><br><span class="line">            .setBody(<span class="string">&quot;Mock Post Body&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// stub some responses.</span></span><br><span class="line">        mockBackEnd.enqueue(<span class="keyword">new</span> <span class="title class_">MockResponse</span>()</span><br><span class="line">            .setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">            .setBody(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(mockResponsePost)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call the method.</span></span><br><span class="line">        <span class="type">Post</span> <span class="variable">result</span> <span class="operator">=</span> demoService.createPost(<span class="keyword">new</span> <span class="title class_">Post</span>().setUserId(<span class="number">1</span>).setTitle(<span class="string">&quot;My first post&quot;</span>).setBody(<span class="string">&quot;Mock Post Body&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify the result</span></span><br><span class="line">        assertEquals(mockResponsePost.getBody(), result.getBody());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Optional - verify the requests.</span></span><br><span class="line">        <span class="type">RecordedRequest</span> <span class="variable">recordedRequest</span> <span class="operator">=</span> mockBackEnd.takeRequest();</span><br><span class="line">        assertEquals(<span class="string">&quot;POST&quot;</span>, recordedRequest.getMethod());</span><br><span class="line">        assertEquals(<span class="string">&quot;/posts&quot;</span>, recordedRequest.getPath());</span><br><span class="line">        assertEquals(<span class="string">&quot;&#123;\&quot;id\&quot;:null,\&quot;title\&quot;:\&quot;My first post\&quot;,\&quot;body\&quot;:\&quot;Mock Post Body\&quot;,\&quot;userId\&quot;:1&#125;&quot;</span>,</span><br><span class="line">            recordedRequest.getBody().readString(Charset.defaultCharset()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Dispatch"><a href="#Dispatch" class="headerlink" title="Dispatch"></a>Dispatch</h2><p>By default MockWebServer uses a queue to specify a series of responses. We can also use a Dispatcher (import okhttp3.mockwebserver.Dispatcher) to handle requests using policy.</p>
<p>example of using Dispatcher to handle requests</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockBackEnd.setDispatcher(<span class="keyword">new</span> <span class="title class_">Dispatcher</span>() &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MockResponse <span class="title function_">dispatch</span><span class="params">(RecordedRequest request)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">switch</span> (request.getPath()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/posts/1&quot;</span>, <span class="string">&quot;/posts/2&quot;</span> -&gt; <span class="keyword">new</span> <span class="title class_">MockResponse</span>()</span><br><span class="line">                .setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">                .setBody(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(mockResponsePost));</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="keyword">new</span> <span class="title class_">MockResponse</span>().setResponseCode(<span class="number">500</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://www.baeldung.com/spring-5-webclient#1-creating-a-webclient-instance">Spring 5 WebClient</a></li>
<li><a href="https://github.com/square/okhttp/tree/master/mockwebserver">okhttp mockwebserver</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title>Bash Basics</title>
    <url>/Linux/Bash-Basics/</url>
    <content><![CDATA[<p>Bash is a commonly used language on most Linux System. The name Bash stands for ‘Bourne Again SHell’. It is developed as a replacement&#x2F;improvement for Bourne Shell(sh).</p>
<span id="more"></span>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>To install or update bash in MacOS using Homebrew</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install bash</span><br></pre></td></tr></table></figure>

<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello Bash&quot;</span> <span class="comment"># prints &#x27;Hello Bash&#x27;</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<h1 id="Script-Execution"><a href="#Script-Execution" class="headerlink" title="Script Execution"></a>Script Execution</h1><p>Bash script file is a text file with commands. To execute the bash script, first make the file executable</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x myscript</span><br></pre></td></tr></table></figure>

<p>Then you can run the script by prefixing it with <code>./</code>. This tells Bash to look for the script in current directory. by default Bash only executes commands in <code>$PATH</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./myscript</span><br></pre></td></tr></table></figure>

<p>An alternative way is to use <code>bash</code> command. But the problem for this approach is that you can’t provide arguments to the script.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash myscript</span><br></pre></td></tr></table></figure>

<p>You can also add the script to system path so that it can be executed in any path. A common place to store the script is &#x2F;usr&#x2F;local&#x2F;bin.</p>
<h1 id="Shebang"><a href="#Shebang" class="headerlink" title="Shebang"></a>Shebang</h1><p><code>#!/bin/bash</code> is not a comment, it is a Shebang. Shebang should be the first line in a bash file. Shebang tells Bash how to do the interpretation. &#x2F;bin&#x2F;bash is the path to the interpreter that is used.</p>
<h1 id="Print-Output-to-Terminal"><a href="#Print-Output-to-Terminal" class="headerlink" title="Print Output to Terminal"></a>Print Output to Terminal</h1><p><code>echo</code> command is the most used command to print output to the terminal</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>


<h1 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h1><p>Like other script languages, you can define variable in Bash. You use assign operator <code>=</code> to assign value to a variable. Note that you can’t have space before and after <code>=</code> sign.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var0=Hello</span><br><span class="line">var1=<span class="string">&quot;World&quot;</span></span><br><span class="line">var2=<span class="variable">$var1</span></span><br></pre></td></tr></table></figure>

<p>This is <strong>Invalid</strong> because var0 follows a space. Bash will inteprete var0 as a command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ var0 = 2</span><br><span class="line">var0: command not found</span><br></pre></td></tr></table></figure>

<p>To reference a variable, you prefix a variable with a dollar sign. ‘$’ character here is used for parameter expansion.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$var2</span></span><br></pre></td></tr></table></figure>

<p>In a string defined by a double quote, the variables are also referenced. This doesn’t work for string defined by single quote. </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$var0</span> <span class="variable">$var1</span>!&quot;</span></span><br></pre></td></tr></table></figure>

<p>will print</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure>


<h1 id="Parameter-Expansion"><a href="#Parameter-Expansion" class="headerlink" title="Parameter Expansion"></a>Parameter Expansion</h1><p>The ‘$’ character introduces parameter expansion.</p>
<p>The basic form of parameter expansion is ${parameter}. The braces are optional. It is used so that the characters following the variable will not be misinterpreted as part of a parameter.</p>
<p>Ther are many forms of parameter expansion. You can use it to get parameter length, get substring or do substitution.</p>
<h1 id="Getting-User-Input"><a href="#Getting-User-Input" class="headerlink" title="Getting User Input"></a>Getting User Input</h1><p>use <code>read</code> command to read input from user. if input contains backslash, add <strong>-r</strong> option. see <a href="http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_08_02.html">Bash Guide for Beginners - Catching user input</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;username: &quot;</span> username</span><br><span class="line"><span class="built_in">read</span> -sp <span class="string">&quot;password: &quot;</span> password</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$username</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$password</span></span><br></pre></td></tr></table></figure>

<h1 id="Command-Substitution"><a href="#Command-Substitution" class="headerlink" title="Command Substitution"></a>Command Substitution</h1><p>Command Substitution allows user to execute a command and replace the text of the command with the output of the command.</p>
<p>Syntax - recommended is $(). Backquote is not recommended.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(command)</span><br></pre></td></tr></table></figure>

<p>or </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`command`</span><br></pre></td></tr></table></figure>

<p>example - create file with date postfix</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> file-$(<span class="built_in">date</span> +%y-%m-%d).txt</span><br></pre></td></tr></table></figure>

<p>exmaple - generate uuid</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">uuid=$(uuidgen)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;generated uuid: <span class="variable">$uuid</span>&quot;</span></span><br></pre></td></tr></table></figure>


<h1 id="Pass-Arguments-to-Bash-Script"><a href="#Pass-Arguments-to-Bash-Script" class="headerlink" title="Pass Arguments to Bash Script"></a>Pass Arguments to Bash Script</h1><p>You can pass parameter to bash script. use <code>$1</code>, <code>$2</code> to access them. $0 is the name of the Bash script</p>
<p>Here is a file hello.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$0</span> <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span></span><br></pre></td></tr></table></figure>

<p>If you run <code>./hello.sh Alice Bob Cathy</code>. The output will be </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./hello.sh Alice Bob Cathy</span><br></pre></td></tr></table></figure>

<p>You can assign the arguments to an array. Note that the first element of the array is the first argument not the name of the Bash script.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">args=(<span class="string">&quot;<span class="variable">$@</span>&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;args[0]&#125;</span> <span class="variable">$&#123;args[1]&#125;</span> <span class="variable">$&#123;args[2]&#125;</span> </span><br></pre></td></tr></table></figure>

<p>You can get the number of arguments using <code>$#</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $#</span><br></pre></td></tr></table></figure>

<h1 id="Exit-Code"><a href="#Exit-Code" class="headerlink" title="Exit Code"></a>Exit Code</h1><p><code>exit 0</code> is for normal exit of the application. scripts should return non-zero value if it fails. You can use <code>echo $?</code> to check the exit status.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $?</span><br></pre></td></tr></table></figure>

<h1 id="Ignore-the-error"><a href="#Ignore-the-error" class="headerlink" title="Ignore the error"></a>Ignore the error</h1><p>Sometimes you want to ignore an error and continue the execution. To do that, just add <code>|| antohercommand</code> to the end.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command || true</span><br></pre></td></tr></table></figure>

<h1 id="Math-Calculation"><a href="#Math-Calculation" class="headerlink" title="Math Calculation"></a>Math Calculation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var1=$(( 1 + 2 ))</span><br></pre></td></tr></table></figure>

<h1 id="Conditional-Statements"><a href="#Conditional-Statements" class="headerlink" title="Conditional Statements"></a>Conditional Statements</h1><h2 id="If-Statement"><a href="#If-Statement" class="headerlink" title="If Statement"></a>If Statement</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">command</span>; <span class="keyword">then</span></span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>Here semicolon is needed. it is used to separate commands. You will get a syntax error if you don’t have it.</p>
<p>In the if statement, square brackets([]) is often used to test condition. square bracket use command <code>test</code> to evaluate the expression. see <a href="https://linux.die.net/man/1/test">test online man page</a> for <code>test</code> command usage.</p>
<table>
<thead>
<tr>
<th>test command parameter</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>! expr</td>
<td>the expr is false</td>
</tr>
<tr>
<td>-n STRING</td>
<td>the length of STRING is nonzero</td>
</tr>
<tr>
<td>STRING</td>
<td>equivalent to -n STRING</td>
</tr>
<tr>
<td>-z STRING</td>
<td>the length of STRING is zero</td>
</tr>
<tr>
<td>STRING1 &#x3D; STRING2</td>
<td>the strings are equal</td>
</tr>
<tr>
<td>STRING1 !&#x3D; STRING2</td>
<td>the strings are not equal</td>
</tr>
<tr>
<td>INTEGER1 -eq INTEGER2</td>
<td>INTEGER1 is equal to INTEGER2</td>
</tr>
<tr>
<td>INTEGER1 -gt INTEGER2</td>
<td>INTEGER1 is greater than INTEGER2</td>
</tr>
<tr>
<td>INTEGER1 -lt INTEGER2</td>
<td>INTEGER1 is less than INTEGER2</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>file test command</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-e FILE</td>
<td>FILE exists</td>
</tr>
<tr>
<td>-f FILE</td>
<td>FILE exists and is a regular file</td>
</tr>
<tr>
<td>-d FILE</td>
<td>FILE exists and is a directory</td>
</tr>
</tbody></table>
<p>Sometimes double square([[) bracket is used to test condition. unlike [, which is a POSIX shell command, [[ is a bash keyword. [[ is supported by bash and other shells(zsh, ksh). Parsing rules for keywords makes conditions written by [[ easier to understand.</p>
<p><strong>if… satement example</strong></p>
<p>If parameter is not provided, print the usage message </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;usage - test.sh val1&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>


<p>if variable a is greate than b, then print ‘a &gt; b’</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;a &gt; b&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>Check if file exists and is a regular file.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$1</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> exists&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><strong>if…else… statement example</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ! [ -z <span class="variable">$1</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;value 1 = <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;usage - test.sh val1&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>print parameter. If parameter is not provided, print the usage message.</p>
<p><strong>if…elif…else statement</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is a directory&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ -f <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is a file&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$1</span> is not a file, nor a directory</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h2 id="Case-Statement"><a href="#Case-Statement" class="headerlink" title="Case Statement"></a>Case Statement</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &lt;variable&gt; in</span><br><span class="line">&lt;pattern 1&gt;)</span><br><span class="line">  &lt;commands&gt;</span><br><span class="line">  ;;</span><br><span class="line">&lt;pattern 2&gt;)</span><br><span class="line">  &lt;other commands&gt;</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p><strong>case statement example</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">system=$(<span class="built_in">uname</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$system</span> <span class="keyword">in</span></span><br><span class="line">Linux)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;You are a Linux user!&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">  Darwin)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;You are a Mac user!&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;You are using other machine!&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>It will print a massage base on the system the user is in.</p>
<h1 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h1><h2 id="While"><a href="#While" class="headerlink" title="While"></a>While</h2><p>While Syntax, you can use <strong>break</strong> and <strong>continue</strong> in the while body.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while [ &lt;some test&gt; ]</span><br><span class="line">do</span><br><span class="line">    &lt;commands&gt;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>while example - print 0 - 4</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">count=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -lt 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$count</span></span><br><span class="line">    count=$(( count + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>while example - read lines from file</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span> &lt; input.txt</span><br></pre></td></tr></table></figure>

<p>break example</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$line</span>&quot;</span> =~ <span class="string">&quot;########&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$line</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="variable">$input</span></span><br></pre></td></tr></table></figure>

<p>continue example</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">input=<span class="string">&quot;/etc/hosts&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$line</span>&quot;</span> =~ <span class="string">&quot;&quot;</span><span class="comment">########&quot;&quot; ]]; then</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$line</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="variable">$input</span></span><br></pre></td></tr></table></figure>


<h2 id="For"><a href="#For" class="headerlink" title="For"></a>For</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for var in &lt;list&gt;</span><br><span class="line">do</span><br><span class="line">    &lt;commands&gt;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<p>Example - process regular text files in the current folder</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curFiles=<span class="string">&quot;./*&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$curFiles</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ -f <span class="variable">$file</span> ] &amp;&amp; [[ <span class="string">&quot;<span class="variable">$file</span>&quot;</span> == *.txt ]]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;processing <span class="variable">$file</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>



<h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><p>Unlike functions in other programming language, bash function do not return anything to the caller. To return value, you use global variable to store the value.</p>
<p>To define and call a function</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> printSeparater &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;=========================&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printSeparater</span><br></pre></td></tr></table></figure>

<p>Or you can define it like this</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printSeparater() &#123;</span><br><span class="line">    echo &quot;=========================&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printSeparater</span><br></pre></td></tr></table></figure>


<p>parameters can be access using <code>$1</code>, <code>$2</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printtitle() &#123;</span><br><span class="line">    echo &quot;==================== $1 =======================&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printtitle &#x27;my title&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="Resources-and-Tutorials"><a href="#Resources-and-Tutorials" class="headerlink" title="Resources and Tutorials"></a>Resources and Tutorials</h1><ul>
<li><a href="https://linuxconfig.org/bash-scripting-tutorial-for-beginners">Bash Scripting Tutorial for Beginners</a></li>
<li><a href="http://tldp.org/LDP/abs/html/">Advanced Bash-Scripting Guide</a></li>
<li><a href="https://www.thegeekstuff.com/2010/07/bash-string-manipulation/">thegeekstuff bash Series</a></li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.gnu.org/software/bash/manual/bashref.html">Bash Reference Manual</a></li>
<li><a href="https://linuxconfig.org/bash-scripting-tutorial-for-beginners#h9-hello-world-bash-shell-script">Bash Scripting Tutorial for Beginners</a></li>
<li><a href="https://ryanstutorials.net/bash-scripting-tutorial/bash-if-statements.php">If statement</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Go on Ubuntu</title>
    <url>/Linux/Install-Go-on-Ubuntu/</url>
    <content><![CDATA[<p>Install Go and set up paths on Ubuntu. </p>
<span id="more"></span>
<p>Go, also known as Golang, is a statically typed, compiled programming language.</p>
<blockquote>
<p> Go is expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction. Go compiles quickly to machine code yet has the convenience of garbage collection and the power of run-time reflection. It’s a fast, statically typed, compiled language that feels like a dynamically typed, interpreted language.</p>
</blockquote>
<h1 id="Download-latest-package-for-Go"><a href="#Download-latest-package-for-Go" class="headerlink" title="Download latest package for Go"></a>Download latest package for Go</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O https://dl.google.com/go/go1.12.9.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>

<h1 id="Extract-archive-to-x2F-usr-x2F-local"><a href="#Extract-archive-to-x2F-usr-x2F-local" class="headerlink" title="Extract archive to &#x2F;usr&#x2F;local"></a>Extract archive to &#x2F;usr&#x2F;local</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -C /usr/local -xzf go1.12.9.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>

<h1 id="Path-Setup"><a href="#Path-Setup" class="headerlink" title="Path Setup"></a>Path Setup</h1><p>Add &#x2F;usr&#x2F;local&#x2F;go&#x2F;bin to the PATH environment variable so that you can execute go command at any path. You can do this by adding this line to your &#x2F;etc&#x2F;profile (for a system-wide installation) or $HOME&#x2F;.profile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/go/bin</span><br></pre></td></tr></table></figure>

<p>Then we need to setup GOPATH. This is where all the go modules are downloaded. Add the following command to system path.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export GOPATH=$HOME/go</span><br><span class="line">export PATH=$PATH:$GOPATH/bin</span><br></pre></td></tr></table></figure>


<h1 id="Run-Hello-World"><a href="#Run-Hello-World" class="headerlink" title="Run Hello World"></a>Run Hello World</h1><p>create and go to src&#x2F;hello directory. Then create hello.go file</p>
<p>hello.go</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;hello, world\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>use <code>go build</code> command to build the binary</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd $HOME/go/src/hello</span><br><span class="line">$ go build</span><br></pre></td></tr></table></figure>

<p>Now execute the binary file. <code>hello, world</code> should be printed on the console.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./hello</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://golang.org/doc/install?download=go1.12.9.linux-amd64.tar.gz">golang getting started</a></li>
<li><a href="https://golang.org/doc/">golang doc</a></li>
</ul>
]]></content>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - File Permission</title>
    <url>/Linux/Linux-Command-File-Permission/</url>
    <content><![CDATA[<p>Linux makes sure only proper people can have access to the proper files.<br>&#x2F;Linux-Command-File-Permission&#x2F;</p>
<span id="more"></span>

<h1 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h1><p>Permission Groups</p>
<ul>
<li>User(u) - unique user</li>
<li>Group(g) - A collection of one or more users. </li>
<li>Others(o) - others</li>
</ul>
<p>Access levels</p>
<ul>
<li>Read(r) - permission to read the contents of the file</li>
<li>Write(w) - permission to write or modify a file</li>
<li>Execute(x) - permission to execute a file</li>
</ul>
<p>To View Permission, use <code>ls -l</code> command</p>
<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">total 4.0K</span><br><span class="line">-rw-r--r-- 1 jimmy root 5 Dec 24 18:13 file1</span><br></pre></td></tr></table></figure>

<ol>
<li>the first character indicate it is a regular file</li>
<li>the following set of three characters(rw-) indicate owner(in this case jimmy) has read write permission</li>
<li>the next set of three characters(r–) indicate group(root) has read permission</li>
<li>the next set of three characters(r–) indicate everyone has read permission</li>
</ol>
<p>It is sometimes easier to use an octal number to prepresent the bit patterns</p>
<ul>
<li>r &#x3D; 4</li>
<li>w &#x3D; 2</li>
<li>x &#x3D; 1</li>
</ul>
<p>so for <code>rw-r--r--</code>, the octal representation is 644.</p>
<p>Reference</p>
<ul>
<li><a href="https://www.linux.com/learn/understanding-linux-file-permissions">Understanding Linux File Permissions</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - Linux Directory Structure</title>
    <url>/Linux/Linux-Command-Linux-Directory-Structure/</url>
    <content><![CDATA[<p>The Filesystem Hierarchy Standard (FHS) defines the directory structure and directory contents in Linux distributions.</p>
<span id="more"></span>

<p>FHS is maintained by the Linux Foundation. current release is FHS 3.0. FHS enable software to predict the location of<br>installed files and directories and users to predict the location of installed files and directory.</p>
<p>FHS 3.0 specification can be found from <a href="http://refspecs.linuxfoundation.org/fhs.shtml">http://refspecs.linuxfoundation.org/fhs.shtml</a></p>
<p>See directory structure<br><img src="Linux Directory Structure.png" /></p>
<h1 id="x2F-Root"><a href="#x2F-Root" class="headerlink" title="&#x2F; - Root"></a>&#x2F; - Root</h1><p>Everything is located under &#x2F; directory</p>
<h2 id="x2F-bin-Essential-command-binaries"><a href="#x2F-bin-Essential-command-binaries" class="headerlink" title="&#x2F;bin    - Essential command binaries"></a>&#x2F;bin    - Essential command binaries</h2><ul>
<li>&#x2F;bin contains essential programs used by system admins and users.</li>
<li>no subdirectories allowed in &#x2F;bin</li>
</ul>
<p>In Ubuntu &#x2F;bin is a symbolic link to usr&#x2F;bin</p>
<h2 id="x2F-boot-Static-files-of-the-boot-loader"><a href="#x2F-boot-Static-files-of-the-boot-loader" class="headerlink" title="&#x2F;boot-     Static files of the boot loader"></a>&#x2F;boot-     Static files of the boot loader</h2><p>contains files used to boot the system. e.g. the GRUB boot loader.</p>
<h2 id="x2F-dev-Device-files"><a href="#x2F-dev-Device-files" class="headerlink" title="&#x2F;dev    - Device files"></a>&#x2F;dev    - Device files</h2><p>The &#x2F;dev directory is the location of special or device files. virtual device are also here.<br>Some of the most important files are &#x2F;dev&#x2F;null, &#x2F;dev&#x2F;tty,  &#x2F;dev&#x2F;random.</p>
<h2 id="x2F-etc-Host-specific-system-configuration"><a href="#x2F-etc-Host-specific-system-configuration" class="headerlink" title="&#x2F;etc    - Host-specific system configuration"></a>&#x2F;etc    - Host-specific system configuration</h2><p>&#x2F;etc directory contains config files. all files must be static and cannot be executable binary.<br>important files are &#x2F;etc&#x2F;hosts. &#x2F;etc&#x2F;init.d&#x2F; is the directory that contains all the service init script.</p>
<h2 id="x2F-home-home-directory"><a href="#x2F-home-home-directory" class="headerlink" title="&#x2F;home - home directory"></a>&#x2F;home - home directory</h2><p>Optional. linux create a home folder for each user. if the user’s name is alice, the home directory<br>for alice will be &#x2F;home&#x2F;alice&#x2F;. Each user has write permission to their own home folder only. The user<br>need to obtain elevated permissions(become root) to modify other files.</p>
<h2 id="x2F-lib-Essential-shared-libraries-and-kernel-modules"><a href="#x2F-lib-Essential-shared-libraries-and-kernel-modules" class="headerlink" title="&#x2F;lib    - Essential shared libraries and kernel modules"></a>&#x2F;lib    - Essential shared libraries and kernel modules</h2><p>&#x2F;lib directory contains shared library needed to boot the system and run the commands in the root filesystem.</p>
<h2 id="x2F-media-Mount-point-for-removable-media"><a href="#x2F-media-Mount-point-for-removable-media" class="headerlink" title="&#x2F;media -    Mount point for removable media"></a>&#x2F;media -    Mount point for removable media</h2><p>contains subdirectories used as mount points for removable media such as floppy disks, cd roms.</p>
<h2 id="x2F-mnt-Mount-point-for-mounting-a-filesystem-temporarily"><a href="#x2F-mnt-Mount-point-for-mounting-a-filesystem-temporarily" class="headerlink" title="&#x2F;mnt    - Mount point for mounting a filesystem temporarily"></a>&#x2F;mnt    - Mount point for mounting a filesystem temporarily</h2><p>&#x2F;mnt directory is used to mount a filesystem as needed</p>
<h2 id="x2F-opt-Add-on-application-software-packages"><a href="#x2F-opt-Add-on-application-software-packages" class="headerlink" title="&#x2F;opt    - Add-on application software packages"></a>&#x2F;opt    - Add-on application software packages</h2><p>&#x2F;opt directory contains subdirectories for optional software packages.</p>
<h2 id="x2F-root-Home-directory-for-the-root-user"><a href="#x2F-root-Home-directory-for-the-root-user" class="headerlink" title="&#x2F;root - Home directory for the root user"></a>&#x2F;root - Home directory for the root user</h2><p>&#x2F;root directory is optional. It is the recommended home directory for the root user.</p>
<h2 id="x2F-run-Run-time-variable-data"><a href="#x2F-run-Run-time-variable-data" class="headerlink" title="&#x2F;run    - Run-time variable data"></a>&#x2F;run    - Run-time variable data</h2><p>This directory contains system information data describing the system since it was booted.</p>
<h2 id="x2F-sbin-Essential-system-binaries"><a href="#x2F-sbin-Essential-system-binaries" class="headerlink" title="&#x2F;sbin - Essential system binaries"></a>&#x2F;sbin - Essential system binaries</h2><p>&#x2F;sbin is similar to &#x2F;bin directory. contains essential binaries for admin user.</p>
<p>In Ubuntu &#x2F;sbin is a symbolic link to usr&#x2F;sbin</p>
<h2 id="x2F-srv-Service-Data"><a href="#x2F-srv-Service-Data" class="headerlink" title="&#x2F;srv    - Service Data"></a>&#x2F;srv    - Service Data</h2><p>&#x2F;srv contains site-specific data which is served by this system. Use it if serving a website.</p>
<h2 id="x2F-tmp-Temporary-files"><a href="#x2F-tmp-Temporary-files" class="headerlink" title="&#x2F;tmp    - Temporary files"></a>&#x2F;tmp    - Temporary files</h2><p>For storing temporary files. files in &#x2F;tmp will be deleted when system is restarted</p>
<h2 id="x2F-usr-User-Binaries-amp-Read-Only-Data"><a href="#x2F-usr-User-Binaries-amp-Read-Only-Data" class="headerlink" title="&#x2F;usr    - User Binaries &amp; Read-Only Data"></a>&#x2F;usr    - User Binaries &amp; Read-Only Data</h2><p>usr is for Unix Software Resource. It contains Read-Only data. </p>
<p>The most important subdirectory is &#x2F;usr&#x2F;bin. It is the primary directory of executable commands on the system, Commonly used applications like git, node, python are here. even user application like firefox, vs code are install here</p>
<p><strong>Subdirectories</strong></p>
<table>
<thead>
<tr>
<th>Directory</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;usr&#x2F;bin</td>
<td>primary directory of executable commands on the system. In Ubuntu, commonly used commands such as ls, ps, tar, less… are installed here</td>
</tr>
<tr>
<td>&#x2F;usr&#x2F;sbin</td>
<td>Non-essential standard system binaries</td>
</tr>
<tr>
<td>&#x2F;usr&#x2F;local&#x2F;bin</td>
<td>Local binaries</td>
</tr>
<tr>
<td>&#x2F;usr&#x2F;local&#x2F;etc</td>
<td>Host-specific system configuration for local binaries</td>
</tr>
<tr>
<td>&#x2F;usr&#x2F;local&#x2F;sbin</td>
<td>Local system binaries</td>
</tr>
</tbody></table>
<p>&#x2F;usr&#x2F;local&#x2F;bin and usr&#x2F;local&#x2F;sbin are are both added to the system path. Executables local to the site are installed here. You can add user scripts and binaries here so that they are added to the system path automatically.</p>
<h2 id="x2F-var-Variable-data"><a href="#x2F-var-Variable-data" class="headerlink" title="&#x2F;var    - Variable data"></a>&#x2F;var    - Variable data</h2><p>&#x2F;var is the writable counterpart to the &#x2F;usr directory. log files, cache files are here.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html">Filesystem Hierarchy Standard</a></li>
<li><a href="https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/">How To Geek - The Linux Directory Structure, Explained</a></li>
<li><a href="https://www.thegeekstuff.com/2010/09/linux-file-system-structure/">Linux Directory Structure (File System Structure)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard">Wikipedia - Filesystem Hierarchy Standard</a></li>
<li><a href="https://unix.stackexchange.com/questions/8656/usr-bin-vs-usr-local-bin-on-linux">bin directory explain</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - Linux file properties</title>
    <url>/Linux/Linux-Command-Linux-file-properties/</url>
    <content><![CDATA[<p>Linux files have a lot of properties</p>
<span id="more"></span>

<p>use <code>ls -lih</code> command to show file properties</p>
<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">total 4.0K</span><br><span class="line">13902171 -rw-r--r-- 1 root root 5 Dec 24 18:13 file1</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>output</th>
<th>analysis</th>
</tr>
</thead>
<tbody><tr>
<td>13902171</td>
<td>inode number. Inode stores information about a file but not the content</td>
</tr>
<tr>
<td>-rw-r–r–</td>
<td>file permission, meaning file is readable and writable for owner. readable for group and others</td>
</tr>
<tr>
<td>1</td>
<td>hard link number. 1 meanings only one hard link, it is itself</td>
</tr>
<tr>
<td>root</td>
<td>owner</td>
</tr>
<tr>
<td>root</td>
<td>group</td>
</tr>
<tr>
<td>5 Dec 24 18:13</td>
<td>atime. meaning last access date</td>
</tr>
<tr>
<td>file1</td>
<td>name of the file</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - alias</title>
    <url>/Linux/Linux-Command-alias/</url>
    <content><![CDATA[<p><code>alias</code> - Creates aliases. Alias are simple names for commands.</p>
<span id="more"></span>

<p>alias created with the current shell session are not permenent. Add alias to <code>~/.bashrc</code> to make it permanent.</p>
<p>To Remove an alias, use <code>unalias alias_name</code> command.</p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> alias_name=<span class="string">&quot;command_to_run&quot;</span></span><br></pre></td></tr></table></figure>


<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><p>create alias for <code>git add</code> and <code>git commit</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias gac=&quot;git add . &amp;&amp; git commit -m&quot;</span><br></pre></td></tr></table></figure>

<p>create an alias for searching processes</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias psg=&quot;ps aux | grep -v grep | grep -i -e VSZ -e&quot;</span><br></pre></td></tr></table></figure>

<p>Sample output for <code>psg firefox</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ps aux | grep -v grep | grep -i -e VSZ -e firefox</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">xing      8321  0.6  3.2 1856788 261572 tty2   Sl+  16:17   0:11 /usr/lib/firefox/firefox</span><br></pre></td></tr></table></figure>
<p>Note: grep command greps ‘VSZ’ so that the column names are displayed.</p>
<h1 id="Bash-Function"><a href="#Bash-Function" class="headerlink" title="Bash Function"></a>Bash Function</h1><p>alias are limited in their scope. You can’t access arguments in an alias. The alternative is to create Bash functions in <code>.bashrc</code> file.</p>
<p>Sample bash function in <code>.bashrc</code> file. It is used to create directory and move to that directory immediately</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mcd () &#123;</span><br><span class="line">    mkdir -p $1</span><br><span class="line">    cd $1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-useful-bash-aliases-and-functions#alias-examples">An Introduction to Useful Bash Aliases and Functions</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - cat</title>
    <url>/Linux/Linux-Command-cat/</url>
    <content><![CDATA[<p><code>cat</code> - print and concatenate files.</p>
<span id="more"></span>


<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat [OPTION] [FILE]...</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Concatenate FILE(s), or standard input, to standard output.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-n –number</td>
<td>Number all output lines including blank lines</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="print-contents-of-a-file-to-standard-output"><a href="#print-contents-of-a-file-to-standard-output" class="headerlink" title="print contents of a file to standard output"></a>print contents of a file to standard output</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat file1</span><br></pre></td></tr></table></figure>

<h2 id="print-contents-of-a-file-to-standard-output-with-line-number"><a href="#print-contents-of-a-file-to-standard-output-with-line-number" class="headerlink" title="print contents of a file to standard output with line number."></a>print contents of a file to standard output with line number.</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat -n file1</span><br></pre></td></tr></table></figure>

<h2 id="concatenate-files-into-a-single-file"><a href="#concatenate-files-into-a-single-file" class="headerlink" title="concatenate files into a single file"></a>concatenate files into a single file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat file1 file2 &gt; file3</span><br></pre></td></tr></table></figure>

<h2 id="concatenate-files-and-append-to-file3"><a href="#concatenate-files-and-append-to-file3" class="headerlink" title="concatenate files and append to file3"></a>concatenate files and append to file3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat file1 file2 &gt; file3</span><br></pre></td></tr></table></figure>

<h2 id="clean-up-the-contents-in-file1"><a href="#clean-up-the-contents-in-file1" class="headerlink" title="clean up the contents in file1"></a>clean up the contents in file1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /dev/null &gt; file1</span><br></pre></td></tr></table></figure>

<h2 id="Pass-a-multi-line-string-to-a-file"><a href="#Pass-a-multi-line-string-to-a-file" class="headerlink" title="Pass a multi-line string to a file"></a>Pass a multi-line string to a file</h2><p>You can sometimes see cat command use together with <a href="https://linuxhint.com/bash-heredoc-tutorial/">heredoc</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; print.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;Hello World&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="concatenate-and-print-files-in-reverse-order"><a href="#concatenate-and-print-files-in-reverse-order" class="headerlink" title="concatenate and print files in reverse order"></a>concatenate and print files in reverse order</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tac file1</span><br></pre></td></tr></table></figure>

<p><code>tac</code> is the reverse of <code>cat</code>.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/cat">cat online man page</a></li>
<li><a href="https://linux.die.net/man/1/tac">tac online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - awk</title>
    <url>/Linux/Linux-Command-awk/</url>
    <content><![CDATA[<p>awk is often used to process text files.</p>
<span id="more"></span>

<h1 id="Basic-Ustage"><a href="#Basic-Ustage" class="headerlink" title="Basic Ustage"></a>Basic Ustage</h1><p>Syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">awk &#x27;AWK COMMANDS&#x27; [FILE]</span><br></pre></td></tr></table></figure>

<p>Awk defines variables for you to use. useful for extracting fields from the input</p>
<ul>
<li>$0 - the whole line</li>
<li>$1 - the first field</li>
<li>$2 - the second field</li>
<li>$n - the nth field</li>
<li>$(NF-1) - field count -1</li>
<li>$NF - field count</li>
<li>NR - Retrieves total count of processed records</li>
</ul>
<p>example</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello awk&#x27;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure>

<p>You can specify the separator using <code>-F</code> option. To print the first field in &#x2F;etc&#x2F;password: </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root</span><br><span class="line">daemon</span><br><span class="line">bin</span><br><span class="line">sys</span><br><span class="line">sync</span><br><span class="line">games</span><br><span class="line">man</span><br><span class="line">lp</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>To print count, the first and last field of the input field</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print NR &quot; - &quot; $1 &quot; - &quot; $(NF) &#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>


<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 - root - /bin/bash</span><br><span class="line">2 - daemon - /usr/sbin/nologin</span><br><span class="line">3 - bin - /usr/sbin/nologin</span><br><span class="line">4 - sys - /usr/sbin/nologin</span><br><span class="line">5 - sync - /bin/sync</span><br><span class="line">6 - games - /usr/sbin/nologin</span><br><span class="line">7 - man - /usr/sbin/nologin</span><br><span class="line">8 - lp - /usr/sbin/nologin</span><br></pre></td></tr></table></figure>

<h2 id="if-Statement"><a href="#if-Statement" class="headerlink" title="if Statement"></a>if Statement</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;if ($1 &lt; &quot;g&quot; ) print $1  &#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>
<p>This will print the names less than “g”</p>
<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">daemon</span><br><span class="line">bin</span><br><span class="line">backup</span><br></pre></td></tr></table></figure>

<p>If else statement</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;if ($1 &lt; &quot;g&quot; ) print $1; else print &quot;---&quot;  &#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>
<p>This will print the names less than “g”, else print “—“</p>
<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">daemon</span><br><span class="line">bin</span><br><span class="line">---</span><br><span class="line">---</span><br><span class="line">---</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://gregable.com/2010/09/why-you-should-know-just-little-awk.html">Why you should learn just a little Awk</a> by Greg Grothaus</li>
<li><a href="https://likegeeks.com/awk-command/">30 Examples for Awk Command in Text Processing</a> by Mokhtar Ebrahim</li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Enable SSH in Ubuntu</title>
    <url>/Linux/Enable-SSH-in-Ubuntu/</url>
    <content><![CDATA[<p>Enable SSH in Ubuntu</p>
<span id="more"></span>

<p>First need to install openssh server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure>

<p>Check the sevice to make sure it is running</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl status ssh</span><br></pre></td></tr></table></figure>

<p>Then connect to the server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh username@ip_address</span><br></pre></td></tr></table></figure>

<p>To find the ip_address, use <code>ifconfig</code> command. If network is not enabled, then run <code>dhclient</code> command to configure an interface to Dynamic Host Configuration Protocol.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux Command - cd</title>
    <url>/Linux/Linux-Command-cd/</url>
    <content><![CDATA[<p><code>cd</code> - Change the shell working directory.</p>
<span id="more"></span>

<p>Change the current directory to DIR.  The default DIR is the value of the HOME shell variable.</p>
<p><code>cd</code> is not an actual command. It’s built into the shell. So <code>man cd</code> returns nothing. Use <code>help cd</code> instead.</p>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="go-to-current-user’s-home-directory"><a href="#go-to-current-user’s-home-directory" class="headerlink" title="go to current user’s home directory"></a>go to current user’s home directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure>


<h2 id="go-to-x2F-bin-directory"><a href="#go-to-x2F-bin-directory" class="headerlink" title="go to &#x2F;bin directory"></a>go to &#x2F;bin directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /bin</span><br></pre></td></tr></table></figure>


<h2 id="go-to-parent-directory"><a href="#go-to-parent-directory" class="headerlink" title="go to parent directory"></a>go to parent directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure>


<h2 id="go-to-previous-selected-directory"><a href="#go-to-previous-selected-directory" class="headerlink" title="go to previous selected directory"></a>go to previous selected directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd -</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - chgrp</title>
    <url>/Linux/Linux-Command-chgrp/</url>
    <content><![CDATA[<p><code>chgrp</code> change group ownership for files and directories</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp [OPTION] GROUP FILE</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>option</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-R, –recursive</td>
<td>change files and directories recursively</td>
</tr>
<tr>
<td>-v, –verbose</td>
<td>verbose mode</td>
</tr>
<tr>
<td>–reference&#x3D;RFILE</td>
<td>use RFILE’s owner and group rather than specifying OWNER:GROUP values</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="change-a-file’s-group-to-be-‘adm’"><a href="#change-a-file’s-group-to-be-‘adm’" class="headerlink" title="change a file’s group to be ‘adm’"></a>change a file’s group to be ‘adm’</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp adm file1</span><br></pre></td></tr></table></figure>


<h2 id="change-a-directory-and-its-files’-group-to-be-‘root’"><a href="#change-a-directory-and-its-files’-group-to-be-‘root’" class="headerlink" title="change a directory and its files’ group to be ‘root’"></a>change a directory and its files’ group to be ‘root’</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp -R root dir</span><br></pre></td></tr></table></figure>




<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/chgrp">chgrp online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - chmod</title>
    <url>/Linux/Linux-Command-chmod/</url>
    <content><![CDATA[<p><code>chmod</code> - change file mode bits.</p>
<span id="more"></span>

<p>It is very important you understand the Linux file permissions before changing mode bits.</p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [OPTION] MODE FILE</span><br><span class="line">chmod [OPTION] OCTAL-MODE FILE</span><br></pre></td></tr></table></figure>

<p>You can use symbolic mode here</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ugoa...][[+-=][perms...]...]</span><br></pre></td></tr></table></figure>

<p>here </p>
<ul>
<li>u &#x3D; user</li>
<li>g &#x3D; group</li>
<li>o &#x3D; other</li>
<li>a &#x3D; all</li>
</ul>
<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>option</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-R, –recursive</td>
<td>change files and directories recursively</td>
</tr>
<tr>
<td>–reference&#x3D;RFILE</td>
<td>use RFILE’s mode instead of MODE values</td>
</tr>
<tr>
<td>-v, –verbose</td>
<td>verbose mode</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Add-execute-permission-to-owner"><a href="#Add-execute-permission-to-owner" class="headerlink" title="Add execute permission to owner"></a>Add execute permission to owner</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod u+x file1</span><br></pre></td></tr></table></figure>


<h2 id="Remove-execute-permission-from-owner"><a href="#Remove-execute-permission-from-owner" class="headerlink" title="Remove execute permission from owner"></a>Remove execute permission from owner</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod u-x file1</span><br></pre></td></tr></table></figure>

<h2 id="Add-write-permission-for-all"><a href="#Add-write-permission-for-all" class="headerlink" title="Add write permission for all"></a>Add write permission for all</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod a+w file1</span><br></pre></td></tr></table></figure>

<h2 id="Set-owner’s-permission-to-be-execute-only"><a href="#Set-owner’s-permission-to-be-execute-only" class="headerlink" title="Set owner’s permission to be execute only"></a>Set owner’s permission to be execute only</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod u=x file1</span><br></pre></td></tr></table></figure>

<h2 id="Set-permission-for-owner-group"><a href="#Set-permission-for-owner-group" class="headerlink" title="Set permission for owner, group"></a>Set permission for owner, group</h2><p>users has read,write, execute permission, group has read write permission, others</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod u=rwx,g=rw file1</span><br></pre></td></tr></table></figure>

<h2 id="Remove-write-permission-from-owner-for-a-directory"><a href="#Remove-write-permission-from-owner-for-a-directory" class="headerlink" title="Remove write permission from owner for a directory"></a>Remove write permission from owner for a directory</h2><p>add -R option for change files and directories recursively</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R u-w dir</span><br></pre></td></tr></table></figure>

<h2 id="Set-permission-using-octal-digits"><a href="#Set-permission-using-octal-digits" class="headerlink" title="Set permission using octal digits"></a>Set permission using octal digits</h2><p>set read permission only for all</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 444 file1</span><br></pre></td></tr></table></figure>

<p>set read,write permission for owner and read permission for group</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 640 file1</span><br></pre></td></tr></table></figure>


<p>Reference</p>
<ul>
<li><a href="https://linux.die.net/man/1/chmod">chmod online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - chown</title>
    <url>/Linux/Linux-Command-chown/</url>
    <content><![CDATA[<p><code>chown</code> - change file owner and group</p>
<span id="more"></span>


<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown [OPTION] [OWNER][:[GROUP]] FILE</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>option</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-R, –recursive</td>
<td>change files and directories recursively</td>
</tr>
<tr>
<td>-v, –verbose</td>
<td>verbose mode</td>
</tr>
<tr>
<td>–reference&#x3D;RFILE</td>
<td>use RFILE’s owner and group rather than specifying OWNER:GROUP values</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Change-file’s-owner-and-group"><a href="#Change-file’s-owner-and-group" class="headerlink" title="Change file’s owner and group"></a>Change file’s owner and group</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown root:adm file1</span><br></pre></td></tr></table></figure>

<h2 id="Change-file’s-group"><a href="#Change-file’s-group" class="headerlink" title="Change file’s group"></a>Change file’s group</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown :root file1</span><br></pre></td></tr></table></figure>

<h2 id="Change-file-and-directory’s-owner-and-group-and-print-results"><a href="#Change-file-and-directory’s-owner-and-group-and-print-results" class="headerlink" title="Change file and directory’s owner and group and print results"></a>Change file and directory’s owner and group and print results</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -v -R root:mail dir</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/chown">chown online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - cp</title>
    <url>/Linux/Linux-Command-cp/</url>
    <content><![CDATA[<p><code>cp</code> - copy files and folders.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp [OPTION] SOURCE DEST</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp [OPTION] SOURCE... DIRECTORY</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-f, –force</td>
<td>do not prompt before overwriting. Be careful when using this option</td>
</tr>
<tr>
<td>-i, –interactive</td>
<td>prompt before overwrite</td>
</tr>
<tr>
<td>-n, –no-clobber</td>
<td>do not override existing file</td>
</tr>
<tr>
<td>-s, –symbolic-link</td>
<td>make symbolic links instead of copying</td>
</tr>
<tr>
<td>-v, –verbose</td>
<td>explain what is being done</td>
</tr>
<tr>
<td>-R, -r, –recursive</td>
<td>copy directories recursively</td>
</tr>
<tr>
<td>-a, –archive</td>
<td>same as -dR –preserve&#x3D;all</td>
</tr>
<tr>
<td>-p</td>
<td>same as –preserve&#x3D;mode,ownership,timestamps</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Copy-a-file"><a href="#Copy-a-file" class="headerlink" title="Copy a file"></a>Copy a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -v log1 log2</span><br></pre></td></tr></table></figure>
<p>if target file already exist, then existing file will be overrided. add -i option to prompt before overriding.</p>
<h2 id="Copy-a-file-into-a-directory"><a href="#Copy-a-file-into-a-directory" class="headerlink" title="Copy a file into a directory"></a>Copy a file into a directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -v log1 dir</span><br></pre></td></tr></table></figure>
<p>if target file already exist in the directory, the existing file will be overrided. add -i option to prompt before overriding.</p>
<h2 id="Copy-a-file-and-preserve-mode-ownership-and-timestamps"><a href="#Copy-a-file-and-preserve-mode-ownership-and-timestamps" class="headerlink" title="Copy a file and preserve mode, ownership and timestamps"></a>Copy a file and preserve mode, ownership and timestamps</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -pv log1 dir</span><br></pre></td></tr></table></figure>


<h2 id="Copy-a-directory-into-another-directory"><a href="#Copy-a-directory-into-another-directory" class="headerlink" title="Copy a directory into another directory"></a>Copy a directory into another directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -rv dir1 dir2</span><br></pre></td></tr></table></figure>
<p>dir1 will be copied into dir2. if dir2 not exist, create it.</p>
<h2 id="Copy-files-x2F-directories-in-a-directory-into-another-directory"><a href="#Copy-files-x2F-directories-in-a-directory-into-another-directory" class="headerlink" title="Copy files&#x2F;directories in a directory into another directory"></a>Copy files&#x2F;directories in a directory into another directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -rv dir1/. dir2</span><br></pre></td></tr></table></figure>
<p>Note the difference between <code>cp -rv dir1 dir2</code> and <code>cp -rv dir1/. dir2</code>. If you want to copy diles&#x2F;directories in a directory, use <code>/.</code> at the end of the directory.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/cp">cp online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - curl</title>
    <url>/Linux/Linux-Command-curl/</url>
    <content><![CDATA[<p><code>curl</code> - transfer data to and from the web. With <code>curl</code> you can easily interact with REST API.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl [options] [URL]</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Common Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-O</td>
<td>write output to a local file named like the remote file we got</td>
</tr>
<tr>
<td>-o <em>file</em></td>
<td>write output to <em>file</em> instead of stdout</td>
</tr>
<tr>
<td>-i&#x2F;--include</td>
<td>fetch the HTTP header in the output</td>
</tr>
<tr>
<td>-I&#x2F;--head</td>
<td>fetch the HTTP header only</td>
</tr>
<tr>
<td>-H <em>header</em></td>
<td>Extra header to use when getting a web page.</td>
</tr>
<tr>
<td>-X <em>Http_Method</em></td>
<td>Specifies a custom request method to use when communicating with the HTTP server.</td>
</tr>
<tr>
<td>-d&#x2F;--data <em>data</em></td>
<td>send POST request to HTTP server with data</td>
</tr>
<tr>
<td>-L</td>
<td>follow redirect. redirect happens when server response is 3xx</td>
</tr>
<tr>
<td>-k</td>
<td>(SSL) This option explicitly allows curl to perform “insecure” SSL connections and transfers.</td>
</tr>
<tr>
<td>-u <em>user:password</em></td>
<td>specify user name and password to use server authentication</td>
</tr>
<tr>
<td>--retry <em>num</em></td>
<td>retry num times</td>
</tr>
<tr>
<td>--retry-delay <em>seconds</em></td>
<td>set retry delay in seconds</td>
</tr>
<tr>
<td>-s</td>
<td>Silent or quiet mode. Don’t show progress meter or error messages. Makes Curl mute.</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Download-file"><a href="#Download-file" class="headerlink" title="Download file"></a>Download file</h2><p>Download file in silent mode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s -O  https://github-media-downloads.s3.amazonaws.com/Octocats.zip</span><br></pre></td></tr></table></figure>

<p>You can also use -o to rename the downloaded file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s -o funny-octocats.zip  https://github-media-downloads.s3.amazonaws.com/Octocats.zip</span><br></pre></td></tr></table></figure>


<h2 id="Curl-with-Basic-authentication"><a href="#Curl-with-Basic-authentication" class="headerlink" title="Curl with Basic authentication"></a>Curl with Basic authentication</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -u username:password http://mydomain.com</span><br></pre></td></tr></table></figure>



<h2 id="Make-a-GET-Request"><a href="#Make-a-GET-Request" class="headerlink" title="Make a GET Request"></a>Make a GET Request</h2><p>send a GET request to server and display response</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://127.0.0.1:5984/demo</span><br></pre></td></tr></table></figure>

<p>Same as </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X GET http://127.0.0.1:5984/demo</span><br></pre></td></tr></table></figure>

<h2 id="With-Http-Header"><a href="#With-Http-Header" class="headerlink" title="With Http Header"></a>With Http Header</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -i -X GET http://127.0.0.1:5984/demo</span><br></pre></td></tr></table></figure>

<h2 id="Make-a-PUT-Request"><a href="#Make-a-PUT-Request" class="headerlink" title="Make a PUT Request"></a>Make a PUT Request</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X PUT http://172.17.0.4/newdb</span><br></pre></td></tr></table></figure>

<h2 id="Make-a-POST-Request"><a href="#Make-a-POST-Request" class="headerlink" title="Make a POST Request"></a>Make a POST Request</h2><p>Make a Post request to create a customer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST  -H &#x27;Content-Type: application/json&#x27; http://localhost:8080/customers/ -d &#x27;&#123;&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: &quot;25&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/curl">curl online man page</a></li>
<li><a href="https://docs.couchdb.org/en/stable/intro/curl.html">cURL: Your Command Line Friend by CouchDB</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - date</title>
    <url>/Linux/Linux-Command-date/</url>
    <content><![CDATA[<p><code>date</code> - display or set system time.</p>
<span id="more"></span>


<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date [OPTIONS] [+FORMAT]</span><br></pre></td></tr></table></figure>

<h1 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h1><table>
<thead>
<tr>
<th>common FORMAT</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>%Y</td>
<td>year</td>
</tr>
<tr>
<td>%y</td>
<td>last two digits of year(00…99)</td>
</tr>
<tr>
<td>%m</td>
<td>month</td>
</tr>
<tr>
<td>%d</td>
<td>day of month(e.g. 01)</td>
</tr>
<tr>
<td>%F</td>
<td>full date; same as %Y-%m-%d</td>
</tr>
<tr>
<td>%H</td>
<td>hour(00…23)</td>
</tr>
<tr>
<td>%l</td>
<td>hour(01…12)</td>
</tr>
<tr>
<td>%k</td>
<td>hour(0…23)</td>
</tr>
<tr>
<td>%M</td>
<td>minute (00..59)</td>
</tr>
<tr>
<td>%S</td>
<td>second (00..60)</td>
</tr>
<tr>
<td>%T</td>
<td>time; same as %H:%M:%S</td>
</tr>
</tbody></table>
<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-d, --date&#x3D;STRING</td>
<td>display time described by STRING, not ‘now’</td>
</tr>
<tr>
<td>-u</td>
<td>print or set Coordinated Universal Time</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Display-date-in-UTC-and-ISO-8601-format"><a href="#Display-date-in-UTC-and-ISO-8601-format" class="headerlink" title="Display date in UTC and ISO 8601 format"></a>Display date in UTC and ISO 8601 format</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date -u +&quot;%Y-%m-%dT%H:%M:%SZ&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Display-date-using-default-locale’s-format"><a href="#Display-date-using-default-locale’s-format" class="headerlink" title="Display date using default locale’s format"></a>Display date using default locale’s format</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date +%c</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mon 07 Jan 2019 09:21:51 PM EST</span><br></pre></td></tr></table></figure>

<h2 id="Display-date-and-time"><a href="#Display-date-and-time" class="headerlink" title="Display date and time"></a>Display date and time</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date +&quot;%F %T&quot;</span><br></pre></td></tr></table></figure>
<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2019-01-07 21:14:37</span><br></pre></td></tr></table></figure>

<h2 id="Display-unix-time"><a href="#Display-unix-time" class="headerlink" title="Display unix time"></a>Display unix time</h2><p>Unix time is seconds since Unix epoch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date +%s</span><br></pre></td></tr></table></figure>

<h2 id="Display-a-future-date"><a href="#Display-a-future-date" class="headerlink" title="Display a future date"></a>Display a future date</h2><p>next month</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date -d next-month +%Y-%m</span><br></pre></td></tr></table></figure>

<p>Nov 25 of the year</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date -d &#x27;nov 25&#x27; +%F</span><br></pre></td></tr></table></figure>

<p>10 minutes later</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date -d &#x27;10 minutes&#x27; +%H:%M:%S</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/date">date online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - diff</title>
    <url>/Linux/Linux-Command-diff/</url>
    <content><![CDATA[<p>compare the contents from two files</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff [OPTIONS] file1 file2</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Common Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-y --side-by-side</td>
<td>Output in two columns.</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>file1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">line 1</span><br><span class="line">line 2</span><br><span class="line">line 3</span><br><span class="line">line 4</span><br><span class="line">line 5</span><br><span class="line">line x</span><br><span class="line">line y</span><br><span class="line">line z</span><br></pre></td></tr></table></figure>

<p>file2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">line 1</span><br><span class="line">line two</span><br><span class="line">line 3</span><br><span class="line">line x</span><br><span class="line">line y</span><br><span class="line">line z</span><br></pre></td></tr></table></figure>

<h2 id="Show-Diff"><a href="#Show-Diff" class="headerlink" title="Show Diff"></a>Show Diff</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff file1 file2</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2c2</span><br><span class="line">&lt; line 2</span><br><span class="line">---</span><br><span class="line">&gt; line two</span><br><span class="line">4,5d3</span><br><span class="line">&lt; line 4</span><br><span class="line">&lt; line 5</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Note: there is change in line 2. line 4,5 are deleted</p>
<ul>
<li>c is for change</li>
<li>a is for add</li>
<li>d is for delete</li>
</ul>
<h2 id="Diff-Side-by-Side"><a href="#Diff-Side-by-Side" class="headerlink" title="Diff Side by Side"></a>Diff Side by Side</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff -y file1 file2</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">line 1		line 1</span><br><span class="line">line 2	  | line two</span><br><span class="line">line 3		line 3</span><br><span class="line">line 4	  &lt;</span><br><span class="line">line 5	  &lt;</span><br><span class="line">line x		line x</span><br><span class="line">line y		line y</span><br><span class="line">line z		line z</span><br></pre></td></tr></table></figure>

<p>Note:</p>
<ul>
<li>| means different</li>
<li>&lt; means line exist in file1 only</li>
<li><blockquote>
<p>means line exist in file2 only</p>
</blockquote>
</li>
</ul>
<h2 id="Diff-with-Context"><a href="#Diff-with-Context" class="headerlink" title="Diff with Context"></a>Diff with Context</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff -c file1 file2</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*** file1	2019-01-08 23:00:39.033653619 -0500</span><br><span class="line">--- file2	2019-01-08 23:02:27.115428654 -0500</span><br><span class="line">***************</span><br><span class="line">*** 1,8 ****</span><br><span class="line">  line 1</span><br><span class="line">! line 2</span><br><span class="line">  line 3</span><br><span class="line">- line 4</span><br><span class="line">- line 5</span><br><span class="line">  line x</span><br><span class="line">  line y</span><br><span class="line">  line z</span><br><span class="line">\ No newline at end of file</span><br><span class="line">--- 1,6 ----</span><br><span class="line">  line 1</span><br><span class="line">! line two</span><br><span class="line">  line 3</span><br><span class="line">  line x</span><br><span class="line">  line y</span><br><span class="line">  line z</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure>

<h2 id="Diff-with-unified-context"><a href="#Diff-with-unified-context" class="headerlink" title="Diff with unified context"></a>Diff with unified context</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff -u file1 file2</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--- file1	2019-01-08 23:00:39.033653619 -0500</span><br><span class="line">+++ file2	2019-01-08 23:02:27.115428654 -0500</span><br><span class="line">@@ -1,8 +1,6 @@</span><br><span class="line"> line 1</span><br><span class="line">-line 2</span><br><span class="line">+line two</span><br><span class="line"> line 3</span><br><span class="line">-line 4</span><br><span class="line">-line 5</span><br><span class="line"> line x</span><br><span class="line"> line y</span><br><span class="line"> line z</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure>

<h2 id="Generate-Patch-for-a-file"><a href="#Generate-Patch-for-a-file" class="headerlink" title="Generate Patch for a file"></a>Generate Patch for a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff -u file1 file2 &gt; file.patch</span><br></pre></td></tr></table></figure>

<p>file.path content</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--- file1	2019-01-08 23:00:39.033653619 -0500</span><br><span class="line">+++ file2	2019-01-08 23:02:27.115428654 -0500</span><br><span class="line">@@ -1,8 +1,6 @@</span><br><span class="line"> line 1</span><br><span class="line">-line 2</span><br><span class="line">+line two</span><br><span class="line"> line 3</span><br><span class="line">-line 4</span><br><span class="line">-line 5</span><br><span class="line"> line x</span><br><span class="line"> line y</span><br><span class="line"> line z</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure>


<h2 id="Apply-a-patch-to-a-file"><a href="#Apply-a-patch-to-a-file" class="headerlink" title="Apply a patch to a file"></a>Apply a patch to a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">patch file1.back file.patch</span><br></pre></td></tr></table></figure>
<p>file.patch will apply to file1.back</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/diff">diff online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - du</title>
    <url>/Linux/Linux-Command-du/</url>
    <content><![CDATA[<p><code>du</code> - list the sizes of a folder and any subfolders</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du [OPTIONS] [FILE]</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>Show file sizes too</td>
</tr>
<tr>
<td>-L</td>
<td>Follow all symlinks</td>
</tr>
<tr>
<td>-H</td>
<td>Follow symlinks on command line</td>
</tr>
<tr>
<td>-d N</td>
<td>Limit output to directories (and files with -a) of depth &lt; N</td>
</tr>
<tr>
<td>-c</td>
<td>Show grand total</td>
</tr>
<tr>
<td>-l</td>
<td>Count sizes many times if hard linked</td>
</tr>
<tr>
<td>-s</td>
<td>Display only a total for each argument</td>
</tr>
<tr>
<td>-x</td>
<td>Skip directories on different filesystems</td>
</tr>
<tr>
<td>-h</td>
<td>Sizes in human readable format (e.g., 1K 243M 2G)</td>
</tr>
<tr>
<td>-m</td>
<td>Sizes in megabytes</td>
</tr>
<tr>
<td>-k</td>
<td>Sizes in kilobytes (default)</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="List-sizes-of-a-folder-and-any-subfolders"><a href="#List-sizes-of-a-folder-and-any-subfolders" class="headerlink" title="List sizes of a folder and any subfolders"></a>List sizes of a folder and any subfolders</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du -h /usr/local</span><br></pre></td></tr></table></figure>

<p>sample ouput</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du -h /usr/local</span><br><span class="line">44.0K	/usr/local/bin</span><br><span class="line">4.0K	/usr/local/share</span><br><span class="line">4.0K	/usr/local/lib</span><br><span class="line">56.0K	/usr/local</span><br></pre></td></tr></table></figure>


<h2 id="List-sizes-of-all-contents-in-a-folder"><a href="#List-sizes-of-all-contents-in-a-folder" class="headerlink" title="List sizes of all contents in a folder"></a>List sizes of all contents in a folder</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du -ah /usr/local</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">40.0K	/usr/local/bin/envsubst</span><br><span class="line">44.0K	/usr/local/bin</span><br><span class="line">4.0K	/usr/local/share</span><br><span class="line">4.0K	/usr/local/lib</span><br><span class="line">56.0K	/usr/local</span><br></pre></td></tr></table></figure>

<h2 id="List-sizes-of-a-folder-and-any-subfolders-deep-1"><a href="#List-sizes-of-a-folder-and-any-subfolders-deep-1" class="headerlink" title="List sizes of a folder and any subfolders(deep 1)"></a>List sizes of a folder and any subfolders(deep 1)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du -h -d 1  /usr</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">360.0K	/usr/bin</span><br><span class="line">3.3M	/usr/share</span><br><span class="line">6.2M	/usr/lib</span><br><span class="line">2.6M	/usr/sbin</span><br><span class="line">56.0K	/usr/local</span><br><span class="line">4.0K	/usr/src</span><br><span class="line">12.6M	/usr</span><br></pre></td></tr></table></figure>

<h2 id="list-sizes-of-png-files-in-current-folder"><a href="#list-sizes-of-png-files-in-current-folder" class="headerlink" title="list sizes of .png files in current folder"></a>list sizes of .png files in current folder</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du -ch *.png</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/du">du online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - df</title>
    <url>/Linux/Linux-Command-df/</url>
    <content><![CDATA[<p><code>df</code> - report file system disk space usage.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure>


<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>include dummy file systems</td>
</tr>
<tr>
<td>-h, --human-readable</td>
<td>print sizes in powers of 1024 (e.g., 1023M)</td>
</tr>
<tr>
<td>-H, --si</td>
<td>print sizes in powers of 1000 (e.g., 1.1G)</td>
</tr>
<tr>
<td>-i, --inodes</td>
<td>list inode information instead of block usage</td>
</tr>
<tr>
<td>-k</td>
<td>like –block-size&#x3D;1K</td>
</tr>
<tr>
<td>-P, –portability</td>
<td>use the POSIX output format</td>
</tr>
<tr>
<td>-t, –type&#x3D;TYPE</td>
<td>limit listing to file systems of type TYPE</td>
</tr>
<tr>
<td>-T, –print-type</td>
<td>print file system type</td>
</tr>
<tr>
<td>-x</td>
<td>exclude a file system type</td>
</tr>
<tr>
<td>--total</td>
<td>produce a grand total</td>
</tr>
<tr>
<td>--help</td>
<td>display help info</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><p><strong>Display all file systems and their disk usage in human readable form</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df -h --total</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs           788M  1.4M  787M   1% /run</span><br><span class="line">/dev/sda2       228G   66G  151G  31% /</span><br><span class="line">tmpfs           3.9G  147M  3.8G   4% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0       89M   89M     0 100% /snap/core/7396</span><br><span class="line">/dev/sda1       511M  7.6M  504M   2% /boot/efi</span><br><span class="line">tmpfs           788M   16K  788M   1% /run/user/1000</span><br><span class="line">total           242G   67G  164G  29% -</span><br></pre></td></tr></table></figure>

<p><strong>Exclude a file system type</strong><br>display file system excluding tmpfs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ df -h -T --total -x tmpfs</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">udev           devtmpfs  3.9G     0  3.9G   0% /dev</span><br><span class="line">/dev/sda2      ext4      228G   66G  151G  31% /</span><br><span class="line">/dev/loop0     squashfs   89M   89M     0 100% /snap/core/7396</span><br><span class="line">/dev/sda1      vfat      511M  7.6M  504M   2% /boot/efi</span><br><span class="line">total          -         233G   67G  155G  30% -</span><br></pre></td></tr></table></figure>

<p><strong>Display all file systems and their disk usage where the file locates</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df /root</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/df">df online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - echo</title>
    <url>/Linux/Linux-Command-echo/</url>
    <content><![CDATA[<p><code>echo</code> - Print given arguments.</p>
<span id="more"></span>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo [OPTIONS] [STRING]...</span><br></pre></td></tr></table></figure>

<h1 id="Common-Options"><a href="#Common-Options" class="headerlink" title="Common Options"></a>Common Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-n</td>
<td>do not output the trailing newline</td>
</tr>
<tr>
<td>-e</td>
<td>enable interpretation of backslash escapes</td>
</tr>
</tbody></table>
<p>If -e is in effect, the following sequences are recognized:</p>
<table>
<thead>
<tr>
<th>String Sequence</th>
<th>Interpretation</th>
</tr>
</thead>
<tbody><tr>
<td>\\</td>
<td>backslash</td>
</tr>
<tr>
<td>\a</td>
<td>alert (BEL)</td>
</tr>
<tr>
<td>\b</td>
<td>backspace</td>
</tr>
<tr>
<td>\c</td>
<td>produce no further output</td>
</tr>
<tr>
<td>\e</td>
<td>escape</td>
</tr>
<tr>
<td>\f</td>
<td>form feed</td>
</tr>
<tr>
<td>\n</td>
<td>new line</td>
</tr>
<tr>
<td>\r</td>
<td>carriage return</td>
</tr>
<tr>
<td>\t</td>
<td>horizontal tab</td>
</tr>
<tr>
<td>\v</td>
<td>vertical tab</td>
</tr>
<tr>
<td>\0NNN</td>
<td>byte with octal value NNN (1 to 3 digits)</td>
</tr>
<tr>
<td>\xHH</td>
<td>byte with hexadecimal value HH (1 to 2 digits)</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Print-some-text"><a href="#Print-some-text" class="headerlink" title="Print some text"></a>Print some text</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;Hello Linux&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;Hello Linux&quot;</span><br></pre></td></tr></table></figure>
<p>Note: single quotes and double quotes are optional</p>
<h2 id="Print-some-text-without-newline"><a href="#Print-some-text-without-newline" class="headerlink" title="Print some text without newline"></a>Print some text without newline</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo -n &quot;Hello Linux&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Print-PATH-variable"><a href="#Print-PATH-variable" class="headerlink" title="Print PATH variable"></a>Print PATH variable</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;\$PATH is $PATH&quot;</span><br></pre></td></tr></table></figure>
<p>Note: can’t use single quotes here. Only String in double quotes interpolates variables.</p>
<h2 id="Print-text-with-Tabs"><a href="#Print-text-with-Tabs" class="headerlink" title="Print text with Tabs"></a>Print text with Tabs</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo -e &quot;name:\tuser1\nid:\t1234&quot;</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo -e &#x27;name:\tuser1\nid:\t1234&#x27;</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/echo">echo online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - Linux file types</title>
    <url>/Linux/Linux-Command-file-types/</url>
    <content><![CDATA[<p>There are different file types in Linux file system.</p>
<span id="more"></span>

<h1 id="File-Types"><a href="#File-Types" class="headerlink" title="File Types"></a>File Types</h1><p>use <code>ls -l</code> command to check file types. the file type is encoded, “-“ is for “regular file”. </p>
<p>The complete list of file types</p>
<ul>
<li>- : regular file</li>
<li>d : directory</li>
<li>c : character device file</li>
<li>b : block device file</li>
<li>s : local socket file</li>
<li>p : named pipe</li>
<li>l : symbolic link</li>
</ul>
<h2 id="Regular-files"><a href="#Regular-files" class="headerlink" title="Regular files"></a>Regular files</h2><p>Regular file is the most common file type in Linux file system.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /etc/hosts</span><br></pre></td></tr></table></figure>

<p>output - this is a regular file!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-rw-r--r-- 1 root root 239 Dec  7 20:34 /etc/hosts</span><br></pre></td></tr></table></figure>

<h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><p>Directory is also very common</p>
<p>Demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">mkdir dir</span><br><span class="line">ls -l /tmp</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drwxr-xr-x 2 root root 4096 Dec 24 12:42  dir</span><br></pre></td></tr></table></figure>

<h2 id="Character-Device"><a href="#Character-Device" class="headerlink" title="Character Device"></a>Character Device</h2><p>Users and programs communicate with hardware using character and block device</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /dev/usb</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">total 0</span><br><span class="line">crw------- 1 root root 180, 0 Dec 24 09:57 hiddev0</span><br><span class="line">crw------- 1 root root 180, 1 Dec 24 09:57 hiddev1</span><br><span class="line">crw------- 1 root root 180, 2 Dec 24 09:57 hiddev2</span><br></pre></td></tr></table></figure>

<h2 id="Block-Device"><a href="#Block-Device" class="headerlink" title="Block Device"></a>Block Device</h2><p>Similar to Character Device, common block devices are hard drives, memory.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /dev/sda</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brw-rw---- 1 root disk 8, 0 Dec 24 09:57 /dev/sda</span><br></pre></td></tr></table></figure>

<h2 id="Local-Socket"><a href="#Local-Socket" class="headerlink" title="Local Socket"></a>Local Socket</h2><p>you can find socker file in &#x2F;var&#x2F;run directory.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd </span><br><span class="line">cd /var/run/systemd/journal</span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">total 4</span><br><span class="line">srw-rw-rw- 1 root root    0 Dec 25 11:41 dev-log</span><br><span class="line">-rw-r--r-- 1 root root    0 Dec 25 11:41 flushed</span><br><span class="line">-rw-r--r-- 1 root root    8 Dec 25 11:41 kernel-seqnum</span><br><span class="line">srw-rw-rw- 1 root root    0 Dec 25 11:41 socket</span><br><span class="line">srw-rw-rw- 1 root root    0 Dec 25 11:41 stdout</span><br><span class="line">drwxr-xr-x 2 root root 3320 Dec 25 16:05 streams</span><br><span class="line">srw-rw-rw- 1 root root    0 Dec 25 11:41 syslog</span><br></pre></td></tr></table></figure>


<h2 id="Named-Pipe"><a href="#Named-Pipe" class="headerlink" title="Named Pipe"></a>Named Pipe</h2><p>named pipes allow communication between two local processes.</p>
<p>create named pipe</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfifo pipe</span><br></pre></td></tr></table></figure>

<p>ls -l output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prw-r--r-- 1 xing xing    0 Dec 24 13:53  pipe</span><br></pre></td></tr></table></figure>


<h2 id="Symbolic-links"><a href="#Symbolic-links" class="headerlink" title="Symbolic links"></a>Symbolic links</h2><p>create symbolic link</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s file1 file1.link</span><br></pre></td></tr></table></figure>

<p>ls -l output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-rw-r--r-- 1 xing xing    0 Dec 24 13:54  file1</span><br><span class="line">lrwxrwxrwx 1 xing xing    5 Dec 24 13:54  file1.link -&gt; file1</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linuxconfig.org/identifying-file-types-in-linux">Identifying File types in Linux</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - find and xargs</title>
    <url>/Linux/Linux-Command-find-and-xargs/</url>
    <content><![CDATA[<p><code>xargs</code> can be used to process the files return from <code>find</code> command.</p>
<span id="more"></span>

<h1 id="Xargs-Options"><a href="#Xargs-Options" class="headerlink" title="Xargs Options"></a>Xargs Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-0</td>
<td>Input items are terminated by a null character instead of by whitespace, and the quotes and backslash are not special</td>
</tr>
<tr>
<td>--replace[&#x3D;replace-str]</td>
<td>Replace occurrences of replace-str in the initial-arguments with names read from standard input.</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Example-to-remove-core-files-in-x2F-tmp-directory"><a href="#Example-to-remove-core-files-in-x2F-tmp-directory" class="headerlink" title="Example to remove .core files in &#x2F;tmp directory"></a>Example to remove .core files in &#x2F;tmp directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /tmp -name &quot;*.core&quot; -type f -print | xargs rm -vf</span><br></pre></td></tr></table></figure>

<p>However, the above command cannot remove filenames with space in it. A better way is to use null character as separator.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /tmp -name &quot;*.core&quot; -type f -print0 | xargs -0 rm -vf</span><br></pre></td></tr></table></figure>

<h2 id="Example-to-copy-log-files-to-test-directory"><a href="#Example-to-copy-log-files-to-test-directory" class="headerlink" title="Example to copy .log files to test directory"></a>Example to copy .log files to test directory</h2><p>the filename is provided as the first parameter of cp.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name &quot;*.log&quot; -type f -print0 | xargs --replace=&#123;&#125;  -0  cp -f  &#123;&#125; test</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/xargs">xargs online reference</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - file</title>
    <url>/Linux/Linux-Command-file/</url>
    <content><![CDATA[<p><code>file</code> - determine file type.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file FILE...</span><br></pre></td></tr></table></figure>

<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Determine-file-type-of-a-file"><a href="#Determine-file-type-of-a-file" class="headerlink" title="Determine file type of a file"></a>Determine file type of a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file file1</span><br></pre></td></tr></table></figure>

<p>sample output for a text file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file1:       ASCII text, with very long lines</span><br></pre></td></tr></table></figure>

<p>sample output for a pdf file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc.pdf: PDF document, version 1.5</span><br></pre></td></tr></table></figure>



<h2 id="Determine-file-type-of-all-files-in-the-folder"><a href="#Determine-file-type-of-all-files-in-the-folder" class="headerlink" title="Determine file type of all files in the folder"></a>Determine file type of all files in the folder</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file test/*</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/file">file online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - find with -exec action</title>
    <url>/Linux/Linux-Command-find-with-exec-action/</url>
    <content><![CDATA[<p>Explore <code>-exec</code> action for <code>find</code> command.</p>
<span id="more"></span>


<h1 id="exec"><a href="#exec" class="headerlink" title="-exec"></a>-exec</h1><p>-exec command syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-exec command ;</span><br></pre></td></tr></table></figure>


<p><code>-exec</code> - Execute command; true if 0 status is returned. All following arguments to find are taken to be arguments to the command until an argument consisting of <strong>;</strong> is encountered. The string <strong>{}</strong> is replaced by the current file name being processed everywhere it occurs in the arguments to the command.</p>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="find-png-files-and-execute-‘ls-lh’-command"><a href="#find-png-files-and-execute-‘ls-lh’-command" class="headerlink" title="find .png files and execute ‘ls -lh’ command"></a>find .png files and execute ‘ls -lh’ command</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name &quot;*.png&quot; -exec ls -lh  &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h2 id="fine-log-files-and-remove-with-prompt"><a href="#fine-log-files-and-remove-with-prompt" class="headerlink" title="fine .log files and remove with prompt"></a>fine .log files and remove with prompt</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -name &quot;*.log&quot; -mtime -1 -exec rm -i &#123;&#125; \;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - find</title>
    <url>/Linux/Linux-Command-find/</url>
    <content><![CDATA[<p><code>find</code> - Find files or directories under the given directory tree, <strong>recursively</strong>.</p>
<span id="more"></span>


<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find [options] [root_path] [expression]</span><br></pre></td></tr></table></figure>

<h1 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h1><p>If no paths are given, the current directory is used.</p>
<p>The -H, -L and -P options control the treatment of symbolic links.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-H</td>
<td>Do not follow symbolic links, except while processing the command line arguments.</td>
</tr>
<tr>
<td>-L</td>
<td>Follow symbolic links.</td>
</tr>
<tr>
<td>-P</td>
<td>Never follow symbolic links.</td>
</tr>
</tbody></table>
<h1 id="Expression"><a href="#Expression" class="headerlink" title="Expression"></a>Expression</h1><p>The expression is made up of <strong>options</strong> (which affect overall operation rather than the processing of a specific file, and always return true), <strong>tests</strong> (which return a true or false value), and <strong>actions</strong> (which have side effects and return a true or false value), all separated by operators. -and is assumed where the operator is omitted.</p>
<h2 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h2><table>
<thead>
<tr>
<th>Test</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-name pattern</td>
<td>Base of file name matches shell pattern pattern.</td>
</tr>
<tr>
<td>-type c</td>
<td>files of type c.</td>
</tr>
<tr>
<td>-size n[cwbkMG] file uses n units of space</td>
<td></td>
</tr>
<tr>
<td>-perm -mode</td>
<td>File’s permission bits are exactly mode</td>
</tr>
<tr>
<td>-atime n</td>
<td>File was last accessed n*24 hours ago.</td>
</tr>
<tr>
<td>-cmin n</td>
<td>File’s status was last changed n minutes ago.</td>
</tr>
<tr>
<td>-cnewer file</td>
<td>File’s status was last changed more recently than file was modified.</td>
</tr>
<tr>
<td>-ctime n</td>
<td>File’s status was last changed n*24 hours ago.</td>
</tr>
<tr>
<td>-mtime n</td>
<td>File’s data was last modified n*24 hours ago.</td>
</tr>
<tr>
<td>-empty</td>
<td>File is empty and is either a regular file or a directory.</td>
</tr>
</tbody></table>
<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><table>
<thead>
<tr>
<th>Action</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-print</td>
<td>print the full file name on the standard output, followed by a newline</td>
</tr>
<tr>
<td>-print0</td>
<td>print the full file name on the standard output, followed by a null character</td>
</tr>
<tr>
<td>-delete</td>
<td>Delete files;</td>
</tr>
<tr>
<td>-exec command</td>
<td>Execute command;</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="find-by-name-pattern"><a href="#find-by-name-pattern" class="headerlink" title="find by name pattern"></a>find by name pattern</h2><p>use <code>-name</code> option to find by name. This is the most common use case. </p>
<p>find .jpg files in ~&#x2F;Pictures directory hierarchy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find ~/Pictures -name &quot;*.jpg&quot;</span><br></pre></td></tr></table></figure>


<p>You can also use pattern. Find a file starts with digit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -name &quot;[0-9]*.log&quot;</span><br></pre></td></tr></table></figure>

<h2 id="find-by-type"><a href="#find-by-type" class="headerlink" title="find by type"></a>find by type</h2><p>use <code>-type</code> option to find by file type.</p>
<p>File type</p>
<ul>
<li>f - regular file</li>
<li>d - directory</li>
<li>b - block (buffered) special</li>
<li>c - character (unbuffered) special</li>
<li>p - named pipe (FIFO)</li>
<li>l - symbolic link</li>
<li>s - socket</li>
<li>D - door (Solaris)</li>
</ul>
<p>find regular file in current directory hierarchy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -type f</span><br></pre></td></tr></table></figure>

<p>find directory in current directory hierarchy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -type d</span><br></pre></td></tr></table></figure>

<h2 id="find-files-not-matching-a-pattern"><a href="#find-files-not-matching-a-pattern" class="headerlink" title="find files not matching a pattern"></a>find files not matching a pattern</h2><p>use “not” operator to find a list of files not ending with .png file extension</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -not -name &quot;*.png&quot;</span><br></pre></td></tr></table></figure>

<h2 id="find-files-at-certain-level"><a href="#find-files-at-certain-level" class="headerlink" title="find files at certain level"></a>find files at certain level</h2><p>Use <code>-maxdepth levels</code> <code>-mindepth levels</code> to specify the depth. depth 0 means the command line arguments.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -maxdepth 1 -type f -name &quot;*.png&quot;</span><br></pre></td></tr></table></figure>

<h2 id="find-by-size"><a href="#find-by-size" class="headerlink" title="find by size"></a>find by size</h2><p>use <code>-size</code> option to find files by size</p>
<p>find .java files with size greater than 2k in current directory hierarchy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -type f -size 2k -name &quot;*.java&quot;</span><br></pre></td></tr></table></figure>

<h2 id="find-by-permission"><a href="#find-by-permission" class="headerlink" title="find by permission"></a>find by permission</h2><p>There are three variations.</p>
<ul>
<li><strong>-perm mode</strong> File’s permission bits are exactly mode (octal or symbolic).</li>
<li><strong>-perm -mode</strong> All of the permission bits mode are set for the file.</li>
<li><strong>-perm &#x2F;mode</strong> Any of the permission bits mode are set for the file.</li>
</ul>
<p>find files that is readable, writable for owner, but only readable for the group and other users.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -perm 644</span><br></pre></td></tr></table></figure>

<p>find files that is readable, writable for owner. group and other users doesn’t matter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -perm 600</span><br></pre></td></tr></table></figure>

<p>find files that can be read by either owner or group</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -perm /440</span><br></pre></td></tr></table></figure>

<h2 id="find-by-path"><a href="#find-by-path" class="headerlink" title="find by path"></a>find by path</h2><p>use <code>-path</code> option to find file by path.</p>
<p>find .css files in node_modules folder</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name &quot;*.css&quot; -path &quot;**/node_modules/**&quot;</span><br></pre></td></tr></table></figure>

<h2 id="excluding-path"><a href="#excluding-path" class="headerlink" title="excluding path"></a>excluding path</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name &quot;*.css&quot; -not -path  &quot;**/node_modules/**&quot;</span><br></pre></td></tr></table></figure>

<p>To exclude multiple paths</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name &quot;*.css&quot; -not -path  &quot;**/node_modules/**&quot; -not -path &quot;**/.deploy_git/**&quot;</span><br></pre></td></tr></table></figure>

<h2 id="find-by-user"><a href="#find-by-user" class="headerlink" title="find by user"></a>find by user</h2><p>find file owned by root</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -user root </span><br></pre></td></tr></table></figure>

<h2 id="find-by-group"><a href="#find-by-group" class="headerlink" title="find by group"></a>find by group</h2><p>find file owned by root group</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -group root </span><br></pre></td></tr></table></figure>

<h2 id="find-files-accessed-last-week-in-current-directory-hierarchy"><a href="#find-files-accessed-last-week-in-current-directory-hierarchy" class="headerlink" title="find files accessed last week in current directory hierarchy"></a>find files accessed last week in current directory hierarchy</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -atime -7</span><br></pre></td></tr></table></figure>

<h2 id="find-files-modified-in-24-hours-in-current-directory-hierarchy"><a href="#find-files-modified-in-24-hours-in-current-directory-hierarchy" class="headerlink" title="find files modified in 24 hours in current directory hierarchy"></a>find files modified in 24 hours in current directory hierarchy</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -mtime -1</span><br></pre></td></tr></table></figure>

<h2 id="find-files-with-status-change-last-week-in-current-directory-hierarchy"><a href="#find-files-with-status-change-last-week-in-current-directory-hierarchy" class="headerlink" title="find files with status change last week in current directory hierarchy"></a>find files with status change last week in current directory hierarchy</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -ctime -7</span><br></pre></td></tr></table></figure>

<h2 id="find-empty-files-in-current-directory-hierarchy"><a href="#find-empty-files-in-current-directory-hierarchy" class="headerlink" title="find empty files in current directory hierarchy"></a>find empty files in current directory hierarchy</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -empty</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/find">find online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - free</title>
    <url>/Linux/Linux-Command-free/</url>
    <content><![CDATA[<p><code>free</code> - Display amount of free and used memory in the system.</p>
<span id="more"></span>


<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">free [OPTIONS]</span><br></pre></td></tr></table></figure>


<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Common Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-b, –bytes</td>
<td>show output in bytes</td>
</tr>
<tr>
<td>-k, –kibi</td>
<td>show output in kibibytes</td>
</tr>
<tr>
<td>-m, –mebi</td>
<td>show output in mebibytes</td>
</tr>
<tr>
<td>-g, –gibi</td>
<td>show output in gibibytes</td>
</tr>
<tr>
<td>-h, –human</td>
<td>show human-readable output</td>
</tr>
<tr>
<td>-l, –lohi</td>
<td>show detailed low and high memory statistics</td>
</tr>
<tr>
<td>-t, –total</td>
<td>show total for RAM + swap</td>
</tr>
<tr>
<td>-s N, –seconds N</td>
<td>repeat printing every N seconds</td>
</tr>
<tr>
<td>-c N, –count N</td>
<td>repeat printing N times, then exit</td>
</tr>
<tr>
<td>-w, –wide</td>
<td>wide output</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Show-free-and-used-memory"><a href="#Show-free-and-used-memory" class="headerlink" title="Show free and used memory"></a>Show free and used memory</h2><p>Show in Human readable output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          7.7G       5.1G       2.6G       654M       542M       2.1G</span><br><span class="line">-/+ buffers/cache:       2.5G       5.2G</span><br><span class="line">Swap:         2.0G         0B       2.0</span><br></pre></td></tr></table></figure>

<p>Show output in mebibytes</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          7881       5229       2652        663        542       2161</span><br><span class="line">-/+ buffers/cache:       2525       5356</span><br><span class="line">Swap:         2047          0       2047</span><br></pre></td></tr></table></figure>
<h2 id="Show-free-and-used-memory-refresh-every-5sec"><a href="#Show-free-and-used-memory-refresh-every-5sec" class="headerlink" title="Show free and used memory, refresh every 5sec"></a>Show free and used memory, refresh every 5sec</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">free -m -s 5</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/free">free online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - grep</title>
    <url>/Linux/Linux-Command-grep/</url>
    <content><![CDATA[<p><code>grep</code> command, which stands for “global regular expression print,” processes text line by line<br>and prints any lines which match a specified pattern.</p>
<p>To print only the matched part, use <code>-o</code> option</p>
<span id="more"></span>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><p>command options</p>
<table>
<thead>
<tr>
<th>option</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-e <em>PATTERN</em></td>
<td>use <em>PATTERN</em> as the pattern. This can be used to specify multiple search patterns</td>
</tr>
<tr>
<td>-E, –Extended-regexp</td>
<td>Interpret PATTERN as an extended regular expression</td>
</tr>
<tr>
<td>-i, --ignore-case</td>
<td>ignore case in both the PATTERN and input files</td>
</tr>
<tr>
<td>-H</td>
<td>print filename</td>
</tr>
<tr>
<td>-n, --line-number</td>
<td>prefix each line of ouput with 1-based line number</td>
</tr>
<tr>
<td>-R, -r, --recursive</td>
<td>read all files recursively</td>
</tr>
<tr>
<td>-v</td>
<td>invert the matching</td>
</tr>
<tr>
<td>-o, –only-matching</td>
<td>-o print only the matched (non-Empty) parts of a matching line</td>
</tr>
</tbody></table>
<p>for context control</p>
<ul>
<li>-A NUM –&gt; print NUM lines of trailing output context</li>
<li>-B NUM –&gt; print NUM lines of leading output context</li>
<li>-C NUM –&gt; print NUM lines of output context</li>
</ul>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>find “foo” in file and prints lines that contains “foo”. Note that “foo”, “food” and “ofoo” are all matches.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep -i <span class="string">&quot;foo&quot;</span> file1</span><br></pre></td></tr></table></figure>

<p>find “foo” in files and prefix lines with filename and line number</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -inH &quot;foo&quot; words.txt</span><br></pre></td></tr></table></figure>

<p>sample output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">words.txt:1:food</span><br><span class="line">words.txt:3:food</span><br><span class="line">words.txt:4:foo</span><br><span class="line">words.txt:7:ofoo</span><br></pre></td></tr></table></figure>


<h2 id="find-exact-match"><a href="#find-exact-match" class="headerlink" title="find exact match"></a>find exact match</h2><p>The line matches exactly “foo”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &quot;^foo$&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Search-the-words-that-starts-with-‘con’"><a href="#Search-the-words-that-starts-with-‘con’" class="headerlink" title="Search the words that starts with ‘con’"></a>Search the words that starts with ‘con’</h2><p>search for words that start with <code>con</code>. examples are ‘contribution’, ‘control’. Only output the matched part</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat LICENSE-2.0.txts | grep -o &quot;con\w*&quot;</span><br></pre></td></tr></table></figure>

<p>here <code>\w*</code> is used to match any number of characters</p>
<p>Search the words that starts with ‘con’, then 3 characgers and ends with t. Here we need to use -E option to use extended regex.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat LICENSE-2.0.txt  | grep -o -E &quot;con\w&#123;3&#125;t&quot;</span><br></pre></td></tr></table></figure>

<p>sample outputs are <code>content</code> and <code>consist</code></p>
<h2 id="Search-directory-recursively"><a href="#Search-directory-recursively" class="headerlink" title="Search directory recursively"></a>Search directory recursively</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -inr <span class="string">&quot;foo&quot;</span> <span class="built_in">dir</span></span><br></pre></td></tr></table></figure>

<h2 id="Output-with-context"><a href="#Output-with-context" class="headerlink" title="Output with context"></a>Output with context</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -in -C 3 &quot;foo&quot; filename</span><br></pre></td></tr></table></figure>

<h2 id="Search-multiple-patterns"><a href="#Search-multiple-patterns" class="headerlink" title="Search multiple patterns"></a>Search multiple patterns</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -in -E firefox -E chromium filename</span><br></pre></td></tr></table></figure>


<h2 id="Search-pattern-starts-with-hyphen"><a href="#Search-pattern-starts-with-hyphen" class="headerlink" title="Search pattern starts with hyphen(-)"></a>Search pattern starts with hyphen(-)</h2><p>Need to use <strong>-E</strong> option for searching String “-notify”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -in -E -notify filename</span><br></pre></td></tr></table></figure>

<h2 id="ls-directories-in-current-directory"><a href="#ls-directories-in-current-directory" class="headerlink" title="ls directories in current directory"></a>ls directories in current directory</h2><p>use regular expression to match the directories</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l | grep &quot;^d&quot;</span><br></pre></td></tr></table></figure>

<p>Similarly, to list regular files</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l | grep &quot;^-&quot;</span><br></pre></td></tr></table></figure>

<h2 id="ls-non-directories-in-current-directory"><a href="#ls-non-directories-in-current-directory" class="headerlink" title="ls non-directories in current directory"></a>ls non-directories in current directory</h2><p>use <code>-v</code> to invert the results.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l | grep -v &quot;^d&quot;</span><br></pre></td></tr></table></figure>


<h2 id="ls-directories-that-ends-with-‘k’"><a href="#ls-directories-that-ends-with-‘k’" class="headerlink" title="ls directories that ends with ‘k’"></a>ls directories that ends with ‘k’</h2><p>use regular expression to match the directories the ends with ‘k’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l | grep &quot;^d.*k$&quot;</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/grep">grep online man page</a></li>
<li><a href="https://www.computerhope.com/unix/ugrep.htm">Online reference for grep</a></li>
<li><a href="https://www.gnu.org/software/grep/manual/html_node/Usage.html">Grep usage</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/using-grep-regular-expressions-to-search-for-text-patterns-in-linux">using grep regular expressions</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - group commands</title>
    <url>/Linux/Linux-Command-group-commands/</url>
    <content><![CDATA[<p>Commands to create, delete, and modify groups.</p>
<span id="more"></span>
<p>A group is a logical collection of users on a system.</p>
<h2 id="x2F-etc-x2F-group"><a href="#x2F-etc-x2F-group" class="headerlink" title="&#x2F;etc&#x2F;group"></a>&#x2F;etc&#x2F;group</h2><p>execute <code>cat /etc/group</code> to see all groups</p>
<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:x:0:root</span><br><span class="line">bin:x:1:root,bin,daemon</span><br><span class="line">daemon:x:2:root,bin,daemon</span><br><span class="line">sys:x:3:root,bin,adm</span><br><span class="line">adm:x:4:root,adm,daemon</span><br><span class="line">tty:x:5:</span><br><span class="line">disk:x:6:root,adm</span><br><span class="line">lp:x:7:lp</span><br><span class="line">mem:x:8:</span><br><span class="line">kmem:x:9:</span><br><span class="line">wheel:x:10:root</span><br><span class="line">floppy:x:11:root</span><br><span class="line">mail:x:12:mail</span><br><span class="line">news:x:13:news</span><br><span class="line">uucp:x:14:uucp</span><br><span class="line">man:x:15:man</span><br><span class="line">cron:x:16:cron</span><br><span class="line">console:x:17:</span><br><span class="line">audio:x:18:</span><br><span class="line">cdrom:x:19:</span><br><span class="line">dialout:x:20:root</span><br><span class="line">ftp:x:21:</span><br><span class="line">sshd:x:22:</span><br><span class="line">input:x:23:</span><br><span class="line">at:x:25:at</span><br><span class="line">tape:x:26:root</span><br><span class="line">video:x:27:root</span><br><span class="line">netdev:x:28:</span><br><span class="line">readproc:x:30:</span><br><span class="line">squid:x:31:squid</span><br><span class="line">xfs:x:33:xfs</span><br><span class="line">kvm:x:34:kvm</span><br><span class="line">games:x:35:</span><br><span class="line">shadow:x:42:</span><br><span class="line">postgres:x:70:</span><br><span class="line">cdrw:x:80:</span><br><span class="line">usb:x:85:</span><br><span class="line">vpopmail:x:89:</span><br><span class="line">users:x:100:games</span><br><span class="line">ntp:x:123:</span><br><span class="line">nofiles:x:200:</span><br><span class="line">smmsp:x:209:smmsp</span><br><span class="line">locate:x:245:</span><br><span class="line">abuild:x:300:</span><br><span class="line">utmp:x:406:</span><br><span class="line">ping:x:999:</span><br><span class="line">nogroup:x:65533:</span><br><span class="line">nobody:x:65534:</span><br></pre></td></tr></table></figure>

<p>&#x2F;etc&#x2F;group file format</p>
<ol>
<li>Group name</li>
<li>group password here, usually x. The group password is encrypted and stored in file &#x2F;etc&#x2F;gshadow.</li>
<li>GID(Group ID) number</li>
<li>usernames of the group members</li>
</ol>
<h2 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h2><table>
<thead>
<tr>
<th>option</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-g, –gid GID</td>
<td>set GID</td>
</tr>
</tbody></table>
<p>add new group ‘dev’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd dev</span><br></pre></td></tr></table></figure>

<p>To add user jimmy to a group</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod -aG dev jimmy</span><br></pre></td></tr></table></figure>

<h2 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h2><p>Removing the group</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupdel dev</span><br></pre></td></tr></table></figure>


<h2 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h2><p>chagne group’s GID to be 3333</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupmod -g 3333 dev </span><br></pre></td></tr></table></figure>



<p>Reference</p>
<ul>
<li><a href="https://www.ibm.com/support/knowledgecenter/en/ssw_aix_72/com.ibm.aix.security/passwords_etc_passwd_file.htm">Using the &#x2F;etc&#x2F;passwd file</a></li>
<li><a href="https://www.ibm.com/support/knowledgecenter/en/ssw_aix_72/com.ibm.aix.files/group_security.htm">&#x2F;etc&#x2F;group File</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - gzip</title>
    <url>/Linux/Linux-Command-gzip/</url>
    <content><![CDATA[<p><code>gzip</code> - Compress&#x2F;uncompress files with gzip compression. Compression reduces disk usage and transfer time. gzip is commonly used. the file created by gzip has ‘.gz’ extension.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip [OPTION] FILE</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-c –stdout</td>
<td>write output to standard out, keeps original files unchanged</td>
</tr>
<tr>
<td>-d</td>
<td>decompress</td>
</tr>
<tr>
<td>-v</td>
<td>verbose mode</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Compress-a-file-and-replace-original"><a href="#Compress-a-file-and-replace-original" class="headerlink" title="Compress a file and replace original"></a>Compress a file and replace original</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip file1</span><br></pre></td></tr></table></figure>
<p>This will create a compress file and replace the original file</p>
<h2 id="Uncompress-a-file-and-replace-original"><a href="#Uncompress-a-file-and-replace-original" class="headerlink" title="Uncompress a file and replace original"></a>Uncompress a file and replace original</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip -d file1.gz</span><br></pre></td></tr></table></figure>
<p>replace file1.gz with the uncompress file</p>
<h2 id="Compress-a-file-but-keep-original"><a href="#Compress-a-file-but-keep-original" class="headerlink" title="Compress a file but keep original"></a>Compress a file but keep original</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip -cv file1 &gt; output.gz</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/gzip">gzip online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - head</title>
    <url>/Linux/Linux-Command-head/</url>
    <content><![CDATA[<p><code>head</code> - output the first part of files</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head [OPTION] [FILE]...</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Print the first 10 lines of each FILE to standard output. With more than one FILE, precede each with a header giving the file name. </p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-n, –lines&#x3D;K</td>
<td>print the first K lines</td>
</tr>
<tr>
<td>-c, –bytes&#x3D;K</td>
<td>print the first K bytes of each file.</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="show-the-head-of-log1"><a href="#show-the-head-of-log1" class="headerlink" title="show the head of log1"></a>show the head of log1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head log1</span><br></pre></td></tr></table></figure>

<h2 id="show-the-last-10-commands"><a href="#show-the-last-10-commands" class="headerlink" title="show the last 10 commands"></a>show the last 10 commands</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">history | head</span><br></pre></td></tr></table></figure>

<h2 id="show-the-last-5-commands"><a href="#show-the-last-5-commands" class="headerlink" title="show the last 5 commands"></a>show the last 5 commands</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">history | head -n 5</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - hostname</title>
    <url>/Linux/Linux-Command-hostname/</url>
    <content><![CDATA[<p><code>hostname</code> - show or set the system’s host name or domain name</p>
<span id="more"></span>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>display the name of the DNS domain</td>
</tr>
<tr>
<td>-f</td>
<td>display FQDN(Fully Qualified Domain Name)</td>
</tr>
<tr>
<td>-i</td>
<td>display IP address(es) of the host. This works only if the host name can be resolved. Avoid using this option.</td>
</tr>
<tr>
<td>-I</td>
<td>display all network addresses of the host. loopback interface and IPv6 link-local addresses are omitted. Do not make any assumptions about the order of the output.</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Show-host-name"><a href="#Show-host-name" class="headerlink" title="Show host name"></a>Show host name</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>

<h2 id="Show-domain-name"><a href="#Show-domain-name" class="headerlink" title="Show domain name"></a>Show domain name</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname -d</span><br></pre></td></tr></table></figure>

<h2 id="Show-FQDN"><a href="#Show-FQDN" class="headerlink" title="Show FQDN"></a>Show FQDN</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname -f</span><br></pre></td></tr></table></figure>

<h2 id="show-all-ip-address"><a href="#show-all-ip-address" class="headerlink" title="show all ip address"></a>show all ip address</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname -I</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.1.208</span><br></pre></td></tr></table></figure>

<p>To show the ip address, you can use <code>ifconfig</code> command. By default, it display the information for all network interfaces. </p>
<p>You can also show the ip address using the <code>ip addr show</code> command.</p>
<h1 id="Change-current-hostname"><a href="#Change-current-hostname" class="headerlink" title="Change current hostname"></a>Change current hostname</h1><p>Hostname can be changed using hostnamectl command in Ubuntu. </p>
<p>To change hostname to <code>server0</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo hostnamectl set-hostname server0</span><br></pre></td></tr></table></figure>

<p>To view current hostname</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/hostname">hostname online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - id</title>
    <url>/Linux/Linux-Command-id/</url>
    <content><![CDATA[<p><code>id</code> - display current user and group identity.</p>
<span id="more"></span>


<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id [OPTION] [USERNAME]</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-g</td>
<td>print only the effective group ID</td>
</tr>
<tr>
<td>-G</td>
<td>print all group IDs</td>
</tr>
<tr>
<td>-u</td>
<td>print only effective user ID</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Display-current-user-info-and-group-info"><a href="#Display-current-user-info-and-group-info" class="headerlink" title="Display current user info and group info"></a>Display current user info and group info</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id</span><br></pre></td></tr></table></figure>

<h2 id="Display-current-user-id-as-a-number"><a href="#Display-current-user-id-as-a-number" class="headerlink" title="Display current user id as a number"></a>Display current user id as a number</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id -u</span><br></pre></td></tr></table></figure>

<h2 id="Display-current-user’s-group-as-a-number"><a href="#Display-current-user’s-group-as-a-number" class="headerlink" title="Display current user’s group as a number"></a>Display current user’s group as a number</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id -u</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/id">id online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - kill</title>
    <url>/Linux/Linux-Command-kill/</url>
    <content><![CDATA[<p><code>kill</code> - terminate a process by sending a signal.</p>
<span id="more"></span>

<p>The command <code>kill</code> sends the specified signal to the specified process or process group. If no signal is specified, the <strong>TERM</strong>(15) signal is sent.</p>
<p><code>kill</code> command kills a process by its PID. To kill a process by name, use <code>killall</code> command.</p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill [-s signal] pid...</span><br><span class="line">kill -signalnumber pid...</span><br><span class="line">kill -l</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-s <em>signal</em></td>
<td>specify the signal to send, default is TERM</td>
</tr>
<tr>
<td>-p <em>pid…</em></td>
<td>list of processes kill should signal</td>
</tr>
<tr>
<td>-l</td>
<td>to list signal names</td>
</tr>
</tbody></table>
<h1 id="pkill-command"><a href="#pkill-command" class="headerlink" title="pkill command"></a>pkill command</h1><p>If you know the name of the process, you can use <code>pkill [OPTIONS] &lt;PATTERN&gt;</code> to kill all running programs that match with the given name. To kill all python3 process: </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pkill node <span class="comment"># kill all node applications</span></span><br></pre></td></tr></table></figure>


<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="kill-a-process"><a href="#kill-a-process" class="headerlink" title="kill a process"></a>kill a process</h2><p>kill without option will send SIGTERM signal. Use <code>ps aux | grep &lt;search keywork&gt;</code> to get the process id. Then use kill command to kill the process.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill 16575</span><br></pre></td></tr></table></figure>

<h2 id="Send-KILL-signal-to-a-process"><a href="#Send-KILL-signal-to-a-process" class="headerlink" title="Send KILL signal to a process"></a>Send KILL signal to a process</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -9 16575</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -s KILL 16575</span><br></pre></td></tr></table></figure>


<h2 id="List-signal-names"><a href="#List-signal-names" class="headerlink" title="List signal names"></a>List signal names</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -l</span><br></pre></td></tr></table></figure>


<h2 id="To-kill-a-process-by-pid"><a href="#To-kill-a-process-by-pid" class="headerlink" title="To kill a process by pid"></a>To kill a process by pid</h2><p>use <code>ps aux</code> or <code>pgreg</code> command to get the process’s PID.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | grep node</span><br></pre></td></tr></table></figure>

<p>In MacOS, if you only know the port number used by the application, you can get the PID and command using the following command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo lsof -iTCP -sTCP:LISTEN -n -P</span><br></pre></td></tr></table></figure>

<p>With the process id,  You can use <code>kill &lt;pid&gt;</code> to terminate the program. The default sends SIGTERM signal. You can use <code>kill -9 &lt;pid&gt;</code> command to  send SIGKILL to terminate immediately. SIGKILL is hard kill.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 9058</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/kill">kill online man page</a></li>
<li><a href="https://linuxize.com/post/pkill-command-in-linux/">pkill</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - killall</title>
    <url>/Linux/Linux-Command-killall/</url>
    <content><![CDATA[<p><code>killall</code> - Send kill signal to all instances of a process by name (must be exact name)</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">killall [OPTION] name...</span><br><span class="line">killall -l</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-i</td>
<td>interactively ask for confirmation before killing</td>
</tr>
<tr>
<td>-s</td>
<td>send this signal instead of SIGTERM</td>
</tr>
<tr>
<td>-u <em>user</em></td>
<td>kill only processes the specified user owns.</td>
</tr>
<tr>
<td>-v</td>
<td>verbose mode</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="kill-firefox-process"><a href="#kill-firefox-process" class="headerlink" title="kill firefox process"></a>kill firefox process</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">killall firefox</span><br></pre></td></tr></table></figure>

<h2 id="kill-firefox-process-with-prompt"><a href="#kill-firefox-process-with-prompt" class="headerlink" title="kill firefox process with prompt"></a>kill firefox process with prompt</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">killall -i firefox</span><br></pre></td></tr></table></figure>

<h2 id="kill-firefox-with-INT-signal"><a href="#kill-firefox-with-INT-signal" class="headerlink" title="kill firefox with INT signal"></a>kill firefox with INT signal</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">killall -s INT firefox</span><br></pre></td></tr></table></figure>

<h2 id="kill-firefox-with-KILL-signal"><a href="#kill-firefox-with-KILL-signal" class="headerlink" title="kill firefox with KILL signal"></a>kill firefox with KILL signal</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">killall -s KILL firefox</span><br></pre></td></tr></table></figure>


<h2 id="List-signals"><a href="#List-signals" class="headerlink" title="List signals"></a>List signals</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">killall -l</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/killall">killall man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - less</title>
    <url>/Linux/Linux-Command-less/</url>
    <content><![CDATA[<p><code>less</code> - to browse a file one page at a time</p>
<span id="more"></span>

<p>There are many commands you can use when browing a file using <code>less</code>. You can always use <code>less --help</code> to view these commands.</p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less [Option] [FILE]</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-n -N –line-numbers</td>
<td>show line number</td>
</tr>
<tr>
<td>–help</td>
<td>display help</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Moving Command</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>j</td>
<td>next line</td>
</tr>
<tr>
<td>k</td>
<td>prev line</td>
</tr>
<tr>
<td>G</td>
<td>last line</td>
</tr>
<tr>
<td>g</td>
<td>first line</td>
</tr>
<tr>
<td>f, ^F, SPACE</td>
<td>forward one window (or N lines)</td>
</tr>
<tr>
<td>b, ^B</td>
<td>backward one window (or N lines).</td>
</tr>
<tr>
<td>d</td>
<td>scroll forward N lines, default one half of the screen size</td>
</tr>
<tr>
<td>b</td>
<td>scroll backward N lines, default one window</td>
</tr>
<tr>
<td>u</td>
<td>scroll back N lines, default one half of the screen size.</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Search Command</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;pattern</td>
<td>Search forward in the file for the N-th line containing the pattern. N defaults to 1.</td>
</tr>
<tr>
<td>?pattern</td>
<td>search backward in the file for the pattern</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Browse-a-file"><a href="#Browse-a-file" class="headerlink" title="Browse a file"></a>Browse a file</h2><p>browse &#x2F;etc&#x2F;passwd, which contains all the user info.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less /etc/passwd</span><br></pre></td></tr></table></figure>

<p>Browse &#x2F;var&#x2F;log&#x2F;syslog. Use <code>-N</code> option to show Line number.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo less -N /var/log/syslog</span><br></pre></td></tr></table></figure>

<h2 id="show-process-info-using-less"><a href="#show-process-info-using-less" class="headerlink" title="show process info using less"></a>show process info using less</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | less</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/less">less online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - ln</title>
    <url>/Linux/Linux-Command-ln/</url>
    <content><![CDATA[<p><code>ln</code> - create hard link or symbolic(soft) link to files and directories.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln [OPTIONS] TARGET LINK</span><br></pre></td></tr></table></figure>
<p>Create a link to TARGET. For hard links, TARGET must exist in file system. Hard link is not allowed for directory. Symbolic(soft) links can hold arbitrary text. Symbolic(soft) link is like a shortcut in Windows.</p>
<p>If you rename&#x2F;delete the TARGET file, the hard link will continue to point to the file in file system. However, the symbolic link will be useless.</p>
<p>Hard links are only valid within the same file system. Symbolic links can span file systems.</p>
<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Common Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-s, --symbolic</td>
<td>make symbolic links instead of hard links</td>
</tr>
<tr>
<td>-v, --verbose</td>
<td>verbose mode</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Create-a-hard-link-to-a-file"><a href="#Create-a-hard-link-to-a-file" class="headerlink" title="Create a hard link to a file"></a>Create a hard link to a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln file1 link1</span><br></pre></td></tr></table></figure>
<p>file1 and link1 has the same inode number.</p>
<h2 id="Create-a-symbolic-link-to-a-file"><a href="#Create-a-symbolic-link-to-a-file" class="headerlink" title="Create a symbolic link to a file"></a>Create a symbolic link to a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s file1 link2</span><br></pre></td></tr></table></figure>

<p>if you execute <code>ls -li</code> command, the output looks like this. notice the symbolic link has a different inode number than the target file. it also has an arrow to show its target.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13901482 -rw-r--r-- 2 xing xing   11 Jan  4 01:54 file1</span><br><span class="line">13901482 -rw-r--r-- 2 xing xing   11 Jan  4 01:54 link1</span><br><span class="line">13901487 lrwxrwxrwx 1 xing xing    5 Jan  4 02:10 link2 -&gt; file1</span><br></pre></td></tr></table></figure>

<h2 id="Create-a-symbolic-link-to-a-directory"><a href="#Create-a-symbolic-link-to-a-directory" class="headerlink" title="Create a symbolic link to a directory"></a>Create a symbolic link to a directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s ~/Documents/ ~/Desktop/Docs</span><br></pre></td></tr></table></figure>
<p>Create a symbolic link call Docs in ~&#x2F;Desktop. The destination is &#x2F;home&#x2F;username&#x2F;Documents&#x2F;</p>
<h2 id="Force-existing-link-to-point-to-a-new-target"><a href="#Force-existing-link-to-point-to-a-new-target" class="headerlink" title="Force existing link to point to a new target"></a>Force existing link to point to a new target</h2><p>force a existing symbolic(soft) link to point to a new target, dir in this case</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -sf dir link2</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/ln">ln online man page</a></li>
<li><a href="https://medium.com/@wendymayorgasegura/what-is-the-difference-between-a-hard-link-and-a-symbolic-link-8c0493041b62">What is the difference between a hard link and a symbolic link?</a> - by Wendy Segura</li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - locate</title>
    <url>/Linux/Linux-Command-locate/</url>
    <content><![CDATA[<p><code>locate</code> - find files by name</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locate [OPTION]... PATTERN...</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>locate reads one or more databases prepared by updatedb(8) and writes file names matching at least one of the PATTERNs to standard output, one per line. updatedb runs everyday by default, use &#x2F;etc&#x2F;crontab to update its config.</p>
<p>You can manually update the databse by executing <code>updatedb</code> command.</p>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="locate-vim"><a href="#locate-vim" class="headerlink" title="locate vim"></a>locate vim</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locate bin/vim</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/snap/core/5897/usr/bin/vim.tiny</span><br><span class="line">/snap/core/6034/usr/bin/vim.tiny</span><br><span class="line">/snap/core/6130/usr/bin/vim.tiny</span><br><span class="line">/usr/bin/vim</span><br><span class="line">/usr/bin/vim.basic</span><br><span class="line">/usr/bin/vim.tiny</span><br><span class="line">/usr/bin/vimdiff</span><br><span class="line">/usr/bin/vimtutor</span><br></pre></td></tr></table></figure>




<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/locate">locate online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - lsb_release</title>
    <url>/Linux/Linux-Command-lsb-release/</url>
    <content><![CDATA[<p><code>lsb_release</code> v2.0 prints certain LSB (Linux Standard Base) and Distribution information.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsb_release [OPTION]</span><br></pre></td></tr></table></figure>

<p>Another way to get linux version is to print &#x2F;etc&#x2F;os-release file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/os-release</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-h</td>
<td>show this help message and exit</td>
</tr>
<tr>
<td>-v</td>
<td>show LSB modules this system supports</td>
</tr>
<tr>
<td>-i</td>
<td>show distributor ID</td>
</tr>
<tr>
<td>-d</td>
<td>show description of this distribution</td>
</tr>
<tr>
<td>-r</td>
<td>show release number of this distribution</td>
</tr>
<tr>
<td>-c</td>
<td>show code name of this distribution</td>
</tr>
<tr>
<td>-a</td>
<td>show all of the above information</td>
</tr>
<tr>
<td>-s</td>
<td>show requested information in short format</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Show-all-lsb-release-info"><a href="#Show-all-lsb-release-info" class="headerlink" title="Show all lsb release info"></a>Show all lsb release info</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:	Ubuntu</span><br><span class="line">Description:	Ubuntu 18.04.1 LTS</span><br><span class="line">Release:	18.04</span><br><span class="line">Codename:	bionic</span><br></pre></td></tr></table></figure>

<h2 id="Show-distributor-ID"><a href="#Show-distributor-ID" class="headerlink" title="Show distributor ID"></a>Show distributor ID</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsb_release -i</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Distributor ID:	Ubuntu</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/lsb_release">lsb_release online man page</a></li>
<li><a href="https://www.cyberciti.biz/faq/how-to-check-os-version-in-linux-command-line/">How to check os version in Linux command line</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - ls</title>
    <url>/Linux/Linux-Command-ls/</url>
    <content><![CDATA[<p><code>ls</code> - one of the most common commands in Linux. This command lists directory contents. It can also list permissions, owner, size etc. It sorts the file alphabetically by default.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls [Options] [Directory]...</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-l</td>
<td>long format list(permissions, ownership, size and modification date)</td>
</tr>
<tr>
<td>-a</td>
<td>show all entries in the directory including hidden files</td>
</tr>
<tr>
<td>-r, --reverse</td>
<td>reverse order while sorting</td>
</tr>
<tr>
<td>-R, --recursive</td>
<td>list subdirectories recursively</td>
</tr>
<tr>
<td>-t</td>
<td>sort by modification time, newest first</td>
</tr>
<tr>
<td>-h, --human-readable</td>
<td>prints human readable sizes(e.g. 1k 2M 1G). used with -k and or -s</td>
</tr>
<tr>
<td>-F,</td>
<td>append indicator(*&#x2F;&#x3D;&gt;@) to entries</td>
</tr>
<tr>
<td>-1</td>
<td>list one file per line</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="list-files-in-current-directory"><a href="#list-files-in-current-directory" class="headerlink" title="list files in current directory"></a>list files in current directory</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h2 id="list-file-names-in-one-file-per-line"><a href="#list-file-names-in-one-file-per-line" class="headerlink" title="list file names in one file per line"></a>list file names in one file per line</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -1</span><br></pre></td></tr></table></figure>

<h2 id="list-files-start-with-‘a’"><a href="#list-files-start-with-‘a’" class="headerlink" title="list files start with ‘a’"></a>list files start with ‘a’</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l a*</span><br></pre></td></tr></table></figure>

<h2 id="list-files-start-with-‘a’-including-hidden-files"><a href="#list-files-start-with-‘a’-including-hidden-files" class="headerlink" title="list files start with ‘a’ including hidden files"></a>list files start with ‘a’ including hidden files</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l a*</span><br></pre></td></tr></table></figure>

<h2 id="list-the-last-5-files-that-is-modified"><a href="#list-the-last-5-files-that-is-modified" class="headerlink" title="list the last 5 files that is modified"></a>list the last 5 files that is modified</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -lt | head</span><br></pre></td></tr></table></figure>


<h2 id="long-format-list-with-human-readable-units-for-x2F-var-directory"><a href="#long-format-list-with-human-readable-units-for-x2F-var-directory" class="headerlink" title="long format list with human readable units for &#x2F;var directory"></a>long format list with human readable units for &#x2F;var directory</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lh /var</span><br></pre></td></tr></table></figure>



<h2 id="ll"><a href="#ll" class="headerlink" title="ll"></a>ll</h2><p>In many system, <code>ll</code> is the alias of <code>ls -l</code>. In Ubuntu, it is alias to <code>ls -alF</code>. use <code>type ll</code> to check the alias.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/ls">ls man page online</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - mv</title>
    <url>/Linux/Linux-Command-mv/</url>
    <content><![CDATA[<p><code>mv</code> - Move or rename files and directories.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv [Option] SOURCE DEST</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY. if DEST is an existing file, rename the source file. If DEST is an existing directory, move source(s) to DIRECTORY. Note that you are not allowed to move a directory to a file.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-f, –force</td>
<td>do not prompt before overwriting. Be careful when using this option</td>
</tr>
<tr>
<td>-i, –interactive</td>
<td>prompt before overwrite</td>
</tr>
<tr>
<td>-n, –no-clobber</td>
<td>do not override existing file</td>
</tr>
<tr>
<td>-v, –verbose</td>
<td>explain what is being done</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Rename-x2F-move-a-file-x2F-directory"><a href="#Rename-x2F-move-a-file-x2F-directory" class="headerlink" title="Rename&#x2F;move a file&#x2F;directory"></a>Rename&#x2F;move a file&#x2F;directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv -v path/to/oldFileName path/to/newFileName</span><br></pre></td></tr></table></figure>

<h2 id="Override-without-prompt"><a href="#Override-without-prompt" class="headerlink" title="Override without prompt"></a>Override without prompt</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv -f file.txt file1.txt</span><br></pre></td></tr></table></figure>

<h2 id="Prompt-before-overriding"><a href="#Prompt-before-overriding" class="headerlink" title="Prompt before overriding"></a>Prompt before overriding</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv -vi file.txt file1.txt</span><br></pre></td></tr></table></figure>

<h2 id="Move-Multiple-files-to-a-directory-and-show-details"><a href="#Move-Multiple-files-to-a-directory-and-show-details" class="headerlink" title="Move Multiple files to a directory and show details"></a>Move Multiple files to a directory and show details</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv -v file1.txt file2.txt file3.txt dir</span><br></pre></td></tr></table></figure>

<h2 id="Move-everything-in-a-directory-to-another-location"><a href="#Move-everything-in-a-directory-to-another-location" class="headerlink" title="Move everything in a directory to another location"></a>Move everything in a directory to another location</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv -v dir/* .</span><br></pre></td></tr></table></figure>

<h2 id="Rename-a-directory"><a href="#Rename-a-directory" class="headerlink" title="Rename a directory"></a>Rename a directory</h2><p>if dir2 does exist, then dir1 will be renamed to dir2, otherwise dir1 will be moved under dir2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv -v dir1 dir2</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/mv">mv online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - nc</title>
    <url>/Linux/Linux-Command-nc/</url>
    <content><![CDATA[<p><code>nc</code> - Netcat utility</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc [options] host port</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Netcat is one of the most powerful networking tools, security tools, and network monitoring tools. </p>
<p>It can be used for</p>
<ul>
<li>Network debugging tool</li>
<li>Port scan</li>
<li>Port listening</li>
</ul>
<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-l</td>
<td>Listen mode, used to create a server that listens for incoming connections.</td>
</tr>
<tr>
<td>-n</td>
<td>disable DNS lookup to avoid delays</td>
</tr>
<tr>
<td>-n, –no-clobber</td>
<td>do not override existing file</td>
</tr>
<tr>
<td>-v, –verbose</td>
<td>verbose mode, provides more details</td>
</tr>
<tr>
<td>-z</td>
<td>Scans for open ports.</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Check-if-port-is-open"><a href="#Check-if-port-is-open" class="headerlink" title="Check if port is open"></a>Check if port is open</h2><p>check if <code>github.com</code> port 443 is open</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -vz github.com 443</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connection to github.com port 443 [tcp/https] succeeded!</span><br></pre></td></tr></table></figure>

<p>You can also use IP address instead of hostname</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -vz 140.82.112.3 443</span><br></pre></td></tr></table></figure>

<h2 id="Port-Scanning"><a href="#Port-Scanning" class="headerlink" title="Port Scanning"></a>Port Scanning</h2><p>Port scanning is a common technique to discover open ports. It can be considered hostile. Please only use it on your own hosts.</p>
<p>Scan port 1 to 100</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -vz localhost 1-100 2&gt;&amp;1 | grep succeeded</span><br></pre></td></tr></table></figure>

<h2 id="Listen-to-incoming-connection"><a href="#Listen-to-incoming-connection" class="headerlink" title="Listen to incoming connection"></a>Listen to incoming connection</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -l 4000</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/mv">mv online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - mkdir</title>
    <url>/Linux/Linux-Command-mkdir/</url>
    <content><![CDATA[<p><code>mkdir</code> - Creates a directory. Current user must have write permission in the current directory in order to create a new directory.</p>
<span id="more"></span>

<p>Syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir [OPTION]... DIRECTORY...</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-m, --mode&#x3D;MODE</td>
<td>set the file mode</td>
</tr>
<tr>
<td>-v, –verbose</td>
<td>print a message for each created directory</td>
</tr>
<tr>
<td>-p, --parents</td>
<td>create parent directories as needed</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="create-a-directory"><a href="#create-a-directory" class="headerlink" title="create a directory"></a>create a directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir dirName</span><br></pre></td></tr></table></figure>

<h2 id="create-a-directory-and-print-a-message"><a href="#create-a-directory-and-print-a-message" class="headerlink" title="create a directory and print a message"></a>create a directory and print a message</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -v dirName2</span><br></pre></td></tr></table></figure>

<h2 id="create-a-directory-recursively"><a href="#create-a-directory-recursively" class="headerlink" title="create a directory recursively"></a>create a directory recursively</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p dir1/dir2/dir3</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/mkdir">mkdir online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - nl</title>
    <url>/Linux/Linux-Command-nl/</url>
    <content><![CDATA[<p><code>nl</code> - number lines of files.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl [OPTION] [FILE]...</span><br></pre></td></tr></table></figure>


<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Write each FILE to standard output, with line numbers added. The default does not number blank lines.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-b, –body-numbering&#x3D;STYLE</td>
<td>use STYLE for numbering body lines</td>
</tr>
<tr>
<td>-n, –number-format&#x3D;FORMAT</td>
<td>insert line numbers according to FORMAT</td>
</tr>
<tr>
<td>-w, –number-width&#x3D;NUMBER</td>
<td>use NUMBER columns for line numbers</td>
</tr>
</tbody></table>
<p>-b takes a STYLE as parameter. STYLE is one of</p>
<ul>
<li>a - number all lines</li>
<li>t - number only nonempty lines</li>
<li>n - number no lines</li>
</ul>
<p>-n takes a FORMAT as parameter. FORMAT is one of</p>
<ul>
<li>ln - left justified, no leading zeros</li>
<li>rn - right justified, no leading zeros</li>
<li>rz - right justified, leading zeros</li>
</ul>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="number-lines-for-file1"><a href="#number-lines-for-file1" class="headerlink" title="number lines for file1"></a>number lines for file1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl file1</span><br></pre></td></tr></table></figure>

<h2 id="number-lines-including-blank-lines-like-cat-n"><a href="#number-lines-including-blank-lines-like-cat-n" class="headerlink" title="number lines including blank lines(like cat -n)"></a>number lines including blank lines(like cat -n)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl -b a file1</span><br></pre></td></tr></table></figure>

<h2 id="number-lines-for-file1-add-leading-zeros-to-numbers"><a href="#number-lines-for-file1-add-leading-zeros-to-numbers" class="headerlink" title="number lines for file1. add leading zeros to numbers"></a>number lines for file1. add leading zeros to numbers</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl -b a -n rz file1</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">000001	line1</span><br><span class="line">000002	</span><br><span class="line">000003	line3</span><br><span class="line">000004	</span><br><span class="line">000005	</span><br><span class="line">000006	line6</span><br><span class="line">000007	</span><br></pre></td></tr></table></figure>

<h1 id="Set-the-number-width"><a href="#Set-the-number-width" class="headerlink" title="Set the number width"></a>Set the number width</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl -b a -n rz -w 3 file1</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">001	line1</span><br><span class="line">002	</span><br><span class="line">003	line3</span><br><span class="line">004	</span><br><span class="line">005	</span><br><span class="line">006	line6</span><br><span class="line">007	</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/nl">nl online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - ping</title>
    <url>/Linux/Linux-Command-ping/</url>
    <content><![CDATA[<p><code>ping</code> - test if a host is reachable on a network by sending ICMP ECHO_REQUEST to network host.</p>
<span id="more"></span>

<p>By default <code>ping</code> will continue to ping the host until user press Ctrl+C. use <code>-c</code> option to set the number of times.</p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping [OPTIONS] host_name_or_ip</span><br></pre></td></tr></table></figure>


<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Common Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-c count</td>
<td>specify number of times</td>
</tr>
<tr>
<td>-i seconds</td>
<td>sets interval in seconds between request. default is 1 second</td>
</tr>
<tr>
<td>-O</td>
<td>display a message if no response was received</td>
</tr>
<tr>
<td>-s packetsize</td>
<td>Specifies the number of data bytes to be sent. The default is 56, which translates into 64 ICMP data bytes when combined with the 8 bytes of ICMP header data.</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Ping-a-host-5-times"><a href="#Ping-a-host-5-times" class="headerlink" title="Ping a host 5 times"></a>Ping a host 5 times</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping -c 5 yahoo.com</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PING yahoo.com (72.30.35.9) 56(84) bytes of data.</span><br><span class="line">64 bytes from media-router-fp1.prod1.media.vip.bf1.yahoo.com (72.30.35.9): icmp_seq=1 ttl=53 time=31.2 ms</span><br><span class="line">64 bytes from media-router-fp1.prod1.media.vip.bf1.yahoo.com (72.30.35.9): icmp_seq=2 ttl=53 time=85.0 ms</span><br><span class="line">64 bytes from media-router-fp1.prod1.media.vip.bf1.yahoo.com (72.30.35.9): icmp_seq=3 ttl=53 time=311 ms</span><br><span class="line">64 bytes from media-router-fp1.prod1.media.vip.bf1.yahoo.com (72.30.35.9): icmp_seq=4 ttl=53 time=816 ms</span><br><span class="line">64 bytes from media-router-fp1.prod1.media.vip.bf1.yahoo.com (72.30.35.9): icmp_seq=5 ttl=53 time=430 ms</span><br><span class="line"></span><br><span class="line">--- yahoo.com ping statistics ---</span><br><span class="line">5 packets transmitted, 5 received, 0% packet loss, time 4005ms</span><br><span class="line">rtt min/avg/max/mdev = 31.239/335.017/816.803/281.583 ms</span><br></pre></td></tr></table></figure>


<h2 id="Display-a-message-if-no-response-was-received"><a href="#Display-a-message-if-no-response-was-received" class="headerlink" title="Display a message if no response was received"></a>Display a message if no response was received</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping -O microsoft.com</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PING microsoft.com (13.77.161.179) 56(84) bytes of data.</span><br><span class="line">no answer yet for icmp_seq=1</span><br><span class="line">no answer yet for icmp_seq=2</span><br><span class="line">no answer yet for icmp_seq=3</span><br><span class="line"></span><br><span class="line">--- microsoft.com ping statistics ---</span><br><span class="line">4 packets transmitted, 0 received, 100% packet loss, time 3056ms</span><br></pre></td></tr></table></figure>

<h2 id="Ping-a-host-every-2-seconds"><a href="#Ping-a-host-every-2-seconds" class="headerlink" title="Ping a host every 2 seconds"></a>Ping a host every 2 seconds</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping -i 2 yahoo.com</span><br></pre></td></tr></table></figure>

<h2 id="Set-package-size"><a href="#Set-package-size" class="headerlink" title="Set package size"></a>Set package size</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping -s 512 yahoo.com</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/8/ping">ping online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - poweroff, halt and reboot</title>
    <url>/Linux/Linux-Command-poweroff-halt-and-reboot/</url>
    <content><![CDATA[<p><code>poweroff</code>, <code>halt</code> and <code>reboot</code> are commands to stop system hardward.</p>
<span id="more"></span>

<ul>
<li><code>poweroff</code> sends ACPI signal to tell the system to powerdown</li>
<li><code>halt</code> stops CPU function, but leaves it powered on.</li>
<li><code>reboot</code> reboots the system</li>
</ul>
<p>The is also a <code>shutdown</code> command lets you schedule a time to halt, poweroff orreboot the machine.</p>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Poweroff-the-system"><a href="#Poweroff-the-system" class="headerlink" title="Poweroff the system"></a>Poweroff the system</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poweroff</span><br></pre></td></tr></table></figure>
<p>Note: if you are not logged in as root, prefix command with <code>sudo</code></p>
<h2 id="Halt-the-system"><a href="#Halt-the-system" class="headerlink" title="Halt the system"></a>Halt the system</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">halt</span><br></pre></td></tr></table></figure>
<p>Note: if you are not logged in as root, prefix command with <code>sudo</code></p>
<h2 id="Reboot-the-system"><a href="#Reboot-the-system" class="headerlink" title="Reboot the system"></a>Reboot the system</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>Note: if you are not logged in as root, prefix command with <code>sudo</code></p>
<p>Note: Same as <code>shutdown –r now</code></p>
<h2 id="Reboot-in-5-minutes"><a href="#Reboot-in-5-minutes" class="headerlink" title="Reboot in 5 minutes"></a>Reboot in 5 minutes</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown –r 5</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.computerhope.com/unix/uhalt.htm">Linux halt, poweroff and reboot commands</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - ps</title>
    <url>/Linux/Linux-Command-ps/</url>
    <content><![CDATA[<p><code>ps</code> - display current processes. ps is short for Process Status.</p>
<span id="more"></span>

<p><code>ps</code> displays information about a selection of the active processes. If you want a repetitive update of the selection and the displayed information, use top(1) instead.</p>
<p><code>ps</code> has several options</p>
<ol>
<li>Unix Option - may be grouped and must be preceded by a dash</li>
<li>BSD option - may be grouped and must NOT be preceded by a dash</li>
<li>GNU long options, which are preceded by two dashes.</li>
</ol>
<p>By default, <code>ps</code> selects all processes with the same effective user ID (euid&#x3D;EUID) as the current user and associated with the same terminal as the invoker.</p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps [options]</span><br></pre></td></tr></table></figure>


<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>show processes not associated with a terminal</td>
</tr>
<tr>
<td>-A</td>
<td>Select all processes. Identical to -e.</td>
</tr>
<tr>
<td>-l</td>
<td>long format</td>
</tr>
<tr>
<td>-f</td>
<td>full-format listing</td>
</tr>
<tr>
<td>-u <em>userlist</em></td>
<td>select by effective user ID or name</td>
</tr>
<tr>
<td>a</td>
<td>Lift the BSD-style “only yourself” restriction</td>
</tr>
<tr>
<td>u</td>
<td>display user-oriented format</td>
</tr>
<tr>
<td>x</td>
<td>Lift the BSD-style “must have a tty” restriction</td>
</tr>
<tr>
<td>l</td>
<td>display BSD long format</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Display-all-process"><a href="#Display-all-process" class="headerlink" title="Display all process"></a>Display all process</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -e</span><br></pre></td></tr></table></figure>

<p>Sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PID TTY          TIME CMD</span><br><span class="line">  1 ?        00:01:05 systemd</span><br><span class="line">  2 ?        00:00:00 kthreadd</span><br><span class="line">  4 ?        00:00:00 kworker/0:0H</span><br><span class="line">  6 ?        00:00:00 mm_percpu_wq</span><br><span class="line">  7 ?        00:00:00 ksoftirqd/0</span><br></pre></td></tr></table></figure>

<h2 id="Display-all-process-with-full-format"><a href="#Display-all-process-with-full-format" class="headerlink" title="Display all process with full format"></a>Display all process with full format</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">xing      4470  3241  0 Dec25 ?        00:00:00 /usr/bin/zeitgeist-daemon</span><br><span class="line">xing      4477  3241  0 Dec25 ?        00:00:00 /usr/lib/zeitgeist/zeitgeist/zeitgeist-fts</span><br><span class="line">xing      4558  3405  0 Dec25 tty2     00:00:06 /usr/bin/gnome-software --gapplication-service</span><br><span class="line">xing      4559  3405  0 Dec25 tty2     00:00:01 update-notifier</span><br><span class="line">xing      4566  4559  0 Dec25 tty2     00:00:00 [livepatch-notif] &lt;defunct&gt;</span><br><span class="line">root      4584     1  0 Dec25 ?        00:00:02 /usr/lib/fwupd/fwupd</span><br><span class="line">root      4587     2  0 23:14 ?        00:00:00 [kworker/1:1]</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="Display-process-owned-by-root"><a href="#Display-process-owned-by-root" class="headerlink" title="Display process owned by root"></a>Display process owned by root</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -f -u root</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 Dec25 ?        00:01:06 /sbin/init splash</span><br><span class="line">root         2     0  0 Dec25 ?        00:00:00 [kthreadd]</span><br><span class="line">root         4     2  0 Dec25 ?        00:00:00 [kworker/0:0H]</span><br><span class="line">root         6     2  0 Dec25 ?        00:00:00 [mm_percpu_wq]</span><br><span class="line">root         7     2  0 Dec25 ?        00:00:00 [ksoftirqd/0]</span><br><span class="line">root         8     2  0 Dec25 ?        00:01:11 [rcu_sched]</span><br></pre></td></tr></table></figure>

<h2 id="Display-all-process-BSD-syntax"><a href="#Display-all-process-BSD-syntax" class="headerlink" title="Display all process(BSD syntax)"></a>Display all process(BSD syntax)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">systemd+  6459  0.0  0.0  14280  1812 ?        S    Dec25   0:00 nginx: worker p</span><br><span class="line">xing      6824  0.0  0.0  79960  5544 ?        S    Dec25   0:00 /usr/lib/x86_64</span><br><span class="line">xing      7724  0.0  0.0 370520  7428 ?        Sl   Dec25   0:00 /usr/lib/gvfs/g</span><br><span class="line">xing      7756  0.0  0.0 381288  7292 ?        Sl   Dec25   0:00 /usr/lib/gvfs/g</span><br><span class="line">root     10242  0.0  0.0  10792  4840 ?        Sl   Dec25   0:02 containerd-shim</span><br><span class="line">root     10262  0.0  0.0  18508  3472 pts/0    Ss+  Dec25   0:00 /bin/bash</span><br><span class="line">root     11740  0.0  0.1 108092  8244 ?        Ss   09:36   0:00 /usr/sbin/cupsd</span><br><span class="line">root     11741  0.0  0.1 303672 10620 ?        Ssl  09:36   0:00 /usr/sbin/cups-</span><br><span class="line">xing     13042  0.0  1.8 1780472 146144 tty2   Sl+  10:05   0:37 /usr/lib/chromi</span><br><span class="line">xing     13499  0.1  1.5 1751396 124020 tty2   Sl+  10:18   0:48 /usr/lib/chromi</span><br></pre></td></tr></table></figure>

<h2 id="search-for-a-process’s-PID"><a href="#search-for-a-process’s-PID" class="headerlink" title="search for a process’s PID"></a>search for a process’s PID</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | grep node</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu      9058  1.8  4.0 583200 39792 pts/4    Sl+  04:37   0:00 node index.js</span><br><span class="line">ubuntu      9092  0.0  0.0   8160   736 pts/6    S+   04:38   0:00 grep --color=auto node</span><br></pre></td></tr></table></figure>

<p><code>ps aux | grep</code> doesn’t show the header. To show process with header</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | grep -v grep | grep -i -e VSZ -e node</span><br></pre></td></tr></table></figure>

<p>You can also use <code>pgrep process_name</code> command to get the process id.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/ps">ps online man page</a></li>
<li><a href="https://linuxize.com/post/pkill-command-in-linux/">pkill</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - pwd</title>
    <url>/Linux/Linux-Command-pwd/</url>
    <content><![CDATA[<p><code>pwd</code> - Print full name of current&#x2F;working directory.</p>
<span id="more"></span>
<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>option</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-L, --logical</td>
<td>use PWD from environment, even if it contains symlinks</td>
</tr>
<tr>
<td>-P, --physical</td>
<td>physical. avoid all symlinks.</td>
</tr>
</tbody></table>
<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>logical path may contain symlinks. physical path doesn’t have symlinks.</p>
<p>To demonstrate logical and physical path: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="built_in">mkdir</span> directory</span><br><span class="line"><span class="built_in">ln</span> -s directory symlink</span><br><span class="line"><span class="built_in">cd</span> symlink</span><br><span class="line"><span class="built_in">pwd</span> -P <span class="comment"># prints absolute physical path, /tmp/directory (on MacOS, /private/tmp/directory)</span></span><br><span class="line"><span class="built_in">pwd</span> -L <span class="comment"># prints absolute logical path, /tmp/symlink</span></span><br></pre></td></tr></table></figure>

<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="print-current-working-directory"><a href="#print-current-working-directory" class="headerlink" title="print current working directory"></a>print current working directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>

<h2 id="print-current-logical-path"><a href="#print-current-logical-path" class="headerlink" title="print current logical path"></a>print current logical path</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwd -L</span><br></pre></td></tr></table></figure>

<h2 id="print-current-physical-path"><a href="#print-current-physical-path" class="headerlink" title="print current physical path"></a>print current physical path</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwd -P</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/pwd">pwd online man page</a></li>
<li><a href="https://stackoverflow.com/questions/42421949/different-between-absolute-path-and-logical-path">Different between absolute path and logical path</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - rm</title>
    <url>/Linux/Linux-Command-rm/</url>
    <content><![CDATA[<p><code>rm</code> - remove files or directories.</p>
<span id="more"></span>


<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm [OPTION] FILE...</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>rm removes each specified file. By default, it does not remove directories.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-f, –force</td>
<td>ignore nonexistent files, never prompt</td>
</tr>
<tr>
<td>-i</td>
<td>prompt before every removal</td>
</tr>
<tr>
<td>-r, -R, –recursive</td>
<td>remove directories and their contents recursively</td>
</tr>
<tr>
<td>-v, –verbose</td>
<td>explain what is being done</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Remove-file-s"><a href="#Remove-file-s" class="headerlink" title="Remove file(s)"></a>Remove file(s)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm log1</span><br></pre></td></tr></table></figure>

<p>To remove multiple files</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm log1 log2</span><br></pre></td></tr></table></figure>

<h2 id="Prompt-before-removing-a-file"><a href="#Prompt-before-removing-a-file" class="headerlink" title="Prompt before removing a file"></a>Prompt before removing a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -i log1</span><br></pre></td></tr></table></figure>


<h2 id="Remove-a-directory"><a href="#Remove-a-directory" class="headerlink" title="Remove a directory"></a>Remove a directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -r dir</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/rm">rm online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - rmdir</title>
    <url>/Linux/Linux-Command-rmdir/</url>
    <content><![CDATA[<p><code>rmdir</code> - Removes a directory.</p>
<span id="more"></span>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-p, –parent</td>
<td>remove  DIRECTORY  and  its ancestors; e.g., ‘rmdir -p a&#x2F;b&#x2F;c’ is similar to ‘rmdir a&#x2F;b&#x2F;c a&#x2F;b a’</td>
</tr>
<tr>
<td>-v, –verbose</td>
<td>verbose mode. show deleted directory.</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Remove-a-directory"><a href="#Remove-a-directory" class="headerlink" title="Remove a directory"></a>Remove a directory</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmdir dir</span><br></pre></td></tr></table></figure>

<h2 id="Remove"><a href="#Remove" class="headerlink" title="Remove"></a>Remove</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmdir -pv dirA/dirB/dirC</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/rmdir">rmdir online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - sed</title>
    <url>/Linux/Linux-Command-sed/</url>
    <content><![CDATA[<p><code>sed</code> - stream editor for filtering and transforming text. The most well-known use case for <code>sed</code> is substituting text.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed [OPTIONS] commands [input-file]</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-i</td>
<td>edit files in place</td>
</tr>
<tr>
<td>-r, –regexp-extended</td>
<td>use extended regular expressions in the script.</td>
</tr>
<tr>
<td>-n, --quiet, --silent</td>
<td>suppress automatic printing of pattern space</td>
</tr>
</tbody></table>
<h1 id="s-command"><a href="#s-command" class="headerlink" title="s command"></a>s command</h1><p>The s command is the most important in sed. s command syntax is</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/regexp/replacement/flags</span><br></pre></td></tr></table></figure>

<p>The most common flags are</p>
<ul>
<li><strong>g</strong> - apply the replacement to all matches, not just the first.</li>
<li><strong>I</strong> or <strong>i</strong> - case insensitive replace</li>
</ul>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="String-Substitution"><a href="#String-Substitution" class="headerlink" title="String Substitution"></a>String Substitution</h2><p>use <code>s</code> command to substitute string. </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">input=ABCDEFGHI</span><br><span class="line">result=$( <span class="built_in">echo</span> <span class="variable">$input</span> | sed <span class="string">&#x27;s|DEF|---|&#x27;</span>) <span class="comment"># replace &#x27;DEF&#x27; with &#x27;---&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br></pre></td></tr></table></figure>
<p>Note: <code>sed &#39;s|DEF|---|g&#39;</code> is the same as <code>sed &#39;s/DEF/---/g&#39;</code>, ‘g’ flag is for global.</p>
<h2 id="String-Substitution-for-a-file"><a href="#String-Substitution-for-a-file" class="headerlink" title="String Substitution for a file"></a>String Substitution for a file</h2><p>To replace <code>abc</code> with <code>ABC</code> in file1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed &#x27;s/abc/ABC/g&#x27; file1</span><br></pre></td></tr></table></figure>

<p>to save as new file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed &#x27;s/abc/ABC/g&#x27; file1 &gt; file2</span><br></pre></td></tr></table></figure>


<p>To do in place replace <code>abc</code> with <code>def</code> in inputfile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/abc/def/g&#x27; inputfile</span><br></pre></td></tr></table></figure>

<h2 id="Handling-Single-quote"><a href="#Handling-Single-quote" class="headerlink" title="Handling Single quote"></a>Handling Single quote</h2><p>Substitube with single quote. To replace <code>&quot;uid&quot;</code> with <code>&#39;uid&#39;</code> in inputfile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed &quot;s|\&quot;uid\&quot;|&#x27;uid&#x27;|g&quot; inputfile</span><br></pre></td></tr></table></figure>

<h2 id="Example-to-Replace-UUID"><a href="#Example-to-Replace-UUID" class="headerlink" title="Example to Replace UUID"></a>Example to Replace UUID</h2><p>To replace uuid in uuid.json file</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9EF7229B-444E-4062-B843-97527E25660C&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>To replace UUID in this file. We need to use -r option to use extended regular expressions in the script. The complete script is:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sed -r <span class="string">&quot;s|\&quot;uid\&quot;: \&quot;.&#123;36&#125;\&quot;|\&quot;uid\&quot;: \&quot;<span class="subst">$(uuidgen)</span>\&quot;|g&quot;</span> uuid.json</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/sed">sed online man page</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/the-basics-of-using-the-sed-stream-editor-to-manipulate-text-in-linux#basic-usage">sed usage by digitalocean</a></li>
<li><a href="http://www.grymoire.com/Unix/Sed.html">Sed - An Introduction and Tutorial by Bruce Barnett</a></li>
<li><a href="https://www.gnu.org/software/sed/manual/html_node/The-_0022s_0022-Command.html">Sed - The s command</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - sleep</title>
    <url>/Linux/Linux-Command-sleep/</url>
    <content><![CDATA[<p><code>sleep</code> - delay for a specified number of seconds</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sleep seconds</span><br></pre></td></tr></table></figure>

<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>sleep for 3 seconds</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sleep 3</span><br></pre></td></tr></table></figure>

<p>echo ‘DONE’ after 2 seconds</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(sleep 2; echo &#x27;DONE&#x27;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - ss</title>
    <url>/Linux/Linux-Command-ss/</url>
    <content><![CDATA[<p><code>ss</code> - another utility to investigate sockets</p>
<span id="more"></span>

<p>ss is used to dump <em>socket statistics</em>. </p>
<p>Options</p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ss [options] [ FILTER ]</span><br></pre></td></tr></table></figure>

<p>When no option is used ss displays a list of open non-listening sockets (e.g. TCP&#x2F;UNIX&#x2F;UDP) that have established connection.</p>
<table>
<thead>
<tr>
<th>option</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-t, –tcp</td>
<td>Display TCP sockets.</td>
</tr>
<tr>
<td>-u, –udp</td>
<td>Display UDP sockets.</td>
</tr>
<tr>
<td>-l, –listening</td>
<td>Display only listening sockets (these are omitted by default).</td>
</tr>
<tr>
<td>-p, –processes</td>
<td>Show process using socket.</td>
</tr>
<tr>
<td>-n, –numeric</td>
<td>Do not try to resolve service names. Show exact bandwidth values, instead of human-readable.</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><p>Display all TCP sockets.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ss -t -a</span><br></pre></td></tr></table></figure>


<p>Finding the PID of the process using a specific port. Here we use a filter to filter by port number. You can then kill the process using <code>kill</code> command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ss -lpn &#x27;sport = :8080&#x27;</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://man7.org/linux/man-pages/man8/ss.8.html">Linux ss man page</a></li>
<li><a href="https://unix.stackexchange.com/questions/106561/finding-the-pid-of-the-process-using-a-specific-port">Finding the PID of the process using a specific port?</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - sort</title>
    <url>/Linux/Linux-Command-sort/</url>
    <content><![CDATA[<p><code>sort</code> - Sort lines of text files.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sort [OPTIONS] [FILE]...</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Common Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-f, --ignore-case</td>
<td>fold lower case to upper case characters</td>
</tr>
<tr>
<td>-n, --numeric-sort</td>
<td>compare according to string numerical value</td>
</tr>
<tr>
<td>-r, --reverse</td>
<td>reverse the result of comparisons</td>
</tr>
<tr>
<td>-k, –key&#x3D;KEYDEF</td>
<td>sort via a key; KEYDEF gives location and type</td>
</tr>
<tr>
<td>-u, –unique</td>
<td>remove redundent</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Sort-lines-in-a-file"><a href="#Sort-lines-in-a-file" class="headerlink" title="Sort lines in a file"></a>Sort lines in a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sort file1</span><br></pre></td></tr></table></figure>

<p>sample file1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xyz</span><br><span class="line">abcd</span><br><span class="line">ttt</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abcd</span><br><span class="line">ttt</span><br><span class="line">xyz</span><br></pre></td></tr></table></figure>

<h2 id="Sort-lines-in-a-file-desc"><a href="#Sort-lines-in-a-file-desc" class="headerlink" title="Sort lines in a file desc"></a>Sort lines in a file desc</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sort -r file1</span><br></pre></td></tr></table></figure>

<h2 id="find-uniqe-words-and-sort"><a href="#find-uniqe-words-and-sort" class="headerlink" title="find uniqe words and sort"></a>find uniqe words and sort</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat words.txt | sort -u</span><br></pre></td></tr></table></figure>

<h2 id="Show-processes-sorted-by-user-name"><a href="#Show-processes-sorted-by-user-name" class="headerlink" title="Show processes sorted by user name"></a>Show processes sorted by user name</h2><p>use <code>-k 1</code> to sort the processes by first field, which is the user name.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | sort -k 1 | head -n 10</span><br></pre></td></tr></table></figure>

<h2 id="Show-processes-sorted-by-CPU-Usage-desc"><a href="#Show-processes-sorted-by-CPU-Usage-desc" class="headerlink" title="Show processes sorted by CPU Usage desc"></a>Show processes sorted by CPU Usage desc</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | sort -r -k 4 -n | head -n 10</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/sort">sort online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - tail</title>
    <url>/Linux/Linux-Command-tail/</url>
    <content><![CDATA[<p><code>tail</code> - output the last part of files.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail [OPTION] [FILE]...</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Print the last 10 lines of each FILE to standard output. With more than one FILE, precede each with a header giving the file name. With no FILE, or when FILE is -, read standard input.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-c, –bytes&#x3D;K</td>
<td>output the last K bytes;</td>
</tr>
<tr>
<td>-n, –lines&#x3D;K</td>
<td>output the last K lines, instead of the last 10</td>
</tr>
<tr>
<td>-f</td>
<td>output appended data as the file grows</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="show-the-last-lines-of-log1"><a href="#show-the-last-lines-of-log1" class="headerlink" title="show the last lines of log1"></a>show the last lines of log1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail log1</span><br></pre></td></tr></table></figure>


<h2 id="show-last-5-lines-of-log1"><a href="#show-last-5-lines-of-log1" class="headerlink" title="show last 5 lines of log1"></a>show last 5 lines of log1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -n log1</span><br></pre></td></tr></table></figure>

<h2 id="show-the-last-lines-of-log1-live"><a href="#show-the-last-lines-of-log1-live" class="headerlink" title="show the last lines of log1 live"></a>show the last lines of log1 live</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -f log1</span><br></pre></td></tr></table></figure>
<p>use Ctrl+C to exit</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/tail">tail online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - tar</title>
    <url>/Linux/Linux-Command-tar/</url>
    <content><![CDATA[<p><code>tar</code> - Archiving utility. Often combined with a compression method, such as gzip or bzip.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar [OPTION...] [FILE]...</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>create a new archive</td>
</tr>
<tr>
<td>-f</td>
<td>specify archive file</td>
</tr>
<tr>
<td>-t</td>
<td>list</td>
</tr>
<tr>
<td>-x</td>
<td>extract</td>
</tr>
<tr>
<td>–exclude</td>
<td>exclude files, given as a pattern</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Compression Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-z</td>
<td>use gzip</td>
</tr>
<tr>
<td>-j</td>
<td>use bzip2</td>
</tr>
<tr>
<td>-Z</td>
<td>use compress</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Create-archive-from-files"><a href="#Create-archive-from-files" class="headerlink" title="Create archive from files"></a>Create archive from files</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -cvf archive.tar file1 file2 dir1 dir2</span><br></pre></td></tr></table></figure>

<h2 id="Create-gzipped-archive"><a href="#Create-gzipped-archive" class="headerlink" title="Create gzipped archive"></a>Create gzipped archive</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -czvf archive.tar.gz file1 file2 dir1 dir2</span><br></pre></td></tr></table></figure>

<h2 id="List-files-in-archive"><a href="#List-files-in-archive" class="headerlink" title="List files in archive"></a>List files in archive</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -tvf archive.tar</span><br></pre></td></tr></table></figure>

<h2 id="List-files-in-gzipped-archive"><a href="#List-files-in-gzipped-archive" class="headerlink" title="List files in gzipped archive"></a>List files in gzipped archive</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -tzvf archive.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="Extract-files-from-archive"><a href="#Extract-files-from-archive" class="headerlink" title="Extract files from archive"></a>Extract files from archive</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf archive.tar</span><br></pre></td></tr></table></figure>

<h2 id="Extract-files-from-gzipped-archive"><a href="#Extract-files-from-gzipped-archive" class="headerlink" title="Extract files from gzipped archive"></a>Extract files from gzipped archive</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xzvf archive.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="Extract-an-archive-in-a-target-folder"><a href="#Extract-an-archive-in-a-target-folder" class="headerlink" title="Extract an archive in a target folder"></a>Extract an archive in a target folder</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf archive.tar -C dest</span><br></pre></td></tr></table></figure>

<h2 id="Extract-specific-files-an-archive"><a href="#Extract-specific-files-an-archive" class="headerlink" title="Extract specific files an archive"></a>Extract specific files an archive</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf archive.tar file1</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.if-not-true-then-false.com/2010/list-tar-tar-gz-tar-bz2-contents/">List all files in archive.tar</a></li>
<li><a href="https://linux.die.net/man/1/tar">tar online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - su</title>
    <url>/Linux/Linux-Command-su/</url>
    <content><![CDATA[<p><code>su</code> - Switch shell to another user.</p>
<span id="more"></span>

<p>root is a Linux user that has permission to do anything on the system. You can switch to root user using <code>su</code> command. </p>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Switch-to-root"><a href="#Switch-to-root" class="headerlink" title="Switch to root"></a>Switch to root</h2><p>You can use <code>su</code> command to switch to the root user. You will need to enter the root password if password is set. If root haven’t had a password yet, then use <code>passwd</code> command to set the password.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ su</span><br><span class="line"># passwd</span><br><span class="line">Enter new UNIX password:</span><br><span class="line">Retry new UNIX password:</span><br><span class="line">passwd: password updated successfully</span><br></pre></td></tr></table></figure>

<p>After you set the password, exit and execute <code>su</code> or <code>su root</code> command to switch to root user.<br>When you run <code>su</code> without specifying the username, <code>su</code> will switch to root user. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ su</span><br><span class="line">password:</span><br><span class="line"># whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<p>Note that if you don’t have root password, you can still execute commands using <code>sudo</code> if you are in sudo group. You can even become root by running <code>sudo -i</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo -i</span><br><span class="line">[sudo] password for jimmy:</span><br><span class="line"># whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<h2 id="su-with-dash"><a href="#su-with-dash" class="headerlink" title="su with dash"></a>su with dash</h2><p>When you run <code>su</code> with a dash, you switch to root user and use new environment settings. If you don’t include the dash, the shell preserves the current user shell environment settings. Shell environment includes environment variables and working directory.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ su -</span><br><span class="line">Password:</span><br><span class="line"># pwd</span><br><span class="line">/root</span><br></pre></td></tr></table></figure>

<h2 id="switch-to-other-user"><a href="#switch-to-other-user" class="headerlink" title="switch to other user"></a>switch to other user</h2><p>use <code>su username</code> to switch to other user. You will need to enter the user’s password</p>
<p>For example, switch to user jimmy by running <code>su jimmy</code> and enter jimmy’s password.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su jimmy</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/su">su online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - tr</title>
    <url>/Linux/Linux-Command-tr/</url>
    <content><![CDATA[<p><code>tr</code> - Translate characters.</p>
<span id="more"></span>

<p>Translate, squeeze, and&#x2F;or delete characters from standard input, writing to standard output.</p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tr [OPTIONS] SET1 [SET2]</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Common Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>use the complement of SET1</td>
</tr>
<tr>
<td>-d</td>
<td>delete characters in the first set</td>
</tr>
<tr>
<td>-s</td>
<td>replace each input sequence of a repeated character that is listed in SET1 with a single occurrence of that character</td>
</tr>
<tr>
<td>-t</td>
<td>first truncate SET1 to length of SET2</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Replace-characters"><a href="#Replace-characters" class="headerlink" title="Replace characters"></a>Replace characters</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tr &#x27;abc&#x27; &#x27;DEF&#x27; &lt; file1</span><br></pre></td></tr></table></figure>
<p>Here we replace ‘a’ with ‘D’, ‘b’ with ‘E’ and ‘c’ with ‘F’.</p>
<h2 id="Remove-Characters"><a href="#Remove-Characters" class="headerlink" title="Remove Characters"></a>Remove Characters</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tr -d &#x27;ac&#x27; &lt; file1</span><br></pre></td></tr></table></figure>
<p>Remove character ‘a’ and ‘c’</p>
<h2 id="Compress-Characters"><a href="#Compress-Characters" class="headerlink" title="Compress Characters"></a>Compress Characters</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tr -s &#x27;[:blank:]&#x27; &lt; file1</span><br></pre></td></tr></table></figure>
<p>Blanks will be compressed. e.g. ‘ab             cd’ will become ‘ab cd’</p>
<h2 id="Lower-case-to-upper-case"><a href="#Lower-case-to-upper-case" class="headerlink" title="Lower case to upper case"></a>Lower case to upper case</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27; &lt; file1</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/tr">tr online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - type</title>
    <url>/Linux/Linux-Command-type/</url>
    <content><![CDATA[<p><code>type</code>  display information about command type on Linux, whether it is a builtin, alias, or file. </p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type [-afptP] name [name ...]</span><br></pre></td></tr></table></figure>


<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>display all locations containing name</td>
</tr>
<tr>
<td>-t</td>
<td>tells if a command or name is an alias, shell reserved word, function, builtin or disk file.</td>
</tr>
<tr>
<td>-p</td>
<td>path of the file to be execute or nothing if not a file</td>
</tr>
<tr>
<td>-P</td>
<td>force a path for the command even if it is an alias, builtin or function</td>
</tr>
<tr>
<td>–help</td>
<td>display help</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Show-Command-Info"><a href="#Show-Command-Info" class="headerlink" title="Show Command Info"></a>Show Command Info</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> <span class="built_in">cd</span> <span class="comment"># shell builtin</span></span><br><span class="line"><span class="built_in">type</span> ll <span class="comment"># aliased to `ls -alF&#x27;</span></span><br><span class="line"><span class="built_in">type</span> ps <span class="comment"># ps is /bin/ps</span></span><br></pre></td></tr></table></figure>

<h2 id="Show-Command-info-in-one-world"><a href="#Show-Command-info-in-one-world" class="headerlink" title="Show Command info in one world"></a>Show Command info in one world</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> -t <span class="built_in">cd</span> <span class="comment"># builtin</span></span><br><span class="line"><span class="built_in">type</span> -t ll <span class="comment"># alias</span></span><br><span class="line"><span class="built_in">type</span> -t ps <span class="comment"># file</span></span><br></pre></td></tr></table></figure>

<h2 id="Show-all-locations-of-echo"><a href="#Show-all-locations-of-echo" class="headerlink" title="Show all locations of echo"></a>Show all locations of echo</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> -a <span class="built_in">echo</span></span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo is a shell builtin</span><br><span class="line">echo is /bin/echo</span><br></pre></td></tr></table></figure>

<h2 id="Show-the-Path-for-ps-file"><a href="#Show-the-Path-for-ps-file" class="headerlink" title="Show the Path for ps file"></a>Show the Path for <code>ps</code> file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type -p ps</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/ps</span><br></pre></td></tr></table></figure>

<h2 id="Show-the-Path-for-echo-command"><a href="#Show-the-Path-for-echo-command" class="headerlink" title="Show the Path for echo command"></a>Show the Path for echo command</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type -P echo</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/echo</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://sharadchhetri.com/2014/04/04/type-command-display-information-command-type-linux/">type command by Sharad Chhetri</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - user commands</title>
    <url>/Linux/Linux-Command-user-commands/</url>
    <content><![CDATA[<p>Commands to create, delete, and modify users.</p>
<span id="more"></span>


<h1 id="x2F-etc-x2F-passwd-file"><a href="#x2F-etc-x2F-passwd-file" class="headerlink" title="&#x2F;etc&#x2F;passwd file"></a>&#x2F;etc&#x2F;passwd file</h1><p>There are two levels of users <strong>root</strong> and <strong>non-root</strong>. In Linux, user info is stored in <em>&#x2F;etc&#x2F;passwd</em> file. </p>
<p>sample output for <code>cat /etc/passwd</code> command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/ash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">news:x:9:13:news:/usr/lib/news:/sbin/nologin</span><br><span class="line">uucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/bin/sh</span><br><span class="line">man:x:13:15:man:/usr/man:/sbin/nologin</span><br><span class="line">postmaster:x:14:12:postmaster:/var/spool/mail:/sbin/nologin</span><br><span class="line">cron:x:16:16:cron:/var/spool/cron:/sbin/nologin</span><br><span class="line">ftp:x:21:21::/var/lib/ftp:/sbin/nologin</span><br><span class="line">sshd:x:22:22:sshd:/dev/null:/sbin/nologin</span><br><span class="line">at:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologin</span><br><span class="line">squid:x:31:31:Squid:/var/cache/squid:/sbin/nologin</span><br><span class="line">xfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologin</span><br><span class="line">games:x:35:35:games:/usr/games:/sbin/nologin</span><br><span class="line">postgres:x:70:70::/var/lib/postgresql:/bin/sh</span><br><span class="line">cyrus:x:85:12::/usr/cyrus:/sbin/nologin</span><br><span class="line">vpopmail:x:89:89::/var/vpopmail:/sbin/nologin</span><br><span class="line">ntp:x:123:123:NTP:/var/empty:/sbin/nologin</span><br><span class="line">smmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologin</span><br><span class="line">guest:x:405:100:guest:/dev/null:/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>Format of &#x2F;etc&#x2F;passwd</p>
<ol>
<li>User name.</li>
<li>Encrypted password. usually ‘x’ - for security reason, passwords are stored in &#x2F;etc&#x2F;shadow file( only users with root permission can visit)</li>
<li>User ID number (UID)</li>
<li>User’s primary group ID number (GID)</li>
<li>Full name of the user (GECOS)</li>
<li>User home directory.</li>
<li>Login shell.</li>
</ol>
<h1 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h1><p><code>useradd</code> - create a new user or update default new user information. <code>useradd</code> is a privileged command. You need root access to run this command. </p>
<p>Syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd [options] LOGIN</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>option</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-d, –home HOME_DIR</td>
<td>specify new user’s home directory</td>
</tr>
<tr>
<td>-m, –create-home</td>
<td>create user’s home directory if it does not exist</td>
</tr>
<tr>
<td>-g, –gid GROUP</td>
<td>user’s initial login group</td>
</tr>
<tr>
<td>-G, –groups GROUPS</td>
<td>supplementary groups. separated by comma</td>
</tr>
<tr>
<td>-s, –shell SHELL</td>
<td>user’s default shell. default is usally &#x2F;bin&#x2F;sh, you can set it as &#x2F;bin&#x2F;bash if bash is available.</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd -m -G dev,tester -s /bin/bash jimmy</span><br></pre></td></tr></table></figure>

<p>After creating the user, you usually set the password for the newly created user</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd jimmy</span><br></pre></td></tr></table></figure>

<h1 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h1><p>delete a user</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userdel jimmy</span><br></pre></td></tr></table></figure>


<h1 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h1><p>change user’s group and shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod -g root -s bin/sh jimmy</span><br></pre></td></tr></table></figure>

<h1 id="Group-operations"><a href="#Group-operations" class="headerlink" title="Group operations"></a>Group operations</h1><p>To add user jimmy to a group sudo. This will allow jimmy to run privilege commands.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpasswd -a jimmy sudo</span><br></pre></td></tr></table></figure>

<p>Check a user’s group using <code>groups</code> command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ groups jimmy</span><br><span class="line">jimmy : jimmy sudo</span><br></pre></td></tr></table></figure>
<p>You can also use <code>id username</code> to check a user’s groups</p>
<p>To remove a user from a group</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpasswd -d jimmy sudo</span><br></pre></td></tr></table></figure>

<h1 id="Modify-default-shell"><a href="#Modify-default-shell" class="headerlink" title="Modify default shell"></a>Modify default shell</h1><p>You can change the default login shell on the system by change &#x2F;etc&#x2F;default&#x2F;useradd file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br></pre></td></tr></table></figure>

<p>Reference</p>
<ul>
<li><a href="https://www.ibm.com/support/knowledgecenter/en/ssw_aix_72/com.ibm.aix.security/passwords_etc_passwd_file.htm">Using the &#x2F;etc&#x2F;passwd file</a></li>
<li><a href="https://linux.die.net/man/8/useradd">useradd man page</a></li>
<li><a href="https://linux.die.net/man/8/userdel">userdel man page</a></li>
<li><a href="https://linux.die.net/man/8/usermod">usermod man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - uuidgen</title>
    <url>/Linux/Linux-Command-uuidgen/</url>
    <content><![CDATA[<p>uuidgen - create a new UUID value</p>
<span id="more"></span>

<p>The UUID is printed to standard output as a hyphen-punctuated ASCII string of the form: EEF45689-BBE5-4FB6-9E80-41B78F6578E2 (in printf(3) format “%08X-%04X-%04X-%04X-%012X”), unless the -hdr option is given, in which case a fragment of source code is output.</p>
<p>The length of a UUID (Universally Unique Identifier) generated by uuidgen is 36 characters. A UUID is typically represented as a 32-character hexadecimal number, separated by hyphens into five groups </p>
<p>It looks like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</span><br></pre></td></tr></table></figure>
<p>Here, each ‘x’ represents a hexadecimal digit(0-9 or a-f). The hyphens are included for readability and are not part of the hexadecimal value. The total length, including hyphens, is 36 characters.</p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uuid [OPTION]</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-h, –help</td>
<td>Display help and exit</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Generate-a-random-based-UUID"><a href="#Generate-a-random-based-UUID" class="headerlink" title="Generate a random-based UUID"></a>Generate a random-based UUID</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uuidgen</span><br></pre></td></tr></table></figure>
<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">72FFB2C4-78F0-49B6-82B9-3F807C994FFD</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - top</title>
    <url>/Linux/Linux-Command-top/</url>
    <content><![CDATA[<p>top - display dynamic real-time view of the system summary info as well as a list of tasks currently being managed by the Linux kernel.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top [OPTION]</span><br></pre></td></tr></table></figure>


<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-b</td>
<td>batch mode. could be useful for sending output from top to other programs or to a file.</td>
</tr>
<tr>
<td>-d <em>delay</em></td>
<td>update time in seconds</td>
</tr>
<tr>
<td>-n <em>iteration</em></td>
<td>number of iteration before ending</td>
</tr>
<tr>
<td>-u <em>uid or username</em></td>
<td>Monitor only processes with an effective UID or user name matching that given</td>
</tr>
<tr>
<td>-p <em>pid</em></td>
<td>Monitor only processes with specified process IDs.</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Use-top-to-Show-System-Info"><a href="#Use-top-to-Show-System-Info" class="headerlink" title="Use top to Show System Info"></a>Use <code>top</code> to Show System Info</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<img src="/Linux/Linux-Command-top/top.png" class="" title="RSS">


<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>PID</td>
<td>Process Id</td>
</tr>
<tr>
<td>USER</td>
<td>user name</td>
</tr>
<tr>
<td>PR</td>
<td>Priority</td>
</tr>
<tr>
<td>NI</td>
<td>The nice value of the task. A negative nice value means higher priority</td>
</tr>
<tr>
<td>VIRT</td>
<td>Virtual Image(kb)</td>
</tr>
<tr>
<td>RES</td>
<td>Resident size(kb)</td>
</tr>
<tr>
<td>SHR</td>
<td>Shared Mem size(kb)</td>
</tr>
<tr>
<td>S</td>
<td>Process Status.  ‘D’ &#x3D; uninterruptible sleep ‘R’ &#x3D; running ‘S’ &#x3D; sleeping ‘T’ &#x3D; traced or stopped ‘Z’ &#x3D; zombie</td>
</tr>
<tr>
<td>%CPU</td>
<td>CPU usage</td>
</tr>
<tr>
<td>%MEM</td>
<td>Memory usage</td>
</tr>
<tr>
<td>TIME+</td>
<td>CPU Time, hundredths</td>
</tr>
<tr>
<td>COMMAND</td>
<td>Display the command line used to start a task or the name of the associated program.</td>
</tr>
</tbody></table>
<h2 id="Show-root-user’s-process"><a href="#Show-root-user’s-process" class="headerlink" title="Show root user’s process"></a>Show root user’s process</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top -u root</span><br></pre></td></tr></table></figure>

<h2 id="Show-a-process’s-info"><a href="#Show-a-process’s-info" class="headerlink" title="Show a process’s info"></a>Show a process’s info</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top -p 3241</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/top">top online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - touch</title>
    <url>/Linux/Linux-Command-touch/</url>
    <content><![CDATA[<p><code>touch</code> - change file timestamps, or create a file if the file does not exist.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch [OPTION] FILE...</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Update the access and modification times of each FILE to the current time. You can choose to only change the access time and modification time individually.</p>
<p>A FILE argument that does not exist is created empty, unless -c or -h is supplied.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>change only the access time</td>
</tr>
<tr>
<td>-m</td>
<td>change only the modification time</td>
</tr>
<tr>
<td>-c, –no-create</td>
<td>do not create any files</td>
</tr>
<tr>
<td>-d, –date&#x3D;STRING</td>
<td>parse STRING and use it instead of current time</td>
</tr>
<tr>
<td>-t STAMP</td>
<td>use [[CC]YY]MMDDhhmm[.ss] instead of current time</td>
</tr>
<tr>
<td>-r, –reference&#x3D;FILE</td>
<td>use this file’s times instead of current time</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="create-file1-and-file2"><a href="#create-file1-and-file2" class="headerlink" title="create file1 and file2"></a>create file1 and file2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch file1 file2</span><br></pre></td></tr></table></figure>

<h2 id="change-file1’s-time-into-file2’s-time"><a href="#change-file1’s-time-into-file2’s-time" class="headerlink" title="change file1’s time into file2’s time"></a>change file1’s time into file2’s time</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch -r file2 file1</span><br></pre></td></tr></table></figure>

<h2 id="set-date-time-for-a-file"><a href="#set-date-time-for-a-file" class="headerlink" title="set date time for a file"></a>set date time for a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch -t 201812312359.59 file1</span><br></pre></td></tr></table></figure>
<p>set file1’s time to be Dec 31, 2018.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/touch">touch man pages</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - uname</title>
    <url>/Linux/Linux-Command-uname/</url>
    <content><![CDATA[<p><code>uname</code> - short for unix name, print system information. Note: use <code>lsb_release</code> for more info about the distribution.</p>
<span id="more"></span>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>print all information</td>
</tr>
<tr>
<td>-s</td>
<td>print the kernel name</td>
</tr>
<tr>
<td>-n</td>
<td>print network node hostname</td>
</tr>
<tr>
<td>-f</td>
<td>print kernel release</td>
</tr>
<tr>
<td>-v</td>
<td>print kernel version</td>
</tr>
<tr>
<td>-m</td>
<td>print machine hardware name. same as <code>arch</code> command</td>
</tr>
<tr>
<td>-p</td>
<td>print processor type or “unknown”</td>
</tr>
<tr>
<td>-i</td>
<td>print the hardware platform or “unknown”</td>
</tr>
<tr>
<td>-o</td>
<td>print the OS</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="print-kernel-name"><a href="#print-kernel-name" class="headerlink" title="print kernel name"></a>print kernel name</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux</span><br></pre></td></tr></table></figure>

<h2 id="print-hostname"><a href="#print-hostname" class="headerlink" title="print hostname"></a>print hostname</h2><p>this is the same as <code>hostname</code> command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -n</span><br></pre></td></tr></table></figure>

<h2 id="print-machien-hardware-name"><a href="#print-machien-hardware-name" class="headerlink" title="print machien hardware name"></a>print machien hardware name</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -m</span><br></pre></td></tr></table></figure>

<p>This is the same as <code>arch</code> command.</p>
<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x86_64</span><br></pre></td></tr></table></figure>


<h2 id="print-processor-name"><a href="#print-processor-name" class="headerlink" title="print processor name"></a>print processor name</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -p</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x86_64</span><br></pre></td></tr></table></figure>


<h2 id="print-os-name"><a href="#print-os-name" class="headerlink" title="print os name"></a>print os name</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -o</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GNU/Linux</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/uname">uname online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - wc</title>
    <url>/Linux/Linux-Command-wc/</url>
    <content><![CDATA[<p><code>wc</code> - print newline, word, and byte counts for each file</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wc [OPTION] [FILE]...</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Print newline, word, and byte counts for each FILE, and a total line if more than one FILE is specified. With no FILE, or when FILE is -, read standard input.</p>
<h1 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>print byte counts</td>
</tr>
<tr>
<td>-l</td>
<td>print line counts</td>
</tr>
<tr>
<td>-m</td>
<td>print character counts</td>
</tr>
<tr>
<td>-w</td>
<td>print word counts</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="count-bytes-in-a-file"><a href="#count-bytes-in-a-file" class="headerlink" title="count bytes in a file"></a>count bytes in a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wc -c file1</span><br></pre></td></tr></table></figure>

<h2 id="count-words-in-a-file"><a href="#count-words-in-a-file" class="headerlink" title="count words in a file"></a>count words in a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wc -w file1</span><br></pre></td></tr></table></figure>

<h2 id="count-lines-in-a-file"><a href="#count-lines-in-a-file" class="headerlink" title="count lines in a file"></a>count lines in a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wc -l file1</span><br></pre></td></tr></table></figure>

<h2 id="count-characters-in-a-file"><a href="#count-characters-in-a-file" class="headerlink" title="count characters in a file"></a>count characters in a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wc -m file1</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/wc">wc online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - whereis</title>
    <url>/Linux/Linux-Command-whereis/</url>
    <content><![CDATA[<p><code>whereis</code> - locate the binary, source, and manual page files for a command</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis [-bmsu] [-BMS directory... -f] filename...</span><br></pre></td></tr></table></figure>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>whereis locates source&#x2F;binary and manuals sections for specified files. </p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-b</td>
<td>Search only for binaries.</td>
</tr>
<tr>
<td>-m</td>
<td>Search only for manual sections.</td>
</tr>
<tr>
<td>-s</td>
<td>Search only for sources.</td>
</tr>
<tr>
<td>-u</td>
<td>Search for unusual entries.</td>
</tr>
<tr>
<td>-B</td>
<td>set the path where whereis searches for binaries.</td>
</tr>
<tr>
<td>-M</td>
<td>set the path where whereis searches for manual sections.</td>
</tr>
<tr>
<td>-S</td>
<td>set the path where whereis searches for sources.</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="search-for-source-x2F-binary-x2F-manual-for-command-“java”"><a href="#search-for-source-x2F-binary-x2F-manual-for-command-“java”" class="headerlink" title="search for source&#x2F;binary&#x2F;manual for command “java”"></a>search for source&#x2F;binary&#x2F;manual for command “java”</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis java</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java: /usr/bin/java</span><br></pre></td></tr></table></figure>

<h2 id="search-for-files-for-command-“ls”"><a href="#search-for-files-for-command-“ls”" class="headerlink" title="search for files for command “ls”"></a>search for files for command “ls”</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis ls</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls: /bin/ls /usr/share/man/man1/ls.1.gz</span><br></pre></td></tr></table></figure>


<h2 id="search-for-binary-for-command-“ls”"><a href="#search-for-binary-for-command-“ls”" class="headerlink" title="search for binary for command “ls”"></a>search for binary for command “ls”</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis -b ls</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls: /bin/ls</span><br></pre></td></tr></table></figure>

<h2 id="search-for-manual-for-command-“ls”"><a href="#search-for-manual-for-command-“ls”" class="headerlink" title="search for manual for command “ls”"></a>search for manual for command “ls”</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis -m ls</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls: /usr/share/man/man1/ls.1.gz</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/whereis">whereis online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - who</title>
    <url>/Linux/Linux-Command-who/</url>
    <content><![CDATA[<p><code>who</code> - display who is logged in and related data(processes, boot time).</p>
<span id="more"></span>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>same as <strong>-b -d –login -p -r -t -T -u</strong></td>
</tr>
<tr>
<td>-b</td>
<td>time of last system boot</td>
</tr>
<tr>
<td>-d</td>
<td>dead processes</td>
</tr>
<tr>
<td>-l, –login</td>
<td>print system login processes</td>
</tr>
<tr>
<td>-p</td>
<td>print active processes spawned by init</td>
</tr>
<tr>
<td>-r</td>
<td>print current runlevel</td>
</tr>
<tr>
<td>-t</td>
<td>print last system clock change</td>
</tr>
<tr>
<td>-T</td>
<td>add user’s message status as +, - or ?</td>
</tr>
<tr>
<td>-u</td>
<td>list users loggin in</td>
</tr>
<tr>
<td>-H</td>
<td>print line of column headings</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Display-current-user-info-with-Heading"><a href="#Display-current-user-info-with-Heading" class="headerlink" title="Display current user info with Heading"></a>Display current user info with Heading</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">who -H</span><br></pre></td></tr></table></figure>


<h2 id="Display-all-logged-in-users’-info"><a href="#Display-all-logged-in-users’-info" class="headerlink" title="Display all logged in users’ info"></a>Display all logged in users’ info</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">who -a</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/who">who online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - wget</title>
    <url>/Linux/Linux-Command-wget/</url>
    <content><![CDATA[<p><code>wget</code> - download files from the web. It supports HTTP , HTTPS , and FTP protocols, as well as retrieval through HTTP proxies. It is non-interactive.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget [options] [URL]</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Common Option</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-O,  --output-document&#x3D;FILE</td>
<td>write documents to FILE</td>
</tr>
<tr>
<td>-c,  --continue</td>
<td>resume getting a partially-downloaded file</td>
</tr>
<tr>
<td>-T,  --timeout&#x3D;SECONDS</td>
<td>set all timeout values to SECONDS</td>
</tr>
<tr>
<td>-b,  --background</td>
<td>go to background after startup</td>
</tr>
<tr>
<td>-q,  --quiet</td>
<td>turn off wget’s output</td>
</tr>
<tr>
<td>-P prefix</td>
<td>sets directory. default is <strong>.</strong></td>
</tr>
<tr>
<td>–help</td>
<td>display help info</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Download-a-file"><a href="#Download-a-file" class="headerlink" title="Download a file"></a>Download a file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github-media-downloads.s3.amazonaws.com/Octocats.zip</span><br></pre></td></tr></table></figure>
<p>This will download Octocats.zip</p>
<h2 id="Download-a-file-to-a-specific-directory"><a href="#Download-a-file-to-a-specific-directory" class="headerlink" title="Download a file to a specific directory"></a>Download a file to a specific directory</h2><p>Download maven to &#x2F;tmp directory</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://mirror.reverse.net/pub/apache/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz -P /tmp</span><br></pre></td></tr></table></figure>

<h2 id="Display-only"><a href="#Display-only" class="headerlink" title="Display only"></a>Display only</h2><p>use <code>-qO-</code> or <code>-qO -</code> to print the result in standard output only</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -qO- https://jsonplaceholder.typicode.com/users</span><br></pre></td></tr></table></figure>


<h2 id="Specify-file-name"><a href="#Specify-file-name" class="headerlink" title="Specify file name"></a>Specify file name</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O github-octcats.zip https://github-media-downloads.s3.amazonaws.com/Octocats.zip</span><br></pre></td></tr></table></figure>
<p>This will download file and rename file to be github-octcats.zip</p>
<h2 id="Resume-a-partially-downloaded-file"><a href="#Resume-a-partially-downloaded-file" class="headerlink" title="Resume a partially downloaded file"></a>Resume a partially downloaded file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -c https://github-media-downloads.s3.amazonaws.com/Octocats.zip</span><br></pre></td></tr></table></figure>
<p>This will resume a partially downloaded file</p>
<h2 id="Set-timeout"><a href="#Set-timeout" class="headerlink" title="Set timeout"></a>Set timeout</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -T 2 https://github-media-downloads.s3.amazonaws.com/Octocats.zip</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/wget">wget online man page</a></li>
<li><a href="https://www.gnu.org/software/wget/manual/wget.html">GNU Wget Manual</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - xxd</title>
    <url>/Linux/Linux-Command-xxd/</url>
    <content><![CDATA[<p><code>xxd</code> - create hexadecimal representation(hexdump) for a file. use it to view files in binary or hexadecimal.</p>
<span id="more"></span>


<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxd [OPTIONS] inFile [outFile]</span><br></pre></td></tr></table></figure>

<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Common Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-b</td>
<td>switch to bits(binary digits) dump.</td>
</tr>
<tr>
<td>-c cols</td>
<td>format cols octets per line. Default 16</td>
</tr>
<tr>
<td>-p</td>
<td>output in postscript continuous hexdump style. Also known as plain hexdump style</td>
</tr>
<tr>
<td>-r</td>
<td>reverse operation. convert (or patch) hexdump into binary.</td>
</tr>
</tbody></table>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Create-hexdump-for-a-file-and-display"><a href="#Create-hexdump-for-a-file-and-display" class="headerlink" title="Create hexdump for a file and display"></a>Create hexdump for a file and display</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxd file1</span><br></pre></td></tr></table></figure>

<h2 id="Create-hexdump-for-a-file-and-save-it"><a href="#Create-hexdump-for-a-file-and-save-it" class="headerlink" title="Create hexdump for a file and save it"></a>Create hexdump for a file and save it</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxd file1 file1hex</span><br></pre></td></tr></table></figure>

<h2 id="Display-10-columns-octets-per-line"><a href="#Display-10-columns-octets-per-line" class="headerlink" title="Display 10 columns octets per line"></a>Display 10 columns octets per line</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxd -c 10 file1</span><br></pre></td></tr></table></figure>

<h2 id="Display-in-plain-hexdump-style"><a href="#Display-in-plain-hexdump-style" class="headerlink" title="Display in plain hexdump style"></a>Display in plain hexdump style</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxd -p file1 </span><br></pre></td></tr></table></figure>


<h2 id="Display-in-plain-hexdump-style-1"><a href="#Display-in-plain-hexdump-style-1" class="headerlink" title="Display in plain hexdump style"></a>Display in plain hexdump style</h2><p>this will take the hexdump file and revert it into original binary file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxd -r -p hexdump </span><br></pre></td></tr></table></figure>


<h2 id="Create-bits-dump-for-a-file-and-display"><a href="#Create-bits-dump-for-a-file-and-display" class="headerlink" title="Create bits dump for a file and display"></a>Create bits dump for a file and display</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxd -b file1</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/xxd">xxd online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - whoami</title>
    <url>/Linux/Linux-Command-whoami/</url>
    <content><![CDATA[<p><code>whoami</code> - Print the username associated with the current effective user ID.</p>
<span id="more"></span>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - which</title>
    <url>/Linux/Linux-Command-which/</url>
    <content><![CDATA[<p><code>which</code> - Locate a program in the user’s path.</p>
<span id="more"></span>

<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which [options] programname [...]</span><br></pre></td></tr></table></figure>


<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Which takes one or more arguments. For each of its arguments it prints to stdout the full path of the executables that would have been executed when this argument had been entered at the shell prompt.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>–all, -a</td>
<td>Print all matching executables in PATH, not just the first.</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="locate-pwd-command-path"><a href="#locate-pwd-command-path" class="headerlink" title="locate pwd command path"></a>locate pwd command path</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which cd</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/pwd</span><br></pre></td></tr></table></figure>


<h2 id="locate-head-command-path"><a href="#locate-head-command-path" class="headerlink" title="locate head command path"></a>locate head command path</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which head</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/head</span><br></pre></td></tr></table></figure>

<h2 id="show-all-java-command-path"><a href="#show-all-java-command-path" class="headerlink" title="show all java command path"></a>show all java command path</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which -a java</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/which">which online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command - zip</title>
    <url>/Linux/Linux-Command-zip/</url>
    <content><![CDATA[<p><code>zip</code> - Package and compress (archive) files into zip file. You can use <code>zipinfo</code> command to list the files in zip format.</p>
<span id="more"></span>


<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip [OPTION] archive inpath inpath...</span><br></pre></td></tr></table></figure>


<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>recursive</td>
</tr>
<tr>
<td>-x</td>
<td>exclude files</td>
</tr>
<tr>
<td>-d</td>
<td>remove entry from archive</td>
</tr>
<tr>
<td>-q</td>
<td>quiet</td>
</tr>
<tr>
<td>-v</td>
<td>verbose mode or print diagnostic version info</td>
</tr>
</tbody></table>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="create-compressed-archive"><a href="#create-compressed-archive" class="headerlink" title="create compressed archive"></a>create compressed archive</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip -rq compressed.zip *</span><br></pre></td></tr></table></figure>
<p>archive all the files in the current directory and subdirectories to create compressed.zip. Don’t show the output.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip compressed.zip *</span><br></pre></td></tr></table></figure>
<p>archive all the files in the current directory to create compressed.zip, excluding the files in subdirectories.</p>
<p>You can use <code>vi compressed.zip</code> command to view the content of a zip file.</p>
<h2 id="Remove-file-from-archive"><a href="#Remove-file-from-archive" class="headerlink" title="Remove file from archive"></a>Remove file from archive</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip -d compressed.zip file1</span><br></pre></td></tr></table></figure>
<p>will remove file1 from compressed.zip</p>
<h2 id="Unzip-compressed-archive"><a href="#Unzip-compressed-archive" class="headerlink" title="Unzip compressed archive"></a>Unzip compressed archive</h2><p>use <code>unzip</code> command to unzip compressed archive to the current directory.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip compressed.zip</span><br></pre></td></tr></table></figure>

<p>Use <code>-d</code> argument to set an optional directory to which to extract files</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip myapp.zip -d myapp</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://linux.die.net/man/1/zip">zip online man page</a></li>
<li><a href="https://linux.die.net/man/1/unzip">unzip online man page</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Run Command in the Background</title>
    <url>/Linux/Run-Command-in-Background/</url>
    <content><![CDATA[<p>Command executed in the foreground will exit when the terminal is close. To prevent the program from closing, you need to run the command  in the background.</p>
<span id="more"></span>

<p>To run the command in the background, just add ‘&amp;’ at the end of the command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command &amp;</span><br></pre></td></tr></table></figure>

<p>However, when the terminal closes, the command will exit, to prevent the program from closing, append <code>&amp;&gt;/dev/null &amp;</code> at the end. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup command &gt;/dev/null &amp;</span><br></pre></td></tr></table></figure>

<p><code>nohup</code> is short for “No Hangups”. It is a POSIX command to ignore the HUP (hangup) signal. By default nohup creates Nohup.out to output any messages or error. The redirect will prevent nohup from creating a <code>nohup.out</code> file. </p>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
  </entry>
  <entry>
    <title>Linux Commands Series</title>
    <url>/Linux/Linux-Commands-Series/</url>
    <content><![CDATA[<p>This series is for understanding Linux and its commands. </p>
<span id="more"></span>

<h1 id="File-System-Basics"><a href="#File-System-Basics" class="headerlink" title="File System Basics"></a>File System Basics</h1><ul>
<li><strong><a href="/Linux/Linux-Command-Linux-Directory-Structure">Linux Directory Structure</a></strong></li>
<li><strong><a href="/Linux/Linux-Command-file-types/">Linux File Types</a></strong></li>
<li><strong><a href="/Linux/Linux-Command-Linux-file-properties/">Linux File Properties</a></strong></li>
<li><strong><a href="/Linux/Linux-Command-File-Permission/">File Permission</a></strong></li>
</ul>
<h1 id="File-Management-Commands"><a href="#File-Management-Commands" class="headerlink" title="File Management Commands"></a>File Management Commands</h1><ul>
<li><strong><a href="/Linux/Linux-Command-ls">ls</a></strong> - list directory contents</li>
<li><strong><a href="/Linux/Linux-Command-cd">cd</a></strong> - change working directory</li>
<li><strong><a href="/Linux/Linux-Command-pwd">pwd</a></strong> - print working directory</li>
<li><strong><a href="/Linux/Linux-Command-mkdir">mkdir</a></strong> - make directory</li>
<li><strong><a href="/Linux/Linux-Command-rmdir">rmdir</a></strong> - remove directory</li>
<li><strong><a href="/Linux/Linux-Command-mv">mv</a></strong> - move(rename) files</li>
<li><strong><a href="/Linux/Linux-Command-cp">cp</a></strong> - copy files and directories</li>
<li><strong><a href="/Linux/Linux-Command-rm">rm</a></strong> - remove files or directories</li>
<li><strong><a href="/Linux/Linux-Command-touch">touch</a></strong> - create file or change timestamp</li>
<li><strong><a href="/Linux/Linux-Command-file">file</a></strong> - determine file type</li>
<li><strong><a href="/Linux/Linux-Command-ln">ln</a></strong> - create hard links or symbolic links</li>
</ul>
<h1 id="Text-Processing-Commands"><a href="#Text-Processing-Commands" class="headerlink" title="Text Processing Commands"></a>Text Processing Commands</h1><ul>
<li><strong><a href="/Linux/Linux-Command-cat">cat</a></strong> - print files to output</li>
<li><strong><a href="/Linux/Linux-Command-echo">echo</a></strong> - Print text</li>
<li><strong><a href="/Linux/Linux-Command-nl">nl</a></strong> - number lines of files</li>
<li><strong><a href="/Linux/Linux-Command-less">less</a></strong> - view text content one page at a time</li>
<li><strong><a href="/Linux/Linux-Command-head">head</a></strong> - output the first part of files</li>
<li><strong><a href="/Linux/Linux-Command-tail">tail</a></strong> - output the last part of files</li>
<li><strong><a href="/Linux/Linux-Command-grep">grep</a></strong> - print lines matching a pattern</li>
<li><strong><a href="/Linux/Linux-Command-wc">wc</a></strong> - count bytes, words and newlines for files</li>
<li><strong><a href="/Linux/Linux-Command-sort">sort</a></strong>  - Sort lines of text files</li>
<li><strong><a href="/Linux/Linux-Command-tr">tr</a></strong>  - Replace characters</li>
<li><strong><a href="/Linux/Linux-Command-sed">sed</a></strong> - stream editor for filtering and transforming text</li>
<li><strong><a href="/Linux/Linux-Command-awk">awk</a></strong> - powerful text processing utility</li>
<li><strong><a href="/Linux/Linux-Command-xxd">xxd</a></strong> - make hexdump. for displaying file in hex or binary</li>
</ul>
<h1 id="File-Search-Commands"><a href="#File-Search-Commands" class="headerlink" title="File Search Commands"></a>File Search Commands</h1><ul>
<li><strong><a href="/Linux/Linux-Command-which">which</a></strong> - shows path of a command</li>
<li><strong><a href="/Linux/Linux-Command-whereis">whereis</a></strong> - locate the binary, source, and manual page files for a command</li>
<li><strong><a href="/Linux/Linux-Command-locate">locate</a></strong> - find files by name</li>
<li><strong><a href="/Linux/Linux-Command-find">find</a></strong> - search for files in a directory hierarchy</li>
<li><strong><a href="/Linux/Linux-Command-find-with-exec-action">find with exec action</a></strong></li>
<li><strong><a href="/Linux/Linux-Command-find-and-xargs">find and xargs</a></strong></li>
</ul>
<h1 id="user-and-group-commands"><a href="#user-and-group-commands" class="headerlink" title="user and group commands"></a>user and group commands</h1><ul>
<li><strong><a href="/Linux/Linux-Command-who">who</a></strong> - show who is logged on</li>
<li><strong><a href="/Linux/Linux-Command-whoami">whoami</a></strong> - print effective userid</li>
<li><strong><a href="/Linux/Linux-Command-su">su</a></strong> - Switch shell to another user.</li>
<li><strong><a href="/Linux/Linux-Command-id">id</a></strong> - print real and effective user and group IDs</li>
<li><strong><a href="/Linux/Linux-Command-user-commands">user commands</a></strong> - create, delete, and modify users.</li>
<li><strong><a href="/Linux/Linux-Command-group-commands">group commands</a></strong> - create, delete, and modify groups</li>
</ul>
<h1 id="Permission-Commands"><a href="#Permission-Commands" class="headerlink" title="Permission Commands"></a>Permission Commands</h1><ul>
<li><strong><a href="/Linux/Linux-Command-chmod">chmod</a></strong> - change file mode bits.</li>
<li><strong><a href="/Linux/Linux-Command-chown">chown</a></strong> - change file owner and group</li>
<li><strong><a href="/Linux/Linux-Command-chgrp">chgrp</a></strong> - change group ownership for files and directories</li>
</ul>
<h1 id="Archiving-and-Compression-Commands"><a href="#Archiving-and-Compression-Commands" class="headerlink" title="Archiving and Compression Commands"></a>Archiving and Compression Commands</h1><ul>
<li><strong><a href="/Linux/Linux-Command-tar">tar</a></strong>  - Archiving utility</li>
<li><strong><a href="/Linux/Linux-Command-gzip">gzip</a></strong> - Compress&#x2F;uncompress files</li>
<li><strong><a href="/Linux/Linux-Command-zip">zip</a></strong> - Package and compress (archive) files into zip file.</li>
</ul>
<h1 id="Process-and-System-Utility"><a href="#Process-and-System-Utility" class="headerlink" title="Process and System Utility"></a>Process and System Utility</h1><ul>
<li><strong><a href="/Linux/Linux-Command-ps">ps</a></strong> - display current processes. </li>
<li><strong><a href="/Linux/Linux-Command-top">top</a></strong> - display system summary info in real time</li>
<li><strong><a href="/Linux/Linux-Command-kill">kill</a></strong> - terminate a process </li>
<li><strong><a href="/Linux/Linux-Command-killall">killall</a></strong> - terminate a process by name</li>
<li><strong><a href="/Linux/Linux-Command-hostname">hostname</a></strong> - show or set the system’s host name</li>
<li><strong><a href="/Linux/Linux-Command-uname">uname</a></strong> - print system info</li>
<li><strong><a href="/Linux/Linux-Command-lsb-release">lsb_release</a></strong> -  LSB (Linux Standard Base) and Distribution info</li>
<li><strong><a href="/Linux/Linux-Command-lsb-df">df</a></strong> - disk free. report file system disk space usage</li>
<li><strong><a href="/Linux/Linux-Command-free">du</a></strong> - disk usage. list the sizes of a folder and any subfolders</li>
<li><strong><a href="/Linux/Linux-Command-free">free</a></strong> - Display amount of free and used memory in the system.</li>
</ul>
<h1 id="Network-Commands"><a href="#Network-Commands" class="headerlink" title="Network Commands"></a>Network Commands</h1><ul>
<li><strong><a href="/Linux/Linux-Command-ping">ping</a></strong> - test if a host is reachable on a network</li>
</ul>
<h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><ul>
<li><strong><a href="/Linux/Linux-Command-sleep">sleep</a></strong> - sleep command</li>
<li><strong><a href="/Linux/Linux-Command-type">type</a></strong> - show command type</li>
<li><strong><a href="/Linux/Linux-Command-alias">alias</a></strong> - create alias</li>
<li><strong><a href="/Linux/Linux-Command-date">date</a></strong> - display or set system date </li>
<li><strong><a href="/Linux/Linux-Command-poweroff-halt-and-reboot">poweroff, halt and reboot</a></strong></li>
<li><strong><a href="/Linux/Linux-Command-diff">diff</a></strong> - compare files or create patch</li>
<li><strong><a href="/Linux/Linux-Command-wget">wget</a></strong> - download files from the web</li>
<li><strong><a href="/Linux/Linux-Command-curl">curl</a></strong> - transfer data to and from the web or interact with REST API</li>
</ul>
<h1 id="Tools-to-learn-commands"><a href="#Tools-to-learn-commands" class="headerlink" title="Tools to learn commands"></a>Tools to learn commands</h1><ul>
<li><strong><a href="http://man.he.net/">Linux Man Pages Online</a></strong></li>
<li><strong><a href="https://tldr.ostera.io/">tldr - simplified man pages</a></strong></li>
<li><strong><a href="https://www.tutorialspoint.com/unix_commands/index.htm">Tutorialspoint List of Linuxs</a></strong></li>
<li><strong><a href="https://www.computerworld.com/article/2598082/Linux/Linux/Linux/Linux-linux-command-line-cheat-sheet.html">Linux command line cheat sheet</a></strong></li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>I use the following blog entries as reference</p>
<ul>
<li><strong><a href="https://www.cnblogs.com/huchong/tag/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4/">听风-每天学习一个linux命令</a></strong></li>
</ul>
<p>I follow this link to classify Linux commands</p>
<ul>
<li><strong><a href="http://etutorials.org/Linux/Linux+systems/how+linux+works/Appendix+A+Command+Classification/">Appendix A: Command Classification</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>Linux-Command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Package Management in Ubuntu</title>
    <url>/Linux/Ubuntu-APT-Install-Software/</url>
    <content><![CDATA[<p>Lets learn how to manage software application on Ubuntu Linux.</p>
<span id="more"></span>
<p>An <strong>Ubuntu package</strong> is a collection of items(scripts, libraries, text files, manifest, license, etc) that enable you to install a piece of software.</p>
<p>A <strong>package manager</strong> such as APT can manage packages on Ubuntu.</p>
<p>APT requires super-user permissions, as it deals with core aspects of the system, so in Ubuntu you’ll need to preface most commands with “sudo.”</p>
<p>apt command is very similar to apt-get command. apt is introduced to provide a better interface for the end user than apt-get.  It is recommended to use apt. </p>
<h1 id="Update-Packages"><a href="#Update-Packages" class="headerlink" title="Update Packages"></a>Update Packages</h1><p>update list of available packages and their versions, but doesn’t install or upgrade the packages.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<h1 id="Install-Package"><a href="#Install-Package" class="headerlink" title="Install Package"></a>Install Package</h1><p>Example to install tree package</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install tree</span><br></pre></td></tr></table></figure>

<h1 id="List-Packages"><a href="#List-Packages" class="headerlink" title="List Packages"></a>List Packages</h1><p>You can use <code>dpkg -l</code> to list packages that are install. Combine with grep command to search for the package installed.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -l</span><br></pre></td></tr></table></figure>

<h1 id="Remove-Package"><a href="#Remove-Package" class="headerlink" title="Remove Package"></a>Remove Package</h1><p>After you get the package name using <code>dpkg -l</code> command, you can remove the package using <code>apt remove</code> command to remove the package.</p>
<p>To remove tree package</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt remove tree</span><br></pre></td></tr></table></figure>

<p><code>apt remove</code> command removes apackage, but doesn’t remove package configuration file. Use <code>apt purge</code> to remove package and configuration file.</p>
<p>Example: to purge virtualbox pacakges </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt purge tree</span><br></pre></td></tr></table></figure>

<h1 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h1><p>Upgrade the installed packages on Ubuntu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt upgrade</span><br></pre></td></tr></table></figure>

<p>full upgrade</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt full-upgrade</span><br></pre></td></tr></table></figure>

<p>upgrade only one package</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt upgrade &lt;package_name&gt;...</span><br></pre></td></tr></table></figure>

<h1 id="Search-for-Package"><a href="#Search-for-Package" class="headerlink" title="Search for Package"></a>Search for Package</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-cache search </span><br></pre></td></tr></table></figure>

<p>Example to serach virtualbox package</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-cache search virtualbox-6.0</span><br></pre></td></tr></table></figure>

<p>You can serach pacakge online using <a href="https://packages.ubuntu.com/">https://packages.ubuntu.com/</a></p>
<h1 id="Clean-the-Cahce"><a href="#Clean-the-Cahce" class="headerlink" title="Clean the Cahce"></a>Clean the Cahce</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt clean</span><br></pre></td></tr></table></figure>

<h1 id="Check-what’s-Installed"><a href="#Check-what’s-Installed" class="headerlink" title="Check what’s Installed"></a>Check what’s Installed</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dpkg -l</span><br></pre></td></tr></table></figure>

<p>You can use grep to find if a package is installed </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dpkg -l | grep tree</span><br></pre></td></tr></table></figure>

<h1 id="Adding-Repository"><a href="#Adding-Repository" class="headerlink" title="Adding Repository"></a>Adding Repository</h1><p>When you use <code>apt</code> to install packages, the packages are downloaded from one or more apt software repositories. </p>
<p>Ubuntu stores software repositories are in <code>/etc/apt/sources.list</code> file or individual files under <code>/etc/apt/sources.list.d/</code> directory.</p>
<p>you can add respository to <code>/etc/apt/sources.list</code> directly</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>Here is a sample repository entry in sources.list</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://us.archive.ubuntu.com/ubuntu/ focal universe</span><br><span class="line">deb-src http://us.archive.ubuntu.com/ubuntu/ focal universe</span><br></pre></td></tr></table></figure>

<p>Note that</p>
<ul>
<li>deb means the repository contains binaries or precompiled packages. </li>
<li>deb-src means the repository contains source code of the packages. Useful for developers.</li>
<li>‘focal’ is the release name or version of your distribution.</li>
<li>‘universe’ means Community-maintained free and open-source software.</li>
</ul>
<p>If you don’t want to edit sources.list directly, you can use <code>add-apt-repository</code> to add repository. Docker installation example</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https:<span class="comment">//download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure>


<p>To learn more about Respositories, see</p>
<ul>
<li><a href="https://help.ubuntu.com/community/Repositories/Ubuntu">What are Repositories?</a></li>
<li><a href="https://help.ubuntu.com/community/Repositories/CommandLine">Repositories&#x2F;CommandLine</a></li>
</ul>
<h1 id="Snap"><a href="#Snap" class="headerlink" title="Snap"></a>Snap</h1><p>Snap is a software packaging and deployment system developed by Canonical for the operating systems that use the Linux kernel.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snap install gedit</span><br></pre></td></tr></table></figure>

<p>list packages installed by snap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snap list</span><br></pre></td></tr></table></figure>

<p>remove a snap package</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snap remove gedit</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Stop password prompt in Ubuntu</title>
    <url>/Linux/Ubuntu-password-prompt/</url>
    <content><![CDATA[<p>Password prompt can be annoying. However, there is a quick way to stop it for all.</p>
<span id="more"></span>

<p>open &#x2F;etc&#x2F;sudoers file</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>change this line</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%sudo  ALL=(ALL) ALL</span><br></pre></td></tr></table></figure>

<p>into</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%sudo  ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>

<p>to allow assuming any group as well as any user, change the following line</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%sudo  ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>

<p>into</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%sudo  ALL=(ALL:ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>UFW Command</title>
    <url>/Linux/Ubuntu-ufw-Commmand/</url>
    <content><![CDATA[<p>The default firewall configuration tool for Ubuntu is <strong>ufw</strong>. ufw allows users to easily configure firewall rules.</p>
<span id="more"></span>
<p>To see the manual</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">man ufw</span><br></pre></td></tr></table></figure>

<h1 id="Allow"><a href="#Allow" class="headerlink" title="Allow"></a>Allow</h1><p>syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw allow &lt;port&gt;/&lt;optional: protocol&gt;</span><br></pre></td></tr></table></figure>

<p>Example to allow ssh traffic</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw allow ssh</span><br></pre></td></tr></table></figure>

<p>Example to allow tcp traffic on port 53</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 53/tcp</span><br></pre></td></tr></table></figure>

<p>allow from subnet networks</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ufw allow from 10.0.0.0/8</span><br><span class="line">ufw allow from 172.16.0.0/12</span><br><span class="line">ufw allow from 192.168.0.0/16</span><br></pre></td></tr></table></figure>

<h1 id="Deny"><a href="#Deny" class="headerlink" title="Deny"></a>Deny</h1><p>Example to deny a port </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw deny 53</span><br></pre></td></tr></table></figure>

<h1 id="Enable-and-Disable-ufw"><a href="#Enable-and-Disable-ufw" class="headerlink" title="Enable and Disable ufw"></a>Enable and Disable ufw</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ufw disable</span><br><span class="line">ufw enable</span><br></pre></td></tr></table></figure>

<h1 id="Reload"><a href="#Reload" class="headerlink" title="Reload"></a>Reload</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ufw reload</span><br></pre></td></tr></table></figure>

<h1 id="Check-status"><a href="#Check-status" class="headerlink" title="Check status"></a>Check status</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ufw status</span><br></pre></td></tr></table></figure>

<p>sample output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Status: active</span><br><span class="line"></span><br><span class="line">To                         Action  From</span><br><span class="line">--                         ------  ----</span><br><span class="line">22:tcp                     DENY    192.168.0.1</span><br><span class="line">22:udp                     DENY    192.168.0.1</span><br><span class="line">22:tcp                     DENY    192.168.0.7</span><br><span class="line">22:udp                     DENY    192.168.0.7</span><br><span class="line">22:tcp                     ALLOW   192.168.0.0/24</span><br><span class="line">22:udp                     ALLOW   192.168.0.0/24</span><br></pre></td></tr></table></figure>

<p>check status and show rule number</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ufw status numbered</span><br></pre></td></tr></table></figure>

<h1 id="Delete-Rule-by-Number"><a href="#Delete-Rule-by-Number" class="headerlink" title="Delete Rule by Number"></a>Delete Rule by Number</h1><p>To delete a rule, you need to fire use <code>ufw status numbered</code> command to get the rule number and then delete using <code>ufw delete</code> command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ufw delete 3</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://help.ubuntu.com/community/UFW">Ubuntu UFW command introduction and syntax</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Vagrant Introduction</title>
    <url>/Linux/Vagrant/</url>
    <content><![CDATA[<p><a href="https://www.vagrantup.com/">Vagrant</a> is a command line utility for managing the lifecycle of virtual machines.</p>
<span id="more"></span>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>Vagrant can run on top of VirtualBox. You need to install VirtualBox first. go to <a href="https://www.virtualbox.org/wiki/Linux_Downloads">https://www.virtualbox.org/wiki/Linux_Downloads</a> and Install VirtualBox first. </p>
<p>Download Vagrant package to Install in Ubuntu</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -O https://releases.hashicorp.com/vagrant/2.2.14/vagrant_2.2.14_x86_64.deb</span><br></pre></td></tr></table></figure>

<p>Once <code>.dev</code> file is downloaded, install it</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install ./vagrant_2.2.14_x86_64.deb</span><br></pre></td></tr></table></figure>

<p>To verify the installation is successful</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant --version</span><br></pre></td></tr></table></figure>

<h1 id="Start-a-Virtual-Machine"><a href="#Start-a-Virtual-Machine" class="headerlink" title="Start a Virtual Machine"></a>Start a Virtual Machine</h1><p>Create a directory and cd into the directory</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> vagrant-project &amp;&amp; <span class="built_in">cd</span> vagrant-project</span><br></pre></td></tr></table></figure>

<p>To start a vagrant virtual machine, you need to first set the box we want to use. <strong>Boxes</strong> are the package format for Vagrant environments. A box can be used by anyone on any platform that Vagrant supports to bring up an identical working environment. There are many boxes available. You can search for the boxes in  <a href="https://app.vagrantup.com/">https://app.vagrantup.com/</a>.</p>
<p>Initialize a new Vagrantfile and specify the box you want to you.  In this example, we will use ubuntu&#x2F;bionic64 box.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant init ubuntu/bionic64</span><br></pre></td></tr></table></figure>

<p>The generated Vagrantfile contains a lot of comments to help you configure the Vagrant file. Without the comments, the Vagrantfile looks like this</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Vagrant.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> |<span class="params">config</span>|</span><br><span class="line">  config.vm.box = <span class="string">&quot;ubuntu/bionic64&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>Run <code>vagrant up</code> to create the virtual machine</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure>

<p>Output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bringing machine &#x27;default&#x27; up with &#x27;virtualbox&#x27; provider...</span><br><span class="line">==&gt; default: Importing base box &#x27;ubuntu/bionic64&#x27;...</span><br><span class="line">==&gt; default: Matching MAC address for NAT networking...</span><br><span class="line">==&gt; default: Checking if box &#x27;ubuntu/bionic64&#x27; version &#x27;20210305.0.0&#x27; is up to date...</span><br></pre></td></tr></table></figure>

<p>To ssh into the newly created machine</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant ssh</span><br></pre></td></tr></table></figure>

<p>To stop the vagrant machine</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant halt</span><br></pre></td></tr></table></figure>

<p>To stop and delete all traces of the vagrant machine</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant destroy</span><br></pre></td></tr></table></figure>

<h1 id="Synced-Folders"><a href="#Synced-Folders" class="headerlink" title="Synced Folders"></a>Synced Folders</h1><p>You can sync a folder on the host machine to the guest machine. By default, Vagrant share the project directory to <code>/vagrant</code> on the guest machine. You can add more share directory using <code>synced_folder</code> method.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vagrant.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  config.vm.box = <span class="string">&quot;ubuntu/bionic64&quot;</span></span><br><span class="line">  config.vm.synced_folder <span class="string">&quot;../data&quot;</span>, <span class="string">&quot;/vagrant_data&quot;</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h1 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h1><p>Vagrant allows various networking options to access the guest machine from host machine.</p>
<h2 id="Port-Forwarding"><a href="#Port-Forwarding" class="headerlink" title="Port Forwarding"></a>Port Forwarding</h2><p>In the example below. Access to <a href="http://localhost:8080/">h</a>ost machine’s port 8080 will forward to  port 80 of the guest machine. Note that this allows public access.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config.vm.network <span class="string">&quot;forwarded_port&quot;</span>, guest: 80, host: 8080</span><br></pre></td></tr></table></figure>

<p>Here is another example of port forwarding but only allow access from host machine.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config.vm.network <span class="string">&quot;forwarded_port&quot;</span>, guest: 80, host: 8080, host_ip: <span class="string">&quot;127.0.0.1&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Private-Network"><a href="#Private-Network" class="headerlink" title="Private Network"></a>Private Network</h2><p>Create a private network. Only host can access the guest machine using this specific IP.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config.vm.network <span class="string">&quot;private_network&quot;</span>, ip: <span class="string">&quot;192.168.33.10&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Public-Network"><a href="#Public-Network" class="headerlink" title="Public Network"></a>Public Network</h2><p>Create a public network to allow public access. You can ssh into the guest machine and then use <code>ifconfig</code> to get the public IP address of the guest machine.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config.vm.network <span class="string">&quot;public_network&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="Provisioning"><a href="#Provisioning" class="headerlink" title="Provisioning"></a>Provisioning</h1><p>Provisioners in Vagrant allow you to automatically install software, alter configurations, and more. Provisioning automates the tedious process of software installation so you can quickly start working once the virtual machine is up and running.  </p>
<p>Provisioning happends when</p>
<ul>
<li><code>vagrant up</code> command is executed to create the environment.</li>
<li><code>vagrant provision</code> is used on a running environment.</li>
<li><code>vagran reload --provision</code> is called to reload the environment.</li>
</ul>
<p>You can provision using shell script. Here is the example to do apt update and install apache2 packages. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vagrant.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  config.vm.box = <span class="string">&quot;ubuntu/bionic64&quot;</span></span><br><span class="line"></span><br><span class="line">  config.vm.provision <span class="string">&quot;shell&quot;</span>, inline: &lt;&lt;-<span class="string">SHELL</span></span><br><span class="line"><span class="string">    apt-get update</span></span><br><span class="line"><span class="string">    apt-get install -y apache2</span></span><br><span class="line"><span class="string">  SHELL</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>Each provisioner has a type. the above configuration use <code>&quot;shell&quot;</code> as the provider. You can also use ansible, Chef, Puppet.</p>
<p>Example: Vagrantfile with Ansible provisioner</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Vagrant.configure(&quot;2&quot;)</span> <span class="string">do</span> <span class="string">|config|</span></span><br><span class="line">  <span class="string">config.vm.box</span> <span class="string">=</span> <span class="string">&quot;ubuntu/bionic64&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">config.vm.provision</span> <span class="string">&quot;ansible&quot;</span> <span class="string">do</span> <span class="string">|ansible|</span></span><br><span class="line">    <span class="string">ansible.playbook</span> <span class="string">=</span> <span class="string">&quot;playbook.yml&quot;</span></span><br><span class="line">  <span class="string">end</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure>

<p>playbook.yml - A simple playbook that installs zip and nginx package</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">  <span class="attr">become_method:</span> <span class="string">sudo</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Update</span> <span class="string">OS</span></span><br><span class="line">    <span class="attr">package:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">      <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Basic</span> <span class="string">packages</span></span><br><span class="line">    <span class="attr">package:</span> </span><br><span class="line">      <span class="attr">name:</span> [<span class="string">zip</span>, <span class="string">nginx</span>]</span><br></pre></td></tr></table></figure>

<h1 id="Vagrant-box-Commands"><a href="#Vagrant-box-Commands" class="headerlink" title="Vagrant box Commands"></a>Vagrant box Commands</h1><p>vagrant downloads boxes to spin up vagrant environment. If you have too many boxes, it will occupy a lot of disk space. You may need to remove the boxes you don’t need.</p>
<p>You use <code>vagrant box</code> command to manage boxes.</p>
<p>Add a box, use –insecure flag if you get certificate error</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vagrant box add ubuntu/focal64 --insecure</span><br></pre></td></tr></table></figure>

<p>To list vagrant boxes</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vagrant box list</span><br></pre></td></tr></table></figure>

<p>Remove a vagrant box</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vagrant box remove &lt;name&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Authorization Configuration</title>
    <url>/SpringSecurity/Spring-Security-Authorization-Configuration/</url>
    <content><![CDATA[<p>Authorization Configuration</p>
<span id="more"></span>
<h1 id="Sample-Authorization-Configuration"><a href="#Sample-Authorization-Configuration" class="headerlink" title="Sample Authorization Configuration"></a>Sample Authorization Configuration</h1><p>Here is a sample Authorization configuration:</p>
<p>SecurityConfiguration.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.factory.PasswordEncoderFactories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/&quot;</span>,  <span class="string">&quot;/static/**&quot;</span>).permitAll()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/signup&quot;</span>,  <span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/admin/login&quot;</span>, <span class="string">&quot;/about&quot;</span>).permitAll()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/admin/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ADMIN&#x27;)&quot;</span>)</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/user/**&quot;</span>).hasAnyRole(<span class="string">&quot;USER&quot;</span>, <span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                .anyRequest().denyAll()</span><br><span class="line">            .and()</span><br><span class="line">                .formLogin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>There are two users configured, ‘user’ with ‘USER’ Role and ‘admin’ with ‘ADMIN’ Role</li>
<li>URLs with pattern “&#x2F;“, “&#x2F;static&#x2F;**”, “&#x2F;signup”,  “&#x2F;login”, “&#x2F;admin&#x2F;login”, “&#x2F;about” are all publicly accessible</li>
<li>You need to have role ‘ADMIN’ to access URLs with pattern “&#x2F;admin&#x2F;**”. Here <code>access</code> acceps Spel Expression as parameter</li>
<li>You need to have role ‘USER’ to access URLs with pattern “&#x2F;user&#x2F;**”</li>
</ul>
<p>You can also use antMatchers method, however, mvcMatchers method is consider more secured because it is more relaxed when it comes to pattern match</p>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Authentication Process</title>
    <url>/SpringSecurity/Spring-Security-Authentication-Process/</url>
    <content><![CDATA[<p>Authentication Process</p>
<span id="more"></span>

<h1 id="Authentication-Process-The-Big-Picture"><a href="#Authentication-Process-The-Big-Picture" class="headerlink" title="Authentication Process - The Big Picture"></a>Authentication Process - The Big Picture</h1><img src="Authentication-Process.png" />


<h1 id="Authentication-Filter"><a href="#Authentication-Filter" class="headerlink" title="Authentication Filter"></a>Authentication Filter</h1><p>Authentication filter usually extends  <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/AbstractAuthenticationProcessingFilter.html">AbstractAuthenticationProcessingFilter</a>  class.</p>
<p>Example Authentication Filters are</p>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.html">UsernamePasswordAuthenticationFilter</a></li>
<li>CasAuthenticationFilter</li>
<li>OAuth2LoginAuthenticationFilter</li>
<li>OpenIDAuthenticationFilter</li>
<li>Saml2WebSsoAuthenticationFilter</li>
</ul>
<p>Authentication Filter’s basic responsibility</p>
<ol>
<li>Authentication Filter creates Authentication from the user Request. For example, UsernamePasswordAuthenticationFilter creates UsernamePasswordAuthenticationToken</li>
<li>Authentication Filter delegates the work to AuthenticationManager</li>
<li>If authentication is success, then set the Authetnication on the SecurityContextHolder</li>
</ol>
<h1 id="AuthenticationManager"><a href="#AuthenticationManager" class="headerlink" title="AuthenticationManager"></a>AuthenticationManager</h1><ul>
<li><strong>AuthenticationManager</strong> is one of the most important class in Spring Security. </li>
<li>Responsible for processing Authentication request and returns a fully populated Authentication object.</li>
<li>AuthenticationManager is an interface, the most common implementation is <strong><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#servlet-authentication-providermanager">ProviderManager</a></strong>.  ProviderManager delegates to a List of AuthenticationProviders.</li>
<li>You don’t usually work with AuthenticationManager directly, you use AuthenticationManagerBuilder to create it.</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#servlet-authentication-authenticationmanager">Spring Security Reference on AuthenticationManager</a></li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/authentication/AuthenticationManager.html">java doc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/authentication/AuthenticationManager.java">source code</a></li>
</ul>
<p>AuthenticationManager Interface source code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationManager</span> &#123;</span><br><span class="line">    Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span></span><br><span class="line">		<span class="keyword">throws</span> AuthenticationException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>authenticate</code> method Attempts to authenticate the passed Authentication argument</p>
<ul>
<li>returning a fully populated Authentication object (including granted authorities, authenticated&#x3D;true) if successful. </li>
<li>if input request is not valid, throw AuthenticationException</li>
<li>reutrns null if can’t decide</li>
</ul>
<h2 id="ProviderManager"><a href="#ProviderManager" class="headerlink" title="ProviderManager"></a>ProviderManager</h2><p><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#servlet-authentication-providermanager">ProviderManager</a></p>
<blockquote>
<p>Iterates an Authentication request through a list of <a href="https://docs.spring.io/spring-security/site/docs/5.7.2/api/org/springframework/security/authentication/AuthenticationProvider.html">AuthenticationProviders</a>.<br>AuthenticationProviders are usually tried in order until one provides a non-null response. A non-null response indicates the provider had authority to decide on the authentication request and no further providers are tried. </p>
</blockquote>
<p>Like AuthenticationManager, you don’t work directly with ProviderManager. </p>
<h1 id="AuthenticationProvider"><a href="#AuthenticationProvider" class="headerlink" title="AuthenticationProvider"></a>AuthenticationProvider</h1><ul>
<li>It is the actual class that does the authentication.</li>
<li>AuthenticationProvider has a supports method that tells AuthenticationManager what Authentication object it supports.</li>
<li>An app can have multiple AuthenticationProviders(Ldap, Dao, OAuth2 etc)</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/authentication/AuthenticationProvider.html">java doc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/authentication/AuthenticationProvider.java">source code</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationProvider</span> &#123;</span><br><span class="line">    Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span></span><br><span class="line">			<span class="keyword">throws</span> AuthenticationException;</span><br><span class="line">	    <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; authentication)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>There are manay providers implements AuthenticationProvider interface. Some of the most important ones are</p>
<ul>
<li>DaoAuthenticationProvider - this is the most common AuthenticationProvider you will see</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/ldap/authentication/LdapAuthenticationProvider.html">LdapAuthenticationProvider</a> - An AuthenticationProvider implementation that authenticates against an LDAP server.</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/server/resource/authentication/JwtAuthenticationProvider.html">JwtAuthenticationProvider</a> - Jwt-encoded Bearer Tokens for protecting OAuth 2.0 Resource Servers.</li>
</ul>
<h1 id="UserDetailsService"><a href="#UserDetailsService" class="headerlink" title="UserDetailsService"></a>UserDetailsService</h1><p>Core interface which loads user-specific data.</p>
<p>It is used throughout the framework as a user DAO and is the strategy used by the DaoAuthenticationProvider.</p>
<p>The interface requires only one read-only method, which simplifies support for new data-access strategies.</p>
<p>UserDetailsService source code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">	UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Known Implementing Classes:</p>
<ul>
<li>CachingUserDetailsService</li>
<li>InMemoryUserDetailsManager</li>
<li>JdbcDaoImpl</li>
<li>JdbcUserDetailsManager</li>
<li>LdapUserDetailsManager</li>
<li>LdapUserDetailsService</li>
</ul>
<h1 id="Authentication-Process-Walkthrough"><a href="#Authentication-Process-Walkthrough" class="headerlink" title="Authentication Process Walkthrough"></a>Authentication Process Walkthrough</h1><p>We can walkthrough a In-memory authentication process to understand how Spring Security authentication works.</p>
<img src="in-memory-auth-process.png" />

<h2 id="UsernamePasswordAuthenticationFilter"><a href="#UsernamePasswordAuthenticationFilter" class="headerlink" title="UsernamePasswordAuthenticationFilter"></a>UsernamePasswordAuthenticationFilter</h2><ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.html">UsernamePasswordAuthenticationFilter</a> Extends AbstractAuthenticationProcessingFilter abstract class. </li>
<li>is the filter used for username password authentication. </li>
<li>Processses authentication submission using request parameter “username” and “password”.</li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/authentication/UsernamePasswordAuthenticationToken.java">Source code</a></li>
</ul>
<p>AbstractAuthenticationProcessingFilter.doFilter method - This is the entry point for UsernamePasswordAuthenticationFilter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span><br><span class="line">		<span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">	<span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!requiresAuthentication(request, response)) &#123;</span><br><span class="line">		chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">		logger.debug(<span class="string">&quot;Request is to process authentication&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Authentication authResult;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		authResult = attemptAuthentication(request, response);</span><br><span class="line">		<span class="keyword">if</span> (authResult == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="comment">// return immediately as subclass has indicated that it hasn&#x27;t completed</span></span><br><span class="line">			<span class="comment">// authentication</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		sessionStrategy.onAuthentication(authResult, request, response);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (InternalAuthenticationServiceException failed) &#123;</span><br><span class="line">		logger.error(</span><br><span class="line">				<span class="string">&quot;An internal error occurred while trying to authenticate the user.&quot;</span>,</span><br><span class="line">				failed);</span><br><span class="line">		unsuccessfulAuthentication(request, response, failed);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (AuthenticationException failed) &#123;</span><br><span class="line">		<span class="comment">// Authentication failed</span></span><br><span class="line">		unsuccessfulAuthentication(request, response, failed);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Authentication success</span></span><br><span class="line">	<span class="keyword">if</span> (continueChainBeforeSuccessfulAuthentication) &#123;</span><br><span class="line">		chain.doFilter(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	successfulAuthentication(request, response, chain, authResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The most important method call is <code>authResult = attemptAuthentication(request, response);</code>. If method call is successful it calls successfulAuthentication method, otherwise call unsuccessfulAuthentication method.</p>
<p>attemptAuthentication method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">		HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">	<span class="keyword">if</span> (postOnly &amp;&amp; !request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(</span><br><span class="line">				<span class="string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> obtainUsername(request);</span><br><span class="line">	<span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> obtainPassword(request);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (username == <span class="literal">null</span>) &#123;</span><br><span class="line">		username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (password == <span class="literal">null</span>) &#123;</span><br><span class="line">		password = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	username = username.trim();</span><br><span class="line"></span><br><span class="line">	<span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(</span><br><span class="line">			username, password);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Allow subclasses to set the &quot;details&quot; property</span></span><br><span class="line">	setDetails(request, authRequest);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>attemptAuthentication method gets request parameter “username” and “password”, trim it and then create a UsernamePasswordAuthenticationToken object. UsernamePasswordAuthenticationToken is an implementation of Authentication. UsernamePasswordAuthenticationFilter delegates the authentication to AuthenticationManager.</p>
<p>successfulAuthentication method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">		HttpServletResponse response, FilterChain chain, Authentication authResult)</span></span><br><span class="line">		<span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">		logger.debug(<span class="string">&quot;Authentication success. Updating SecurityContextHolder to contain: &quot;</span></span><br><span class="line">				+ authResult);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line"></span><br><span class="line">	rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Fire event</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">this</span>.eventPublisher != <span class="literal">null</span>) &#123;</span><br><span class="line">		eventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">InteractiveAuthenticationSuccessEvent</span>(</span><br><span class="line">				authResult, <span class="built_in">this</span>.getClass()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	successHandler.onAuthenticationSuccess(request, response, authResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If authentication is successful, UsernamePasswordAuthenticationFilter calls <code>SecurityContextHolder.getContext().setAuthentication(authResult);</code> to set the SecurityContext.</p>
<p>Then call <code>successHandler.onAuthenticationSuccess</code> to let the successHandler handle the redirect</p>
<p>unsuccessfulAuthentication method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">		HttpServletResponse response, AuthenticationException failed)</span></span><br><span class="line">		<span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">	SecurityContextHolder.clearContext();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">		logger.debug(<span class="string">&quot;Authentication request failed: &quot;</span> + failed.toString(), failed);</span><br><span class="line">		logger.debug(<span class="string">&quot;Updated SecurityContextHolder to contain null Authentication&quot;</span>);</span><br><span class="line">		logger.debug(<span class="string">&quot;Delegating to authentication failure handler &quot;</span> + failureHandler);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rememberMeServices.loginFail(request, response);</span><br><span class="line"></span><br><span class="line">	failureHandler.onAuthenticationFailure(request, response, failed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If login attempt is unsuccessful, clear the SecurityContextHolder.</p>
<p>Then call <code>failureHandler.onAuthenticationFailure</code>  to let the failureHandler handle the redirect</p>
<h2 id="ProviderManager-1"><a href="#ProviderManager-1" class="headerlink" title="ProviderManager"></a>ProviderManager</h2><ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/authentication/ProviderManager.html">ProviderManager</a> is the most used AuthenticationManager. authenticate method is the most important method of ProviderManager</li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/authentication/ProviderManager.java">source code</a></li>
</ul>
<p>authenticate method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span></span><br><span class="line">			<span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">		Class&lt;? <span class="keyword">extends</span> <span class="title class_">Authentication</span>&gt; toTest = authentication.getClass();</span><br><span class="line">		<span class="type">AuthenticationException</span> <span class="variable">lastException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">AuthenticationException</span> <span class="variable">parentException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Authentication</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Authentication</span> <span class="variable">parentResult</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">debug</span> <span class="operator">=</span> logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!provider.supports(toTest)) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				result = provider.authenticate(authentication);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">					copyDetails(authentication, result);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (AccountStatusException | InternalAuthenticationServiceException e) &#123;</span><br><span class="line">				prepareException(e, authentication);</span><br><span class="line">				<span class="comment">// SEC-546: Avoid polling additional providers if auth failure is due to</span></span><br><span class="line">				<span class="comment">// invalid account status</span></span><br><span class="line">				<span class="keyword">throw</span> e;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">				lastException = e;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// skip code not related to the main authentication process</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (eraseCredentialsAfterAuthentication</span><br><span class="line">					&amp;&amp; (result <span class="keyword">instanceof</span> CredentialsContainer)) &#123;</span><br><span class="line">				<span class="comment">// Authentication is complete. Remove credentials and other secret data</span></span><br><span class="line">				<span class="comment">// from authentication</span></span><br><span class="line">				((CredentialsContainer) result).eraseCredentials();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// If the parent AuthenticationManager was attempted and successful than it will publish an AuthenticationSuccessEvent</span></span><br><span class="line">			<span class="comment">// This check prevents a duplicate AuthenticationSuccessEvent if the parent AuthenticationManager already published it</span></span><br><span class="line">			<span class="keyword">if</span> (parentResult == <span class="literal">null</span>) &#123;</span><br><span class="line">				eventPublisher.publishAuthenticationSuccess(result);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// skip the remaining code for authenticate method</span></span><br><span class="line">    <span class="keyword">throw</span> lastException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ProviderManager contains a list of AuthenticationProviders. AuthenticationProviders will tried until an AuthenticationProvider can support indicated Authentication, the AuthenticationProvider will do the authentication. if the process is successful, then remove credentials and other secret data from authentication and return it. If none of the AuthenticationProviders can successfully authenticate the request, an AuthentiationException is thrown.</p>
<h2 id="DaoAuthenticationProvider"><a href="#DaoAuthenticationProvider" class="headerlink" title="DaoAuthenticationProvider"></a>DaoAuthenticationProvider</h2><ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/authentication/dao/DaoAuthenticationProvider.html">DaoAuthenticationProvider</a> is the most used AuthenticationProvider</li>
<li>It retrieves userdetails from UserDetailsService. Then compare the password with the saved password.</li>
<li>DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider. </li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/authentication/dao/DaoAuthenticationProvider.java">Source code</a></li>
</ul>
<p>support method - DaoAuthenticationProvider supports Authentication of type UsernamePasswordAuthenticationToken</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> (UsernamePasswordAuthenticationToken.class</span><br><span class="line">			.isAssignableFrom(authentication));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>authenticate method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span></span><br><span class="line">		<span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">	Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication,</span><br><span class="line">			() -&gt; messages.getMessage(</span><br><span class="line">					<span class="string">&quot;AbstractUserDetailsAuthenticationProvider.onlySupports&quot;</span>,</span><br><span class="line">					<span class="string">&quot;Only UsernamePasswordAuthenticationToken is supported&quot;</span>));</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Determine username</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (authentication.getPrincipal() == <span class="literal">null</span>) ? <span class="string">&quot;NONE_PROVIDED&quot;</span></span><br><span class="line">			: authentication.getName();</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="variable">cacheWasUsed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userCache.getUserFromCache(username);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">		cacheWasUsed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			user = retrieveUser(username,</span><br><span class="line">					(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (UsernameNotFoundException notFound) &#123;</span><br><span class="line">			logger.debug(<span class="string">&quot;User &#x27;&quot;</span> + username + <span class="string">&quot;&#x27; not found&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (hideUserNotFoundExceptions) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(messages.getMessage(</span><br><span class="line">						<span class="string">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span>,</span><br><span class="line">						<span class="string">&quot;Bad credentials&quot;</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">throw</span> notFound;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Assert.notNull(user,</span><br><span class="line">				<span class="string">&quot;retrieveUser returned null - a violation of the interface contract&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		preAuthenticationChecks.check(user);</span><br><span class="line">		additionalAuthenticationChecks(user,</span><br><span class="line">				(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (AuthenticationException exception) &#123;</span><br><span class="line">		<span class="keyword">if</span> (cacheWasUsed) &#123;</span><br><span class="line">			<span class="comment">// There was a problem, so try again after checking</span></span><br><span class="line">			<span class="comment">// we&#x27;re using latest data (i.e. not from the cache)</span></span><br><span class="line">			cacheWasUsed = <span class="literal">false</span>;</span><br><span class="line">			user = retrieveUser(username,</span><br><span class="line">					(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">			preAuthenticationChecks.check(user);</span><br><span class="line">			additionalAuthenticationChecks(user,</span><br><span class="line">					(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">throw</span> exception;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	postAuthenticationChecks.check(user);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!cacheWasUsed) &#123;</span><br><span class="line">		<span class="built_in">this</span>.userCache.putUserInCache(user);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">Object</span> <span class="variable">principalToReturn</span> <span class="operator">=</span> user;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (forcePrincipalAsString) &#123;</span><br><span class="line">		principalToReturn = user.getUsername();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>authenticate method retrieve user by calling retrieveUser method. if user is not found, then throw BadCredentialsException. If authentication checks fail, throw BadCredentialsException too. If check is successful, call createSuccessAuthentication method.</p>
<p>retrieveUser method retrieve user using its UserDetailsService.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> UserDetails <span class="title function_">retrieveUser</span><span class="params">(String username,</span></span><br><span class="line"><span class="params">		UsernamePasswordAuthenticationToken authentication)</span></span><br><span class="line">		<span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">	prepareTimingAttackProtection();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">UserDetails</span> <span class="variable">loadedUser</span> <span class="operator">=</span> <span class="built_in">this</span>.getUserDetailsService().loadUserByUsername(username);</span><br><span class="line">		<span class="keyword">if</span> (loadedUser == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalAuthenticationServiceException</span>(</span><br><span class="line">					<span class="string">&quot;UserDetailsService returned null, which is an interface contract violation&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> loadedUser;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (UsernameNotFoundException ex) &#123;</span><br><span class="line">		mitigateAgainstTimingAttack(authentication);</span><br><span class="line">		<span class="keyword">throw</span> ex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (InternalAuthenticationServiceException ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> ex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalAuthenticationServiceException</span>(ex.getMessage(), ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>additionalAuthenticationChecks method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">additionalAuthenticationChecks</span><span class="params">(UserDetails userDetails,</span></span><br><span class="line"><span class="params">		UsernamePasswordAuthenticationToken authentication)</span></span><br><span class="line">		<span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">	<span class="keyword">if</span> (authentication.getCredentials() == <span class="literal">null</span>) &#123;</span><br><span class="line">		logger.debug(<span class="string">&quot;Authentication failed: no credentials provided&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(messages.getMessage(</span><br><span class="line">				<span class="string">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span>,</span><br><span class="line">				<span class="string">&quot;Bad credentials&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">String</span> <span class="variable">presentedPassword</span> <span class="operator">=</span> authentication.getCredentials().toString();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!passwordEncoder.matches(presentedPassword, userDetails.getPassword())) &#123;</span><br><span class="line">		logger.debug(<span class="string">&quot;Authentication failed: password does not match stored value&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(messages.getMessage(</span><br><span class="line">				<span class="string">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span>,</span><br><span class="line">				<span class="string">&quot;Bad credentials&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>additionalAuthenticationChecks method - gets credentials from Authentication and them compare it with password from userdetails. Throws BadCredentialsException if password not found or password does not match.</p>
<h2 id="InMemoryUserDetailsManager"><a href="#InMemoryUserDetailsManager" class="headerlink" title="InMemoryUserDetailsManager"></a>InMemoryUserDetailsManager</h2><ul>
<li>InMemoryUserDetailsManager implements UserDetailsManager and UserDetailsPasswordService interface. </li>
<li>The most important method is loadUserByUsername. This method loads <a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/core/userdetails/UserDetails.html">UserDetails</a> given the username</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/provisioning/InMemoryUserDetailsManager.html">Javadoc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/28d2cfa14aeea54c20cd87f294fc7546063b0713/core/src/main/java/org/springframework/security/provisioning/InMemoryUserDetailsManager.java">Source code</a></li>
</ul>
<p>loadUserByUsername method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span></span><br><span class="line">		<span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">	<span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> users.get(username.toLowerCase());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(username);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(user.getUsername(), user.getPassword(), user.isEnabled(),</span><br><span class="line">			user.isAccountNonExpired(), user.isCredentialsNonExpired(),</span><br><span class="line">			user.isAccountNonLocked(), user.getAuthorities());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="AuthenticationException"><a href="#AuthenticationException" class="headerlink" title="AuthenticationException"></a>AuthenticationException</h1><p><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/AuthenticationException.html">AuthenticationException</a> - Abstract superclass for all exceptions related to an Authentication object being invalid for whatever reason.</p>
<p>BadCredentialsException and UsernameNotFoundException are both subclasses of AuthenticationException. There are other subclasses of AuthenticationException that may be thrown during authentication process.</p>
<p>UsernamePasswordAuthenticationFilter will call unsuccessfulAuthentication method to handle the exception. see unsuccessfulAuthentication method from above.</p>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Authorization Process</title>
    <url>/SpringSecurity/Spring-Security-Authorization-Process/</url>
    <content><![CDATA[<p>Authorization process explained. Note that most of the time you don’t need to know the details of how authorization works.</p>
<span id="more"></span>

<h1 id="Authorization-Process"><a href="#Authorization-Process" class="headerlink" title="Authorization Process"></a>Authorization Process</h1><p>Pre-Invocation Handling - A pre-invocation decides whether the invocation si allowed to preceed. The decision is made by <code>AccessDecisionManager</code>.</p>
<p>After-Invocation Handling - Modify the object returned by the secure object invocation. <code>AfterInvocationProviderManager</code>. see <a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#authz-after-invocation-handling">https://docs.spring.io/spring-security/site/docs/current/reference/html5/#authz-after-invocation-handling</a> for more information. This post will focus on Pre-Invocation Handling.</p>
<h2 id="FilterSecurityInterceptor"><a href="#FilterSecurityInterceptor" class="headerlink" title="FilterSecurityInterceptor"></a>FilterSecurityInterceptor</h2><ul>
<li><a href="(https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/web/access/intercept/FilterSecurityInterceptor.html)">FilterSecurityInterceptor</a> implements Filter interface. it is a filter used by FilterChainProxy for Authorization purpose.</li>
<li>FilterSecurityInterceptor extends abstract class AbstractSecurityInterceptor</li>
<li>Refer to <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/access/intercept/AbstractSecurityInterceptor.html">AbstractSecurityInterceptor</a> for details on the workflow.</li>
</ul>
<img src="FilterSecurityInterceptor.png" />

<ol>
<li>FilterChainProxy invokes FilterSecurityInterceptor</li>
<li>FilterSecurityInterceptor gets Authentication object from SecurityContext</li>
<li>FilterSecurityInterceptor creates filterInvocatior. It passes FilterInvocation to SecurityMetadataSource to get configAttributes. ConfigAttributes are derived from antMatchers or mvcMatchers from HttpSecurity.</li>
<li>FilterSecrurityInterceptor calls AccessDecisionManager’s decide method with authentication, filterInvocation and conffigAttributes as parameter</li>
<li>If access is success, continue the invocation, otherwise throw AccessDeeniedException</li>
</ol>
<h2 id="AccessDecisionManager-Interface"><a href="#AccessDecisionManager-Interface" class="headerlink" title="AccessDecisionManager Interface"></a>AccessDecisionManager Interface</h2><ul>
<li>The AccessDecisionManager is called by the AbstractSecurityInterceptor and is responsible for making final access control decisions. </li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/access/AccessDecisionManager.html">Javadoc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/access/AccessDecisionManager.java">Source code</a></li>
</ul>
<p><a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/access/AccessDecisionManager.java">AccessDecisionManager</a> source code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccessDecisionManager</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">decide</span><span class="params">(Authentication authentication, Object object,</span></span><br><span class="line"><span class="params">			Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException,</span><br><span class="line">			InsufficientAuthenticationException;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(ConfigAttribute attribute)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccessDecisionManager</code>‘s <code>decide</code> method uses all relavant information to decide whether to authorize user to the secure object.</p>
<p>There are 3 implementaions of AccessDecisionManager</p>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/access/vote/AffirmativeBased.html">AffirmativeBased</a> - Simple concrete implementation of AccessDecisionManager that grants access if any AccessDecisionVoter returns an affirmative response. This is the default.</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/access/vote/ConsensusBased.html">ConsensusBased</a> - Simple concrete implementation of AccessDecisionManager that uses a consensus-based approach. So if majority go throught, it will grant access.</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/access/vote/UnanimousBased.html">UnanimousBased</a> - Simple concrete implementation of AccessDecisionManager that requires all voters to abstain or grant access. So ALL votes are needed to grant access.</li>
</ul>
<img src="AccessDecisionManager-Hierarchy.png" />



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#servlet-authorization">Spring Security Authorization</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Custome UserDetailsService</title>
    <url>/SpringSecurity/Spring-Security-Custom-UserDetailsService/</url>
    <content><![CDATA[<p>We learn about JDBC Authentication, but in real world, it is more common to customize UserDetailsService. This allows more flexibility When it comes to authenticating user.</p>
<span id="more"></span>

<h1 id="UserDetails-Interface"><a href="#UserDetails-Interface" class="headerlink" title="UserDetails Interface"></a>UserDetails Interface</h1><p>We can understand UserDetails class first before looking at UserDetailsService interface.</p>
<p>UserDetails Interface provides essential user info. This class will then be encapsulated into <strong>Authentication</strong> object. <strong>Authentication</strong> object contains a Principal. The Principal is often a UserDetails.</p>
<p><a href="https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/api/index.html?org/springframework/security/core/userdetails/User.html">User</a> is the reference implementation of UserDetails interface.</p>
<p>Here is the source code for UserDetails</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.security.core.userdetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDetails</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">	Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line"></span><br><span class="line">	String <span class="title function_">getPassword</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	String <span class="title function_">getUsername</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="UserDetailsService-Interface"><a href="#UserDetailsService-Interface" class="headerlink" title="UserDetailsService Interface"></a>UserDetailsService Interface</h1><p>Core interface which loads user-specific data.</p>
<p>It is used throughout the framework as a user DAO and is the strategy used by the DaoAuthenticationProvider.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.security.core.userdetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">	UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>loadUserByUsername(String)</strong> method locates the user based on the username. if the user could not be found or the user has no GrantedAuthority, a UsernameNotFoundException will be thrown</p>
<p>Spring Security already contains implementations for UserDetailsService.</p>
<ul>
<li>CachingUserDetailsService</li>
<li>InMemoryUserDetailsManager</li>
<li>JdbcDaoImpl</li>
<li>JdbcUserDetailsManager</li>
<li>LdapUserDetailsManager</li>
<li>LdapUserDetailsService</li>
</ul>
<p>If you need more flexibility to get UserDetails from the username, you can provide your own implementation.</p>
<h1 id="UserDetailsService-Simple-Example"><a href="#UserDetailsService-Simple-Example" class="headerlink" title="UserDetailsService Simple Example"></a>UserDetailsService Simple Example</h1><p>Here UserDetailsService.loadUserByUsername method returns <a href="https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/api/index.html?org/springframework/security/core/userdetails/User.html">User</a>, which is the reference implementation. If you need more customization, you can implement UserDetails interface for your user entity. That way you can directly return user entity instead of creating <a href="https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/api/index.html?org/springframework/security/core/userdetails/User.html">User</a> object.</p>
<p>SimpleUserDetailsServiceImpl.java - a very simple UserDetailsService implementation that returns a user with password equals ‘password’. The returned user’s password should be encoded.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleUserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">&quot;user&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, passwordEncoder.encode(<span class="string">&quot;password&quot;</span>),</span><br><span class="line">                    Collections.singletonList(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;User&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;Error logging in &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SecurityConfiguration.java - To use the above custom UserDetailsService in security configuration</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated()</span><br><span class="line">                .and().formLogin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>userDetailsService(UserDetailsService)</strong> method adds authentication based upon the custom UserDetailsService that is passed in.</p>
<h1 id="UserDetailsService-that-works-with-JPA"><a href="#UserDetailsService-that-works-with-JPA" class="headerlink" title="UserDetailsService that works with JPA"></a>UserDetailsService that works with JPA</h1><p>This is a more realistic code example. UserDetailsService implementation that loads user from a database. </p>
<p>UserDetailsServiceImpl.java - UserDetailsService implementation that loads user from a database repository.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> MyUser <span class="title function_">findByUsername</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findByUsername(username).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">MyUser</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findByUsername(s).orElseThrow(() -&gt;<span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;Uesr not found.&quot;</span>));</span><br><span class="line">        <span class="type">var</span> <span class="variable">authorities</span> <span class="operator">=</span> user.getRoles().stream().map(r -&gt; <span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(r.getName())).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(user.getUsername(), user.getPassword(), authorities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Reference</p>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/api/index.html?org/springframework/security/core/userdetails/UserDetailsService.html">UserDetailsService Interface Javadoc</a></li>
<li><a href="https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/api/index.html?org/springframework/security/core/userdetails/UserDetails.html">UserDetails Interface Javadoc</a></li>
<li><a href="https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/api/index.html?org/springframework/security/core/userdetails/User.html">User Class Javadoc</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Custom AuthenticationProvider</title>
    <url>/SpringSecurity/Spring-Security-Custom-AuthenticationProvider/</url>
    <content><![CDATA[<p>Spring Security provides many AuthenticationProvider for you to use. You can provide your own customized AuthenticationProvider if the provided AuthenticationProvider doesn’t satisfy your Authentication need.</p>
<span id="more"></span>

<h1 id="AuthenticationProvider-Interface"><a href="#AuthenticationProvider-Interface" class="headerlink" title="AuthenticationProvider Interface"></a>AuthenticationProvider Interface</h1><p>AuthenticationProvider Interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationProvider</span> &#123;</span><br><span class="line">	Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span></span><br><span class="line">			<span class="keyword">throws</span> AuthenticationException;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; authentication)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AuthenticationProvider interface is one of the most important class in Spring Security. <a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/authentication/dao/DaoAuthenticationProvider.html">DaoAuthenticationProvider</a> is the most used AuthenticationProvider. It retrieves UserDetails using UserDetailsService and then compares the password with the saved password in UserDetails. </p>
<h1 id="Custom-AuthenticationProvider"><a href="#Custom-AuthenticationProvider" class="headerlink" title="Custom AuthenticationProvider"></a>Custom AuthenticationProvider</h1><p>We can create a custom AuthenticationProvider by implementing AuthenticationProvider interface and override authenticate and supports method.</p>
<p>CustomAuthenticationProvider.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationProvider</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> authentication.getCredentials().toString();</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;user&quot;</span>) &amp;&amp; password.equals(<span class="string">&quot;password&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(name, password, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(name+ <span class="string">&quot; not found.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> authentication.equals(UsernamePasswordAuthenticationToken.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is a very simple AuthenticationProvider that authenticates user with username equals “user” and password “password”.</p>
<p>SecurityConfiguration.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationProvider authProvider;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests().anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.authenticationProvider(authProvider);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In Spring Security configuration, use AuthenticationManagerBuilder.authenticationProvider() method to set the custom AuthenticationProvider.</p>
<p>Reference</p>
<ul>
<li><a href="https://www.baeldung.com/spring-security-authentication-provider">Spring Security Authentication Provider by Eugen Paraschiv</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Form Login</title>
    <url>/SpringSecurity/Spring-Security-Form-Login/</url>
    <content><![CDATA[<p>Configure Spring Security using HttpSecurity</p>
<span id="more"></span>

<p>In Spring Security’s WebSecurityConfigurerAdapter class, you can customize form login in <strong>.config(HttpSecurity)</strong> method</p>
<h1 id="Form-Login-Configuration-Example"><a href="#Form-Login-Configuration-Example" class="headerlink" title="Form Login Configuration Example"></a>Form Login Configuration Example</h1><p>Here is an example configuration for Form Login.</p>
<p>SecurityConfiguration.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/auth/login&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/home&quot;</span>)</span><br><span class="line">                .failureUrl(<span class="string">&quot;/login.html?error=true&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">        .and().logout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;pass&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoginController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/auth/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(Principal principal)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This controller simply returns login page.</p>
<p>Note that you need to add Thymeleaf Dependency so that you can use thymeleaf template. For Gradle, the dependency will be</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;org.springframework.boot:spring-boot-starter-thymeleaf&#x27;</span><br></pre></td></tr></table></figure>

<p>classpath:templates&#x2F;login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/extras/spring-security/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">th:name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>This is a very simple Login page with CSRF support. This page is using Thymeleaf template engine so taht csrf token can be sent to client.</p>
<h1 id="About-HttpSecurity-Object"><a href="#About-HttpSecurity-Object" class="headerlink" title="About HttpSecurity Object"></a>About HttpSecurity Object</h1><ul>
<li>Use <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/builders/HttpSecurity.html">java doc</a> to get more details on HttpSecurity usage.</li>
<li>HttpSecurity can configure authorization using antMatchers and set the login method(form, basic, openID, oauth2, saml) base on the request</li>
<li>you can also config login process, logout process, saml2 login, oauth2 login, session management, csrf, configure filter etc</li>
</ul>
<p>You can tell Spring Security to use form login authentication by calling <code>HttpSecurity.formLogin()</code> method. HttpSecurity.formLogin() method returns <a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/config/annotation/web/configurers/FormLoginConfigurer.html">FormLoginConfigurer</a>.</p>
<h1 id="FormLoginConfigurer"><a href="#FormLoginConfigurer" class="headerlink" title="FormLoginConfigurer"></a>FormLoginConfigurer</h1><p><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/config/annotation/web/configurers/FormLoginConfigurer.html">FormLoginConfigurer</a> common methods</p>
<ul>
<li>loginPage(String)</li>
<li>loginProcessingUrl(String)</li>
<li>defaultSuccessUrl(String, boolean)</li>
<li>defaultForwardUrl(String)</li>
<li>successHandler(AuthenticationSuccessHandler)</li>
<li>failureUrl(String)</li>
<li>failureForwardUrl(String)</li>
<li>failureHandler(AuthenticationFailureHandler)</li>
<li>usernameParameter(String)</li>
<li>passwordParameter(String)</li>
<li>permitAll()</li>
</ul>
<h2 id="loginPage-and-loginProcessingUrl"><a href="#loginPage-and-loginProcessingUrl" class="headerlink" title="loginPage and loginProcessingUrl"></a>loginPage and loginProcessingUrl</h2><p>By default login page and login processing url are both &#x2F;login. We can customize the login page and login processing url.</p>
<p>Here we use &#x2F;login.html as login page and use the default login processing url.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.loginPage(<span class="string">&quot;/auth/login&quot;</span>)</span><br><span class="line">.loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="defaultSuccessUrl-and-successForwardUrl"><a href="#defaultSuccessUrl-and-successForwardUrl" class="headerlink" title="defaultSuccessUrl and successForwardUrl"></a>defaultSuccessUrl and successForwardUrl</h2><p>defaultSuccessUrl method sets the default url to be redirect to. defaultSuccessUrl method accespts second parameter <em>alwaysUse</em>. if <em>alwaysUse</em> is set to true, then logged in user will always be redirected to successUrl. This has the same effect as successForwardUrl() method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// just set a defaultSuccessUrl</span></span><br><span class="line">.defaultSuccessUrl(<span class="string">&quot;/loginSuccess&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// always redirect to defaultSuccessUrl, same as successForwardUrl(&quot;/loginSuccess&quot;)</span></span><br><span class="line">.defaultSuccessUrl(<span class="string">&quot;/loginSuccess&quot;</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>failureUrl() and failureForwardUrl() method are similar. They are used to redirect page when login fails.</p>
<h2 id="usernameParameter-and-passwordParameter"><a href="#usernameParameter-and-passwordParameter" class="headerlink" title="usernameParameter and passwordParameter"></a>usernameParameter and passwordParameter</h2><p>The default username parameter is “username”. The default password parameter is “password”. You can customize both</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.usernameParameter(<span class="string">&quot;username&quot;</span>) <span class="comment">// default is username</span></span><br><span class="line">.passwordParameter(<span class="string">&quot;password&quot;</span>) <span class="comment">// default is password</span></span><br></pre></td></tr></table></figure>

<h2 id="permitAll"><a href="#permitAll" class="headerlink" title="permitAll"></a>permitAll</h2><p>Ensures the urls for failureUrl(String) as well as for the <em>HttpSecurityBuilder</em>, the <em>getLoginPage()</em> and <em>getLoginProcessingUrl()</em> are granted access to any user.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">permitAll()</span><br></pre></td></tr></table></figure>

<h1 id="Redirect-to-Different-page-after-Successful-login"><a href="#Redirect-to-Different-page-after-Successful-login" class="headerlink" title="Redirect to Different page after Successful login"></a>Redirect to Different page after Successful login</h1><p>In some cases, you want to redirect to different page base on the user login. If the user has role ‘ROLE_ADMIN’, redirect to ‘&#x2F;admin’ page, else redirect to ‘&#x2F;‘. </p>
<p>You can’t do this with <code>defaultSuccessUrl</code> method above, you need to create your own AuthenticationSuccessHandler. AuthenticationSuccessHandler is used after user successfully login.</p>
<p>You can follow the example of <a href="https://github.com/spring-projects/spring-security/blob/master/web/src/main/java/org/springframework/security/web/authentication/SimpleUrlAuthenticationSuccessHandler.java">SimpleUrlAuthenticationSuccessHandler</a> and create your own AuthenticationSuccessHandler.</p>
<p>CustomAuthenticationSuccessHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.DefaultRedirectStrategy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.RedirectStrategy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.WebAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">RedirectStrategy</span> <span class="variable">redirectStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultRedirectStrategy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomAuthenticationSuccessHandler</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        handle(request, response, authentication);</span><br><span class="line">        clearAuthenticationAttributes(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                          Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">targetUrl</span> <span class="operator">=</span> determineTargetUrl(request, response, authentication);</span><br><span class="line">        redirectStrategy.sendRedirect(request, response, targetUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">determineTargetUrl</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                        HttpServletResponse response, Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( authentication.getAuthorities().stream().map(r -&gt; r.toString()).anyMatch(r -&gt; r.equals(<span class="string">&quot;ROLE_ADMIN&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/admin&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes temporary authentication-related data which may have been stored in the</span></span><br><span class="line"><span class="comment">     * session during the authentication process.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clearAuthenticationAttributes</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (session == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To use the CustomAuthenticationSuccessHandler, create a bean and config using <code>.successHandler(customAuthenticationSuccessHandler())</code> method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationSuccessHandler <span class="title function_">customAuthenticationSuccessHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomAuthenticationSuccessHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/auth/login&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                <span class="comment">//.defaultSuccessUrl(&quot;/home&quot;)</span></span><br><span class="line">                .successHandler(customAuthenticationSuccessHandler())</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>If front-end and back-end are separated, you want to return JSON instead of redirect when the user logs in. In this case, you can also use AuthenticationSuccessHandler to send JSON response. Do not use defaultSuccessUrl() and successForwardUrl() method because they cause redirect.</p>
<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>You can choose to enable or disable CSRF toekn. The default is to enable CSRF so that attacker cannot use csrf attack. We can call <code>HTTPSecurity.csrf().disable()</code> to disable it. </p>
<p>After you enable CSRF, you need to add a hidden field in the login form that contains csrf token value.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>We will discuss more on CSRF in the future post.</p>
<h1 id="Logout"><a href="#Logout" class="headerlink" title="Logout"></a>Logout</h1><p>You can also use HttpSecurity to customize logout page and logout process. HttpSecurity’s <code>logout()</code> method returns a <a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/config/annotation/web/configurers/LogoutConfigurer.html">LogoutConfigurer</a> that you can use to customize logout.</p>
<p><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/config/annotation/web/configurers/LogoutConfigurer.html">LogoutConfigurer</a> important methods</p>
<ul>
<li>logoutUrl(String)</li>
<li>logoutSuccessUrl(String)</li>
<li>addLogoutHandler(LogoutHandler)</li>
<li>deleteCookies(String…)</li>
<li>permitAll()</li>
</ul>
<p>Here is an example configuration for Logouts</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.logout()</span><br><span class="line">    .logoutRequestMatcher(<span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/custom-logout&quot;</span>, <span class="string">&quot;GET&quot;</span>))</span><br><span class="line">    .deleteCookies(<span class="string">&quot;remove&quot;</span>)</span><br><span class="line">    .logoutSuccessUrl(<span class="string">&quot;/auth/login?logout&quot;</span>)</span><br><span class="line">    .permitAll();</span><br></pre></td></tr></table></figure>

<p>logoutUrl method sets the URL that triggers logout to occur.  The default is a POST “&#x2F;logout” request. If you want to use GET, use <code>.logoutRequestMatcher(new AntPathRequestMatcher(&quot;/custom-logout&quot;, &quot;GET&quot;))</code></p>
<p>logoutSuccessUrl method sets the Url to redirect to after logout has occurred. The default is “&#x2F;login?logout”</p>
<p>Source Code - <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/FormLogin">https://github.com/xinghua24/SpringBootExamples/tree/master/FormLogin</a></p>
<p>Reference</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=caCJAJC41Rk">How Spring Security Authentication works - Java Brains</a></li>
<li><a href="https://www.baeldung.com/java-config-spring-security">Introduction to Java Config for Spring Security by Baeldung</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - In-Memory Authentication</title>
    <url>/SpringSecurity/Spring-Security-InMemoryAuthenticaion/</url>
    <content><![CDATA[<p>Configure inMemory Authentication</p>
<span id="more"></span>

<h1 id="In-Memory-Authentication-Code-Example"><a href="#In-Memory-Authentication-Code-Example" class="headerlink" title="In Memory Authentication Code Example"></a>In Memory Authentication Code Example</h1><p>Here is an example to set In Memory Authentication. There are two users created. The first user is <em>user</em> and the second user is <em>admin</em>.</p>
<p><em>user</em> has role “ROLE_USER” only and <em>admin</em> has roles “USER” and “ROLEADMIN”.</p>
<p>SecurityConfiguration.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated()</span><br><span class="line">            .and().formLogin();;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password((passwordEncoder().encode(<span class="string">&quot;password&quot;</span>)))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>, <span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here we use the default password encoder. You get the default password encoder by calling <code>PasswordEncoderFactories.createDelegatingPasswordEncoder();</code>. The default password encoder uses Bcrypt to encode password.</p>
<p>For Spring Security we don’t usually directly create AuthenticaitonProvider to handle authentication request. instead, we use AuthenticationManagerBuilder to configure authentication.</p>
<p><code>roles()</code> method automatically prefixes each entry with “ROLE_”. So just pass “USER” or “ADMIN” as parameter.</p>
<h1 id="AuthenticationManagerBuilder"><a href="#AuthenticationManagerBuilder" class="headerlink" title="AuthenticationManagerBuilder"></a>AuthenticationManagerBuilder</h1><ul>
<li><strong>AuthenticationManagerBuilder</strong> is a SecurityBuilder used to create an AuthenticationManager. Allows for easily building in memory authentication, LDAP authentication, JDBC based authentication, adding UserDetailsService, and adding AuthenticationProvider’s.</li>
<li>It has a <code>List&lt;AuthenticationProvider&gt;</code> and <code>UserDetailsService</code> field that is used for authenticate users.</li>
<li>inMemoryAuthentication(), jdbcAuthentication(), ldapAuthentication() method can be used to configure AuthenticationProvider and UserdetailsService</li>
<li>userDetailsService(T userDetailsService) method can be used to configure a custom UserDetailsService</li>
</ul>
<h1 id="In-Memory-Authentication"><a href="#In-Memory-Authentication" class="headerlink" title="In Memory Authentication"></a>In Memory Authentication</h1><p><strong>AuthenticationManagerBuilder.inMemoryAuthentication()</strong> method adds in memory authentication to the AuthenticationManagerBuilder and return a InMemoryUserDetailsManagerConfigurer to allow customization of the in memory authentication. InMemoryUserDetailsManagerConfigurer itself uses DaoAuthenticaionProvider as the provider. InMemoryUserDetailsManagerConfigurer.withUser() method adds a user to the UserDetailsService.</p>
<p>Reference</p>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/api/index.html?org/springframework/security/config/annotation/authentication/builders/AuthenticationManagerBuilder.html">AuthenticationManagerBuilder Javadoc</a></li>
<li><a href="https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/api/index.html?org/springframework/security/config/annotation/authentication/configurers/provisioning/InMemoryUserDetailsManagerConfigurer.html">InMemoryUserDetailsManagerConfigurer Javadoc</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Github Login</title>
    <url>/SpringSecurity/Spring-Security-Github-Login/</url>
    <content><![CDATA[<p>Let us create an example Spring Security OAuth 2.0 application</p>
<span id="more"></span>

<h1 id="Register-Client-App"><a href="#Register-Client-App" class="headerlink" title="Register Client App"></a>Register Client App</h1><p>You need to register your application with a OAuth 2.0 provider before you use OAuth 2.0 in your application. </p>
<p>Login to github.com, then go to Settings &gt; Developer settings. Press <em>New Auth APP</em> to add a new OAuth App </p>
<img src="OAuthApps.png" />

<p>Register a new OAuth application. Set <strong>Authorization callback URL</strong> to be <a href="http://localhost:8080/login/oauth2/code/github">http://localhost:8080/login/oauth2/code/github</a></p>
<p>Authorization callback URL is actually the redirect URL. This redirect URL is used for sending authorization code from Authorization Server to the Client. By default, Spring Boot configures this redirect URI as <em>&#x2F;login&#x2F;oauth2&#x2F;code&#x2F;{registrationId}</em>. Some examples are</p>
<ul>
<li><a href="http://localhost:8080/login/oauth2/code/google">http://localhost:8080/login/oauth2/code/google</a></li>
<li><a href="http://localhost:8080/login/oauth2/code/facebook">http://localhost:8080/login/oauth2/code/facebook</a></li>
<li><a href="http://localhost:8080/login/oauth2/code/github">http://localhost:8080/login/oauth2/code/github</a></li>
</ul>
<img src="RegisterApp.png" />

<p>After registration, you will get a client ID and client secret for the client app.</p>
<h1 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h1><p>Add oauth2-client maven dependency to Spring Boot Application</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h1><p>Add client registration for Github. Spring Security will configure a ClientRegistration for us.</p>
<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">oauth2:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">registration:</span></span><br><span class="line">          <span class="attr">github:</span></span><br><span class="line">            <span class="attr">clientId:</span> <span class="string">&lt;client-id&gt;</span></span><br><span class="line">            <span class="attr">clientSecret:</span> <span class="string">&lt;client-secret&gt;</span></span><br><span class="line">            <span class="attr">scope:</span> <span class="string">read:user,</span> <span class="string">user:email</span></span><br></pre></td></tr></table></figure>

<p>You can specify scopes for Github Client App. This page shows all the available scopes you can use: <a href="https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/">https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/</a></p>
<h1 id="Security-configuration"><a href="#Security-configuration" class="headerlink" title="Security configuration"></a>Security configuration</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        http.oauth2Login()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                .permitAll();</span><br><span class="line"></span><br><span class="line">        http.logout()</span><br><span class="line">                .logoutRequestMatcher(<span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/logout&quot;</span>, <span class="string">&quot;GET&quot;</span>))</span><br><span class="line">                .deleteCookies(<span class="string">&quot;true&quot;</span>)</span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/login.html?logout&quot;</span>)</span><br><span class="line">                .permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SecurityConfiguration class customize OAuth 2.0 login. It sets the loginPage(“&#x2F;login.html”). </p>
<h1 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h1><p>This is the login page.</p>
<p>static&#x2F;login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Oauth2.0 Github Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Login with <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oauth2/authorization/github&quot;</span>&gt;</span>Github<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Here the login URL is <em>&#x2F;oauth2&#x2F;authorization&#x2F;github</em>. This is the Authorization Endpoint. It can be customized in OAuth2 configuration.</p>
<h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><p>Controller that displays user info</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> OAuth2AuthorizedClientService authorizedClientService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(value=&quot;/&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(<span class="meta">@AuthenticationPrincipal</span> OAuth2User principal)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + principal.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(value=&quot;/getAuthentication&quot;, produces=&quot;application/json&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getAuthentication</span><span class="params">(OAuth2AuthenticationToken authenticaiton)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span>  authenticaiton.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(value = &quot;/getEmails&quot;, produces = &quot;application/json&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getEmails</span><span class="params">(OAuth2AuthenticationToken authentication)</span> &#123;</span><br><span class="line">		<span class="type">OAuth2AuthorizedClient</span> <span class="variable">client</span> <span class="operator">=</span> authorizedClientService.loadAuthorizedClient(</span><br><span class="line">				authentication.getAuthorizedClientRegistrationId(),</span><br><span class="line">				authentication.getPrincipal().getName());</span><br><span class="line"></span><br><span class="line">		<span class="type">String</span> <span class="variable">getEmailUrl</span> <span class="operator">=</span> <span class="string">&quot;https://api.github.com/user/emails&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// send HTTP request to get user emails</span></span><br><span class="line">		<span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">		<span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">		headers.add(HttpHeaders.AUTHORIZATION, <span class="string">&quot;Bearer &quot;</span> + client.getAccessToken().getTokenValue());</span><br><span class="line">		<span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpEntity</span>(<span class="string">&quot;&quot;</span>, headers);</span><br><span class="line">		<span class="type">ResponseEntity</span> <span class="variable">response</span> <span class="operator">=</span> restTemplate.exchange(getEmailUrl, HttpMethod.GET, entity, String.class);</span><br><span class="line">		<span class="keyword">return</span> response.getBody().toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Three endpoints are created here. </p>
<ul>
<li>“&#x2F;“ prints principal name. Here you need <code>@AuthenticationPrincipal</code> annotation to get OAuth2User from Authenticaiton.</li>
<li>“&#x2F;getAuthenticaiont” prints the whole Authentication Object. </li>
<li>“&#x2F;getEmails” demonstrate how to get additional resource by attaching access token to the Http Request.</li>
</ul>
<p>Github API provides an endpoint(<a href="https://api.github.com/user/emails">https://api.github.com/user/emails</a>) to get user’s emails. You need to have <em>user:email</em> scope to access the email information. see <a href="https://developer.github.com/v3/users/emails/#list-email-addresses-for-the-authenticated-user">https://developer.github.com/v3/users/emails/#list-email-addresses-for-the-authenticated-user</a> for more information on this Github API endpoint</p>
<h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>Open <a href="http://localhost:8080/">http://localhost:8080</a> and login with Github.<br><img src="login.png" /></p>
<p>You will receive index page that displays user name. open <a href="http://localhost:8080/getEmails">http://localhost:8080/getEmails</a> to get defailed user emails from Github.</p>
<p>Source Code for Github OAuth 2.0 login: <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/OAuth2Github">https://github.com/xinghua24/SpringBootExamples/tree/master/OAuth2Github</a></p>
<p>Source Code for Google OAuth 2.0 login: <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/OAuth2Google">https://github.com/xinghua24/SpringBootExamples/tree/master/OAuth2Google</a></p>
<p>Google OAuth 2.0 login is very similar to Github OAuth 2.0 login. The biggest difference is you register the OAuth 2.0 Client App at <a href="https://console.developers.google.com/apis/credentials">Google API Console</a> instead.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.baeldung.com/spring-security-5-oauth2-login">Spring Security 5 – OAuth2 Login</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Intro</title>
    <url>/SpringSecurity/Spring-Security-Intro/</url>
    <content><![CDATA[<p>Spring Security Introduction</p>
<span id="more"></span>

<p>Spring Security is a very popular authentication and authorization framework. If you are building Spring based web application, Spring Security should be your go to framework for securing your application.</p>
<p>Note that this post and the following sprint security blog posts are used for Spring Boot application.</p>
<h1 id="Security-Basic-Concepts"><a href="#Security-Basic-Concepts" class="headerlink" title="Security Basic Concepts"></a>Security Basic Concepts</h1><ul>
<li><strong>Authentication</strong> - validate the user’s credentials</li>
<li><strong>Authorization</strong> - verify the authenticated user has permission to access certain feature of the application</li>
<li><strong>Principal</strong> - The user that is currently logged in.</li>
<li><strong>Role</strong> - Coarse grained representation of a set of Authorities. A user can have multiple roles. Roles usually starts with <code>ROLE_</code> prefix</li>
<li><strong>Granted Authority</strong> - individual privilege.</li>
</ul>
<h1 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h1><p>Spring Boot provides a spring-boot-starter-security starter that aggregates Spring Security-related dependencies together.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>For spring security test support</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Spring-Security-In-Action"><a href="#Spring-Security-In-Action" class="headerlink" title="Spring Security In Action"></a>Spring Security In Action</h1><p>After adding spring security dependency, Spring will enable Form Authentication automatically. The default username is <strong>user</strong> and the password will be print to the console. The password will be different for every application startup.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Using generated security password: 74fbc0b8-c18e-49a0-9144-95cd019d8010</span><br></pre></td></tr></table></figure>

<p>you can use Basic Authentication to login to the application. The browser will prompt you to enter the username and password.</p>
<img src="login.png" />

<p>Now you can login using <strong>user</strong> and generated random password <strong>74fbc0b8-c18e-49a0-9144-95cd019d8010</strong></p>
<p>Go to <code>http://localhost:8080/logout</code> page to invalidate the session and logout of the application.</p>
<p>You can set a custom user name and password in application.properties file. Spring Security will use in memory authentication with the provided username and password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.security.user.name=user</span><br><span class="line">spring.security.user.password=password</span><br></pre></td></tr></table></figure>

<h1 id="Security-Configuration"><a href="#Security-Configuration" class="headerlink" title="Security Configuration"></a>Security Configuration</h1><p>We configure Spring security by creating a configuration class that extends <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter.html">WebSecurityConfigurerAdapter</a>.</p>
<p>We also need to add @EnableWebSecurity annotation to the configuration class.  @EnableWebSecurity enable Spring Security’s web security support and provide the Spring MVC integration. </p>
<p>Here is what a Spring Security configuration looks like:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this example, we override <code>configure(HttpSecurity http)</code> method. The configuration  will secure all requests and use Basic authentication instead of form base authentication.</p>
<p>With the above configuration we switch from form base authentication to basic authentication:</p>
<img src="basic-auth.png" />

<h1 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h1><ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/">Spring security Reference</a></li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html">Spring Security Javadoc</a></li>
<li><a href="https://github.com/spring-projects/spring-security">Spring Security source code in Github</a></li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.baeldung.com/java-config-spring-security">Introduction to Java Config for Spring Security by Baeldung</a></li>
<li><a href="https://www.youtube.com/watch?v=I0poT4UxFxE">Authentication vs authorization by Java Brains</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - JDBC Authentication</title>
    <url>/SpringSecurity/Spring-Security-JDBCAuthentication/</url>
    <content><![CDATA[<p>Configure JDBC based Authentication</p>
<span id="more"></span>

<h1 id="Database-Setup"><a href="#Database-Setup" class="headerlink" title="Database Setup"></a>Database Setup</h1><p>You need to setup the database first before using JDBC Authenticaion.</p>
<p>Spring security provides a default schema for JDBC based authentication. You can find the default schema from <a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/">https://docs.spring.io/spring-security/site/docs/current/reference/html5/</a> </p>
<p>schema.sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users(</span><br><span class="line">    username varchar_ignorecase(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,</span><br><span class="line">    password varchar_ignorecase(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    enabled <span class="type">boolean</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> authorities (</span><br><span class="line">    username varchar_ignorecase(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    authority varchar_ignorecase(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">constraint</span> fk_authorities_users <span class="keyword">foreign</span> key(username) <span class="keyword">references</span> users(username)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index ix_auth_username <span class="keyword">on</span> authorities (username,authority);</span><br></pre></td></tr></table></figure>

<p>data.sql - add sample data. Insert two users with password equals ‘password’.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(username, password, enabled) <span class="keyword">values</span>(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;$2a$10$q.YKOfjjfHhGxYaGp/hSFe0VTPCMPJo9cu/TmVZEwulMMqHZhLGZ2&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(username, password, enabled) <span class="keyword">values</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;$2a$10$q.YKOfjjfHhGxYaGp/hSFe0VTPCMPJo9cu/TmVZEwulMMqHZhLGZ2&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> authorities(username, authority) <span class="keyword">values</span>(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;ROLE_USER&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> authorities(username, authority) <span class="keyword">values</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;ROLE_USER&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> authorities(username, authority) <span class="keyword">values</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure>


<h1 id="JDBC-Authentication"><a href="#JDBC-Authentication" class="headerlink" title="JDBC Authentication"></a>JDBC Authentication</h1><p>For JDBC Authentication We need to setup the datasource to use in the configuration class.</p>
<p>SecurityConfiguration.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated()</span><br><span class="line">                .and().formLogin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.jdbcAuthentication().dataSource(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AuthenticationManagerBuilder.jdbcAuthentication() method configures Spring Security to use JDBC authentication. and returns JdbcUserDetailsManagerConfigurer to allow customization of the JDBC authentication. </p>
<p>The only required method is the dataSource(javax.sql.DataSource) all other methods have reasonable defaults.</p>
<p>Here we use BCryptPasswordEncoder. The default is to use plain text, which you shouldn’t use in real world.</p>
<p>Reference</p>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/api/index.html?org/springframework/security/config/annotation/authentication/builders/AuthenticationManagerBuilder.html">AuthenticationManagerBuilder Javadoc</a></li>
<li><a href="https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/api/index.html?org/springframework/security/config/annotation/authentication/configurers/provisioning/JdbcUserDetailsManagerConfigurer.html">JdbcUserDetailsManagerConfigurer Javadoc</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - LDAP Authentication</title>
    <url>/SpringSecurity/Spring-Security-LDAP-Authentication/</url>
    <content><![CDATA[<p>LDAP Authentication</p>
<span id="more"></span>
<p>This post follows spring security LDAP guide <a href="https://spring.io/guides/gs/authenticating-ldap/">https://spring.io/guides/gs/authenticating-ldap/</a></p>
<p>The guide uses git repository</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/spring-guides/gs-authenticating-ldap.git</span><br></pre></td></tr></table></figure>

<h1 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h1><p>Gradle setup</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">compile(&quot;org.springframework.ldap:spring-ldap-core&quot;)</span><br><span class="line">compile(&quot;org.springframework.security:spring-security-ldap&quot;)</span><br><span class="line">compile(&quot;com.unboundid:unboundid-ldapsdk&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="Set-up-an-Embeded-LDAP-Server"><a href="#Set-up-an-Embeded-LDAP-Server" class="headerlink" title="Set up an Embeded LDAP Server"></a>Set up an Embeded LDAP Server</h1><p>You can start an embedded LDAP Server using LDIF(LDAP Data Interchange Format) files</p>
<p>add test-server.ldif under classpath src&#x2F;test&#x2F;resources</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dn: dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: domain</span><br><span class="line">objectclass: extensibleObject</span><br><span class="line">dc: springframework</span><br><span class="line"></span><br><span class="line">dn: ou=groups,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: organizationalUnit</span><br><span class="line">ou: groups</span><br><span class="line"></span><br><span class="line">dn: ou=subgroups,ou=groups,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: organizationalUnit</span><br><span class="line">ou: subgroups</span><br><span class="line"></span><br><span class="line">dn: ou=people,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: organizationalUnit</span><br><span class="line">ou: people</span><br><span class="line"></span><br><span class="line">dn: ou=space cadets,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: organizationalUnit</span><br><span class="line">ou: space cadets</span><br><span class="line"></span><br><span class="line">dn: ou=\&quot;quoted people\&quot;,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: organizationalUnit</span><br><span class="line">ou: &quot;quoted people&quot;</span><br><span class="line"></span><br><span class="line">dn: ou=otherpeople,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: organizationalUnit</span><br><span class="line">ou: otherpeople</span><br><span class="line"></span><br><span class="line">dn: uid=ben,ou=people,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: person</span><br><span class="line">objectclass: organizationalPerson</span><br><span class="line">objectclass: inetOrgPerson</span><br><span class="line">cn: Ben Alex</span><br><span class="line">sn: Alex</span><br><span class="line">uid: ben</span><br><span class="line">userPassword: $2a$10$c6bSeWPhg06xB1lvmaWNNe4NROmZiSpYhlocU/98HNr2MhIOiSt36</span><br><span class="line"></span><br><span class="line">dn: uid=bob,ou=people,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: person</span><br><span class="line">objectclass: organizationalPerson</span><br><span class="line">objectclass: inetOrgPerson</span><br><span class="line">cn: Bob Hamilton</span><br><span class="line">sn: Hamilton</span><br><span class="line">uid: bob</span><br><span class="line">userPassword: bobspassword</span><br><span class="line"></span><br><span class="line">dn: uid=joe,ou=otherpeople,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: person</span><br><span class="line">objectclass: organizationalPerson</span><br><span class="line">objectclass: inetOrgPerson</span><br><span class="line">cn: Joe Smeth</span><br><span class="line">sn: Smeth</span><br><span class="line">uid: joe</span><br><span class="line">userPassword: joespassword</span><br><span class="line"></span><br><span class="line">dn: cn=mouse\, jerry,ou=people,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: person</span><br><span class="line">objectclass: organizationalPerson</span><br><span class="line">objectclass: inetOrgPerson</span><br><span class="line">cn: Mouse, Jerry</span><br><span class="line">sn: Mouse</span><br><span class="line">uid: jerry</span><br><span class="line">userPassword: jerryspassword</span><br><span class="line"></span><br><span class="line">dn: cn=slash/guy,ou=people,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: person</span><br><span class="line">objectclass: organizationalPerson</span><br><span class="line">objectclass: inetOrgPerson</span><br><span class="line">cn: slash/guy</span><br><span class="line">sn: Slash</span><br><span class="line">uid: slashguy</span><br><span class="line">userPassword: slashguyspassword</span><br><span class="line"></span><br><span class="line">dn: cn=quote\&quot;guy,ou=\&quot;quoted people\&quot;,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: person</span><br><span class="line">objectclass: organizationalPerson</span><br><span class="line">objectclass: inetOrgPerson</span><br><span class="line">cn: quote\&quot;guy</span><br><span class="line">sn: Quote</span><br><span class="line">uid: quoteguy</span><br><span class="line">userPassword: quoteguyspassword</span><br><span class="line"></span><br><span class="line">dn: uid=space cadet,ou=space cadets,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: person</span><br><span class="line">objectclass: organizationalPerson</span><br><span class="line">objectclass: inetOrgPerson</span><br><span class="line">cn: Space Cadet</span><br><span class="line">sn: Cadet</span><br><span class="line">uid: space cadet</span><br><span class="line">userPassword: spacecadetspassword</span><br><span class="line"></span><br><span class="line">dn: cn=developers,ou=groups,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: groupOfUniqueNames</span><br><span class="line">cn: developers</span><br><span class="line">ou: developer</span><br><span class="line">uniqueMember: uid=ben,ou=people,dc=springframework,dc=org</span><br><span class="line">uniqueMember: uid=bob,ou=people,dc=springframework,dc=org</span><br><span class="line"></span><br><span class="line">dn: cn=managers,ou=groups,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: groupOfUniqueNames</span><br><span class="line">cn: managers</span><br><span class="line">ou: manager</span><br><span class="line">uniqueMember: uid=ben,ou=people,dc=springframework,dc=org</span><br><span class="line">uniqueMember: cn=mouse\, jerry,ou=people,dc=springframework,dc=org</span><br><span class="line"></span><br><span class="line">dn: cn=submanagers,ou=subgroups,ou=groups,dc=springframework,dc=org</span><br><span class="line">objectclass: top</span><br><span class="line">objectclass: groupOfUniqueNames</span><br><span class="line">cn: submanagers</span><br><span class="line">ou: submanager</span><br><span class="line">uniqueMember: uid=ben,ou=people,dc=springframework,dc=org</span><br></pre></td></tr></table></figure>

<p>configure embedded ldap server in application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.ldap.embedded.ldif</span>=<span class="string">classpath:test-server.ldif</span></span><br><span class="line"><span class="attr">spring.ldap.embedded.base-dn</span>=<span class="string">dc=springframework,dc=org</span></span><br><span class="line"><span class="attr">spring.ldap.embedded.port</span>=<span class="string">8389</span></span><br></pre></td></tr></table></figure>

<h1 id="LDAP-Authentication"><a href="#LDAP-Authentication" class="headerlink" title="LDAP Authentication"></a>LDAP Authentication</h1><p>Use ldapAuthentication() method to configure LDAP Authentication.</p>
<p>WebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http</span><br><span class="line">      .authorizeRequests()</span><br><span class="line">        .anyRequest().fullyAuthenticated()</span><br><span class="line">        .and()</span><br><span class="line">      .formLogin();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth</span><br><span class="line">                .ldapAuthentication()</span><br><span class="line">                .userDnPatterns(<span class="string">&quot;uid=&#123;0&#125;,ou=people&quot;</span>) <span class="comment">// set LDAP pattern for finding the usernames, &#123;0&#125; will be substitued</span></span><br><span class="line">                .groupSearchBase(<span class="string">&quot;ou=groups&quot;</span>) <span class="comment">// The search base for group membership searches. Defaults to &quot;&quot;.</span></span><br><span class="line">                .contextSource()</span><br><span class="line">                .url(<span class="string">&quot;ldap://localhost:8389/dc=springframework,dc=org&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .passwordCompare()</span><br><span class="line">                .passwordEncoder(passwordEncoder()) <span class="comment">// Allows specifying the PasswordEncoder to use. The default is NoOpPasswordEncoder.</span></span><br><span class="line">                .passwordAttribute(<span class="string">&quot;userPassword&quot;</span>); <span class="comment">//The attribute in the directory which contains the user password. Defaults to &quot;userPassword&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Reference</p>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/">Spring Security Doc - LDAP Authentication</a></li>
<li><a href="https://spring.io/guides/gs/authenticating-ldap/">spring security LDAP Guide</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Method Security</title>
    <url>/SpringSecurity/Spring-Security-Method-Security/</url>
    <content><![CDATA[<p>Method Security</p>
<span id="more"></span>

<h1 id="Method-Security"><a href="#Method-Security" class="headerlink" title="Method Security"></a>Method Security</h1><p>Enable method security using @EnableGlobalMethodSecurity annotation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(</span></span><br><span class="line"><span class="meta">		prePostEnabled = true,</span></span><br><span class="line"><span class="meta">		securedEnabled = true,</span></span><br><span class="line"><span class="meta">		jsr250Enabled = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityApplication</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(SpringSecurityApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Now you can use <code>@Secured</code> annotation to specify the roles needed to access the method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="meta">@Secured(&quot;ROLE_ADMIN&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSecretMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;secret test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The <code>@RoleAllowed</code> annotation is the JSR-250’s equivalent annotation of the <code>@Secured</code> annotation.  You can swap @Secured with @RolesAllowed annotaiton and it will still work.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RolesAllowed(&quot;ROLE_ADMIN&quot;)</span></span><br></pre></td></tr></table></figure>

<h1 id="PreAuthorize-and-PostAuthorize"><a href="#PreAuthorize-and-PostAuthorize" class="headerlink" title="@PreAuthorize and @PostAuthorize"></a>@PreAuthorize and @PostAuthorize</h1><p>@PreAuthorize and @PostAuthorize allows you to use SpEL expression access control. @PreAuthorize happens before method invocation. @PostAuthorize happens after method invocation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getSecretMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;secret test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Expression-based annotations are a good choice if you need to define simple rules that go beyond checking the role names against the user’s list of authorities.</p>
<p>Reference</p>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#jc-method">Spring Security Docs method security section</a></li>
<li><a href="https://www.baeldung.com/spring-security-method-security">Introduction to Spring Method Security by Baeldung</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - OAuth2 Process</title>
    <url>/SpringSecurity/Spring-Security-OAuth2-Process/</url>
    <content><![CDATA[<p>Let us walk throught OAuth2 Authorization Process. Have some basic understanding the classes mentioned in <a href="../Spring-Security-OAuth2-Core-Classes">Spring Security OAuth2 Core Classes</a> will help you understanding OAuth2 process in this post.</p>
<span id="more"></span>

<p>When the user logs in using Github using auhtorization code grant flow. The following three classes are responsible for handling the user login.</p>
<ul>
<li>OAuth2LoginAuthenticationFilter</li>
<li>OAuth2LoginAuthenticationProvider</li>
<li>DefaultOAuth2UserService</li>
</ul>
<h1 id="OAuth2LoginAuthenticationFilter"><a href="#OAuth2LoginAuthenticationFilter" class="headerlink" title="OAuth2LoginAuthenticationFilter"></a>OAuth2LoginAuthenticationFilter</h1><ul>
<li>This authentication Filter handles the processing of an OAuth 2.0 Authorization Response for the authorization code grant flow and delegates an OAuth2LoginAuthenticationToken to the AuthenticationManager to log in the End-User.</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/oauth2/client/web/OAuth2LoginAuthenticationFilter.html">javadoc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/web/OAuth2LoginAuthenticationFilter.java">Source Code</a></li>
</ul>
<p>attemptAuthentication code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">		<span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">	MultiValueMap&lt;String, String&gt; params = OAuth2AuthorizationResponseUtils.toMultiMap(request.getParameterMap());</span><br><span class="line">	<span class="keyword">if</span> (!OAuth2AuthorizationResponseUtils.isAuthorizationResponse(params)) &#123;</span><br><span class="line">		<span class="type">OAuth2Error</span> <span class="variable">oauth2Error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuth2Error</span>(OAuth2ErrorCodes.INVALID_REQUEST);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">OAuth2AuthorizationRequest</span> <span class="variable">authorizationRequest</span> <span class="operator">=</span></span><br><span class="line">			<span class="built_in">this</span>.authorizationRequestRepository.removeAuthorizationRequest(request, response);</span><br><span class="line">	<span class="keyword">if</span> (authorizationRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="type">OAuth2Error</span> <span class="variable">oauth2Error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuth2Error</span>(AUTHORIZATION_REQUEST_NOT_FOUND_ERROR_CODE);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">String</span> <span class="variable">registrationId</span> <span class="operator">=</span> authorizationRequest.getAttribute(OAuth2ParameterNames.REGISTRATION_ID);</span><br><span class="line">	<span class="type">ClientRegistration</span> <span class="variable">clientRegistration</span> <span class="operator">=</span> <span class="built_in">this</span>.clientRegistrationRepository.findByRegistrationId(registrationId);</span><br><span class="line">	<span class="keyword">if</span> (clientRegistration == <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="type">OAuth2Error</span> <span class="variable">oauth2Error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuth2Error</span>(CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE,</span><br><span class="line">				<span class="string">&quot;Client Registration not found with Id: &quot;</span> + registrationId, <span class="literal">null</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">String</span> <span class="variable">redirectUri</span> <span class="operator">=</span> UriComponentsBuilder.fromHttpUrl(UrlUtils.buildFullRequestUrl(request))</span><br><span class="line">			.replaceQuery(<span class="literal">null</span>)</span><br><span class="line">			.build()</span><br><span class="line">			.toUriString();</span><br><span class="line">	<span class="type">OAuth2AuthorizationResponse</span> <span class="variable">authorizationResponse</span> <span class="operator">=</span> OAuth2AuthorizationResponseUtils.convert(params, redirectUri);</span><br><span class="line"></span><br><span class="line">	<span class="type">Object</span> <span class="variable">authenticationDetails</span> <span class="operator">=</span> <span class="built_in">this</span>.authenticationDetailsSource.buildDetails(request);</span><br><span class="line">	<span class="type">OAuth2LoginAuthenticationToken</span> <span class="variable">authenticationRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuth2LoginAuthenticationToken</span>(</span><br><span class="line">			clientRegistration, <span class="keyword">new</span> <span class="title class_">OAuth2AuthorizationExchange</span>(authorizationRequest, authorizationResponse));</span><br><span class="line">	authenticationRequest.setDetails(authenticationDetails);</span><br><span class="line"></span><br><span class="line">	<span class="type">OAuth2LoginAuthenticationToken</span> <span class="variable">authenticationResult</span> <span class="operator">=</span></span><br><span class="line">		(OAuth2LoginAuthenticationToken) <span class="built_in">this</span>.getAuthenticationManager().authenticate(authenticationRequest);</span><br><span class="line"></span><br><span class="line">	<span class="type">OAuth2AuthenticationToken</span> <span class="variable">oauth2Authentication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuth2AuthenticationToken</span>(</span><br><span class="line">		authenticationResult.getPrincipal(),</span><br><span class="line">		authenticationResult.getAuthorities(),</span><br><span class="line">		authenticationResult.getClientRegistration().getRegistrationId());</span><br><span class="line">	oauth2Authentication.setDetails(authenticationDetails);</span><br><span class="line"></span><br><span class="line">	<span class="type">OAuth2AuthorizedClient</span> <span class="variable">authorizedClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuth2AuthorizedClient</span>(</span><br><span class="line">		authenticationResult.getClientRegistration(),</span><br><span class="line">		oauth2Authentication.getName(),</span><br><span class="line">		authenticationResult.getAccessToken(),</span><br><span class="line">		authenticationResult.getRefreshToken());</span><br><span class="line"></span><br><span class="line">	<span class="built_in">this</span>.authorizedClientRepository.saveAuthorizedClient(authorizedClient, oauth2Authentication, request, response);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> oauth2Authentication;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Process</p>
<ol>
<li>Create OAuth2LoginAuthenticationToken as authentication request</li>
<li>Delegate authentication to AuthenticationManager. OAuth2LoginAuthenticationToken is passed as parameter</li>
<li>Create OAuth2AuthenticationToken from the AuthenticationManager.authenticate(…) method call result</li>
<li>Create OAuth2AuthorizedClient</li>
<li>Save OAuth2AuthorizedClient to authorizedClientRepository</li>
<li>Return OAuth2AuthenticationToken</li>
</ol>
<p>There are providers used by AuthenticationManager for OAuth2</p>
<ul>
<li>OAuth2LoginAuthenticationProvider</li>
<li>OidcAuthorizationCodeAuthenticationProvider</li>
</ul>
<p>If the scope contains “openid” then OidcAuthorizationCodeAuthenticationProvider will be used to process the authentication. If not, then OAuth2LoginAuthenticationProvider will be used.</p>
<p>We will analyze OAuth2LoginAuthenticationProvider class only.</p>
<h1 id="OAuth2LoginAuthenticationProvider"><a href="#OAuth2LoginAuthenticationProvider" class="headerlink" title="OAuth2LoginAuthenticationProvider"></a>OAuth2LoginAuthenticationProvider</h1><ul>
<li>An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/oauth2/client/authentication/OAuth2LoginAuthenticationProvider.html">Javadoc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/authentication/OAuth2LoginAuthenticationProvider.java">Source Code</a></li>
</ul>
<p>OAuth2LoginAuthenticationProvider.authenticate() method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">	<span class="type">OAuth2LoginAuthenticationToken</span> <span class="variable">authorizationCodeAuthentication</span> <span class="operator">=</span></span><br><span class="line">		(OAuth2LoginAuthenticationToken) authentication;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Section 3.1.2.1 Authentication Request - https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest</span></span><br><span class="line">	<span class="comment">// scope</span></span><br><span class="line">	<span class="comment">// 		REQUIRED. OpenID Connect requests MUST contain the &quot;openid&quot; scope value.</span></span><br><span class="line">	<span class="keyword">if</span> (authorizationCodeAuthentication.getAuthorizationExchange()</span><br><span class="line">		.getAuthorizationRequest().getScopes().contains(<span class="string">&quot;openid&quot;</span>)) &#123;</span><br><span class="line">		<span class="comment">// This is an OpenID Connect Authentication Request so return null</span></span><br><span class="line">		<span class="comment">// and let OidcAuthorizationCodeAuthenticationProvider handle it instead</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	OAuth2AccessTokenResponse accessTokenResponse;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		OAuth2AuthorizationExchangeValidator.validate(</span><br><span class="line">				authorizationCodeAuthentication.getAuthorizationExchange());</span><br><span class="line"></span><br><span class="line">		accessTokenResponse = <span class="built_in">this</span>.accessTokenResponseClient.getTokenResponse(</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">OAuth2AuthorizationCodeGrantRequest</span>(</span><br><span class="line">						authorizationCodeAuthentication.getClientRegistration(),</span><br><span class="line">						authorizationCodeAuthentication.getAuthorizationExchange()));</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">catch</span> (OAuth2AuthorizationException ex) &#123;</span><br><span class="line">		<span class="type">OAuth2Error</span> <span class="variable">oauth2Error</span> <span class="operator">=</span> ex.getError();</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">OAuth2AccessToken</span> <span class="variable">accessToken</span> <span class="operator">=</span> accessTokenResponse.getAccessToken();</span><br><span class="line">	Map&lt;String, Object&gt; additionalParameters = accessTokenResponse.getAdditionalParameters();</span><br><span class="line"></span><br><span class="line">	<span class="type">OAuth2User</span> <span class="variable">oauth2User</span> <span class="operator">=</span> <span class="built_in">this</span>.userService.loadUser(<span class="keyword">new</span> <span class="title class_">OAuth2UserRequest</span>(</span><br><span class="line">			authorizationCodeAuthentication.getClientRegistration(), accessToken, additionalParameters));</span><br><span class="line"></span><br><span class="line">	Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; mappedAuthorities =</span><br><span class="line">		<span class="built_in">this</span>.authoritiesMapper.mapAuthorities(oauth2User.getAuthorities());</span><br><span class="line"></span><br><span class="line">	<span class="type">OAuth2LoginAuthenticationToken</span> <span class="variable">authenticationResult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuth2LoginAuthenticationToken</span>(</span><br><span class="line">		authorizationCodeAuthentication.getClientRegistration(),</span><br><span class="line">		authorizationCodeAuthentication.getAuthorizationExchange(),</span><br><span class="line">		oauth2User,</span><br><span class="line">		mappedAuthorities,</span><br><span class="line">		accessToken,</span><br><span class="line">		accessTokenResponse.getRefreshToken());</span><br><span class="line">	authenticationResult.setDetails(authorizationCodeAuthentication.getDetails());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> authenticationResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li><code>this.accessTokenResponseClient.getTokenResponse(...)</code> will take the Authorization Code and exchange with Authorization Server to get the access token.</li>
<li>UserService(DefaultOAuth2UserService in this case) will call UserInfo endpoint and then create the user and put it in Authentication object.</li>
</ul>
<h1 id="DefaultOAuth2UserService"><a href="#DefaultOAuth2UserService" class="headerlink" title="DefaultOAuth2UserService"></a>DefaultOAuth2UserService</h1><ul>
<li>DefaultOAuth2UserService is an implementation of UserService. Its loadUser method calls UserInfo Endpoint and retrieve user info. Finally create a new OAuth2User and return it.</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/oauth2/client/userinfo/DefaultOAuth2UserService.html">Javadoc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/userinfo/DefaultOAuth2UserService.java">Source Code</a></li>
</ul>
<p>DefaultOAuth2UserService.loadUser method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> OAuth2User <span class="title function_">loadUser</span><span class="params">(OAuth2UserRequest userRequest)</span> <span class="keyword">throws</span> OAuth2AuthenticationException &#123;</span><br><span class="line">	Assert.notNull(userRequest, <span class="string">&quot;userRequest cannot be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!StringUtils.hasText(userRequest.getClientRegistration().getProviderDetails().getUserInfoEndpoint().getUri())) &#123;</span><br><span class="line">		<span class="type">OAuth2Error</span> <span class="variable">oauth2Error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuth2Error</span>(</span><br><span class="line">			MISSING_USER_INFO_URI_ERROR_CODE,</span><br><span class="line">			<span class="string">&quot;Missing required UserInfo Uri in UserInfoEndpoint for Client Registration: &quot;</span> +</span><br><span class="line">				userRequest.getClientRegistration().getRegistrationId(),</span><br><span class="line">			<span class="literal">null</span></span><br><span class="line">		);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">String</span> <span class="variable">userNameAttributeName</span> <span class="operator">=</span> userRequest.getClientRegistration().getProviderDetails()</span><br><span class="line">			.getUserInfoEndpoint().getUserNameAttributeName();</span><br><span class="line">	<span class="keyword">if</span> (!StringUtils.hasText(userNameAttributeName)) &#123;</span><br><span class="line">		<span class="type">OAuth2Error</span> <span class="variable">oauth2Error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuth2Error</span>(</span><br><span class="line">			MISSING_USER_NAME_ATTRIBUTE_ERROR_CODE,</span><br><span class="line">			<span class="string">&quot;Missing required \&quot;user name\&quot; attribute name in UserInfoEndpoint for Client Registration: &quot;</span> +</span><br><span class="line">				userRequest.getClientRegistration().getRegistrationId(),</span><br><span class="line">			<span class="literal">null</span></span><br><span class="line">		);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	RequestEntity&lt;?&gt; request = <span class="built_in">this</span>.requestEntityConverter.convert(userRequest);</span><br><span class="line"></span><br><span class="line">	ResponseEntity&lt;Map&lt;String, Object&gt;&gt; response;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		response = <span class="built_in">this</span>.restOperations.exchange(request, PARAMETERIZED_RESPONSE_TYPE);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (OAuth2AuthorizationException ex) &#123;</span><br><span class="line">		<span class="type">OAuth2Error</span> <span class="variable">oauth2Error</span> <span class="operator">=</span> ex.getError();</span><br><span class="line">		<span class="type">StringBuilder</span> <span class="variable">errorDetails</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">		errorDetails.append(<span class="string">&quot;Error details: [&quot;</span>);</span><br><span class="line">		errorDetails.append(<span class="string">&quot;UserInfo Uri: &quot;</span>).append(</span><br><span class="line">				userRequest.getClientRegistration().getProviderDetails().getUserInfoEndpoint().getUri());</span><br><span class="line">		errorDetails.append(<span class="string">&quot;, Error Code: &quot;</span>).append(oauth2Error.getErrorCode());</span><br><span class="line">		<span class="keyword">if</span> (oauth2Error.getDescription() != <span class="literal">null</span>) &#123;</span><br><span class="line">			errorDetails.append(<span class="string">&quot;, Error Description: &quot;</span>).append(oauth2Error.getDescription());</span><br><span class="line">		&#125;</span><br><span class="line">		errorDetails.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">		oauth2Error = <span class="keyword">new</span> <span class="title class_">OAuth2Error</span>(INVALID_USER_INFO_RESPONSE_ERROR_CODE,</span><br><span class="line">				<span class="string">&quot;An error occurred while attempting to retrieve the UserInfo Resource: &quot;</span> + errorDetails.toString(), <span class="literal">null</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString(), ex);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (RestClientException ex) &#123;</span><br><span class="line">		<span class="type">OAuth2Error</span> <span class="variable">oauth2Error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuth2Error</span>(INVALID_USER_INFO_RESPONSE_ERROR_CODE,</span><br><span class="line">				<span class="string">&quot;An error occurred while attempting to retrieve the UserInfo Resource: &quot;</span> + ex.getMessage(), <span class="literal">null</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString(), ex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Map&lt;String, Object&gt; userAttributes = response.getBody();</span><br><span class="line">	Set&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">	authorities.add(<span class="keyword">new</span> <span class="title class_">OAuth2UserAuthority</span>(userAttributes));</span><br><span class="line">	<span class="type">OAuth2AccessToken</span> <span class="variable">token</span> <span class="operator">=</span> userRequest.getAccessToken();</span><br><span class="line">	<span class="keyword">for</span> (String authority : token.getScopes()) &#123;</span><br><span class="line">		authorities.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;SCOPE_&quot;</span> + authority));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultOAuth2User</span>(authorities, userAttributes, userNameAttributeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - OAuth2 Core Classes</title>
    <url>/SpringSecurity/Spring-Security-OAuth2-Core-Classes/</url>
    <content><![CDATA[<p>You don’t need to understand all the OAuth2 classes to use OAuth2.0 login. However, knowing the core OAuth2 classes and internals will help you configure OAuth2 authentication process and take full advantage of Spring Boot’s OAuth2.0 support.</p>
<span id="more"></span>
<p>If you are not familiar with OAuth2, see this post <a href="../../Security/OAuth2">OAuth2</a> to understand OAuth2 concepts first.</p>
<h1 id="OAuth2LoginAuthenticationToken"><a href="#OAuth2LoginAuthenticationToken" class="headerlink" title="OAuth2LoginAuthenticationToken"></a>OAuth2LoginAuthenticationToken</h1><ul>
<li>An AbstractAuthenticationToken for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.</li>
<li>OAuth2LoginAuthenticationToken is used in OAuth2LoginAuthenticationFilter for login purpose</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/cOAuth2LoginAuthenticationTokenurrent/api/index.html?org/springframework/security/oauth2/client/authentication/OAuth2LoginAuthenticationToken.html">Javadoc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blOAuth2LoginAuthenticationTokenob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/authentication/OAuth2LoginAuthenticationToken.java">Source code</a></li>
</ul>
<p>OAuth2LoginAuthenticationToken contains the following fields</p>
<ul>
<li>principal of type OAuth2User</li>
<li><strong>ClientRegistration</strong></li>
<li><strong>OAuth2AuthorizationExchange</strong></li>
<li><strong>OAuth2AccessToken</strong></li>
<li><strong>OAuth2RefreshToken</strong> - this field is optional</li>
</ul>
<h1 id="OAuth2AuthenticationToken"><a href="#OAuth2AuthenticationToken" class="headerlink" title="OAuth2AuthenticationToken"></a>OAuth2AuthenticationToken</h1><ul>
<li>An implementation of an AbstractAuthenticationToken that represents an OAuth 2.0 Authentication.</li>
<li>OAuth2AuthenticationToken is created in OAuth2LoginAuthenticationFilter</li>
<li>When the user login successfully, OAuth2AuthenticationToken is created and stored in SecurityContext</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/oauth2/client/authentication/OAuth2AuthenticationToken.html">Javadoc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/authentication/OAuth2AuthenticationToken.java">Source Code</a></li>
</ul>
<p>OAuth2AuthenticationToken contains the following fields</p>
<ul>
<li>principal of type OAuth2User</li>
<li>authorizedClientRegistrationId</li>
</ul>
<p>Note that OAuth2AuthenticationToken doesn’t contain AccessToken or RefreshToken, If you need to use AccessToken or RefreshToken, you can get it from OAuth2AuthorizedClient.</p>
<h1 id="OAuth2User-and-OidcUser"><a href="#OAuth2User-and-OidcUser" class="headerlink" title="OAuth2User and OidcUser"></a>OAuth2User and OidcUser</h1><ul>
<li>OAuth2User is an Interface that extends OAuth2AuthenticatedPrincipal. DefaultOAuth2User is the default implementation</li>
<li>OAuth2AuthenticationToken contains OAuth2User.</li>
</ul>
<p>OAuth2AuthenticatedPrincipal is an AuthenticatedPrincipal that represents the principal associated with an OAuth 2.0 token. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OAuth2AuthenticatedPrincipal</span> <span class="keyword">extends</span> <span class="title class_">AuthenticatedPrincipal</span> &#123;</span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">default</span> &lt;A&gt; A <span class="title function_">getAttribute</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (A) getAttributes().get(name);</span><br><span class="line">	&#125;</span><br><span class="line">	Map&lt;String, Object&gt; <span class="title function_">getAttributes</span><span class="params">()</span>;</span><br><span class="line">	Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>OAuth2User is an interface that extends OAuth2AuthenticatedPrincipal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OAuth2User</span> <span class="keyword">extends</span> <span class="title class_">OAuth2AuthenticatedPrincipal</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>OidcUser extends OAuth2User. It is created when OpenID Connect is used. This class contains additional information including ID Token. ID Token is a Jwt returned only for OpenID Connect authentication.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OidcUser</span> <span class="keyword">extends</span> <span class="title class_">OAuth2User</span>, IdTokenClaimAccessor &#123;</span><br><span class="line">	Map&lt;String, Object&gt; <span class="title function_">getClaims</span><span class="params">()</span>;</span><br><span class="line">	OidcUserInfo <span class="title function_">getUserInfo</span><span class="params">()</span>;</span><br><span class="line">	OidcIdToken <span class="title function_">getIdToken</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>OAuth2User or OidcUser can be retrieved when @AuthenticationPrincipal annotation is used. it can also be retrieved from OAuth2AuthenticationToken.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value=&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(<span class="meta">@AuthenticationPrincipal</span> OidcUser principal)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + principal.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ClientRegistration"><a href="#ClientRegistration" class="headerlink" title="ClientRegistration"></a>ClientRegistration</h1><ul>
<li><code>ClientRegistration</code> is a representation of a client registration with an OAuth 2.0 or OpenID Connect 1.0 Provider.</li>
<li>A client registration holds information, such as client id, client secret, authorization grant type, redirect URI, scope(s), authorization URI, token URI, and other details.</li>
<li>It has a Builder static nested class </li>
<li>Its <code>registrationId</code> uniquely identifies the <code>ClientRegistration</code>.</li>
<li><a href="https://github.com/spring-projects/spring-security/blob/9f6af4f3b8e79a8a45369d99862cd3d96f4083ce/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/registration/ClientRegistration.java">source code</a></li>
</ul>
<p>See the member variables here:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ClientRegistration</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String registrationId;  </span><br><span class="line">    <span class="keyword">private</span> String clientId;    </span><br><span class="line">    <span class="keyword">private</span> String clientSecret;    </span><br><span class="line">    <span class="keyword">private</span> ClientAuthenticationMethod clientAuthenticationMethod;  </span><br><span class="line">    <span class="keyword">private</span> AuthorizationGrantType authorizationGrantType;  </span><br><span class="line">    <span class="keyword">private</span> String redirectUriTemplate; </span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; scopes; </span><br><span class="line">    <span class="keyword">private</span> ProviderDetails providerDetails;</span><br><span class="line">    <span class="keyword">private</span> String clientName;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderDetails</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String authorizationUri;    </span><br><span class="line">        <span class="keyword">private</span> String tokenUri;    </span><br><span class="line">        <span class="keyword">private</span> UserInfoEndpoint userInfoEndpoint;</span><br><span class="line">        <span class="keyword">private</span> String jwkSetUri;   </span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, Object&gt; configurationMetadata;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoEndpoint</span> &#123;</span><br><span class="line">            <span class="keyword">private</span> String uri; </span><br><span class="line">            <span class="keyword">private</span> AuthenticationMethod authenticationMethod;  </span><br><span class="line">            <span class="keyword">private</span> String userNameAttributeName;   </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>see <a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#oauth2Client-client-registration">ClientRegistration Documentation</a> for explaination of each field.</p>
<p>Client Registration can be configured in application.yml file.</p>
<p><code>spring.security.oauth2.client.registration</code> is the base property prefix for OAuth Client properties</p>
<p>application.yml - example to configure a Google oauth2 ClientRegistration. Here the registrationId is “google”.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">oauth2:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">registration:</span>   </span><br><span class="line">          <span class="attr">google:</span>   </span><br><span class="line">            <span class="attr">client-id:</span> <span class="string">$&#123;GOOGLE_CLIENT_ID&#125;</span></span><br><span class="line">            <span class="attr">client-secret:</span> <span class="string">$&#123;GOOGLE_CLIENT_SECRET&#125;</span></span><br></pre></td></tr></table></figure>

<p>see <a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#oauth2login-boot-property-mappings">Spring Boot 2.x Property Mappings for ClientRegistration</a> for all the properties avaialble for client registration</p>
<p><a href="https://github.com/spring-projects/spring-security/blob/master/config/src/main/java/org/springframework/security/config/oauth2/client/CommonOAuth2Provider.java">CommonOAuth2Provider</a> preconfigure Client Registration Builders for Google, Github, Facebook and OKTA. That is why you only need to set client ID and client secret for Google ClientRegistration. Scope, authoriztionUri tokenUri etc are preconfigured already. If the provider is not one of them, you need to provide the necessary information.</p>
<p>The common way is to define ClientRegistration in application.yml. Another approach is to manually define ClientRegistration and provide the custom ClientRegistration to ClientRegistrationRepository.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2LoginConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ClientRegistrationRepository <span class="title function_">clientRegistrationRepository</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryClientRegistrationRepository</span>(<span class="built_in">this</span>.googleClientRegistration());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClientRegistration <span class="title function_">googleClientRegistration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ClientRegistration.withRegistrationId(<span class="string">&quot;google&quot;</span>)</span><br><span class="line">            .clientId(<span class="string">&quot;google-client-id&quot;</span>)</span><br><span class="line">            .clientSecret(<span class="string">&quot;google-client-secret&quot;</span>)</span><br><span class="line">            .clientAuthenticationMethod(ClientAuthenticationMethod.BASIC)</span><br><span class="line">            .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)</span><br><span class="line">            .redirectUriTemplate(<span class="string">&quot;&#123;baseUrl&#125;/login/oauth2/code/&#123;registrationId&#125;&quot;</span>)</span><br><span class="line">            .scope(<span class="string">&quot;openid&quot;</span>, <span class="string">&quot;profile&quot;</span>, <span class="string">&quot;email&quot;</span>, <span class="string">&quot;address&quot;</span>, <span class="string">&quot;phone&quot;</span>)</span><br><span class="line">            .authorizationUri(<span class="string">&quot;https://accounts.google.com/o/oauth2/v2/auth&quot;</span>)</span><br><span class="line">            .tokenUri(<span class="string">&quot;https://www.googleapis.com/oauth2/v4/token&quot;</span>)</span><br><span class="line">            .userInfoUri(<span class="string">&quot;https://www.googleapis.com/oauth2/v3/userinfo&quot;</span>)</span><br><span class="line">            .userNameAttributeName(IdTokenClaimNames.SUB)</span><br><span class="line">            .jwkSetUri(<span class="string">&quot;https://www.googleapis.com/oauth2/v3/certs&quot;</span>)</span><br><span class="line">            .clientName(<span class="string">&quot;Google&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="ClientRegistrationRepository"><a href="#ClientRegistrationRepository" class="headerlink" title="ClientRegistrationRepository"></a>ClientRegistrationRepository</h1><ul>
<li>A ClientRegistrationRepository is a repository of ClientRegistration(s).</li>
<li>The auto-configuration registers the ClientRegistrationRepository as a <code>@Bean</code> in the ApplicationContext so that it is available for dependency-injection</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/oauth2/client/registration/ClientRegistrationRepository.html">Javadoc</a> for ClientRegistrationRepository</li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/registration/ClientRegistrationRepository.java">Source code</a></li>
</ul>
<p>ClientRegistrationRepository Interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClientRegistrationRepository</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns the client registration identified by the provided &#123;<span class="doctag">@code</span> registrationId&#125;, or &#123;<span class="doctag">@code</span> null&#125; if not found.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	ClientRegistration <span class="title function_">findByRegistrationId</span><span class="params">(String registrationId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/registration/InMemoryClientRegistrationRepository.java">InMemoryClientRegistrationRepository</a> is an in-memory implementation of ClientRegistrationRepository. It uses a UnmodifiableConcurrentMap to store registration information. Spring Security does not provide another implementation.</p>
<p>If you don’t provide a ClientRegistrationRepository bean, Spring Security will create an InMemoryClientRegistrationRepository bean for you. </p>
<h1 id="OAuth2AuthorizedClient"><a href="#OAuth2AuthorizedClient" class="headerlink" title="OAuth2AuthorizedClient"></a>OAuth2AuthorizedClient</h1><ul>
<li><strong>A representation of an OAuth 2.0 Authorized Client.</strong> A client is considered “authorized” when the End-User (Resource Owner) has granted authorization to the client to access it’s protected resources.</li>
<li>OAuth2AuthorizedClient serves the purpose of associating an OAuth2AccessToken (and optional OAuth2RefreshToken) to a ClientRegistration (client) and resource owner, who is the Principal end-user that granted the authorization.</li>
<li>You can get the current user’s OAuth2AuthorizedClient using OAuth2AuthorizedClientService.loadAuthorizedClient method.</li>
<li>OAuth2AuthorizedClient contains <strong>accessToken</strong> and an optional <strong>refreshToken</strong>. </li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/OAuth2AuthorizedClient.java">Source Code</a></li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/oauth2/client/OAuth2AuthorizedClient.html">Javadoc</a></li>
</ul>
<p>source code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2AuthorizedClient</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> SpringSecurityCoreVersion.SERIAL_VERSION_UID;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ClientRegistration clientRegistration;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String principalName;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> OAuth2AccessToken accessToken;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> OAuth2RefreshToken refreshToken;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">OAuth2AuthorizedClient</span><span class="params">(ClientRegistration clientRegistration, </span></span><br><span class="line"><span class="params">            String principalName, OAuth2AccessToken accessToken)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>(clientRegistration, principalName, accessToken, <span class="literal">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">OAuth2AuthorizedClient</span><span class="params">(ClientRegistration clientRegistration, String principalName,</span></span><br><span class="line"><span class="params">			OAuth2AccessToken accessToken, <span class="meta">@Nullable</span> OAuth2RefreshToken refreshToken)</span> &#123;</span><br><span class="line">		Assert.notNull(clientRegistration, <span class="string">&quot;clientRegistration cannot be null&quot;</span>);</span><br><span class="line">		Assert.hasText(principalName, <span class="string">&quot;principalName cannot be empty&quot;</span>);</span><br><span class="line">		Assert.notNull(accessToken, <span class="string">&quot;accessToken cannot be null&quot;</span>);</span><br><span class="line">		<span class="built_in">this</span>.clientRegistration = clientRegistration;</span><br><span class="line">		<span class="built_in">this</span>.principalName = principalName;</span><br><span class="line">		<span class="built_in">this</span>.accessToken = accessToken;</span><br><span class="line">		<span class="built_in">this</span>.refreshToken = refreshToken;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> ClientRegistration <span class="title function_">getClientRegistration</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.clientRegistration;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getPrincipalName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.principalName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> OAuth2AccessToken <span class="title function_">getAccessToken</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.accessToken;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="meta">@Nullable</span> OAuth2RefreshToken <span class="title function_">getRefreshToken</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.refreshToken;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="OAuth2AuthorizedClientRepository"><a href="#OAuth2AuthorizedClientRepository" class="headerlink" title="OAuth2AuthorizedClientRepository"></a>OAuth2AuthorizedClientRepository</h1><ul>
<li>Repository for OAuth2AuthorizedClient(s)</li>
<li>Implementations of this interface are responsible for the persistence of Authorized Client(s) between requests.</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/oauth2/client/web/OAuth2AuthorizedClientRepository.html">Javadoc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/web/OAuth2AuthorizedClientRepository.java">Source code</a></li>
</ul>
<p>OAuth2AuthorizedClientRepository Interface source code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OAuth2AuthorizedClientRepository</span> &#123;</span><br><span class="line">	&lt;T <span class="keyword">extends</span> <span class="title class_">OAuth2AuthorizedClient</span>&gt; T <span class="title function_">loadAuthorizedClient</span><span class="params">(String clientRegistrationId, </span></span><br><span class="line"><span class="params">            Authentication principal, HttpServletRequest request)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">saveAuthorizedClient</span><span class="params">(OAuth2AuthorizedClient authorizedClient, Authentication principal,</span></span><br><span class="line"><span class="params">			HttpServletRequest request, HttpServletResponse response)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">removeAuthorizedClient</span><span class="params">(String clientRegistrationId, Authentication principal,</span></span><br><span class="line"><span class="params">			HttpServletRequest request, HttpServletResponse response)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Two of the implementations are</p>
<ul>
<li><strong>AuthenticatedPrincipalOAuth2AuthorizedClientRepository</strong> - the default repository to use. see details below</li>
<li><strong>HttpSessionOAuth2AuthorizedClientRepository</strong> - An implementation of an OAuth2AuthorizedClientRepository that stores OAuth2AuthorizedClient’s in the HttpSession.</li>
</ul>
<p>AuthenticatedPrincipalOAuth2AuthorizedClientRepository is the default bean to use when no OAuth2AuthorizedClientRepository bean is found</p>
<h2 id="AuthenticatedPrincipalOAuth2AuthorizedClientRepository"><a href="#AuthenticatedPrincipalOAuth2AuthorizedClientRepository" class="headerlink" title="AuthenticatedPrincipalOAuth2AuthorizedClientRepository"></a>AuthenticatedPrincipalOAuth2AuthorizedClientRepository</h2><ul>
<li>An implementation of an OAuth2AuthorizedClientRepository that delegates to the provided <strong>OAuth2AuthorizedClientService</strong> if the current Principal is authenticated, otherwise, to the default (or provided) OAuth2AuthorizedClientRepository if the current request is unauthenticated (or anonymous).</li>
</ul>
<p>AuthenticatedPrincipalOAuth2AuthorizedClientRepository source code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">AuthenticatedPrincipalOAuth2AuthorizedClientRepository</span> <span class="keyword">implements</span> <span class="title class_">OAuth2AuthorizedClientRepository</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AuthenticationTrustResolver</span> <span class="variable">authenticationTrustResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthenticationTrustResolverImpl</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OAuth2AuthorizedClientService authorizedClientService;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">OAuth2AuthorizedClientRepository</span> <span class="variable">anonymousAuthorizedClientRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpSessionOAuth2AuthorizedClientRepository</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AuthenticatedPrincipalOAuth2AuthorizedClientRepository</span><span class="params">(OAuth2AuthorizedClientService authorizedClientService)</span> &#123;</span><br><span class="line">        Assert.notNull(authorizedClientService, <span class="string">&quot;authorizedClientService cannot be null&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.authorizedClientService = authorizedClientService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnonymousAuthorizedClientRepository</span><span class="params">(OAuth2AuthorizedClientRepository anonymousAuthorizedClientRepository)</span> &#123;</span><br><span class="line">        Assert.notNull(anonymousAuthorizedClientRepository, <span class="string">&quot;anonymousAuthorizedClientRepository cannot be null&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.anonymousAuthorizedClientRepository = anonymousAuthorizedClientRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">OAuth2AuthorizedClient</span>&gt; T <span class="title function_">loadAuthorizedClient</span><span class="params">(String clientRegistrationId, Authentication principal, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.isPrincipalAuthenticated(principal) ? <span class="built_in">this</span>.authorizedClientService.loadAuthorizedClient(clientRegistrationId, principal.getName()) : <span class="built_in">this</span>.anonymousAuthorizedClientRepository.loadAuthorizedClient(clientRegistrationId, principal, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveAuthorizedClient</span><span class="params">(OAuth2AuthorizedClient authorizedClient, Authentication principal, HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isPrincipalAuthenticated(principal)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.authorizedClientService.saveAuthorizedClient(authorizedClient, principal);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.anonymousAuthorizedClientRepository.saveAuthorizedClient(authorizedClient, principal, request, response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAuthorizedClient</span><span class="params">(String clientRegistrationId, Authentication principal, HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isPrincipalAuthenticated(principal)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.authorizedClientService.removeAuthorizedClient(clientRegistrationId, principal.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.anonymousAuthorizedClientRepository.removeAuthorizedClient(clientRegistrationId, principal, request, response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPrincipalAuthenticated</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> authentication != <span class="literal">null</span> &amp;&amp; !<span class="built_in">this</span>.authenticationTrustResolver.isAnonymous(authentication) &amp;&amp; authentication.isAuthenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="HttpSessionOAuth2AuthorizedClientRepository"><a href="#HttpSessionOAuth2AuthorizedClientRepository" class="headerlink" title="HttpSessionOAuth2AuthorizedClientRepository"></a>HttpSessionOAuth2AuthorizedClientRepository</h2><p>To use HttpSessionOAuth2AuthorizedClientRepository instead of the default, just create the bean.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OAuth2AuthorizedClientRepository <span class="title function_">oAuth2AuthorizedClientRepository</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpSessionOAuth2AuthorizedClientRepository</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="OAuth2AuthorizedClientService"><a href="#OAuth2AuthorizedClientService" class="headerlink" title="OAuth2AuthorizedClientService"></a>OAuth2AuthorizedClientService</h1><ul>
<li>Implementations of this interface are responsible for the management of Authorized Client(s), which provide the purpose of associating an Access Token credential to a Client and Resource Owner, who is the Principal that originally granted the authorization.</li>
<li>The default implementation of OAuth2AuthorizedClientService is InMemoryOAuth2AuthorizedClientService</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/oauth2/client/OAuth2AuthorizedClientService.html">Javadoc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/OAuth2AuthorizedClientService.java">source code</a></li>
</ul>
<p>OAuth2AuthorizedClientService Interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OAuth2AuthorizedClientService</span> &#123;</span><br><span class="line">	&lt;T <span class="keyword">extends</span> <span class="title class_">OAuth2AuthorizedClient</span>&gt; T <span class="title function_">loadAuthorizedClient</span><span class="params">(String clientRegistrationId, String principalName)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">saveAuthorizedClient</span><span class="params">(OAuth2AuthorizedClient authorizedClient, Authentication principal)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">removeAuthorizedClient</span><span class="params">(String clientRegistrationId, String principalName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>implementations are </p>
<ul>
<li>InMemoryOAuth2AuthorizedClientService - this is the default</li>
<li>JdbcOAuth2AuthorizedClientService</li>
</ul>
<h2 id="InMemoryOAuth2AuthorizedClientService"><a href="#InMemoryOAuth2AuthorizedClientService" class="headerlink" title="InMemoryOAuth2AuthorizedClientService"></a>InMemoryOAuth2AuthorizedClientService</h2><ul>
<li>InMemoryOAuth2AuthorizedClientService is the default implementation of OAuth2AuthorizedClientService</li>
<li>It uses ConcurrentHashMap to store OAuth2AuthorizedClient.</li>
<li>OAuth2AuthorizedClient is retrieved using OAuth2AuthorizedClientId, which is composed of clientRegistrationId and principalName</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/oauth2/client/InMemoryOAuth2AuthorizedClientService.html">Javadoc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/InMemoryOAuth2AuthorizedClientService.java">Source Code</a></li>
</ul>
<p>InMemoryOAuth2AuthorizedClientService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">InMemoryOAuth2AuthorizedClientService</span> <span class="keyword">implements</span> <span class="title class_">OAuth2AuthorizedClientService</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;OAuth2AuthorizedClientId, OAuth2AuthorizedClient&gt; authorizedClients;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ClientRegistrationRepository clientRegistrationRepository;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">InMemoryOAuth2AuthorizedClientService</span><span class="params">(ClientRegistrationRepository clientRegistrationRepository)</span> &#123;</span><br><span class="line">		Assert.notNull(clientRegistrationRepository, <span class="string">&quot;clientRegistrationRepository cannot be null&quot;</span>);</span><br><span class="line">		<span class="built_in">this</span>.clientRegistrationRepository = clientRegistrationRepository;</span><br><span class="line">		<span class="built_in">this</span>.authorizedClients = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">InMemoryOAuth2AuthorizedClientService</span><span class="params">(ClientRegistrationRepository clientRegistrationRepository,</span></span><br><span class="line"><span class="params">													Map&lt;OAuth2AuthorizedClientId, OAuth2AuthorizedClient&gt; authorizedClients)</span> &#123;</span><br><span class="line">		Assert.notNull(clientRegistrationRepository, <span class="string">&quot;clientRegistrationRepository cannot be null&quot;</span>);</span><br><span class="line">		Assert.notEmpty(authorizedClients, <span class="string">&quot;authorizedClients cannot be empty&quot;</span>);</span><br><span class="line">		<span class="built_in">this</span>.clientRegistrationRepository = clientRegistrationRepository;</span><br><span class="line">		<span class="built_in">this</span>.authorizedClients = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(authorizedClients);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">OAuth2AuthorizedClient</span>&gt; T <span class="title function_">loadAuthorizedClient</span><span class="params">(String clientRegistrationId, String principalName)</span> &#123;</span><br><span class="line">		Assert.hasText(clientRegistrationId, <span class="string">&quot;clientRegistrationId cannot be empty&quot;</span>);</span><br><span class="line">		Assert.hasText(principalName, <span class="string">&quot;principalName cannot be empty&quot;</span>);</span><br><span class="line">		<span class="type">ClientRegistration</span> <span class="variable">registration</span> <span class="operator">=</span> <span class="built_in">this</span>.clientRegistrationRepository.findByRegistrationId(clientRegistrationId);</span><br><span class="line">		<span class="keyword">if</span> (registration == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (T) <span class="built_in">this</span>.authorizedClients.get(<span class="keyword">new</span> <span class="title class_">OAuth2AuthorizedClientId</span>(clientRegistrationId, principalName));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveAuthorizedClient</span><span class="params">(OAuth2AuthorizedClient authorizedClient, Authentication principal)</span> &#123;</span><br><span class="line">		Assert.notNull(authorizedClient, <span class="string">&quot;authorizedClient cannot be null&quot;</span>);</span><br><span class="line">		Assert.notNull(principal, <span class="string">&quot;principal cannot be null&quot;</span>);</span><br><span class="line">		<span class="built_in">this</span>.authorizedClients.put(<span class="keyword">new</span> <span class="title class_">OAuth2AuthorizedClientId</span>(authorizedClient.getClientRegistration().getRegistrationId(),</span><br><span class="line">				principal.getName()), authorizedClient);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAuthorizedClient</span><span class="params">(String clientRegistrationId, String principalName)</span> &#123;</span><br><span class="line">		Assert.hasText(clientRegistrationId, <span class="string">&quot;clientRegistrationId cannot be empty&quot;</span>);</span><br><span class="line">		Assert.hasText(principalName, <span class="string">&quot;principalName cannot be empty&quot;</span>);</span><br><span class="line">		<span class="type">ClientRegistration</span> <span class="variable">registration</span> <span class="operator">=</span> <span class="built_in">this</span>.clientRegistrationRepository.findByRegistrationId(clientRegistrationId);</span><br><span class="line">		<span class="keyword">if</span> (registration != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="built_in">this</span>.authorizedClients.remove(<span class="keyword">new</span> <span class="title class_">OAuth2AuthorizedClientId</span>(clientRegistrationId, principalName));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Spring Session Redis</title>
    <url>/SpringSecurity/Spring-Security-Spring-Session-Redis/</url>
    <content><![CDATA[<p>Spring Session Redis Demo</p>
<span id="more"></span>

<p>By Default Spring boot stores user session info in Server’s memory. If we have more than one instance of web application behind a load balancer, this will cause problem because the request has to be route to the same instance to retrieve session data. One solution is to use sticky session. Sticky session has many disadvantages. One of the disadvantage is servers may go down, the session data is lost.</p>
<p>Spring Session uses data store to store session data. So we can implement a stateless application. This is valuable in the cloud environment.</p>
<p>Spring Session supports many data store</p>
<ul>
<li>Redis</li>
<li>JDBC</li>
<li>MongoDB</li>
<li>GemFire</li>
</ul>
<p>The most popular store is Redis.</p>
<h1 id="Start-Redis-Server"><a href="#Start-Redis-Server" class="headerlink" title="Start Redis Server"></a>Start Redis Server</h1><p>To make it simple, we can start redis server as Docker container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --rm -p 6379:6379 --name redis-demo redis</span><br></pre></td></tr></table></figure>

<p>You can get into the container and execute <code>redis-cli</code> to bring up the Redis CLI to interact with the Redis Contaienr</p>
<h1 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Spring-Session-Configuration"><a href="#Spring-Session-Configuration" class="headerlink" title="Spring Session Configuration"></a>Spring Session Configuration</h1><p>We need to set the redis server connection and Spring Session’s store type in application.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.redis.host=localhost</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">spring.redis.password=</span><br><span class="line"></span><br><span class="line">spring.session.store-type=redis</span><br></pre></td></tr></table></figure>

<p>We also need to enable Redis session using <code>@EnableRedisHttpSession</code> annotation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSessionRedisApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(SpringSessionRedisApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>That is all we need for Spring Session Redis configuration.</p>
<h1 id="Security-Config"><a href="#Security-Config" class="headerlink" title="Security Config"></a>Security Config</h1><p>We can define a regular user and admin user in Security Configuration.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin().and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><p>This controller providers 3 endpoints. &#x2F;setValue sets session attribute “foo” and &#x2F;getValue gets “foo’ attribute value from session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(HomeController.class);</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">home</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Home&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/setValue/&#123;val&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setValue</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable</span> String val)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;foo&quot;</span>, val);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getValue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="keyword">if</span>( session.getAttribute(<span class="string">&quot;foo&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> session.getAttribute(<span class="string">&quot;foo&quot;</span>).toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Can&#x27;t find Value&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>We can login and set value using User and Admin account. Spring will store the session in Redis.</p>
<p>Use <code>KEYS</code> command to check the keys set in redis:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line"> 1) &quot;spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:admin&quot;</span><br><span class="line"> 2) &quot;spring:session:sessions:756cb785-5b04-43e3-99cf-0f82bb9d0767&quot;</span><br><span class="line"> 3) &quot;spring:session:sessions:e4429c73-4d26-41d6-b598-b7c9b0dc2116&quot;</span><br><span class="line"> 4) &quot;spring:session:expirations:1592599800000&quot;</span><br><span class="line"> 5) &quot;spring:session:expirations:1592599860000&quot;</span><br><span class="line"> 6) &quot;spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:user&quot;</span><br><span class="line"> 7) &quot;spring:session:sessions:expires:dfb4e97c-681b-4710-8bd7-667f95621f0c&quot;</span><br><span class="line"> 8) &quot;customer:-5656296892928562510&quot;</span><br><span class="line"> 9) &quot;spring:session:sessions:dfb4e97c-681b-4710-8bd7-667f95621f0c&quot;</span><br><span class="line">10) &quot;spring:session:sessions:expires:756cb785-5b04-43e3-99cf-0f82bb9d0767&quot;</span><br></pre></td></tr></table></figure>


<p>You can view the source code from Github: <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/SpringSessionRedis">https://github.com/xinghua24/SpringBootExamples/tree/master/SpringSessionRedis</a></p>
<p>Reference</p>
<ul>
<li><a href="https://www.javainuse.com/spring/springboot_session_redis">Spring Boot + Session Management Example Using Redis</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - PasswordEncoder</title>
    <url>/SpringSecurity/Spring-Security-PasswordEncoder/</url>
    <content><![CDATA[<p>Lets learn how to use PasswordEncoder in Spring Security</p>
<span id="more"></span>

<h1 id="PasswordEncoder-Interface"><a href="#PasswordEncoder-Interface" class="headerlink" title="PasswordEncoder Interface"></a>PasswordEncoder Interface</h1><p><a href="https://github.com/spring-projects/spring-security/blob/master/crypto/src/main/java/org/springframework/security/crypto/password/PasswordEncoder.java">PasswordEncoder</a> source code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Encode the raw password. Generally, a good encoding algorithm applies a SHA-1 or</span></span><br><span class="line"><span class="comment">	 * greater hash combined with an 8-byte or greater randomly generated salt.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String <span class="title function_">encode</span><span class="params">(CharSequence rawPassword)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Verify the encoded password obtained from storage matches the submitted raw</span></span><br><span class="line"><span class="comment">	 * password after it too is encoded. Returns true if the passwords match, false if</span></span><br><span class="line"><span class="comment">	 * they do not. The stored password itself is never decoded.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> rawPassword the raw password to encode and match</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> encodedPassword the encoded password from storage to compare with</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true if the raw password, after encoding, matches the encoded password from</span></span><br><span class="line"><span class="comment">	 * storage</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns true if the encoded password should be encoded again for better security,</span></span><br><span class="line"><span class="comment">	 * else false. The default implementation always returns false.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> encodedPassword the encoded password to check</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true if the encoded password should be encoded again for better security,</span></span><br><span class="line"><span class="comment">	 * else false.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">upgradeEncoding</span><span class="params">(String encodedPassword)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="PasswordEncoderFactories"><a href="#PasswordEncoderFactories" class="headerlink" title="PasswordEncoderFactories"></a>PasswordEncoderFactories</h1><p>You can create a default PasswordEncoder by calling static method <code>PasswordEncoderFactories.createDelegatingPasswordEncoder()</code> method</p>
<p>Example to create a PasswordEncoder as spring bean.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/spring-projects/spring-security/blob/master/crypto/src/main/java/org/springframework/security/crypto/factory/PasswordEncoderFactories.java">PasswordEncoderFactories</a> source code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordEncoderFactories</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> PasswordEncoder <span class="title function_">createDelegatingPasswordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">encodingId</span> <span class="operator">=</span> <span class="string">&quot;bcrypt&quot;</span>;</span><br><span class="line">		Map&lt;String, PasswordEncoder&gt; encoders = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">		encoders.put(encodingId, <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>());</span><br><span class="line">		encoders.put(<span class="string">&quot;ldap&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.LdapShaPasswordEncoder());</span><br><span class="line">		encoders.put(<span class="string">&quot;MD4&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.Md4PasswordEncoder());</span><br><span class="line">		encoders.put(<span class="string">&quot;MD5&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">		encoders.put(<span class="string">&quot;noop&quot;</span>, org.springframework.security.crypto.password.NoOpPasswordEncoder.getInstance());</span><br><span class="line">		encoders.put(<span class="string">&quot;pbkdf2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Pbkdf2PasswordEncoder</span>());</span><br><span class="line">		encoders.put(<span class="string">&quot;scrypt&quot;</span>, <span class="keyword">new</span> <span class="title class_">SCryptPasswordEncoder</span>());</span><br><span class="line">		encoders.put(<span class="string">&quot;SHA-1&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="string">&quot;SHA-1&quot;</span>));</span><br><span class="line">		encoders.put(<span class="string">&quot;SHA-256&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="string">&quot;SHA-256&quot;</span>));</span><br><span class="line">		encoders.put(<span class="string">&quot;sha256&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.StandardPasswordEncoder());</span><br><span class="line">		encoders.put(<span class="string">&quot;argon2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Argon2PasswordEncoder</span>());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DelegatingPasswordEncoder</span>(encodingId, encoders);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">PasswordEncoderFactories</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The PasswordEncoder created by PasswordEncoderFactories uses bcrypt as the default encoder</p>
<h1 id="DelegatingPasswordEncoder"><a href="#DelegatingPasswordEncoder" class="headerlink" title="DelegatingPasswordEncoder"></a>DelegatingPasswordEncoder</h1><ul>
<li>PasswordEncoderFactories implements PasswordEncoder</li>
<li>PasswordEncoderFactories is a password encoder that delegates to another PasswordEncoder based upon a prefixed identifier.</li>
</ul>
<p>You can create a Custom DelegatingPasswordEncoder with support PasswordEncoders. note that noop and sha256 PasswordEncoders are deprecated.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">idForEncode</span> <span class="operator">=</span> <span class="string">&quot;bcrypt&quot;</span>;</span><br><span class="line">Map&lt;String, PasswordEncoder&gt; encoders = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">encoders.put(idForEncode, <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>());</span><br><span class="line">encoders.put(<span class="string">&quot;noop&quot;</span>, NoOpPasswordEncoder.getInstance());</span><br><span class="line">encoders.put(<span class="string">&quot;pbkdf2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Pbkdf2PasswordEncoder</span>());</span><br><span class="line">encoders.put(<span class="string">&quot;scrypt&quot;</span>, <span class="keyword">new</span> <span class="title class_">SCryptPasswordEncoder</span>());</span><br><span class="line">encoders.put(<span class="string">&quot;sha256&quot;</span>, <span class="keyword">new</span> <span class="title class_">StandardPasswordEncoder</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">PasswordEncoder</span> <span class="variable">passwordEncoder</span> <span class="operator">=</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DelegatingPasswordEncoder</span>(idForEncode, encoders);</span><br></pre></td></tr></table></figure>


<p>encode mehtod source code - this method will encode the warPassword with id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(CharSequence rawPassword)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> PREFIX + <span class="built_in">this</span>.idForEncode + SUFFIX + <span class="built_in">this</span>.passwordEncoderForEncode.encode(rawPassword);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>matches method source code - this method will match the rawPassword and prefixEncodedPassword. The id from prefixEncodedPassword will be used to find the PasswordEncoder to be used.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence rawPassword, String prefixEncodedPassword)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (rawPassword == <span class="literal">null</span> &amp;&amp; prefixEncodedPassword == <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> extractId(prefixEncodedPassword);</span><br><span class="line">	<span class="type">PasswordEncoder</span> <span class="variable">delegate</span> <span class="operator">=</span> <span class="built_in">this</span>.idToPasswordEncoder.get(id);</span><br><span class="line">	<span class="keyword">if</span> (delegate == <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.defaultPasswordEncoderForMatches</span><br><span class="line">			.matches(rawPassword, prefixEncodedPassword);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">String</span> <span class="variable">encodedPassword</span> <span class="operator">=</span> extractEncodedPassword(prefixEncodedPassword);</span><br><span class="line">	<span class="keyword">return</span> delegate.matches(rawPassword, encodedPassword);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>The encrypted password created by DelegatingPasswordEncoder will have a encoder id prefix. Here are the sample encrypted password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;bcrypt&#125;$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG </span><br><span class="line">&#123;noop&#125;password </span><br><span class="line">&#123;pbkdf2&#125;5d923b44a6d129f3ddf3e3c8d29412723dcbde72445e8ef6bf3b508fbf17fa4ed4d6b99ca763d8dc </span><br><span class="line">&#123;scrypt&#125;$e0801$8bWJaSu2IKSn9Z9kM+TPXfOc/9bdYSrN1oD9qfVThWEwdRTnO7re7Ei+fUZRJ68k9lTyuTeUp4of4g24hHnazw==$OAOec05+bXxvuu/1qZ6NUR+xQYvYv7BeL1QxwRpY5Pc=  </span><br><span class="line">&#123;sha256&#125;97cde38028ad898ebc02e690819fa220e88c62e0699403e94fff291cfffaf8410849f27605abcbc0 </span><br></pre></td></tr></table></figure>



<p>Reference</p>
<ul>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#authentication-password-storage-dpe">DelegatingPasswordEncoder Spring Security docs</a></li>
<li><a href="https://www.baeldung.com/spring-security-5-password-storage">New Password Storage In Spring Security 5 by Baeldung</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Spring Session Jdbc</title>
    <url>/SpringSecurity/Spring-Security-Spring-Session-Jdbc/</url>
    <content><![CDATA[<p>Spring Session Jdbc Demo</p>
<span id="more"></span>
<p>Spring Session Jdbc is very similar to Spring Session Redis.</p>
<h1 id="Start-MySQL-Server"><a href="#Start-MySQL-Server" class="headerlink" title="Start MySQL Server"></a>Start MySQL Server</h1><p>You can start MySQL and Phpmyadmin server using Docker container</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Create network</span></span><br><span class="line">docker network create sample-network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create mysql container</span></span><br><span class="line">docker run  -d --name=springsessiontest \</span><br><span class="line">--network=sample-network \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=password \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">mysql:8</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create phpmyadmin container</span></span><br><span class="line">docker run -d --name springsessionuitest  \</span><br><span class="line">--network=sample-network \</span><br><span class="line">-e PMA_HOSTS=springsessiontest \</span><br><span class="line">-e PMA_PORT=3306 \</span><br><span class="line">-e PMA_USER=root \</span><br><span class="line">-e PMA_PASSWORD=password \</span><br><span class="line">-p 7000:80 \</span><br><span class="line">phpmyadmin/phpmyadmin</span><br></pre></td></tr></table></figure>

<h1 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h1><p>You need mysql connector, spring-boot-starter-jdbc to connect to database.</p>
<p>To use Spring Session Jdbc, you need <code>spring-session-core</code> and <code>spring-session-jdbc</code> dependency.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="Spring-Session-Jdbc-Configuration"><a href="#Spring-Session-Jdbc-Configuration" class="headerlink" title="Spring Session Jdbc Configuration"></a>Spring Session Jdbc Configuration</h1><p>You need to configure connection settings and spring session settings.</p>
<p>application.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/testdb</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=password</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">spring.session.store-type=jdbc</span><br><span class="line">spring.session.jdbc.initialize-schema=always</span><br><span class="line">spring.session.timeout.seconds=900</span><br></pre></td></tr></table></figure>



<h1 id="Security-Config"><a href="#Security-Config" class="headerlink" title="Security Config"></a>Security Config</h1><p>We can define a regular user and admin user in Security Configuration.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin().and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><p>This controller providers 3 endpoints. &#x2F;setValue sets session attribute “foo” and &#x2F;getValue gets “foo’ attribute value from session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(HomeController.class);</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">home</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Home&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/setValue/&#123;val&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setValue</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable</span> String val)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;foo&quot;</span>, val);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getValue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="keyword">if</span>( session.getAttribute(<span class="string">&quot;foo&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> session.getAttribute(<span class="string">&quot;foo&quot;</span>).toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Can&#x27;t find Value&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>When the application started, Spring Session Jdbc will create two tables - <strong>SPRING_SESSION</strong> and <strong>SPRING_SESSION_ATTRIBUTES</strong>. When user adds attribute to the session, a new row will be added to SPRING_SESSION_ATTRIBUTES table.</p>
<img src="db.png" />

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.javainuse.com/spring/springboot_session">Spring Boot + Session Management Hello World Example</a></li>
</ul>
<p>source code: <a href="https://github.com/xinghua24/SpringBootExamples/tree/master/SpringSessionJdbc/">https://github.com/xinghua24/SpringBootExamples/tree/master/SpringSessionJdbc/</a></p>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Understanding Security Context</title>
    <url>/SpringSecurity/Spring-Security-Understanding-Security-Context/</url>
    <content><![CDATA[<p>Security Context and its related classes are fundamental to Spring Security. A successful authentication process needs to properly set the SecurityContextHolder.  The user information stored in Security Context will be used for authorization.</p>
<span id="more"></span>
<h1 id="SecurityContextHolder"><a href="#SecurityContextHolder" class="headerlink" title="SecurityContextHolder"></a>SecurityContextHolder</h1><ul>
<li>The <strong>SecurityContextHolder</strong> is where Spring Security stores the details of who is authenticated. </li>
<li>By default the SecurityContextHolder uses a <code>ThreadLocal</code> to store these details. You can set system property to override this behavior.</li>
<li>When a user is authenticated, authentication processing filter configures the SecurityContextHolder to hold the securityContext associated with the user.</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#servlet-authentication-securitycontextholder">Spring docs</a></li>
<li><a href="https://docs.spring.io/spring-security/site/docs/4.2.12.RELEASE/apidocs/org/springframework/security/core/context/SecurityContextHolder.html">java doc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/core/context/SecurityContextHolder.java">source code</a></li>
</ul>
<img src="SecurityContextHolder.png" />

<p>image from <a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#servlet-authentication-securitycontextholder">Spring Security  Reference - SecurityContextHolder</a></p>
<p>important methods are</p>
<ul>
<li>createEmptyContext()</li>
<li>setContext(SecurityContext context)</li>
<li>getContext()</li>
</ul>
<h1 id="SecurityContext"><a href="#SecurityContext" class="headerlink" title="SecurityContext"></a>SecurityContext</h1><ul>
<li>SecurityContext Interface defining the minimum security information associated with the current thread of execution.</li>
<li>The security context is stored in a SecurityContextHolder.</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/context/SecurityContext.html">Java doc</a></li>
</ul>
<p><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/core/context/SecurityContext.html">SecurityContext</a> contains method to get and set Authentication object.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SecurityContext</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">	Authentication <span class="title function_">getAuthentication</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setAuthentication</span><span class="params">(Authentication authentication)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.spring.io/spring-security/site/docs/current/api/index.html?org/springframework/security/core/context/SecurityContextImpl.html">SecurityContextImpl</a> - the default implementation of SecurityContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityContextImpl</span> <span class="keyword">implements</span> <span class="title class_">SecurityContext</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Authentication authentication;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">SecurityContextImpl</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">SecurityContextImpl</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.authentication = authentication;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Authentication <span class="title function_">getAuthentication</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> authentication;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthentication</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.authentication = authentication;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h1><ul>
<li>Authentication interface extends Principal interface</li>
<li>Represents the token for an authentication request or for an authenticated principal once the request has been processed by the AuthenticationManager.authenticate(Authentication) method.</li>
<li>The most common Authentication implementation is <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/authentication/UsernamePasswordAuthenticationToken.html">UsernamePasswordAuthenticationToken</a></li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#servlet-authentication-authentication">spring security doc</a></li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/Authentication.html">java doc</a></li>
<li><a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/core/Authentication.java">source code</a></li>
</ul>
<p>The Authentication serves two main purposes within Spring Security:</p>
<ul>
<li>An input to AuthenticationManager to provide the credentials a user has provided to authenticate. When used in this scenario, isAuthenticated() returns false.</li>
<li>Represents the currently authenticated user. The current Authentication can be obtained from the SecurityContext.</li>
</ul>
<p>The Authentication should contain:</p>
<ul>
<li>principal - identifies the user. When authenticating with a username&#x2F;password this is often an instance of UserDetails. - identifies the user. When authenticating with a username&#x2F;password this is often an instance of UserDetails.</li>
<li>credentials - Often a password. In many cases this will be cleared after the user is authenticated to ensure it is not leaked.</li>
<li>authorities - the GrantedAuthoritys are high level permissions the user is granted. A few examples are roles or scopes.</li>
</ul>
<p>Authentication Interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Authentication</span> <span class="keyword">extends</span> <span class="title class_">Principal</span>, Serializable &#123;</span><br><span class="line">	Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line">	Object <span class="title function_">getCredentials</span><span class="params">()</span>;</span><br><span class="line">	Object <span class="title function_">getDetails</span><span class="params">()</span>;</span><br><span class="line">	Object <span class="title function_">getPrincipal</span><span class="params">()</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isAuthenticated</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setAuthenticated</span><span class="params">(<span class="type">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Access-Authentication-Object"><a href="#Access-Authentication-Object" class="headerlink" title="Access Authentication Object"></a>Access Authentication Object</h1><p>You can easily get the currently authenticated principle from SecurityContextHolder in spring boot application.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurrentUserName</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    <span class="keyword">if</span> (!(authentication <span class="keyword">instanceof</span> AnonymousAuthenticationToken)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">currentUserName</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">        <span class="keyword">return</span> currentUserName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="GrantedAuthority"><a href="#GrantedAuthority" class="headerlink" title="GrantedAuthority"></a>GrantedAuthority</h1><ul>
<li>Represents an authority granted to an Authentication object.</li>
<li>A GrantedAuthority must either represent itself as a String or be specifically supported by an AccessDecisionManager.</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/GrantedAuthority.html">java doc</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GrantedAuthority</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    String <span class="title function_">getAuthority</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>The simpliest GrantedAuthority is SimpleGrantedAuthority. You create one by passing a role as String.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_USER&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security - Filter Chain</title>
    <url>/SpringSecurity/Spring-Security-filter-chain/</url>
    <content><![CDATA[<p>Filter chain is one of the most important concept in Spring Security. Most of the features provided are accomplish or related to one or more filter.</p>
<span id="more"></span>

<h1 id="Spring-Security-filter-chain"><a href="#Spring-Security-filter-chain" class="headerlink" title="Spring Security filter chain"></a>Spring Security filter chain</h1><p>Spring Security maintains a filter chain. All the requests has to gone through the filter chain in order to visite the resource. Each filter has a specific responsbility. You can add, remove and replace filters in the filter chain. </p>
<p>When you start a spring boot application with spring security, the filter list will be output to the console</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-06-30 12:08:06.300  INFO 35936 --- [  restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.</span><br><span class="line">security.web.session.DisableEncodeUrlFilter@40d854aa, org.springframework.security.web.context.request.async.</span><br><span class="line">WebAsyncManagerIntegrationFilter@33e46e22, org.springframework.security.web.context.SecurityContextPersistenceFilter@226bbc9, org.springframework.</span><br><span class="line">security.web.header.HeaderWriterFilter@203fa082, org.springframework.security.web.csrf.CsrfFilter@6c0fdf2b, org.springframework.security.web.</span><br><span class="line">authentication.logout.LogoutFilter@67798729, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1add9aeb, org.</span><br><span class="line">springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@4dd05819, org.springframework.security.web.authentication.ui.</span><br><span class="line">DefaultLogoutPageGeneratingFilter@4518b077, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@44db5aa1, org.</span><br><span class="line">springframework.security.web.savedrequest.RequestCacheAwareFilter@1631695a, org.springframework.security.web.servletapi.</span><br><span class="line">SecurityContextHolderAwareRequestFilter@4bd7e0ae, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5b08e427, org.</span><br><span class="line">springframework.security.web.session.SessionManagementFilter@1042c86d, org.springframework.security.web.access.ExceptionTranslationFilter@6b0ff196, </span><br><span class="line">org.springframework.security.web.access.intercept.FilterSecurityInterceptor@77a09dfe]</span><br></pre></td></tr></table></figure>


<img src="filter-chain.png" />

<p>To learn more on filter chain, see <a href="https://docs.spring.io/spring-security/reference/6.0.0-M2/servlet/architecture.html#servlet-filters-review">Spring Security filters documentation on Filters</a></p>
<p>Here are some of the <strong>IMPORTANT</strong> Filters you need to understand: </p>
<h1 id="FilterChainProxy"><a href="#FilterChainProxy" class="headerlink" title="FilterChainProxy"></a>FilterChainProxy</h1><p>Spring Security’s FilterChainProxy is the entry point for all web base security. You can put a breakpoint at FilterChainProxy’s <em>doFilterInternal</em> method to see all the Filters used.  </p>
<img src="debug-FilterChainProxy.png" />

<h1 id="SecurityContextPersistenceFilter"><a href="#SecurityContextPersistenceFilter" class="headerlink" title="SecurityContextPersistenceFilter"></a>SecurityContextPersistenceFilter</h1><p><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/context/SecurityContextPersistenceFilter.html">SecurityContextPersistenceFilter</a> populates the SecurityContextHolder with information obtained from the configured SecurityContextRepository prior to the request and stores it back in the repository once the request has completed and clearing the context holder. By default it uses an HttpSessionSecurityContextRepository. </p>
<p>Deprecated. Use <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/context/SecurityContextHolderFilter.html">SecurityContextHolderFilter</a></p>
<h1 id="Authentication-processing-filter"><a href="#Authentication-processing-filter" class="headerlink" title="Authentication processing filter"></a>Authentication processing filter</h1><p><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.html">UsernamePasswordAuthenticationFilter</a>, CasAuthenticationFilter, BasicAuthenticationFilter, OAuth2LoginAuthenticationFilter etc - Processes an authentication. Then putting the valid authentication token into the SecurityContextHolder.</p>
<h1 id="ExceptionTranslationFilter"><a href="#ExceptionTranslationFilter" class="headerlink" title="ExceptionTranslationFilter"></a>ExceptionTranslationFilter</h1><p>The <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/access/ExceptionTranslationFilter.html">ExceptionTranslationFilter</a> allows translation of AccessDeniedException and AuthenticationException into HTTP responses.</p>
<h1 id="FilterSecurityInterceptor"><a href="#FilterSecurityInterceptor" class="headerlink" title="FilterSecurityInterceptor"></a>FilterSecurityInterceptor</h1><p>The <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/access/intercept/FilterSecurityInterceptor.html">FilterSecurityInterceptor</a> provides authorization for HttpServletRequests. If access is denied, an AccessDeniedException is thrown. ExceptionTranslationFilter handles the AccessDeniedException.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://stackoverflow.com/questions/41480102/how-spring-security-filter-chain-works">Stackoverflow - How Spring Security Filter Chain works</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
  </entry>
</search>
